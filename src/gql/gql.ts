/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n   mutation CreateRole_1($name: String) {\n    createRole(name: $name) {\n        name\n        id\n    }\n    }\n": types.CreateRole_1Document,
    "\n  mutation updateRoleNav($roleId: String, $navSmIds: [String]) {\n    updateRoleNavs(role_id: $roleId, nav_sm_ids: $navSmIds) {\n      name\n      id\n    }\n  }\n": types.UpdateRoleNavDocument,
    "\n    mutation addEmployeeRoles($roleId: String, $employeeIds: [String]) {\n        addEmployee2Roles(role_id: $roleId, employee_ids: $employeeIds) {\n        id\n        name\n        }\n    }\n": types.AddEmployeeRolesDocument,
    "\n   mutation DeleteEmployeeRole($roleId: String, $employeeId: String) {\n    deleteEmployeeRole(role_id: $roleId, employee_id: $employeeId) {\n      id\n      name\n    }\n  }\n": types.DeleteEmployeeRoleDocument,
    "\n mutation DeleteRole($roleId: String) {\n    deleteRole(role_id: $roleId) {\n      id\n      name\n    }\n  }\n": types.DeleteRoleDocument,
    "\n  mutation CreateShift($createShiftInput: CreateShiftInput) {\n        createShift(createShiftInput: $createShiftInput) {\n            created_by\n        }\n    }\n": types.CreateShiftDocument,
    "\n  mutation UpdateShift($shiftId: String!, $updateFields: UpdateShiftInput!) {\n        updateShift(shift_id: $shiftId, updateFields: $updateFields) {\n            id\n        }\n    }\n": types.UpdateShiftDocument,
    "\n  mutation DeleteShift($shiftId: String!) {\n        deleteShift(shift_id: $shiftId) {\n            id\n        }\n    }\n": types.DeleteShiftDocument,
    "\n   mutation addStoreAdmins($storeId: String!, $employeeIds: [String]!) {\n    addStoreAdmins(store_id: $storeId, employee_ids: $employeeIds) {\n      shop_id\n      storeName\n      managers {\n        id\n        name\n        }\n    }\n  }\n": types.AddStoreAdminsDocument,
    "\n   mutation DeleteStoreAdmins($storeId: String!, $employeeIds: [String]!) {\n    deleteStoreAdmins(store_id: $storeId, employee_ids: $employeeIds) {\n      shop_id\n      storeName\n      managers {\n        id\n        name\n      }\n    }\n  }\n": types.DeleteStoreAdminsDocument,
    "\n  mutation AddAdminsStores($employeeIds: [String]!, $storeIds: [String]!) {\n    addAdminsStores(employee_ids: $employeeIds, store_ids: $storeIds) {\n      shop_id\n      storeName\n      managers {\n        id\n        avatar\n        name\n      }\n      status\n    }\n  }\n": types.AddAdminsStoresDocument,
    "\n  mutation UpdateUser($updateUserId: ID!, $updateFields: UpdateUserInput) {\n    updateUser(id: $updateUserId, updateFields: $updateFields) {\n      id\n      name\n      status \n    }\n  }\n": types.UpdateUserDocument,
    "\n  mutation DeleteUserAttachment($deleteUserAttachmentId: ID!) {\n    deleteUserAttachment(id: $deleteUserAttachmentId)\n  }\n": types.DeleteUserAttachmentDocument,
    "\n  mutation CreateUser($createFields: CreateUserInput) {\n    createUser(createFields: $createFields) {\n      id\n    }\n  }\n": types.CreateUserDocument,
    "\n  mutation DeleteUser($deleteUserId: ID!) {\n    deleteUser(id: $deleteUserId)\n  }\n": types.DeleteUserDocument,
    "\n  query AttachmentGroups($take: Int!, $skip: Int!, $filter: AttGroupFilter) {\n    attGroups(take: $take, skip: $skip, filter: $filter) {\n      items {\n        id\n        name\n        group_type\n        shift_lists {\n          id\n          shift_name\n          on_time\n          off_time\n        }\n        leaders {\n          id\n          name\n          avatar\n          department{\n            id\n            name\n          }\n        }\n        sub_leaders {\n          avatar\n          id\n          name\n          department{\n            id\n            name\n          }\n        }\n        bind_departments {\n          name\n          all_employees {\n            totalCount\n          }\n          employees {\n            id\n            avatar\n            name\n            status\n          }\n        }\n        bind_employees {\n          id\n          avatar\n          name\n        }\n        members {\n          id\n          avatar\n          name\n          status\n        }\n      }\n      totalCount\n    }\n  }\n": types.AttachmentGroupsDocument,
    "\n  query AttGroupShifts($attGroupByIdId: String!) {\n    attGroupById(id: $attGroupByIdId) {\n      name\n      shift_lists {\n        id\n        shift_name\n        on_time\n        off_time\n      }\n    }\n  }\n": types.AttGroupShiftsDocument,
    "\n  query AttGroupMembers($attGroupByIdId: String!) {\n    attGroupById(id: $attGroupByIdId) {\n      members {\n        id\n        name\n        avatar\n        status\n        attendances {\n          shift {\n            id\n            shift_name\n            on_time\n            off_time\n          }\n          date\n        }\n      }\n    }\n  }\n": types.AttGroupMembersDocument,
    "\n  query GetAddendanceGroupById($attGroupByIdId: String!) {\n    attGroupById(id: $attGroupByIdId) {\n      bind_departments {\n        id\n        name\n        all_employees {\n          totalCount\n        }\n      }\n      bind_employees {\n        department {\n          name\n        }\n        avatar\n        id\n        name\n      }\n      id\n      leaders {\n        department {\n          name\n        }\n        avatar\n        id\n        name\n      }\n      sub_leaders {\n        department {\n          name\n        }\n        avatar\n        id\n        name\n      }\n      name\n      sub_group_leaders {\n        name\n        id\n        department {\n          id\n          name\n        }\n        avatar\n      }\n      locations{\n        id\n        name\n        longitude\n        latitude\n        address\n        gps_range\n      }\n      shift_lists{\n          id\n          shift_name\n          on_time\n          off_time\n      }\n    }\n  }\n": types.GetAddendanceGroupByIdDocument,
    "\n query StatisticsDay($statisticsDayInput: StatisticsDayInput, $take: Int!, $skip: Int!) {\n  statisticsDay(statisticsDayInput: $statisticsDayInput, take: $take, skip: $skip) {\n    items {\n      employee {\n        id\n        name\n        salary_type\n        basic_salary\n      }\n      id\n      clock_in_time\n      clock_out_time\n      clock_out_location {\n        address\n      }\n      clock_in_location {\n        address\n      }\n      clock_in_result\n      clock_out_result\n      hours_of_attendance\n      shift {\n        on_time\n        off_time\n      }\n    }\n    totalCount\n  }\n}\n": types.StatisticsDayDocument,
    "\n query statisticsMonth($take: Int!, $skip: Int!, $filter: UsersFilter) {\n  users(take: $take, skip: $skip, filter: $filter) {\n    items {\n      attendances {\n        id\n        clock_in_time\n        clock_out_time\n        clock_out_result\n        clock_in_result\n        date\n        hours_of_attendance\n        shift_id\n      }\n      name\n      id\n    }\n    totalCount\n  }\n}\n": types.StatisticsMonthDocument,
    "\n    query brandsList($brandName: String) {\n    brands (brandName: $brandName) {\n        id\n        name\n        stores {\n            shop_id\n            storeName\n            managers {\n                id\n                name\n                avatar\n            }\n            department_id\n            status\n        }\n    }\n    }\n": types.BrandsListDocument,
    "\n  query Query($department_id: String) {\n    departmentById(id: $department_id) {\n      id\n      name\n      child_departments {\n        id\n        name\n        child_departments {\n          id\n          name\n          child_departments {\n            id\n            name\n            child_departments {\n              id\n              name\n              child_departments {\n                id\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.QueryDocument,
    "\n  query Departments($take: Int!, $skip: Int!, $filter: DepartmentFilter) {\n    departments(take: $take, skip: $skip, filter: $filter) {\n      totalCount\n      items {\n        id\n        name\n        all_employees {\n          totalCount\n        }\n        child_departments {\n          id\n          name\n        }\n      }\n    }\n  }\n": types.DepartmentsDocument,
    "\n  query DepartmentById($departmentByIdId: String) {\n    departmentById(id: $departmentByIdId) {\n      parent_department {\n        id\n        name\n      }\n      child_departments {\n        id\n        name\n        all_employees {\n          totalCount\n        }\n      }\n    }\n  }\n": types.DepartmentByIdDocument,
    "\n  query SelectOptions($input: FieldInput!) {\n    selectOptions: options(input: $input) {\n      field\n      options {\n        id\n        value\n      }\n    }\n  }\n": types.SelectOptionsDocument,
    "\nquery RolesList($name: String) {\n  roles(name: $name) {\n    id\n    name\n    navs {\n      children {\n        key\n        title\n        children {\n          key\n          title\n        }\n      }\n      key\n      title\n    }\n    employees {\n      id\n      name\n      avatar\n    }\n  }\n}\n": types.RolesListDocument,
    "\n    query NavTree {\n        navTree {\n        key\n        title\n        children {\n            key\n            title\n            children {\n                key\n                title\n            }\n        }\n        }\n    }\n": types.NavTreeDocument,
    "\n  query RoleById($roleByIdId: String!) {\n    roleById(id: $roleByIdId) {\n      id\n      name\n      employees {\n        id\n        avatar\n        mobile\n        name\n        department {\n          name\n        }\n      }\n      navs {\n        key\n        title\n        children {\n            key\n            title\n            children {\n            key\n            title\n            }\n        }\n        }\n    }\n  }\n": types.RoleByIdDocument,
    "\n query ShiftLists($take: Int!, $skip: Int!, $filter: ShiftListFilter) {\n    shiftLists(take: $take, skip: $skip, filter: $filter) {\n        items {\n        shift_name\n        id\n        on_time\n        off_time\n        created_by\n        updated_at\n        }\n        totalCount\n    }\n    }\n": types.ShiftListsDocument,
    "\n    query ShiftById($shiftByIdId: String!) {\n        shiftById(id: $shiftByIdId) {\n            punch_times \n            shift_name\n            no_need_off\n            on_time\n            off_time\n            late_minutes_as_late\n            late_minutes_as_lack\n            early_minutes_as_early\n            early_minutes_as_lack\n        }\n    }\n": types.ShiftByIdDocument,
    "\n  query BirthdayStats {\n    birthdayStats {\n      todayCount\n      thisWeekCount\n      thisMonthCount\n      nextMonthCount\n      lastMonthCount\n    }\n  }\n": types.BirthdayStatsDocument,
    "\n  query HireDateStats {\n    hireDateStats {\n      lastMonthCount\n      nextMonthCount\n      thisMonthCount\n      thisWeekCount\n      todayCount\n    }\n  }\n": types.HireDateStatsDocument,
    "\n  query RosterStats {\n    rosterStats: hrStats {\n      awaitUnemployCount\n      internEmployeeCount\n      isEmployedCount\n      notEmployedCount\n      outsourcedEmployeeCount\n      regularEmployeeCount\n      trialEmployeeCount\n    }\n  }\n": types.RosterStatsDocument,
    "\n  query HrOnboardingStats {\n    hrOnboardingStats {\n      awaitOnboardingCount\n      todayAwaitOnboardingCount\n      thisMonthAwaitOnboardingCount\n    }\n  }\n": types.HrOnboardingStatsDocument,
    "\n  query HrConversionStats {\n  hrConversionStats {\n    awaitRegularizedCount\n    overdueRegularizedCount\n    thisMonthAwaitRegularizedCount\n    nextMonthAwaitRegularizedCount\n  }\n}\n": types.HrConversionStatsDocument,
    "\n  query HrResignStats {\n    hrResignStats {\n      awaitHiredCount\n    }\n  }\n": types.HrResignStatsDocument,
    "\n   query Stores {\n    stores {\n      shop_id\n      managers {\n        id\n        name\n        avatar\n      }\n      storeName\n      status\n    }\n  }\n": types.StoresDocument,
    "\n  query StoresByEmployee($storesByEmployeeId: String!) {\n    storesByEmployee(id: $storesByEmployeeId) {\n      shop_id\n      storeName\n      department {\n        id\n        name\n        child_departments {\n          id\n          name\n          employees {\n            id\n            status\n            name\n            mobile\n            job_title\n            hire_date\n            employee_type\n            id_number\n            medical_insurance\n            department {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n": types.StoresByEmployeeDocument,
    "\n  query NaviItems {\n    user {\n      avatar\n      id\n      name\n    }\n  }\n": types.NaviItemsDocument,
    "\n  query Users($take: Int!, $skip: Int!, $filter: UsersFilter) {\n    users(take: $take, skip: $skip, filter: $filter) {\n      totalCount\n      items {\n        id\n        status\n        employee_form_status\n        name\n        mobile\n        avatar\n        user_id\n        hire_date\n        job_title\n        last_day\n        departure_type\n        birthday\n        departure_type\n        gender_id\n        employee_type\n        department_id\n        department {\n          name\n          id\n        }\n        ethnicity\n        application\n        application_status\n        native_region {\n          iso_code\n          name\n        }\n        primary_emergency_contact {\n          name\n          relationship\n          mobile\n        }\n        probation_months\n        provident_fund_account\n        social_security_account\n        bank_name\n        bank_account_number\n        salary_type\n        basic_salary\n        basic_salary_monthly\n        manager_id\n        work_age_type\n        family_address\n        hukou_type\n        hukou_location\n        actual_conversion_time\n        actual_overboard_time\n        overboard_note\n      }\n    }\n  }\n": types.UsersDocument,
    "\n  query UserById($userByIdId: String) {\n    userById(id: $userByIdId) {\n      user_id\n      id\n      id_number\n      medical_insurance\n      status\n      employee_form_status\n      name\n      mobile\n      avatar\n      user_id\n      hire_date\n      job_id\n      job_title\n      last_day\n      departure_type\n      birthday\n      departure_type\n      gender_id\n      employee_type\n      department_id\n      department {\n        name\n        id\n      }\n      ethnicity\n      application\n      application_status\n      native_region {\n        iso_code\n        name\n      }\n      primary_emergency_contact {\n        name\n        relationship\n        mobile\n      }\n      probation_months\n      provident_fund_account\n      social_security_account\n      bank_name\n      bank_account_number\n      salary_type\n      basic_salary\n      basic_salary_monthly\n      manager_id\n      work_age_type\n      family_address\n      hukou_type\n      hukou_location\n    }\n  }\n": types.UserByIdDocument,
    "\n  query UsersByDepartmenstId($department_id: String, $take: Int!, $skip: Int!) {\n    usersByDepartmentId(\n      department_id: $department_id\n      take: $take\n      skip: $skip\n    ) {\n      items {\n        id\n        name\n        user_id\n        avatar\n        hire_date\n        job_title\n        department {\n          name\n        }\n        status\n        mobile\n      }\n      totalCount\n    }\n  }\n": types.UsersByDepartmenstIdDocument,
    "\n  query BirthdayPageUsersQuery($take: Int!, $skip: Int!) {\n    users(take: $take, skip: $skip) {\n      totalCount\n      items {\n        name\n        id\n        avatar\n        status\n        job_title\n        birthday\n      }\n    }\n  }\n": types.BirthdayPageUsersQueryDocument,
    "\n  query UsersSearch($searchTerm: String) {\n    usersSearch(searchTerm: $searchTerm) {\n      items {\n        name\n        id\n        hire_date\n        department_id\n        department {\n          name\n        }\n        avatar\n        mobile\n        job_title\n        user_id\n        status\n      }\n      totalCount\n    }\n  }\n": types.UsersSearchDocument,
    "\n  query userAttachments($id: String) {\n    userAttachmentsById(id: $id) {\n      attachmentContents {\n        file_name\n        id\n        path\n      }\n      isMulti\n      key\n      kind\n      name\n    }\n  }\n": types.UserAttachmentsDocument,
    "\n  query HrStats {\n    hrStats {\n      awaitUnemployCount\n      internEmployeeCount\n      isEmployedCount\n      notEmployedCount\n      outsourcedEmployeeCount\n      regularEmployeeCount\n      trialEmployeeCount\n    }\n  }\n": types.HrStatsDocument,
    "\n  query EmployeesByRoles($take: Int!, $skip: Int!, $filter: UsersFilter) {\n    users(take: $take, skip: $skip, filter: $filter) {\n      totalCount\n      items {\n        name\n        mobile\n        roles {\n          id\n          name\n          ranking\n        }\n        department {\n          name\n        }\n        avatar\n        id\n      }\n    }\n  }\n": types.EmployeesByRolesDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n   mutation CreateRole_1($name: String) {\n    createRole(name: $name) {\n        name\n        id\n    }\n    }\n"): (typeof documents)["\n   mutation CreateRole_1($name: String) {\n    createRole(name: $name) {\n        name\n        id\n    }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation updateRoleNav($roleId: String, $navSmIds: [String]) {\n    updateRoleNavs(role_id: $roleId, nav_sm_ids: $navSmIds) {\n      name\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation updateRoleNav($roleId: String, $navSmIds: [String]) {\n    updateRoleNavs(role_id: $roleId, nav_sm_ids: $navSmIds) {\n      name\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation addEmployeeRoles($roleId: String, $employeeIds: [String]) {\n        addEmployee2Roles(role_id: $roleId, employee_ids: $employeeIds) {\n        id\n        name\n        }\n    }\n"): (typeof documents)["\n    mutation addEmployeeRoles($roleId: String, $employeeIds: [String]) {\n        addEmployee2Roles(role_id: $roleId, employee_ids: $employeeIds) {\n        id\n        name\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n   mutation DeleteEmployeeRole($roleId: String, $employeeId: String) {\n    deleteEmployeeRole(role_id: $roleId, employee_id: $employeeId) {\n      id\n      name\n    }\n  }\n"): (typeof documents)["\n   mutation DeleteEmployeeRole($roleId: String, $employeeId: String) {\n    deleteEmployeeRole(role_id: $roleId, employee_id: $employeeId) {\n      id\n      name\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n mutation DeleteRole($roleId: String) {\n    deleteRole(role_id: $roleId) {\n      id\n      name\n    }\n  }\n"): (typeof documents)["\n mutation DeleteRole($roleId: String) {\n    deleteRole(role_id: $roleId) {\n      id\n      name\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateShift($createShiftInput: CreateShiftInput) {\n        createShift(createShiftInput: $createShiftInput) {\n            created_by\n        }\n    }\n"): (typeof documents)["\n  mutation CreateShift($createShiftInput: CreateShiftInput) {\n        createShift(createShiftInput: $createShiftInput) {\n            created_by\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateShift($shiftId: String!, $updateFields: UpdateShiftInput!) {\n        updateShift(shift_id: $shiftId, updateFields: $updateFields) {\n            id\n        }\n    }\n"): (typeof documents)["\n  mutation UpdateShift($shiftId: String!, $updateFields: UpdateShiftInput!) {\n        updateShift(shift_id: $shiftId, updateFields: $updateFields) {\n            id\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteShift($shiftId: String!) {\n        deleteShift(shift_id: $shiftId) {\n            id\n        }\n    }\n"): (typeof documents)["\n  mutation DeleteShift($shiftId: String!) {\n        deleteShift(shift_id: $shiftId) {\n            id\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n   mutation addStoreAdmins($storeId: String!, $employeeIds: [String]!) {\n    addStoreAdmins(store_id: $storeId, employee_ids: $employeeIds) {\n      shop_id\n      storeName\n      managers {\n        id\n        name\n        }\n    }\n  }\n"): (typeof documents)["\n   mutation addStoreAdmins($storeId: String!, $employeeIds: [String]!) {\n    addStoreAdmins(store_id: $storeId, employee_ids: $employeeIds) {\n      shop_id\n      storeName\n      managers {\n        id\n        name\n        }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n   mutation DeleteStoreAdmins($storeId: String!, $employeeIds: [String]!) {\n    deleteStoreAdmins(store_id: $storeId, employee_ids: $employeeIds) {\n      shop_id\n      storeName\n      managers {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n   mutation DeleteStoreAdmins($storeId: String!, $employeeIds: [String]!) {\n    deleteStoreAdmins(store_id: $storeId, employee_ids: $employeeIds) {\n      shop_id\n      storeName\n      managers {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AddAdminsStores($employeeIds: [String]!, $storeIds: [String]!) {\n    addAdminsStores(employee_ids: $employeeIds, store_ids: $storeIds) {\n      shop_id\n      storeName\n      managers {\n        id\n        avatar\n        name\n      }\n      status\n    }\n  }\n"): (typeof documents)["\n  mutation AddAdminsStores($employeeIds: [String]!, $storeIds: [String]!) {\n    addAdminsStores(employee_ids: $employeeIds, store_ids: $storeIds) {\n      shop_id\n      storeName\n      managers {\n        id\n        avatar\n        name\n      }\n      status\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateUser($updateUserId: ID!, $updateFields: UpdateUserInput) {\n    updateUser(id: $updateUserId, updateFields: $updateFields) {\n      id\n      name\n      status \n    }\n  }\n"): (typeof documents)["\n  mutation UpdateUser($updateUserId: ID!, $updateFields: UpdateUserInput) {\n    updateUser(id: $updateUserId, updateFields: $updateFields) {\n      id\n      name\n      status \n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteUserAttachment($deleteUserAttachmentId: ID!) {\n    deleteUserAttachment(id: $deleteUserAttachmentId)\n  }\n"): (typeof documents)["\n  mutation DeleteUserAttachment($deleteUserAttachmentId: ID!) {\n    deleteUserAttachment(id: $deleteUserAttachmentId)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateUser($createFields: CreateUserInput) {\n    createUser(createFields: $createFields) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation CreateUser($createFields: CreateUserInput) {\n    createUser(createFields: $createFields) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteUser($deleteUserId: ID!) {\n    deleteUser(id: $deleteUserId)\n  }\n"): (typeof documents)["\n  mutation DeleteUser($deleteUserId: ID!) {\n    deleteUser(id: $deleteUserId)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query AttachmentGroups($take: Int!, $skip: Int!, $filter: AttGroupFilter) {\n    attGroups(take: $take, skip: $skip, filter: $filter) {\n      items {\n        id\n        name\n        group_type\n        shift_lists {\n          id\n          shift_name\n          on_time\n          off_time\n        }\n        leaders {\n          id\n          name\n          avatar\n          department{\n            id\n            name\n          }\n        }\n        sub_leaders {\n          avatar\n          id\n          name\n          department{\n            id\n            name\n          }\n        }\n        bind_departments {\n          name\n          all_employees {\n            totalCount\n          }\n          employees {\n            id\n            avatar\n            name\n            status\n          }\n        }\n        bind_employees {\n          id\n          avatar\n          name\n        }\n        members {\n          id\n          avatar\n          name\n          status\n        }\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query AttachmentGroups($take: Int!, $skip: Int!, $filter: AttGroupFilter) {\n    attGroups(take: $take, skip: $skip, filter: $filter) {\n      items {\n        id\n        name\n        group_type\n        shift_lists {\n          id\n          shift_name\n          on_time\n          off_time\n        }\n        leaders {\n          id\n          name\n          avatar\n          department{\n            id\n            name\n          }\n        }\n        sub_leaders {\n          avatar\n          id\n          name\n          department{\n            id\n            name\n          }\n        }\n        bind_departments {\n          name\n          all_employees {\n            totalCount\n          }\n          employees {\n            id\n            avatar\n            name\n            status\n          }\n        }\n        bind_employees {\n          id\n          avatar\n          name\n        }\n        members {\n          id\n          avatar\n          name\n          status\n        }\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query AttGroupShifts($attGroupByIdId: String!) {\n    attGroupById(id: $attGroupByIdId) {\n      name\n      shift_lists {\n        id\n        shift_name\n        on_time\n        off_time\n      }\n    }\n  }\n"): (typeof documents)["\n  query AttGroupShifts($attGroupByIdId: String!) {\n    attGroupById(id: $attGroupByIdId) {\n      name\n      shift_lists {\n        id\n        shift_name\n        on_time\n        off_time\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query AttGroupMembers($attGroupByIdId: String!) {\n    attGroupById(id: $attGroupByIdId) {\n      members {\n        id\n        name\n        avatar\n        status\n        attendances {\n          shift {\n            id\n            shift_name\n            on_time\n            off_time\n          }\n          date\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query AttGroupMembers($attGroupByIdId: String!) {\n    attGroupById(id: $attGroupByIdId) {\n      members {\n        id\n        name\n        avatar\n        status\n        attendances {\n          shift {\n            id\n            shift_name\n            on_time\n            off_time\n          }\n          date\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetAddendanceGroupById($attGroupByIdId: String!) {\n    attGroupById(id: $attGroupByIdId) {\n      bind_departments {\n        id\n        name\n        all_employees {\n          totalCount\n        }\n      }\n      bind_employees {\n        department {\n          name\n        }\n        avatar\n        id\n        name\n      }\n      id\n      leaders {\n        department {\n          name\n        }\n        avatar\n        id\n        name\n      }\n      sub_leaders {\n        department {\n          name\n        }\n        avatar\n        id\n        name\n      }\n      name\n      sub_group_leaders {\n        name\n        id\n        department {\n          id\n          name\n        }\n        avatar\n      }\n      locations{\n        id\n        name\n        longitude\n        latitude\n        address\n        gps_range\n      }\n      shift_lists{\n          id\n          shift_name\n          on_time\n          off_time\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetAddendanceGroupById($attGroupByIdId: String!) {\n    attGroupById(id: $attGroupByIdId) {\n      bind_departments {\n        id\n        name\n        all_employees {\n          totalCount\n        }\n      }\n      bind_employees {\n        department {\n          name\n        }\n        avatar\n        id\n        name\n      }\n      id\n      leaders {\n        department {\n          name\n        }\n        avatar\n        id\n        name\n      }\n      sub_leaders {\n        department {\n          name\n        }\n        avatar\n        id\n        name\n      }\n      name\n      sub_group_leaders {\n        name\n        id\n        department {\n          id\n          name\n        }\n        avatar\n      }\n      locations{\n        id\n        name\n        longitude\n        latitude\n        address\n        gps_range\n      }\n      shift_lists{\n          id\n          shift_name\n          on_time\n          off_time\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n query StatisticsDay($statisticsDayInput: StatisticsDayInput, $take: Int!, $skip: Int!) {\n  statisticsDay(statisticsDayInput: $statisticsDayInput, take: $take, skip: $skip) {\n    items {\n      employee {\n        id\n        name\n        salary_type\n        basic_salary\n      }\n      id\n      clock_in_time\n      clock_out_time\n      clock_out_location {\n        address\n      }\n      clock_in_location {\n        address\n      }\n      clock_in_result\n      clock_out_result\n      hours_of_attendance\n      shift {\n        on_time\n        off_time\n      }\n    }\n    totalCount\n  }\n}\n"): (typeof documents)["\n query StatisticsDay($statisticsDayInput: StatisticsDayInput, $take: Int!, $skip: Int!) {\n  statisticsDay(statisticsDayInput: $statisticsDayInput, take: $take, skip: $skip) {\n    items {\n      employee {\n        id\n        name\n        salary_type\n        basic_salary\n      }\n      id\n      clock_in_time\n      clock_out_time\n      clock_out_location {\n        address\n      }\n      clock_in_location {\n        address\n      }\n      clock_in_result\n      clock_out_result\n      hours_of_attendance\n      shift {\n        on_time\n        off_time\n      }\n    }\n    totalCount\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n query statisticsMonth($take: Int!, $skip: Int!, $filter: UsersFilter) {\n  users(take: $take, skip: $skip, filter: $filter) {\n    items {\n      attendances {\n        id\n        clock_in_time\n        clock_out_time\n        clock_out_result\n        clock_in_result\n        date\n        hours_of_attendance\n        shift_id\n      }\n      name\n      id\n    }\n    totalCount\n  }\n}\n"): (typeof documents)["\n query statisticsMonth($take: Int!, $skip: Int!, $filter: UsersFilter) {\n  users(take: $take, skip: $skip, filter: $filter) {\n    items {\n      attendances {\n        id\n        clock_in_time\n        clock_out_time\n        clock_out_result\n        clock_in_result\n        date\n        hours_of_attendance\n        shift_id\n      }\n      name\n      id\n    }\n    totalCount\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query brandsList($brandName: String) {\n    brands (brandName: $brandName) {\n        id\n        name\n        stores {\n            shop_id\n            storeName\n            managers {\n                id\n                name\n                avatar\n            }\n            department_id\n            status\n        }\n    }\n    }\n"): (typeof documents)["\n    query brandsList($brandName: String) {\n    brands (brandName: $brandName) {\n        id\n        name\n        stores {\n            shop_id\n            storeName\n            managers {\n                id\n                name\n                avatar\n            }\n            department_id\n            status\n        }\n    }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Query($department_id: String) {\n    departmentById(id: $department_id) {\n      id\n      name\n      child_departments {\n        id\n        name\n        child_departments {\n          id\n          name\n          child_departments {\n            id\n            name\n            child_departments {\n              id\n              name\n              child_departments {\n                id\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query Query($department_id: String) {\n    departmentById(id: $department_id) {\n      id\n      name\n      child_departments {\n        id\n        name\n        child_departments {\n          id\n          name\n          child_departments {\n            id\n            name\n            child_departments {\n              id\n              name\n              child_departments {\n                id\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Departments($take: Int!, $skip: Int!, $filter: DepartmentFilter) {\n    departments(take: $take, skip: $skip, filter: $filter) {\n      totalCount\n      items {\n        id\n        name\n        all_employees {\n          totalCount\n        }\n        child_departments {\n          id\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query Departments($take: Int!, $skip: Int!, $filter: DepartmentFilter) {\n    departments(take: $take, skip: $skip, filter: $filter) {\n      totalCount\n      items {\n        id\n        name\n        all_employees {\n          totalCount\n        }\n        child_departments {\n          id\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query DepartmentById($departmentByIdId: String) {\n    departmentById(id: $departmentByIdId) {\n      parent_department {\n        id\n        name\n      }\n      child_departments {\n        id\n        name\n        all_employees {\n          totalCount\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query DepartmentById($departmentByIdId: String) {\n    departmentById(id: $departmentByIdId) {\n      parent_department {\n        id\n        name\n      }\n      child_departments {\n        id\n        name\n        all_employees {\n          totalCount\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SelectOptions($input: FieldInput!) {\n    selectOptions: options(input: $input) {\n      field\n      options {\n        id\n        value\n      }\n    }\n  }\n"): (typeof documents)["\n  query SelectOptions($input: FieldInput!) {\n    selectOptions: options(input: $input) {\n      field\n      options {\n        id\n        value\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery RolesList($name: String) {\n  roles(name: $name) {\n    id\n    name\n    navs {\n      children {\n        key\n        title\n        children {\n          key\n          title\n        }\n      }\n      key\n      title\n    }\n    employees {\n      id\n      name\n      avatar\n    }\n  }\n}\n"): (typeof documents)["\nquery RolesList($name: String) {\n  roles(name: $name) {\n    id\n    name\n    navs {\n      children {\n        key\n        title\n        children {\n          key\n          title\n        }\n      }\n      key\n      title\n    }\n    employees {\n      id\n      name\n      avatar\n    }\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query NavTree {\n        navTree {\n        key\n        title\n        children {\n            key\n            title\n            children {\n                key\n                title\n            }\n        }\n        }\n    }\n"): (typeof documents)["\n    query NavTree {\n        navTree {\n        key\n        title\n        children {\n            key\n            title\n            children {\n                key\n                title\n            }\n        }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query RoleById($roleByIdId: String!) {\n    roleById(id: $roleByIdId) {\n      id\n      name\n      employees {\n        id\n        avatar\n        mobile\n        name\n        department {\n          name\n        }\n      }\n      navs {\n        key\n        title\n        children {\n            key\n            title\n            children {\n            key\n            title\n            }\n        }\n        }\n    }\n  }\n"): (typeof documents)["\n  query RoleById($roleByIdId: String!) {\n    roleById(id: $roleByIdId) {\n      id\n      name\n      employees {\n        id\n        avatar\n        mobile\n        name\n        department {\n          name\n        }\n      }\n      navs {\n        key\n        title\n        children {\n            key\n            title\n            children {\n            key\n            title\n            }\n        }\n        }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n query ShiftLists($take: Int!, $skip: Int!, $filter: ShiftListFilter) {\n    shiftLists(take: $take, skip: $skip, filter: $filter) {\n        items {\n        shift_name\n        id\n        on_time\n        off_time\n        created_by\n        updated_at\n        }\n        totalCount\n    }\n    }\n"): (typeof documents)["\n query ShiftLists($take: Int!, $skip: Int!, $filter: ShiftListFilter) {\n    shiftLists(take: $take, skip: $skip, filter: $filter) {\n        items {\n        shift_name\n        id\n        on_time\n        off_time\n        created_by\n        updated_at\n        }\n        totalCount\n    }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query ShiftById($shiftByIdId: String!) {\n        shiftById(id: $shiftByIdId) {\n            punch_times \n            shift_name\n            no_need_off\n            on_time\n            off_time\n            late_minutes_as_late\n            late_minutes_as_lack\n            early_minutes_as_early\n            early_minutes_as_lack\n        }\n    }\n"): (typeof documents)["\n    query ShiftById($shiftByIdId: String!) {\n        shiftById(id: $shiftByIdId) {\n            punch_times \n            shift_name\n            no_need_off\n            on_time\n            off_time\n            late_minutes_as_late\n            late_minutes_as_lack\n            early_minutes_as_early\n            early_minutes_as_lack\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query BirthdayStats {\n    birthdayStats {\n      todayCount\n      thisWeekCount\n      thisMonthCount\n      nextMonthCount\n      lastMonthCount\n    }\n  }\n"): (typeof documents)["\n  query BirthdayStats {\n    birthdayStats {\n      todayCount\n      thisWeekCount\n      thisMonthCount\n      nextMonthCount\n      lastMonthCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query HireDateStats {\n    hireDateStats {\n      lastMonthCount\n      nextMonthCount\n      thisMonthCount\n      thisWeekCount\n      todayCount\n    }\n  }\n"): (typeof documents)["\n  query HireDateStats {\n    hireDateStats {\n      lastMonthCount\n      nextMonthCount\n      thisMonthCount\n      thisWeekCount\n      todayCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query RosterStats {\n    rosterStats: hrStats {\n      awaitUnemployCount\n      internEmployeeCount\n      isEmployedCount\n      notEmployedCount\n      outsourcedEmployeeCount\n      regularEmployeeCount\n      trialEmployeeCount\n    }\n  }\n"): (typeof documents)["\n  query RosterStats {\n    rosterStats: hrStats {\n      awaitUnemployCount\n      internEmployeeCount\n      isEmployedCount\n      notEmployedCount\n      outsourcedEmployeeCount\n      regularEmployeeCount\n      trialEmployeeCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query HrOnboardingStats {\n    hrOnboardingStats {\n      awaitOnboardingCount\n      todayAwaitOnboardingCount\n      thisMonthAwaitOnboardingCount\n    }\n  }\n"): (typeof documents)["\n  query HrOnboardingStats {\n    hrOnboardingStats {\n      awaitOnboardingCount\n      todayAwaitOnboardingCount\n      thisMonthAwaitOnboardingCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query HrConversionStats {\n  hrConversionStats {\n    awaitRegularizedCount\n    overdueRegularizedCount\n    thisMonthAwaitRegularizedCount\n    nextMonthAwaitRegularizedCount\n  }\n}\n"): (typeof documents)["\n  query HrConversionStats {\n  hrConversionStats {\n    awaitRegularizedCount\n    overdueRegularizedCount\n    thisMonthAwaitRegularizedCount\n    nextMonthAwaitRegularizedCount\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query HrResignStats {\n    hrResignStats {\n      awaitHiredCount\n    }\n  }\n"): (typeof documents)["\n  query HrResignStats {\n    hrResignStats {\n      awaitHiredCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n   query Stores {\n    stores {\n      shop_id\n      managers {\n        id\n        name\n        avatar\n      }\n      storeName\n      status\n    }\n  }\n"): (typeof documents)["\n   query Stores {\n    stores {\n      shop_id\n      managers {\n        id\n        name\n        avatar\n      }\n      storeName\n      status\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query StoresByEmployee($storesByEmployeeId: String!) {\n    storesByEmployee(id: $storesByEmployeeId) {\n      shop_id\n      storeName\n      department {\n        id\n        name\n        child_departments {\n          id\n          name\n          employees {\n            id\n            status\n            name\n            mobile\n            job_title\n            hire_date\n            employee_type\n            id_number\n            medical_insurance\n            department {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query StoresByEmployee($storesByEmployeeId: String!) {\n    storesByEmployee(id: $storesByEmployeeId) {\n      shop_id\n      storeName\n      department {\n        id\n        name\n        child_departments {\n          id\n          name\n          employees {\n            id\n            status\n            name\n            mobile\n            job_title\n            hire_date\n            employee_type\n            id_number\n            medical_insurance\n            department {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query NaviItems {\n    user {\n      avatar\n      id\n      name\n    }\n  }\n"): (typeof documents)["\n  query NaviItems {\n    user {\n      avatar\n      id\n      name\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Users($take: Int!, $skip: Int!, $filter: UsersFilter) {\n    users(take: $take, skip: $skip, filter: $filter) {\n      totalCount\n      items {\n        id\n        status\n        employee_form_status\n        name\n        mobile\n        avatar\n        user_id\n        hire_date\n        job_title\n        last_day\n        departure_type\n        birthday\n        departure_type\n        gender_id\n        employee_type\n        department_id\n        department {\n          name\n          id\n        }\n        ethnicity\n        application\n        application_status\n        native_region {\n          iso_code\n          name\n        }\n        primary_emergency_contact {\n          name\n          relationship\n          mobile\n        }\n        probation_months\n        provident_fund_account\n        social_security_account\n        bank_name\n        bank_account_number\n        salary_type\n        basic_salary\n        basic_salary_monthly\n        manager_id\n        work_age_type\n        family_address\n        hukou_type\n        hukou_location\n        actual_conversion_time\n        actual_overboard_time\n        overboard_note\n      }\n    }\n  }\n"): (typeof documents)["\n  query Users($take: Int!, $skip: Int!, $filter: UsersFilter) {\n    users(take: $take, skip: $skip, filter: $filter) {\n      totalCount\n      items {\n        id\n        status\n        employee_form_status\n        name\n        mobile\n        avatar\n        user_id\n        hire_date\n        job_title\n        last_day\n        departure_type\n        birthday\n        departure_type\n        gender_id\n        employee_type\n        department_id\n        department {\n          name\n          id\n        }\n        ethnicity\n        application\n        application_status\n        native_region {\n          iso_code\n          name\n        }\n        primary_emergency_contact {\n          name\n          relationship\n          mobile\n        }\n        probation_months\n        provident_fund_account\n        social_security_account\n        bank_name\n        bank_account_number\n        salary_type\n        basic_salary\n        basic_salary_monthly\n        manager_id\n        work_age_type\n        family_address\n        hukou_type\n        hukou_location\n        actual_conversion_time\n        actual_overboard_time\n        overboard_note\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query UserById($userByIdId: String) {\n    userById(id: $userByIdId) {\n      user_id\n      id\n      id_number\n      medical_insurance\n      status\n      employee_form_status\n      name\n      mobile\n      avatar\n      user_id\n      hire_date\n      job_id\n      job_title\n      last_day\n      departure_type\n      birthday\n      departure_type\n      gender_id\n      employee_type\n      department_id\n      department {\n        name\n        id\n      }\n      ethnicity\n      application\n      application_status\n      native_region {\n        iso_code\n        name\n      }\n      primary_emergency_contact {\n        name\n        relationship\n        mobile\n      }\n      probation_months\n      provident_fund_account\n      social_security_account\n      bank_name\n      bank_account_number\n      salary_type\n      basic_salary\n      basic_salary_monthly\n      manager_id\n      work_age_type\n      family_address\n      hukou_type\n      hukou_location\n    }\n  }\n"): (typeof documents)["\n  query UserById($userByIdId: String) {\n    userById(id: $userByIdId) {\n      user_id\n      id\n      id_number\n      medical_insurance\n      status\n      employee_form_status\n      name\n      mobile\n      avatar\n      user_id\n      hire_date\n      job_id\n      job_title\n      last_day\n      departure_type\n      birthday\n      departure_type\n      gender_id\n      employee_type\n      department_id\n      department {\n        name\n        id\n      }\n      ethnicity\n      application\n      application_status\n      native_region {\n        iso_code\n        name\n      }\n      primary_emergency_contact {\n        name\n        relationship\n        mobile\n      }\n      probation_months\n      provident_fund_account\n      social_security_account\n      bank_name\n      bank_account_number\n      salary_type\n      basic_salary\n      basic_salary_monthly\n      manager_id\n      work_age_type\n      family_address\n      hukou_type\n      hukou_location\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query UsersByDepartmenstId($department_id: String, $take: Int!, $skip: Int!) {\n    usersByDepartmentId(\n      department_id: $department_id\n      take: $take\n      skip: $skip\n    ) {\n      items {\n        id\n        name\n        user_id\n        avatar\n        hire_date\n        job_title\n        department {\n          name\n        }\n        status\n        mobile\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query UsersByDepartmenstId($department_id: String, $take: Int!, $skip: Int!) {\n    usersByDepartmentId(\n      department_id: $department_id\n      take: $take\n      skip: $skip\n    ) {\n      items {\n        id\n        name\n        user_id\n        avatar\n        hire_date\n        job_title\n        department {\n          name\n        }\n        status\n        mobile\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query BirthdayPageUsersQuery($take: Int!, $skip: Int!) {\n    users(take: $take, skip: $skip) {\n      totalCount\n      items {\n        name\n        id\n        avatar\n        status\n        job_title\n        birthday\n      }\n    }\n  }\n"): (typeof documents)["\n  query BirthdayPageUsersQuery($take: Int!, $skip: Int!) {\n    users(take: $take, skip: $skip) {\n      totalCount\n      items {\n        name\n        id\n        avatar\n        status\n        job_title\n        birthday\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query UsersSearch($searchTerm: String) {\n    usersSearch(searchTerm: $searchTerm) {\n      items {\n        name\n        id\n        hire_date\n        department_id\n        department {\n          name\n        }\n        avatar\n        mobile\n        job_title\n        user_id\n        status\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query UsersSearch($searchTerm: String) {\n    usersSearch(searchTerm: $searchTerm) {\n      items {\n        name\n        id\n        hire_date\n        department_id\n        department {\n          name\n        }\n        avatar\n        mobile\n        job_title\n        user_id\n        status\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query userAttachments($id: String) {\n    userAttachmentsById(id: $id) {\n      attachmentContents {\n        file_name\n        id\n        path\n      }\n      isMulti\n      key\n      kind\n      name\n    }\n  }\n"): (typeof documents)["\n  query userAttachments($id: String) {\n    userAttachmentsById(id: $id) {\n      attachmentContents {\n        file_name\n        id\n        path\n      }\n      isMulti\n      key\n      kind\n      name\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query HrStats {\n    hrStats {\n      awaitUnemployCount\n      internEmployeeCount\n      isEmployedCount\n      notEmployedCount\n      outsourcedEmployeeCount\n      regularEmployeeCount\n      trialEmployeeCount\n    }\n  }\n"): (typeof documents)["\n  query HrStats {\n    hrStats {\n      awaitUnemployCount\n      internEmployeeCount\n      isEmployedCount\n      notEmployedCount\n      outsourcedEmployeeCount\n      regularEmployeeCount\n      trialEmployeeCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query EmployeesByRoles($take: Int!, $skip: Int!, $filter: UsersFilter) {\n    users(take: $take, skip: $skip, filter: $filter) {\n      totalCount\n      items {\n        name\n        mobile\n        roles {\n          id\n          name\n          ranking\n        }\n        department {\n          name\n        }\n        avatar\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  query EmployeesByRoles($take: Int!, $skip: Int!, $filter: UsersFilter) {\n    users(take: $take, skip: $skip, filter: $filter) {\n      totalCount\n      items {\n        name\n        mobile\n        roles {\n          id\n          name\n          ranking\n        }\n        department {\n          name\n        }\n        avatar\n        id\n      }\n    }\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;