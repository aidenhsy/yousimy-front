"use strict";
exports.__esModule = true;
exports.EMPLOYEE_BY_PK_ATTENDANCES_QUERY = exports.EMPLOYEE_SALARY_MONTHLY_QUERY = exports.EMPLOYEES_BY_PK_QUERY = exports.EMPLOYEE_ATTACHMENT_QUERY = exports.EMPLOYEES_STATUS_COUNT_QUERY = exports.EMPLOYEES_QUERY = void 0;
var __generated__1 = require("../__generated__");
exports.EMPLOYEES_QUERY = __generated__1.graphql(/* GraphQL */ "\n  query Employess($offset: Int!, $limit: Int!, $where: employees_bool_exp) {\n    employees_aggregate(where: $where) {\n      aggregate {\n        count\n      }\n    }\n    employees(\n      limit: $limit\n      offset: $offset\n      order_by: { updated_at: desc }\n      where: $where\n    ) {\n      id\n      id_number\n      status\n      employee_form_status\n      name\n      mobile\n      avatar\n      user_id\n      hire_date\n      job_title\n      last_day\n      departure_type\n      birthday\n      departure_type\n      employee_type\n      department_id\n      department {\n        name\n        id\n      }\n      gender_id\n      marital_status\n      medical_insurance\n      ethnicity\n      application\n      application_status\n      native_region\n      primary_emergency_contact\n      probation_months\n      provident_fund_account\n      social_security_number\n      bank_name\n      bank_account_number\n      salary_type\n      basic_salary\n      basic_salary_monthly\n      manager_id\n      work_age_type\n      family_address\n      hukou_type\n      hukou_location\n      actual_conversion_time\n      actual_overboard_time\n      overboard_note\n      salaryType {\n        id\n        name\n      }\n      store_employees {\n        store {\n          id\n          name\n        }\n      }\n      attendances {\n        clock_in_result\n        clock_in_time\n        clock_out_result\n        clock_out_time\n        date\n        shift_id\n        hours_of_attendance\n        id\n        shift_list {\n          early_minutes_as_early\n          early_minutes_as_lack\n          late_minutes_as_lack\n          late_minutes_as_late\n          off_time\n          on_time\n        }\n      }\n    }\n  }\n");
exports.EMPLOYEES_STATUS_COUNT_QUERY = __generated__1.graphql(/* GraphQL */ "\n  query EmployeesStatusCount(\n    $where: employees_bool_exp\n    $todayDate: date\n    $thisWeekDateStart: date\n    $thisWeekDateEnd: date\n    $thisMonthDateStart: date\n    $thisMonthDateEnd: date\n    $nextMonthDateStart: date\n    $nextMonthDateEnd: date\n    $lastMonthDateStart: date\n    $lastMonthDateEnd: date\n    $todayDateMMDD: String\n    $thisWeekDateStartMMDD: String\n    $thisWeekDateEndMMDD: String\n    $thisMonthDateStartMMDD: String\n    $thisMonthDateEndMMDD: String\n    $nextMonthDateStartMMDD: String\n    $nextMonthDateEndMMDD: String\n    $lastMonthDateStartMMDD: String\n    $lastMonthDateEndMMDD: String\n  ) {\n    isEmployedCount: employees_aggregate(where: { status: { _eq: 2 } }) {\n      aggregate {\n        count\n      }\n    }\n    informationNotFilled: employees_aggregate(where: { status: { _eq: 6 } }) {\n      aggregate {\n        count\n      }\n    }\n    feishuIsReviewing: employees_aggregate(where: { status: { _eq: 7 } }) {\n      aggregate {\n        count\n      }\n    }\n    feishuReviewRejected: employees_aggregate(where: { status: { _eq: 9 } }) {\n      aggregate {\n        count\n      }\n    }\n    regularEmployeeCount: employees_aggregate(\n      where: { _and: [{ status: { _eq: 2 } }, { employee_type: { _eq: 1 } }] }\n    ) {\n      aggregate {\n        count\n      }\n    }\n    internEmployeeCount: employees_aggregate(\n      where: { _and: [{ status: { _eq: 2 } }, { employee_type: { _eq: 2 } }] }\n    ) {\n      aggregate {\n        count\n      }\n    }\n    outsourcedEmployeeCount: employees_aggregate(\n      where: { _and: [{ status: { _eq: 2 } }, { employee_type: { _eq: 4 } }] }\n    ) {\n      aggregate {\n        count\n      }\n    }\n    trialEmployeeCount: employees_aggregate(\n      where: {\n        _and: [{ status: { _eq: 2 } }, { application_status: { _eq: 2 } }]\n      }\n    ) {\n      aggregate {\n        count\n      }\n    }\n    awaitUnemployCount: employees_aggregate(where: { status: { _eq: 4 } }) {\n      aggregate {\n        count\n      }\n    }\n    notEmployedCount: employees_aggregate(where: { status: { _eq: 5 } }) {\n      aggregate {\n        count\n      }\n    }\n    awaitOnboardingCount: employees_aggregate(where: { status: { _eq: 1 } }) {\n      aggregate {\n        count\n      }\n    }\n    awaitRegularizedCount: employees_aggregate(\n      where: { application_status: { _eq: 2 } }\n    ) {\n      aggregate {\n        count\n      }\n    }\n    overdueRegularizedCount: employees_aggregate(\n      where: {\n        _and: [\n          { actual_conversion_time: { _lt: $todayDate } }\n          { application_status: { _eq: 2 } }\n        ]\n      }\n    ) {\n      aggregate {\n        count\n      }\n    }\n    thisMonthAwaitRegularizedCount: employees_aggregate(\n      where: {\n        _and: [\n          { actual_conversion_time: { _gte: $thisMonthDateStart } }\n          { actual_conversion_time: { _lte: $thisMonthDateEnd } }\n          { application_status: { _eq: 2 } }\n        ]\n      }\n    ) {\n      aggregate {\n        count\n      }\n    }\n    nextMonthAwaitRegularizedCount: employees_aggregate(\n      where: {\n        _and: [\n          { actual_conversion_time: { _gte: $nextMonthDateStart } }\n          { actual_conversion_time: { _lte: $nextMonthDateEnd } }\n          { application_status: { _eq: 2 } }\n        ]\n      }\n    ) {\n      aggregate {\n        count\n      }\n    }\n    todayHireDateCount: employees_aggregate(\n      where: {\n        _and: [\n          { hire_date_mm_dd: { _gte: $todayDateMMDD } }\n          { hire_date_mm_dd: { _lte: $todayDateMMDD } }\n          { status: { _eq: 2 } }\n        ]\n      }\n    ) {\n      aggregate {\n        count\n      }\n    }\n    thisWeekHireDateCount: employees_aggregate(\n      where: {\n        _and: [\n          { hire_date_mm_dd: { _gte: $thisWeekDateStartMMDD } }\n          { hire_date_mm_dd: { _lte: $thisWeekDateEndMMDD } }\n          { status: { _eq: 2 } }\n        ]\n      }\n    ) {\n      aggregate {\n        count\n      }\n    }\n    thisMonthHireDateCount: employees_aggregate(\n      where: {\n        _and: [\n          { hire_date_mm_dd: { _gte: $thisMonthDateStartMMDD } }\n          { hire_date_mm_dd: { _lte: $thisMonthDateEndMMDD } }\n          { status: { _eq: 2 } }\n        ]\n      }\n    ) {\n      aggregate {\n        count\n      }\n    }\n    nextMonthHireDateCount: employees_aggregate(\n      where: {\n        _and: [\n          { hire_date_mm_dd: { _gte: $nextMonthDateStartMMDD } }\n          { hire_date_mm_dd: { _lte: $nextMonthDateEndMMDD } }\n          { status: { _eq: 2 } }\n        ]\n      }\n    ) {\n      aggregate {\n        count\n      }\n    }\n    lastMonthHireDateCount: employees_aggregate(\n      where: {\n        _and: [\n          { hire_date_mm_dd: { _gte: $lastMonthDateStartMMDD } }\n          { hire_date_mm_dd: { _lte: $lastMonthDateEndMMDD } }\n          { status: { _eq: 2 } }\n        ]\n      }\n    ) {\n      aggregate {\n        count\n      }\n    }\n    todayBirthdayCount: employees_aggregate(\n      where: {\n        _and: [\n          { birthday_mm_dd: { _gte: $todayDateMMDD } }\n          { birthday_mm_dd: { _lte: $todayDateMMDD } }\n          { status: { _eq: 2 } }\n        ]\n      }\n    ) {\n      aggregate {\n        count\n      }\n    }\n    thisWeekBirthdayCount: employees_aggregate(\n      where: {\n        _and: [\n          { birthday_mm_dd: { _gte: $thisWeekDateStartMMDD } }\n          { birthday_mm_dd: { _lte: $thisWeekDateEndMMDD } }\n          { status: { _eq: 2 } }\n        ]\n      }\n    ) {\n      aggregate {\n        count\n      }\n    }\n    thisMonthBirthdayCount: employees_aggregate(\n      where: {\n        _and: [\n          { birthday_mm_dd: { _gte: $thisMonthDateStartMMDD } }\n          { birthday_mm_dd: { _lte: $thisMonthDateEndMMDD } }\n          { status: { _eq: 2 } }\n        ]\n      }\n    ) {\n      aggregate {\n        count\n      }\n    }\n    nextMonthBirthdayCount: employees_aggregate(\n      where: {\n        _and: [\n          { birthday_mm_dd: { _gte: $nextMonthDateStartMMDD } }\n          { birthday_mm_dd: { _lte: $nextMonthDateEndMMDD } }\n          { status: { _eq: 2 } }\n        ]\n      }\n    ) {\n      aggregate {\n        count\n      }\n    }\n    lastMonthBirthdayCount: employees_aggregate(\n      where: {\n        _and: [\n          { birthday_mm_dd: { _gte: $lastMonthDateStartMMDD } }\n          { birthday_mm_dd: { _lte: $lastMonthDateEndMMDD } }\n          { status: { _eq: 2 } }\n        ]\n      }\n    ) {\n      aggregate {\n        count\n      }\n    }\n  }\n");
exports.EMPLOYEE_ATTACHMENT_QUERY = __generated__1.graphql(/* GraphQL */ "\n  query EmployeeAttachment($where: employee_attachments_bool_exp) {\n    employee_attachments(where: $where) {\n      employee_id\n      file_name\n      id\n      kind\n      path\n    }\n  }\n");
exports.EMPLOYEES_BY_PK_QUERY = __generated__1.graphql(/* GraphQL */ "\n  query EmployeesByPk($id: String!) {\n    employees_by_pk(id: $id) {\n      id\n      avatar\n      name\n      mobile\n      status\n      employee_type\n      department_id\n      id_number\n      job_title\n      medical_insurance\n      department {\n        name\n      }\n      employee_attachments {\n        kind\n        path\n        file_name\n      }\n    }\n  }\n");
exports.EMPLOYEE_SALARY_MONTHLY_QUERY = __generated__1.graphql(/* GraphQL */ "\n  query EmployeeSalaryMonthly(\n    $offset: Int\n    $limit: Int\n    $where: employees_bool_exp\n    $where1: attendance_bool_exp\n  ) {\n    employees(limit: $limit, offset: $offset, where: $where) {\n      id\n      name\n      id_number\n      job_title\n      status\n      avatar\n      salary_type\n      department {\n        id\n        name\n      }\n\n      attendances_aggregate(where: $where1) {\n        aggregate {\n          count\n          sum {\n            actual_length_hour\n            actual_length_day\n            scheduled_length_day\n            scheduled_length_hour\n          }\n        }\n      }\n    }\n    employees_aggregate(where: $where) {\n      aggregate {\n        count\n      }\n    }\n  }\n");
exports.EMPLOYEE_BY_PK_ATTENDANCES_QUERY = __generated__1.graphql(/* GraphQL */ "\n  query EmployeeByPkAttendances($id: String!, $where: attendance_bool_exp) {\n    employees_by_pk(id: $id) {\n      id\n      department_id\n      name\n      status\n      salary_type\n      basic_salary\n      basic_salary_monthly\n      attendances(where: $where, order_by: { date: asc }) {\n        id\n        date\n        clock_in_time\n        clock_in_result\n        clock_out_time\n        clock_out_result\n        clockInResult\n        clockOutResult\n        department {\n          id\n          name\n        }\n        attendance_location {\n          name\n        }\n        shift_list {\n          shift_name\n          on_time\n          off_time\n        }\n      }\n    }\n  }\n");
