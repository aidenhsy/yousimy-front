/* eslint-disable */
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  _text: any;
  bigint: any;
  bytea: any;
  date: any;
  json: any;
  numeric: any;
  smallint: any;
  time: any;
  timestamp: any;
  timestamptz: any;
};

/** Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'. */
export type Boolean_Comparison_Exp = {
  _eq?: InputMaybe<Scalars['Boolean']>;
  _gt?: InputMaybe<Scalars['Boolean']>;
  _gte?: InputMaybe<Scalars['Boolean']>;
  _in?: InputMaybe<Array<Scalars['Boolean']>>;
  _is_null?: InputMaybe<Scalars['Boolean']>;
  _lt?: InputMaybe<Scalars['Boolean']>;
  _lte?: InputMaybe<Scalars['Boolean']>;
  _neq?: InputMaybe<Scalars['Boolean']>;
  _nin?: InputMaybe<Array<Scalars['Boolean']>>;
};

export type Department = {
  __typename?: 'Department';
  is_dept?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

export type Employees_ActionType = {
  __typename?: 'Employees_ActionType';
  department?: Maybe<Scalars['String']>;
  employee?: Maybe<Employees>;
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  types?: Maybe<Array<Maybe<Scalars['String']>>>;
};

/** Boolean expression to compare columns of type "Float". All fields are combined with logical 'AND'. */
export type Float_Comparison_Exp = {
  _eq?: InputMaybe<Scalars['Float']>;
  _gt?: InputMaybe<Scalars['Float']>;
  _gte?: InputMaybe<Scalars['Float']>;
  _in?: InputMaybe<Array<Scalars['Float']>>;
  _is_null?: InputMaybe<Scalars['Boolean']>;
  _lt?: InputMaybe<Scalars['Float']>;
  _lte?: InputMaybe<Scalars['Float']>;
  _neq?: InputMaybe<Scalars['Float']>;
  _nin?: InputMaybe<Array<Scalars['Float']>>;
};

/** Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'. */
export type Int_Comparison_Exp = {
  _eq?: InputMaybe<Scalars['Int']>;
  _gt?: InputMaybe<Scalars['Int']>;
  _gte?: InputMaybe<Scalars['Int']>;
  _in?: InputMaybe<Array<Scalars['Int']>>;
  _is_null?: InputMaybe<Scalars['Boolean']>;
  _lt?: InputMaybe<Scalars['Int']>;
  _lte?: InputMaybe<Scalars['Int']>;
  _neq?: InputMaybe<Scalars['Int']>;
  _nin?: InputMaybe<Array<Scalars['Int']>>;
};

export type Store = {
  __typename?: 'Store';
  children?: Maybe<Array<Maybe<Department>>>;
  is_dept?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

export type StoreDepartments = {
  __typename?: 'StoreDepartments';
  children?: Maybe<Array<Maybe<Store>>>;
  is_dept?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Scalars['String']>;
  value: Scalars['String'];
};

/** Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'. */
export type String_Comparison_Exp = {
  _eq?: InputMaybe<Scalars['String']>;
  _gt?: InputMaybe<Scalars['String']>;
  _gte?: InputMaybe<Scalars['String']>;
  /** does the column match the given case-insensitive pattern */
  _ilike?: InputMaybe<Scalars['String']>;
  _in?: InputMaybe<Array<Scalars['String']>>;
  /** does the column match the given POSIX regular expression, case insensitive */
  _iregex?: InputMaybe<Scalars['String']>;
  _is_null?: InputMaybe<Scalars['Boolean']>;
  /** does the column match the given pattern */
  _like?: InputMaybe<Scalars['String']>;
  _lt?: InputMaybe<Scalars['String']>;
  _lte?: InputMaybe<Scalars['String']>;
  _neq?: InputMaybe<Scalars['String']>;
  /** does the column NOT match the given case-insensitive pattern */
  _nilike?: InputMaybe<Scalars['String']>;
  _nin?: InputMaybe<Array<Scalars['String']>>;
  /** does the column NOT match the given POSIX regular expression, case insensitive */
  _niregex?: InputMaybe<Scalars['String']>;
  /** does the column NOT match the given pattern */
  _nlike?: InputMaybe<Scalars['String']>;
  /** does the column NOT match the given POSIX regular expression, case sensitive */
  _nregex?: InputMaybe<Scalars['String']>;
  /** does the column NOT match the given SQL regular expression */
  _nsimilar?: InputMaybe<Scalars['String']>;
  /** does the column match the given POSIX regular expression, case sensitive */
  _regex?: InputMaybe<Scalars['String']>;
  /** does the column match the given SQL regular expression */
  _similar?: InputMaybe<Scalars['String']>;
};

/** columns and relationships of "attendance" */
export type Attendance = {
  __typename?: 'attendance';
  /** A computed field, executes function "actual_length_day" */
  actual_length_day?: Maybe<Scalars['Float']>;
  /** A computed field, executes function "actual_length_hour" */
  actual_length_hour?: Maybe<Scalars['Float']>;
  /** An object relationship */
  attendanceLocationByClockInLocationId?: Maybe<Attendance_Locations>;
  /** An object relationship */
  attendanceLocationByClockOutLocationId?: Maybe<Attendance_Locations>;
  /** An object relationship */
  attendance_location?: Maybe<Attendance_Locations>;
  attendance_location_id?: Maybe<Scalars['String']>;
  /** A computed field, executes function "check_lateness" */
  clockInResult?: Maybe<Scalars['Int']>;
  /** A computed field, executes function "check_earliness" */
  clockOutResult?: Maybe<Scalars['Int']>;
  clock_in_location_id?: Maybe<Scalars['String']>;
  clock_in_result?: Maybe<Scalars['Int']>;
  clock_in_time?: Maybe<Scalars['time']>;
  clock_out_location_id?: Maybe<Scalars['String']>;
  clock_out_result?: Maybe<Scalars['Int']>;
  clock_out_time?: Maybe<Scalars['time']>;
  date: Scalars['date'];
  /** A computed field, executes function "date_yyyy_mm" */
  date_yyyy_mm?: Maybe<Scalars['String']>;
  /** An object relationship */
  department: Departments;
  department_id: Scalars['String'];
  /** An object relationship */
  employee: Employees;
  employee_id: Scalars['String'];
  hours_of_attendance?: Maybe<Scalars['Float']>;
  id: Scalars['String'];
  /** A computed field, executes function "scheduled_length_day" */
  scheduled_length_day?: Maybe<Scalars['Float']>;
  /** A computed field, executes function "scheduled_length_hour" */
  scheduled_length_hour?: Maybe<Scalars['Float']>;
  shift_id: Scalars['String'];
  /** An object relationship */
  shift_list: Shift_Lists;
};

/** aggregated selection of "attendance" */
export type Attendance_Aggregate = {
  __typename?: 'attendance_aggregate';
  aggregate?: Maybe<Attendance_Aggregate_Fields>;
  nodes: Array<Attendance>;
};

export type Attendance_Aggregate_Bool_Exp = {
  count?: InputMaybe<Attendance_Aggregate_Bool_Exp_Count>;
};

export type Attendance_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<Attendance_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<Attendance_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "attendance" */
export type Attendance_Aggregate_Fields = {
  __typename?: 'attendance_aggregate_fields';
  avg?: Maybe<Attendance_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Attendance_Max_Fields>;
  min?: Maybe<Attendance_Min_Fields>;
  stddev?: Maybe<Attendance_Stddev_Fields>;
  stddev_pop?: Maybe<Attendance_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Attendance_Stddev_Samp_Fields>;
  sum?: Maybe<Attendance_Sum_Fields>;
  var_pop?: Maybe<Attendance_Var_Pop_Fields>;
  var_samp?: Maybe<Attendance_Var_Samp_Fields>;
  variance?: Maybe<Attendance_Variance_Fields>;
};


/** aggregate fields of "attendance" */
export type Attendance_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Attendance_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "attendance" */
export type Attendance_Aggregate_Order_By = {
  avg?: InputMaybe<Attendance_Avg_Order_By>;
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<Attendance_Max_Order_By>;
  min?: InputMaybe<Attendance_Min_Order_By>;
  stddev?: InputMaybe<Attendance_Stddev_Order_By>;
  stddev_pop?: InputMaybe<Attendance_Stddev_Pop_Order_By>;
  stddev_samp?: InputMaybe<Attendance_Stddev_Samp_Order_By>;
  sum?: InputMaybe<Attendance_Sum_Order_By>;
  var_pop?: InputMaybe<Attendance_Var_Pop_Order_By>;
  var_samp?: InputMaybe<Attendance_Var_Samp_Order_By>;
  variance?: InputMaybe<Attendance_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "attendance" */
export type Attendance_Arr_Rel_Insert_Input = {
  data: Array<Attendance_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<Attendance_On_Conflict>;
};

/** aggregate avg on columns */
export type Attendance_Avg_Fields = {
  __typename?: 'attendance_avg_fields';
  /** A computed field, executes function "actual_length_day" */
  actual_length_day?: Maybe<Scalars['Float']>;
  /** A computed field, executes function "actual_length_hour" */
  actual_length_hour?: Maybe<Scalars['Float']>;
  /** A computed field, executes function "check_lateness" */
  clockInResult?: Maybe<Scalars['Int']>;
  /** A computed field, executes function "check_earliness" */
  clockOutResult?: Maybe<Scalars['Int']>;
  clock_in_result?: Maybe<Scalars['Float']>;
  clock_out_result?: Maybe<Scalars['Float']>;
  hours_of_attendance?: Maybe<Scalars['Float']>;
  /** A computed field, executes function "scheduled_length_day" */
  scheduled_length_day?: Maybe<Scalars['Float']>;
  /** A computed field, executes function "scheduled_length_hour" */
  scheduled_length_hour?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "attendance" */
export type Attendance_Avg_Order_By = {
  clock_in_result?: InputMaybe<Order_By>;
  clock_out_result?: InputMaybe<Order_By>;
  hours_of_attendance?: InputMaybe<Order_By>;
};

/** Boolean expression to filter rows from the table "attendance". All fields are combined with a logical 'AND'. */
export type Attendance_Bool_Exp = {
  _and?: InputMaybe<Array<Attendance_Bool_Exp>>;
  _not?: InputMaybe<Attendance_Bool_Exp>;
  _or?: InputMaybe<Array<Attendance_Bool_Exp>>;
  actual_length_day?: InputMaybe<Float_Comparison_Exp>;
  actual_length_hour?: InputMaybe<Float_Comparison_Exp>;
  attendanceLocationByClockInLocationId?: InputMaybe<Attendance_Locations_Bool_Exp>;
  attendanceLocationByClockOutLocationId?: InputMaybe<Attendance_Locations_Bool_Exp>;
  attendance_location?: InputMaybe<Attendance_Locations_Bool_Exp>;
  attendance_location_id?: InputMaybe<String_Comparison_Exp>;
  clockInResult?: InputMaybe<Int_Comparison_Exp>;
  clockOutResult?: InputMaybe<Int_Comparison_Exp>;
  clock_in_location_id?: InputMaybe<String_Comparison_Exp>;
  clock_in_result?: InputMaybe<Int_Comparison_Exp>;
  clock_in_time?: InputMaybe<Time_Comparison_Exp>;
  clock_out_location_id?: InputMaybe<String_Comparison_Exp>;
  clock_out_result?: InputMaybe<Int_Comparison_Exp>;
  clock_out_time?: InputMaybe<Time_Comparison_Exp>;
  date?: InputMaybe<Date_Comparison_Exp>;
  date_yyyy_mm?: InputMaybe<String_Comparison_Exp>;
  department?: InputMaybe<Departments_Bool_Exp>;
  department_id?: InputMaybe<String_Comparison_Exp>;
  employee?: InputMaybe<Employees_Bool_Exp>;
  employee_id?: InputMaybe<String_Comparison_Exp>;
  hours_of_attendance?: InputMaybe<Float_Comparison_Exp>;
  id?: InputMaybe<String_Comparison_Exp>;
  scheduled_length_day?: InputMaybe<Float_Comparison_Exp>;
  scheduled_length_hour?: InputMaybe<Float_Comparison_Exp>;
  shift_id?: InputMaybe<String_Comparison_Exp>;
  shift_list?: InputMaybe<Shift_Lists_Bool_Exp>;
};

/** unique or primary key constraints on table "attendance" */
export enum Attendance_Constraint {
  /** unique or primary key constraint on columns "id" */
  AttendancePrimary2 = 'attendancePRIMARY2',
  /** unique or primary key constraint on columns "employee_id", "date" */
  UniqueDateEmployee6 = 'unique_date_employee6'
}

/** columns and relationships of "attendance_group_leaders" */
export type Attendance_Group_Leaders = {
  __typename?: 'attendance_group_leaders';
  /** An object relationship */
  attendance_group: Attendance_Groups;
  attendance_group_id: Scalars['String'];
  /** An object relationship */
  employee: Employees;
  employee_id: Scalars['String'];
};

/** aggregated selection of "attendance_group_leaders" */
export type Attendance_Group_Leaders_Aggregate = {
  __typename?: 'attendance_group_leaders_aggregate';
  aggregate?: Maybe<Attendance_Group_Leaders_Aggregate_Fields>;
  nodes: Array<Attendance_Group_Leaders>;
};

export type Attendance_Group_Leaders_Aggregate_Bool_Exp = {
  count?: InputMaybe<Attendance_Group_Leaders_Aggregate_Bool_Exp_Count>;
};

export type Attendance_Group_Leaders_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<Attendance_Group_Leaders_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<Attendance_Group_Leaders_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "attendance_group_leaders" */
export type Attendance_Group_Leaders_Aggregate_Fields = {
  __typename?: 'attendance_group_leaders_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Attendance_Group_Leaders_Max_Fields>;
  min?: Maybe<Attendance_Group_Leaders_Min_Fields>;
};


/** aggregate fields of "attendance_group_leaders" */
export type Attendance_Group_Leaders_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Attendance_Group_Leaders_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "attendance_group_leaders" */
export type Attendance_Group_Leaders_Aggregate_Order_By = {
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<Attendance_Group_Leaders_Max_Order_By>;
  min?: InputMaybe<Attendance_Group_Leaders_Min_Order_By>;
};

/** input type for inserting array relation for remote table "attendance_group_leaders" */
export type Attendance_Group_Leaders_Arr_Rel_Insert_Input = {
  data: Array<Attendance_Group_Leaders_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<Attendance_Group_Leaders_On_Conflict>;
};

/** Boolean expression to filter rows from the table "attendance_group_leaders". All fields are combined with a logical 'AND'. */
export type Attendance_Group_Leaders_Bool_Exp = {
  _and?: InputMaybe<Array<Attendance_Group_Leaders_Bool_Exp>>;
  _not?: InputMaybe<Attendance_Group_Leaders_Bool_Exp>;
  _or?: InputMaybe<Array<Attendance_Group_Leaders_Bool_Exp>>;
  attendance_group?: InputMaybe<Attendance_Groups_Bool_Exp>;
  attendance_group_id?: InputMaybe<String_Comparison_Exp>;
  employee?: InputMaybe<Employees_Bool_Exp>;
  employee_id?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "attendance_group_leaders" */
export enum Attendance_Group_Leaders_Constraint {
  /** unique or primary key constraint on columns "employee_id", "attendance_group_id" */
  AttendanceGroupLeadersPrimary3 = 'attendance_group_leadersPRIMARY3',
  /** unique or primary key constraint on columns "employee_id", "attendance_group_id" */
  UniqueCombinationIdx10 = 'unique_combination_idx10'
}

/** input type for inserting data into table "attendance_group_leaders" */
export type Attendance_Group_Leaders_Insert_Input = {
  attendance_group?: InputMaybe<Attendance_Groups_Obj_Rel_Insert_Input>;
  attendance_group_id?: InputMaybe<Scalars['String']>;
  employee?: InputMaybe<Employees_Obj_Rel_Insert_Input>;
  employee_id?: InputMaybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Attendance_Group_Leaders_Max_Fields = {
  __typename?: 'attendance_group_leaders_max_fields';
  attendance_group_id?: Maybe<Scalars['String']>;
  employee_id?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "attendance_group_leaders" */
export type Attendance_Group_Leaders_Max_Order_By = {
  attendance_group_id?: InputMaybe<Order_By>;
  employee_id?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type Attendance_Group_Leaders_Min_Fields = {
  __typename?: 'attendance_group_leaders_min_fields';
  attendance_group_id?: Maybe<Scalars['String']>;
  employee_id?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "attendance_group_leaders" */
export type Attendance_Group_Leaders_Min_Order_By = {
  attendance_group_id?: InputMaybe<Order_By>;
  employee_id?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "attendance_group_leaders" */
export type Attendance_Group_Leaders_Mutation_Response = {
  __typename?: 'attendance_group_leaders_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Attendance_Group_Leaders>;
};

/** on_conflict condition type for table "attendance_group_leaders" */
export type Attendance_Group_Leaders_On_Conflict = {
  constraint: Attendance_Group_Leaders_Constraint;
  update_columns?: Array<Attendance_Group_Leaders_Update_Column>;
  where?: InputMaybe<Attendance_Group_Leaders_Bool_Exp>;
};

/** Ordering options when selecting data from "attendance_group_leaders". */
export type Attendance_Group_Leaders_Order_By = {
  attendance_group?: InputMaybe<Attendance_Groups_Order_By>;
  attendance_group_id?: InputMaybe<Order_By>;
  employee?: InputMaybe<Employees_Order_By>;
  employee_id?: InputMaybe<Order_By>;
};

/** primary key columns input for table: attendance_group_leaders */
export type Attendance_Group_Leaders_Pk_Columns_Input = {
  attendance_group_id: Scalars['String'];
  employee_id: Scalars['String'];
};

/** select columns of table "attendance_group_leaders" */
export enum Attendance_Group_Leaders_Select_Column {
  /** column name */
  AttendanceGroupId = 'attendance_group_id',
  /** column name */
  EmployeeId = 'employee_id'
}

/** input type for updating data in table "attendance_group_leaders" */
export type Attendance_Group_Leaders_Set_Input = {
  attendance_group_id?: InputMaybe<Scalars['String']>;
  employee_id?: InputMaybe<Scalars['String']>;
};

/** Streaming cursor of the table "attendance_group_leaders" */
export type Attendance_Group_Leaders_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Attendance_Group_Leaders_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Attendance_Group_Leaders_Stream_Cursor_Value_Input = {
  attendance_group_id?: InputMaybe<Scalars['String']>;
  employee_id?: InputMaybe<Scalars['String']>;
};

/** update columns of table "attendance_group_leaders" */
export enum Attendance_Group_Leaders_Update_Column {
  /** column name */
  AttendanceGroupId = 'attendance_group_id',
  /** column name */
  EmployeeId = 'employee_id'
}

export type Attendance_Group_Leaders_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Attendance_Group_Leaders_Set_Input>;
  /** filter the rows which have to be updated */
  where: Attendance_Group_Leaders_Bool_Exp;
};

/** columns and relationships of "attendance_group_shifts" */
export type Attendance_Group_Shifts = {
  __typename?: 'attendance_group_shifts';
  /** An object relationship */
  attendance_group: Attendance_Groups;
  attendance_group_id: Scalars['String'];
  /** An object relationship */
  shift_list: Shift_Lists;
  shift_list_id: Scalars['String'];
};

/** aggregated selection of "attendance_group_shifts" */
export type Attendance_Group_Shifts_Aggregate = {
  __typename?: 'attendance_group_shifts_aggregate';
  aggregate?: Maybe<Attendance_Group_Shifts_Aggregate_Fields>;
  nodes: Array<Attendance_Group_Shifts>;
};

export type Attendance_Group_Shifts_Aggregate_Bool_Exp = {
  count?: InputMaybe<Attendance_Group_Shifts_Aggregate_Bool_Exp_Count>;
};

export type Attendance_Group_Shifts_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<Attendance_Group_Shifts_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<Attendance_Group_Shifts_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "attendance_group_shifts" */
export type Attendance_Group_Shifts_Aggregate_Fields = {
  __typename?: 'attendance_group_shifts_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Attendance_Group_Shifts_Max_Fields>;
  min?: Maybe<Attendance_Group_Shifts_Min_Fields>;
};


/** aggregate fields of "attendance_group_shifts" */
export type Attendance_Group_Shifts_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Attendance_Group_Shifts_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "attendance_group_shifts" */
export type Attendance_Group_Shifts_Aggregate_Order_By = {
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<Attendance_Group_Shifts_Max_Order_By>;
  min?: InputMaybe<Attendance_Group_Shifts_Min_Order_By>;
};

/** input type for inserting array relation for remote table "attendance_group_shifts" */
export type Attendance_Group_Shifts_Arr_Rel_Insert_Input = {
  data: Array<Attendance_Group_Shifts_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<Attendance_Group_Shifts_On_Conflict>;
};

/** Boolean expression to filter rows from the table "attendance_group_shifts". All fields are combined with a logical 'AND'. */
export type Attendance_Group_Shifts_Bool_Exp = {
  _and?: InputMaybe<Array<Attendance_Group_Shifts_Bool_Exp>>;
  _not?: InputMaybe<Attendance_Group_Shifts_Bool_Exp>;
  _or?: InputMaybe<Array<Attendance_Group_Shifts_Bool_Exp>>;
  attendance_group?: InputMaybe<Attendance_Groups_Bool_Exp>;
  attendance_group_id?: InputMaybe<String_Comparison_Exp>;
  shift_list?: InputMaybe<Shift_Lists_Bool_Exp>;
  shift_list_id?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "attendance_group_shifts" */
export enum Attendance_Group_Shifts_Constraint {
  /** unique or primary key constraint on columns "shift_list_id", "attendance_group_id" */
  AttendanceGroupShiftsPrimary4 = 'attendance_group_shiftsPRIMARY4',
  /** unique or primary key constraint on columns "shift_list_id", "attendance_group_id" */
  UniqueCombinationIdx11 = 'unique_combination_idx11'
}

/** input type for inserting data into table "attendance_group_shifts" */
export type Attendance_Group_Shifts_Insert_Input = {
  attendance_group?: InputMaybe<Attendance_Groups_Obj_Rel_Insert_Input>;
  attendance_group_id?: InputMaybe<Scalars['String']>;
  shift_list?: InputMaybe<Shift_Lists_Obj_Rel_Insert_Input>;
  shift_list_id?: InputMaybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Attendance_Group_Shifts_Max_Fields = {
  __typename?: 'attendance_group_shifts_max_fields';
  attendance_group_id?: Maybe<Scalars['String']>;
  shift_list_id?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "attendance_group_shifts" */
export type Attendance_Group_Shifts_Max_Order_By = {
  attendance_group_id?: InputMaybe<Order_By>;
  shift_list_id?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type Attendance_Group_Shifts_Min_Fields = {
  __typename?: 'attendance_group_shifts_min_fields';
  attendance_group_id?: Maybe<Scalars['String']>;
  shift_list_id?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "attendance_group_shifts" */
export type Attendance_Group_Shifts_Min_Order_By = {
  attendance_group_id?: InputMaybe<Order_By>;
  shift_list_id?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "attendance_group_shifts" */
export type Attendance_Group_Shifts_Mutation_Response = {
  __typename?: 'attendance_group_shifts_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Attendance_Group_Shifts>;
};

/** on_conflict condition type for table "attendance_group_shifts" */
export type Attendance_Group_Shifts_On_Conflict = {
  constraint: Attendance_Group_Shifts_Constraint;
  update_columns?: Array<Attendance_Group_Shifts_Update_Column>;
  where?: InputMaybe<Attendance_Group_Shifts_Bool_Exp>;
};

/** Ordering options when selecting data from "attendance_group_shifts". */
export type Attendance_Group_Shifts_Order_By = {
  attendance_group?: InputMaybe<Attendance_Groups_Order_By>;
  attendance_group_id?: InputMaybe<Order_By>;
  shift_list?: InputMaybe<Shift_Lists_Order_By>;
  shift_list_id?: InputMaybe<Order_By>;
};

/** primary key columns input for table: attendance_group_shifts */
export type Attendance_Group_Shifts_Pk_Columns_Input = {
  attendance_group_id: Scalars['String'];
  shift_list_id: Scalars['String'];
};

/** select columns of table "attendance_group_shifts" */
export enum Attendance_Group_Shifts_Select_Column {
  /** column name */
  AttendanceGroupId = 'attendance_group_id',
  /** column name */
  ShiftListId = 'shift_list_id'
}

/** input type for updating data in table "attendance_group_shifts" */
export type Attendance_Group_Shifts_Set_Input = {
  attendance_group_id?: InputMaybe<Scalars['String']>;
  shift_list_id?: InputMaybe<Scalars['String']>;
};

/** Streaming cursor of the table "attendance_group_shifts" */
export type Attendance_Group_Shifts_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Attendance_Group_Shifts_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Attendance_Group_Shifts_Stream_Cursor_Value_Input = {
  attendance_group_id?: InputMaybe<Scalars['String']>;
  shift_list_id?: InputMaybe<Scalars['String']>;
};

/** update columns of table "attendance_group_shifts" */
export enum Attendance_Group_Shifts_Update_Column {
  /** column name */
  AttendanceGroupId = 'attendance_group_id',
  /** column name */
  ShiftListId = 'shift_list_id'
}

export type Attendance_Group_Shifts_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Attendance_Group_Shifts_Set_Input>;
  /** filter the rows which have to be updated */
  where: Attendance_Group_Shifts_Bool_Exp;
};

/** columns and relationships of "attendance_group_subleaders" */
export type Attendance_Group_Subleaders = {
  __typename?: 'attendance_group_subleaders';
  /** An object relationship */
  attendance_group: Attendance_Groups;
  attendance_group_id: Scalars['String'];
  /** An object relationship */
  employee: Employees;
  employee_id: Scalars['String'];
};

/** aggregated selection of "attendance_group_subleaders" */
export type Attendance_Group_Subleaders_Aggregate = {
  __typename?: 'attendance_group_subleaders_aggregate';
  aggregate?: Maybe<Attendance_Group_Subleaders_Aggregate_Fields>;
  nodes: Array<Attendance_Group_Subleaders>;
};

export type Attendance_Group_Subleaders_Aggregate_Bool_Exp = {
  count?: InputMaybe<Attendance_Group_Subleaders_Aggregate_Bool_Exp_Count>;
};

export type Attendance_Group_Subleaders_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<Attendance_Group_Subleaders_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<Attendance_Group_Subleaders_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "attendance_group_subleaders" */
export type Attendance_Group_Subleaders_Aggregate_Fields = {
  __typename?: 'attendance_group_subleaders_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Attendance_Group_Subleaders_Max_Fields>;
  min?: Maybe<Attendance_Group_Subleaders_Min_Fields>;
};


/** aggregate fields of "attendance_group_subleaders" */
export type Attendance_Group_Subleaders_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Attendance_Group_Subleaders_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "attendance_group_subleaders" */
export type Attendance_Group_Subleaders_Aggregate_Order_By = {
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<Attendance_Group_Subleaders_Max_Order_By>;
  min?: InputMaybe<Attendance_Group_Subleaders_Min_Order_By>;
};

/** input type for inserting array relation for remote table "attendance_group_subleaders" */
export type Attendance_Group_Subleaders_Arr_Rel_Insert_Input = {
  data: Array<Attendance_Group_Subleaders_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<Attendance_Group_Subleaders_On_Conflict>;
};

/** Boolean expression to filter rows from the table "attendance_group_subleaders". All fields are combined with a logical 'AND'. */
export type Attendance_Group_Subleaders_Bool_Exp = {
  _and?: InputMaybe<Array<Attendance_Group_Subleaders_Bool_Exp>>;
  _not?: InputMaybe<Attendance_Group_Subleaders_Bool_Exp>;
  _or?: InputMaybe<Array<Attendance_Group_Subleaders_Bool_Exp>>;
  attendance_group?: InputMaybe<Attendance_Groups_Bool_Exp>;
  attendance_group_id?: InputMaybe<String_Comparison_Exp>;
  employee?: InputMaybe<Employees_Bool_Exp>;
  employee_id?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "attendance_group_subleaders" */
export enum Attendance_Group_Subleaders_Constraint {
  /** unique or primary key constraint on columns "employee_id", "attendance_group_id" */
  AttendanceGroupSubleadersPrimary5 = 'attendance_group_subleadersPRIMARY5'
}

/** input type for inserting data into table "attendance_group_subleaders" */
export type Attendance_Group_Subleaders_Insert_Input = {
  attendance_group?: InputMaybe<Attendance_Groups_Obj_Rel_Insert_Input>;
  attendance_group_id?: InputMaybe<Scalars['String']>;
  employee?: InputMaybe<Employees_Obj_Rel_Insert_Input>;
  employee_id?: InputMaybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Attendance_Group_Subleaders_Max_Fields = {
  __typename?: 'attendance_group_subleaders_max_fields';
  attendance_group_id?: Maybe<Scalars['String']>;
  employee_id?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "attendance_group_subleaders" */
export type Attendance_Group_Subleaders_Max_Order_By = {
  attendance_group_id?: InputMaybe<Order_By>;
  employee_id?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type Attendance_Group_Subleaders_Min_Fields = {
  __typename?: 'attendance_group_subleaders_min_fields';
  attendance_group_id?: Maybe<Scalars['String']>;
  employee_id?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "attendance_group_subleaders" */
export type Attendance_Group_Subleaders_Min_Order_By = {
  attendance_group_id?: InputMaybe<Order_By>;
  employee_id?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "attendance_group_subleaders" */
export type Attendance_Group_Subleaders_Mutation_Response = {
  __typename?: 'attendance_group_subleaders_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Attendance_Group_Subleaders>;
};

/** on_conflict condition type for table "attendance_group_subleaders" */
export type Attendance_Group_Subleaders_On_Conflict = {
  constraint: Attendance_Group_Subleaders_Constraint;
  update_columns?: Array<Attendance_Group_Subleaders_Update_Column>;
  where?: InputMaybe<Attendance_Group_Subleaders_Bool_Exp>;
};

/** Ordering options when selecting data from "attendance_group_subleaders". */
export type Attendance_Group_Subleaders_Order_By = {
  attendance_group?: InputMaybe<Attendance_Groups_Order_By>;
  attendance_group_id?: InputMaybe<Order_By>;
  employee?: InputMaybe<Employees_Order_By>;
  employee_id?: InputMaybe<Order_By>;
};

/** primary key columns input for table: attendance_group_subleaders */
export type Attendance_Group_Subleaders_Pk_Columns_Input = {
  attendance_group_id: Scalars['String'];
  employee_id: Scalars['String'];
};

/** select columns of table "attendance_group_subleaders" */
export enum Attendance_Group_Subleaders_Select_Column {
  /** column name */
  AttendanceGroupId = 'attendance_group_id',
  /** column name */
  EmployeeId = 'employee_id'
}

/** input type for updating data in table "attendance_group_subleaders" */
export type Attendance_Group_Subleaders_Set_Input = {
  attendance_group_id?: InputMaybe<Scalars['String']>;
  employee_id?: InputMaybe<Scalars['String']>;
};

/** Streaming cursor of the table "attendance_group_subleaders" */
export type Attendance_Group_Subleaders_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Attendance_Group_Subleaders_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Attendance_Group_Subleaders_Stream_Cursor_Value_Input = {
  attendance_group_id?: InputMaybe<Scalars['String']>;
  employee_id?: InputMaybe<Scalars['String']>;
};

/** update columns of table "attendance_group_subleaders" */
export enum Attendance_Group_Subleaders_Update_Column {
  /** column name */
  AttendanceGroupId = 'attendance_group_id',
  /** column name */
  EmployeeId = 'employee_id'
}

export type Attendance_Group_Subleaders_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Attendance_Group_Subleaders_Set_Input>;
  /** filter the rows which have to be updated */
  where: Attendance_Group_Subleaders_Bool_Exp;
};

/** columns and relationships of "attendance_groups" */
export type Attendance_Groups = {
  __typename?: 'attendance_groups';
  allow_out_punch?: Maybe<Scalars['smallint']>;
  allow_pc_punch?: Maybe<Scalars['smallint']>;
  /** An array relationship */
  attendance_group_leaders: Array<Attendance_Group_Leaders>;
  /** An aggregate relationship */
  attendance_group_leaders_aggregate: Attendance_Group_Leaders_Aggregate;
  /** An array relationship */
  attendance_group_shifts: Array<Attendance_Group_Shifts>;
  /** An aggregate relationship */
  attendance_group_shifts_aggregate: Attendance_Group_Shifts_Aggregate;
  /** An array relationship */
  attendance_group_subleaders: Array<Attendance_Group_Subleaders>;
  /** An aggregate relationship */
  attendance_group_subleaders_aggregate: Attendance_Group_Subleaders_Aggregate;
  /** An array relationship */
  attendance_locations: Array<Attendance_Locations>;
  /** An aggregate relationship */
  attendance_locations_aggregate: Attendance_Locations_Aggregate;
  calendar_id?: Maybe<Scalars['Int']>;
  clockIn_need_photo?: Maybe<Scalars['smallint']>;
  created_at: Scalars['timestamptz'];
  /** An array relationship */
  departments: Array<Departments>;
  /** An aggregate relationship */
  departments_aggregate: Departments_Aggregate;
  effect_time?: Maybe<Scalars['timestamp']>;
  face_punch?: Maybe<Scalars['smallint']>;
  gps_range?: Maybe<Scalars['Int']>;
  group_type?: Maybe<Scalars['Int']>;
  hide_staff_punch_time?: Maybe<Scalars['smallint']>;
  id: Scalars['String'];
  name?: Maybe<Scalars['String']>;
  out_punch_allowed_hide_addr?: Maybe<Scalars['smallint']>;
  out_punch_need_approval?: Maybe<Scalars['smallint']>;
  out_punch_need_photo?: Maybe<Scalars['smallint']>;
  out_punch_need_remark?: Maybe<Scalars['smallint']>;
  punch_type?: Maybe<Scalars['Int']>;
  rest_clockIn_need_approval?: Maybe<Scalars['smallint']>;
  show_cumulative_time?: Maybe<Scalars['smallint']>;
  show_over_time?: Maybe<Scalars['smallint']>;
  /** An object relationship */
  store?: Maybe<Stores>;
  store_id?: Maybe<Scalars['String']>;
  time_zone?: Maybe<Scalars['String']>;
  updated_at: Scalars['timestamptz'];
};


/** columns and relationships of "attendance_groups" */
export type Attendance_GroupsAttendance_Group_LeadersArgs = {
  distinct_on?: InputMaybe<Array<Attendance_Group_Leaders_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Attendance_Group_Leaders_Order_By>>;
  where?: InputMaybe<Attendance_Group_Leaders_Bool_Exp>;
};


/** columns and relationships of "attendance_groups" */
export type Attendance_GroupsAttendance_Group_Leaders_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Attendance_Group_Leaders_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Attendance_Group_Leaders_Order_By>>;
  where?: InputMaybe<Attendance_Group_Leaders_Bool_Exp>;
};


/** columns and relationships of "attendance_groups" */
export type Attendance_GroupsAttendance_Group_ShiftsArgs = {
  distinct_on?: InputMaybe<Array<Attendance_Group_Shifts_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Attendance_Group_Shifts_Order_By>>;
  where?: InputMaybe<Attendance_Group_Shifts_Bool_Exp>;
};


/** columns and relationships of "attendance_groups" */
export type Attendance_GroupsAttendance_Group_Shifts_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Attendance_Group_Shifts_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Attendance_Group_Shifts_Order_By>>;
  where?: InputMaybe<Attendance_Group_Shifts_Bool_Exp>;
};


/** columns and relationships of "attendance_groups" */
export type Attendance_GroupsAttendance_Group_SubleadersArgs = {
  distinct_on?: InputMaybe<Array<Attendance_Group_Subleaders_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Attendance_Group_Subleaders_Order_By>>;
  where?: InputMaybe<Attendance_Group_Subleaders_Bool_Exp>;
};


/** columns and relationships of "attendance_groups" */
export type Attendance_GroupsAttendance_Group_Subleaders_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Attendance_Group_Subleaders_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Attendance_Group_Subleaders_Order_By>>;
  where?: InputMaybe<Attendance_Group_Subleaders_Bool_Exp>;
};


/** columns and relationships of "attendance_groups" */
export type Attendance_GroupsAttendance_LocationsArgs = {
  distinct_on?: InputMaybe<Array<Attendance_Locations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Attendance_Locations_Order_By>>;
  where?: InputMaybe<Attendance_Locations_Bool_Exp>;
};


/** columns and relationships of "attendance_groups" */
export type Attendance_GroupsAttendance_Locations_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Attendance_Locations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Attendance_Locations_Order_By>>;
  where?: InputMaybe<Attendance_Locations_Bool_Exp>;
};


/** columns and relationships of "attendance_groups" */
export type Attendance_GroupsDepartmentsArgs = {
  distinct_on?: InputMaybe<Array<Departments_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Departments_Order_By>>;
  where?: InputMaybe<Departments_Bool_Exp>;
};


/** columns and relationships of "attendance_groups" */
export type Attendance_GroupsDepartments_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Departments_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Departments_Order_By>>;
  where?: InputMaybe<Departments_Bool_Exp>;
};

/** aggregated selection of "attendance_groups" */
export type Attendance_Groups_Aggregate = {
  __typename?: 'attendance_groups_aggregate';
  aggregate?: Maybe<Attendance_Groups_Aggregate_Fields>;
  nodes: Array<Attendance_Groups>;
};

export type Attendance_Groups_Aggregate_Bool_Exp = {
  count?: InputMaybe<Attendance_Groups_Aggregate_Bool_Exp_Count>;
};

export type Attendance_Groups_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<Attendance_Groups_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<Attendance_Groups_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "attendance_groups" */
export type Attendance_Groups_Aggregate_Fields = {
  __typename?: 'attendance_groups_aggregate_fields';
  avg?: Maybe<Attendance_Groups_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Attendance_Groups_Max_Fields>;
  min?: Maybe<Attendance_Groups_Min_Fields>;
  stddev?: Maybe<Attendance_Groups_Stddev_Fields>;
  stddev_pop?: Maybe<Attendance_Groups_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Attendance_Groups_Stddev_Samp_Fields>;
  sum?: Maybe<Attendance_Groups_Sum_Fields>;
  var_pop?: Maybe<Attendance_Groups_Var_Pop_Fields>;
  var_samp?: Maybe<Attendance_Groups_Var_Samp_Fields>;
  variance?: Maybe<Attendance_Groups_Variance_Fields>;
};


/** aggregate fields of "attendance_groups" */
export type Attendance_Groups_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Attendance_Groups_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "attendance_groups" */
export type Attendance_Groups_Aggregate_Order_By = {
  avg?: InputMaybe<Attendance_Groups_Avg_Order_By>;
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<Attendance_Groups_Max_Order_By>;
  min?: InputMaybe<Attendance_Groups_Min_Order_By>;
  stddev?: InputMaybe<Attendance_Groups_Stddev_Order_By>;
  stddev_pop?: InputMaybe<Attendance_Groups_Stddev_Pop_Order_By>;
  stddev_samp?: InputMaybe<Attendance_Groups_Stddev_Samp_Order_By>;
  sum?: InputMaybe<Attendance_Groups_Sum_Order_By>;
  var_pop?: InputMaybe<Attendance_Groups_Var_Pop_Order_By>;
  var_samp?: InputMaybe<Attendance_Groups_Var_Samp_Order_By>;
  variance?: InputMaybe<Attendance_Groups_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "attendance_groups" */
export type Attendance_Groups_Arr_Rel_Insert_Input = {
  data: Array<Attendance_Groups_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<Attendance_Groups_On_Conflict>;
};

/** aggregate avg on columns */
export type Attendance_Groups_Avg_Fields = {
  __typename?: 'attendance_groups_avg_fields';
  allow_out_punch?: Maybe<Scalars['Float']>;
  allow_pc_punch?: Maybe<Scalars['Float']>;
  calendar_id?: Maybe<Scalars['Float']>;
  clockIn_need_photo?: Maybe<Scalars['Float']>;
  face_punch?: Maybe<Scalars['Float']>;
  gps_range?: Maybe<Scalars['Float']>;
  group_type?: Maybe<Scalars['Float']>;
  hide_staff_punch_time?: Maybe<Scalars['Float']>;
  out_punch_allowed_hide_addr?: Maybe<Scalars['Float']>;
  out_punch_need_approval?: Maybe<Scalars['Float']>;
  out_punch_need_photo?: Maybe<Scalars['Float']>;
  out_punch_need_remark?: Maybe<Scalars['Float']>;
  punch_type?: Maybe<Scalars['Float']>;
  rest_clockIn_need_approval?: Maybe<Scalars['Float']>;
  show_cumulative_time?: Maybe<Scalars['Float']>;
  show_over_time?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "attendance_groups" */
export type Attendance_Groups_Avg_Order_By = {
  allow_out_punch?: InputMaybe<Order_By>;
  allow_pc_punch?: InputMaybe<Order_By>;
  calendar_id?: InputMaybe<Order_By>;
  clockIn_need_photo?: InputMaybe<Order_By>;
  face_punch?: InputMaybe<Order_By>;
  gps_range?: InputMaybe<Order_By>;
  group_type?: InputMaybe<Order_By>;
  hide_staff_punch_time?: InputMaybe<Order_By>;
  out_punch_allowed_hide_addr?: InputMaybe<Order_By>;
  out_punch_need_approval?: InputMaybe<Order_By>;
  out_punch_need_photo?: InputMaybe<Order_By>;
  out_punch_need_remark?: InputMaybe<Order_By>;
  punch_type?: InputMaybe<Order_By>;
  rest_clockIn_need_approval?: InputMaybe<Order_By>;
  show_cumulative_time?: InputMaybe<Order_By>;
  show_over_time?: InputMaybe<Order_By>;
};

/** Boolean expression to filter rows from the table "attendance_groups". All fields are combined with a logical 'AND'. */
export type Attendance_Groups_Bool_Exp = {
  _and?: InputMaybe<Array<Attendance_Groups_Bool_Exp>>;
  _not?: InputMaybe<Attendance_Groups_Bool_Exp>;
  _or?: InputMaybe<Array<Attendance_Groups_Bool_Exp>>;
  allow_out_punch?: InputMaybe<Smallint_Comparison_Exp>;
  allow_pc_punch?: InputMaybe<Smallint_Comparison_Exp>;
  attendance_group_leaders?: InputMaybe<Attendance_Group_Leaders_Bool_Exp>;
  attendance_group_leaders_aggregate?: InputMaybe<Attendance_Group_Leaders_Aggregate_Bool_Exp>;
  attendance_group_shifts?: InputMaybe<Attendance_Group_Shifts_Bool_Exp>;
  attendance_group_shifts_aggregate?: InputMaybe<Attendance_Group_Shifts_Aggregate_Bool_Exp>;
  attendance_group_subleaders?: InputMaybe<Attendance_Group_Subleaders_Bool_Exp>;
  attendance_group_subleaders_aggregate?: InputMaybe<Attendance_Group_Subleaders_Aggregate_Bool_Exp>;
  attendance_locations?: InputMaybe<Attendance_Locations_Bool_Exp>;
  attendance_locations_aggregate?: InputMaybe<Attendance_Locations_Aggregate_Bool_Exp>;
  calendar_id?: InputMaybe<Int_Comparison_Exp>;
  clockIn_need_photo?: InputMaybe<Smallint_Comparison_Exp>;
  created_at?: InputMaybe<Timestamptz_Comparison_Exp>;
  departments?: InputMaybe<Departments_Bool_Exp>;
  departments_aggregate?: InputMaybe<Departments_Aggregate_Bool_Exp>;
  effect_time?: InputMaybe<Timestamp_Comparison_Exp>;
  face_punch?: InputMaybe<Smallint_Comparison_Exp>;
  gps_range?: InputMaybe<Int_Comparison_Exp>;
  group_type?: InputMaybe<Int_Comparison_Exp>;
  hide_staff_punch_time?: InputMaybe<Smallint_Comparison_Exp>;
  id?: InputMaybe<String_Comparison_Exp>;
  name?: InputMaybe<String_Comparison_Exp>;
  out_punch_allowed_hide_addr?: InputMaybe<Smallint_Comparison_Exp>;
  out_punch_need_approval?: InputMaybe<Smallint_Comparison_Exp>;
  out_punch_need_photo?: InputMaybe<Smallint_Comparison_Exp>;
  out_punch_need_remark?: InputMaybe<Smallint_Comparison_Exp>;
  punch_type?: InputMaybe<Int_Comparison_Exp>;
  rest_clockIn_need_approval?: InputMaybe<Smallint_Comparison_Exp>;
  show_cumulative_time?: InputMaybe<Smallint_Comparison_Exp>;
  show_over_time?: InputMaybe<Smallint_Comparison_Exp>;
  store?: InputMaybe<Stores_Bool_Exp>;
  store_id?: InputMaybe<String_Comparison_Exp>;
  time_zone?: InputMaybe<String_Comparison_Exp>;
  updated_at?: InputMaybe<Timestamptz_Comparison_Exp>;
};

/** unique or primary key constraints on table "attendance_groups" */
export enum Attendance_Groups_Constraint {
  /** unique or primary key constraint on columns "id" */
  AttendanceGroupsPrimary6 = 'attendance_groupsPRIMARY6',
  /** unique or primary key constraint on columns "name" */
  UkName15 = 'uk_name15'
}

/** input type for incrementing numeric columns in table "attendance_groups" */
export type Attendance_Groups_Inc_Input = {
  allow_out_punch?: InputMaybe<Scalars['smallint']>;
  allow_pc_punch?: InputMaybe<Scalars['smallint']>;
  calendar_id?: InputMaybe<Scalars['Int']>;
  clockIn_need_photo?: InputMaybe<Scalars['smallint']>;
  face_punch?: InputMaybe<Scalars['smallint']>;
  gps_range?: InputMaybe<Scalars['Int']>;
  group_type?: InputMaybe<Scalars['Int']>;
  hide_staff_punch_time?: InputMaybe<Scalars['smallint']>;
  out_punch_allowed_hide_addr?: InputMaybe<Scalars['smallint']>;
  out_punch_need_approval?: InputMaybe<Scalars['smallint']>;
  out_punch_need_photo?: InputMaybe<Scalars['smallint']>;
  out_punch_need_remark?: InputMaybe<Scalars['smallint']>;
  punch_type?: InputMaybe<Scalars['Int']>;
  rest_clockIn_need_approval?: InputMaybe<Scalars['smallint']>;
  show_cumulative_time?: InputMaybe<Scalars['smallint']>;
  show_over_time?: InputMaybe<Scalars['smallint']>;
};

/** input type for inserting data into table "attendance_groups" */
export type Attendance_Groups_Insert_Input = {
  allow_out_punch?: InputMaybe<Scalars['smallint']>;
  allow_pc_punch?: InputMaybe<Scalars['smallint']>;
  attendance_group_leaders?: InputMaybe<Attendance_Group_Leaders_Arr_Rel_Insert_Input>;
  attendance_group_shifts?: InputMaybe<Attendance_Group_Shifts_Arr_Rel_Insert_Input>;
  attendance_group_subleaders?: InputMaybe<Attendance_Group_Subleaders_Arr_Rel_Insert_Input>;
  attendance_locations?: InputMaybe<Attendance_Locations_Arr_Rel_Insert_Input>;
  calendar_id?: InputMaybe<Scalars['Int']>;
  clockIn_need_photo?: InputMaybe<Scalars['smallint']>;
  created_at?: InputMaybe<Scalars['timestamptz']>;
  departments?: InputMaybe<Departments_Arr_Rel_Insert_Input>;
  effect_time?: InputMaybe<Scalars['timestamp']>;
  face_punch?: InputMaybe<Scalars['smallint']>;
  gps_range?: InputMaybe<Scalars['Int']>;
  group_type?: InputMaybe<Scalars['Int']>;
  hide_staff_punch_time?: InputMaybe<Scalars['smallint']>;
  id?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  out_punch_allowed_hide_addr?: InputMaybe<Scalars['smallint']>;
  out_punch_need_approval?: InputMaybe<Scalars['smallint']>;
  out_punch_need_photo?: InputMaybe<Scalars['smallint']>;
  out_punch_need_remark?: InputMaybe<Scalars['smallint']>;
  punch_type?: InputMaybe<Scalars['Int']>;
  rest_clockIn_need_approval?: InputMaybe<Scalars['smallint']>;
  show_cumulative_time?: InputMaybe<Scalars['smallint']>;
  show_over_time?: InputMaybe<Scalars['smallint']>;
  store?: InputMaybe<Stores_Obj_Rel_Insert_Input>;
  store_id?: InputMaybe<Scalars['String']>;
  time_zone?: InputMaybe<Scalars['String']>;
  updated_at?: InputMaybe<Scalars['timestamptz']>;
};

/** aggregate max on columns */
export type Attendance_Groups_Max_Fields = {
  __typename?: 'attendance_groups_max_fields';
  allow_out_punch?: Maybe<Scalars['smallint']>;
  allow_pc_punch?: Maybe<Scalars['smallint']>;
  calendar_id?: Maybe<Scalars['Int']>;
  clockIn_need_photo?: Maybe<Scalars['smallint']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  effect_time?: Maybe<Scalars['timestamp']>;
  face_punch?: Maybe<Scalars['smallint']>;
  gps_range?: Maybe<Scalars['Int']>;
  group_type?: Maybe<Scalars['Int']>;
  hide_staff_punch_time?: Maybe<Scalars['smallint']>;
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  out_punch_allowed_hide_addr?: Maybe<Scalars['smallint']>;
  out_punch_need_approval?: Maybe<Scalars['smallint']>;
  out_punch_need_photo?: Maybe<Scalars['smallint']>;
  out_punch_need_remark?: Maybe<Scalars['smallint']>;
  punch_type?: Maybe<Scalars['Int']>;
  rest_clockIn_need_approval?: Maybe<Scalars['smallint']>;
  show_cumulative_time?: Maybe<Scalars['smallint']>;
  show_over_time?: Maybe<Scalars['smallint']>;
  store_id?: Maybe<Scalars['String']>;
  time_zone?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** order by max() on columns of table "attendance_groups" */
export type Attendance_Groups_Max_Order_By = {
  allow_out_punch?: InputMaybe<Order_By>;
  allow_pc_punch?: InputMaybe<Order_By>;
  calendar_id?: InputMaybe<Order_By>;
  clockIn_need_photo?: InputMaybe<Order_By>;
  created_at?: InputMaybe<Order_By>;
  effect_time?: InputMaybe<Order_By>;
  face_punch?: InputMaybe<Order_By>;
  gps_range?: InputMaybe<Order_By>;
  group_type?: InputMaybe<Order_By>;
  hide_staff_punch_time?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  name?: InputMaybe<Order_By>;
  out_punch_allowed_hide_addr?: InputMaybe<Order_By>;
  out_punch_need_approval?: InputMaybe<Order_By>;
  out_punch_need_photo?: InputMaybe<Order_By>;
  out_punch_need_remark?: InputMaybe<Order_By>;
  punch_type?: InputMaybe<Order_By>;
  rest_clockIn_need_approval?: InputMaybe<Order_By>;
  show_cumulative_time?: InputMaybe<Order_By>;
  show_over_time?: InputMaybe<Order_By>;
  store_id?: InputMaybe<Order_By>;
  time_zone?: InputMaybe<Order_By>;
  updated_at?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type Attendance_Groups_Min_Fields = {
  __typename?: 'attendance_groups_min_fields';
  allow_out_punch?: Maybe<Scalars['smallint']>;
  allow_pc_punch?: Maybe<Scalars['smallint']>;
  calendar_id?: Maybe<Scalars['Int']>;
  clockIn_need_photo?: Maybe<Scalars['smallint']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  effect_time?: Maybe<Scalars['timestamp']>;
  face_punch?: Maybe<Scalars['smallint']>;
  gps_range?: Maybe<Scalars['Int']>;
  group_type?: Maybe<Scalars['Int']>;
  hide_staff_punch_time?: Maybe<Scalars['smallint']>;
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  out_punch_allowed_hide_addr?: Maybe<Scalars['smallint']>;
  out_punch_need_approval?: Maybe<Scalars['smallint']>;
  out_punch_need_photo?: Maybe<Scalars['smallint']>;
  out_punch_need_remark?: Maybe<Scalars['smallint']>;
  punch_type?: Maybe<Scalars['Int']>;
  rest_clockIn_need_approval?: Maybe<Scalars['smallint']>;
  show_cumulative_time?: Maybe<Scalars['smallint']>;
  show_over_time?: Maybe<Scalars['smallint']>;
  store_id?: Maybe<Scalars['String']>;
  time_zone?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** order by min() on columns of table "attendance_groups" */
export type Attendance_Groups_Min_Order_By = {
  allow_out_punch?: InputMaybe<Order_By>;
  allow_pc_punch?: InputMaybe<Order_By>;
  calendar_id?: InputMaybe<Order_By>;
  clockIn_need_photo?: InputMaybe<Order_By>;
  created_at?: InputMaybe<Order_By>;
  effect_time?: InputMaybe<Order_By>;
  face_punch?: InputMaybe<Order_By>;
  gps_range?: InputMaybe<Order_By>;
  group_type?: InputMaybe<Order_By>;
  hide_staff_punch_time?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  name?: InputMaybe<Order_By>;
  out_punch_allowed_hide_addr?: InputMaybe<Order_By>;
  out_punch_need_approval?: InputMaybe<Order_By>;
  out_punch_need_photo?: InputMaybe<Order_By>;
  out_punch_need_remark?: InputMaybe<Order_By>;
  punch_type?: InputMaybe<Order_By>;
  rest_clockIn_need_approval?: InputMaybe<Order_By>;
  show_cumulative_time?: InputMaybe<Order_By>;
  show_over_time?: InputMaybe<Order_By>;
  store_id?: InputMaybe<Order_By>;
  time_zone?: InputMaybe<Order_By>;
  updated_at?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "attendance_groups" */
export type Attendance_Groups_Mutation_Response = {
  __typename?: 'attendance_groups_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Attendance_Groups>;
};

/** input type for inserting object relation for remote table "attendance_groups" */
export type Attendance_Groups_Obj_Rel_Insert_Input = {
  data: Attendance_Groups_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<Attendance_Groups_On_Conflict>;
};

/** on_conflict condition type for table "attendance_groups" */
export type Attendance_Groups_On_Conflict = {
  constraint: Attendance_Groups_Constraint;
  update_columns?: Array<Attendance_Groups_Update_Column>;
  where?: InputMaybe<Attendance_Groups_Bool_Exp>;
};

/** Ordering options when selecting data from "attendance_groups". */
export type Attendance_Groups_Order_By = {
  allow_out_punch?: InputMaybe<Order_By>;
  allow_pc_punch?: InputMaybe<Order_By>;
  attendance_group_leaders_aggregate?: InputMaybe<Attendance_Group_Leaders_Aggregate_Order_By>;
  attendance_group_shifts_aggregate?: InputMaybe<Attendance_Group_Shifts_Aggregate_Order_By>;
  attendance_group_subleaders_aggregate?: InputMaybe<Attendance_Group_Subleaders_Aggregate_Order_By>;
  attendance_locations_aggregate?: InputMaybe<Attendance_Locations_Aggregate_Order_By>;
  calendar_id?: InputMaybe<Order_By>;
  clockIn_need_photo?: InputMaybe<Order_By>;
  created_at?: InputMaybe<Order_By>;
  departments_aggregate?: InputMaybe<Departments_Aggregate_Order_By>;
  effect_time?: InputMaybe<Order_By>;
  face_punch?: InputMaybe<Order_By>;
  gps_range?: InputMaybe<Order_By>;
  group_type?: InputMaybe<Order_By>;
  hide_staff_punch_time?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  name?: InputMaybe<Order_By>;
  out_punch_allowed_hide_addr?: InputMaybe<Order_By>;
  out_punch_need_approval?: InputMaybe<Order_By>;
  out_punch_need_photo?: InputMaybe<Order_By>;
  out_punch_need_remark?: InputMaybe<Order_By>;
  punch_type?: InputMaybe<Order_By>;
  rest_clockIn_need_approval?: InputMaybe<Order_By>;
  show_cumulative_time?: InputMaybe<Order_By>;
  show_over_time?: InputMaybe<Order_By>;
  store?: InputMaybe<Stores_Order_By>;
  store_id?: InputMaybe<Order_By>;
  time_zone?: InputMaybe<Order_By>;
  updated_at?: InputMaybe<Order_By>;
};

/** primary key columns input for table: attendance_groups */
export type Attendance_Groups_Pk_Columns_Input = {
  id: Scalars['String'];
};

/** select columns of table "attendance_groups" */
export enum Attendance_Groups_Select_Column {
  /** column name */
  AllowOutPunch = 'allow_out_punch',
  /** column name */
  AllowPcPunch = 'allow_pc_punch',
  /** column name */
  CalendarId = 'calendar_id',
  /** column name */
  ClockInNeedPhoto = 'clockIn_need_photo',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  EffectTime = 'effect_time',
  /** column name */
  FacePunch = 'face_punch',
  /** column name */
  GpsRange = 'gps_range',
  /** column name */
  GroupType = 'group_type',
  /** column name */
  HideStaffPunchTime = 'hide_staff_punch_time',
  /** column name */
  Id = 'id',
  /** column name */
  Name = 'name',
  /** column name */
  OutPunchAllowedHideAddr = 'out_punch_allowed_hide_addr',
  /** column name */
  OutPunchNeedApproval = 'out_punch_need_approval',
  /** column name */
  OutPunchNeedPhoto = 'out_punch_need_photo',
  /** column name */
  OutPunchNeedRemark = 'out_punch_need_remark',
  /** column name */
  PunchType = 'punch_type',
  /** column name */
  RestClockInNeedApproval = 'rest_clockIn_need_approval',
  /** column name */
  ShowCumulativeTime = 'show_cumulative_time',
  /** column name */
  ShowOverTime = 'show_over_time',
  /** column name */
  StoreId = 'store_id',
  /** column name */
  TimeZone = 'time_zone',
  /** column name */
  UpdatedAt = 'updated_at'
}

/** input type for updating data in table "attendance_groups" */
export type Attendance_Groups_Set_Input = {
  allow_out_punch?: InputMaybe<Scalars['smallint']>;
  allow_pc_punch?: InputMaybe<Scalars['smallint']>;
  calendar_id?: InputMaybe<Scalars['Int']>;
  clockIn_need_photo?: InputMaybe<Scalars['smallint']>;
  created_at?: InputMaybe<Scalars['timestamptz']>;
  effect_time?: InputMaybe<Scalars['timestamp']>;
  face_punch?: InputMaybe<Scalars['smallint']>;
  gps_range?: InputMaybe<Scalars['Int']>;
  group_type?: InputMaybe<Scalars['Int']>;
  hide_staff_punch_time?: InputMaybe<Scalars['smallint']>;
  id?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  out_punch_allowed_hide_addr?: InputMaybe<Scalars['smallint']>;
  out_punch_need_approval?: InputMaybe<Scalars['smallint']>;
  out_punch_need_photo?: InputMaybe<Scalars['smallint']>;
  out_punch_need_remark?: InputMaybe<Scalars['smallint']>;
  punch_type?: InputMaybe<Scalars['Int']>;
  rest_clockIn_need_approval?: InputMaybe<Scalars['smallint']>;
  show_cumulative_time?: InputMaybe<Scalars['smallint']>;
  show_over_time?: InputMaybe<Scalars['smallint']>;
  store_id?: InputMaybe<Scalars['String']>;
  time_zone?: InputMaybe<Scalars['String']>;
  updated_at?: InputMaybe<Scalars['timestamptz']>;
};

/** aggregate stddev on columns */
export type Attendance_Groups_Stddev_Fields = {
  __typename?: 'attendance_groups_stddev_fields';
  allow_out_punch?: Maybe<Scalars['Float']>;
  allow_pc_punch?: Maybe<Scalars['Float']>;
  calendar_id?: Maybe<Scalars['Float']>;
  clockIn_need_photo?: Maybe<Scalars['Float']>;
  face_punch?: Maybe<Scalars['Float']>;
  gps_range?: Maybe<Scalars['Float']>;
  group_type?: Maybe<Scalars['Float']>;
  hide_staff_punch_time?: Maybe<Scalars['Float']>;
  out_punch_allowed_hide_addr?: Maybe<Scalars['Float']>;
  out_punch_need_approval?: Maybe<Scalars['Float']>;
  out_punch_need_photo?: Maybe<Scalars['Float']>;
  out_punch_need_remark?: Maybe<Scalars['Float']>;
  punch_type?: Maybe<Scalars['Float']>;
  rest_clockIn_need_approval?: Maybe<Scalars['Float']>;
  show_cumulative_time?: Maybe<Scalars['Float']>;
  show_over_time?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "attendance_groups" */
export type Attendance_Groups_Stddev_Order_By = {
  allow_out_punch?: InputMaybe<Order_By>;
  allow_pc_punch?: InputMaybe<Order_By>;
  calendar_id?: InputMaybe<Order_By>;
  clockIn_need_photo?: InputMaybe<Order_By>;
  face_punch?: InputMaybe<Order_By>;
  gps_range?: InputMaybe<Order_By>;
  group_type?: InputMaybe<Order_By>;
  hide_staff_punch_time?: InputMaybe<Order_By>;
  out_punch_allowed_hide_addr?: InputMaybe<Order_By>;
  out_punch_need_approval?: InputMaybe<Order_By>;
  out_punch_need_photo?: InputMaybe<Order_By>;
  out_punch_need_remark?: InputMaybe<Order_By>;
  punch_type?: InputMaybe<Order_By>;
  rest_clockIn_need_approval?: InputMaybe<Order_By>;
  show_cumulative_time?: InputMaybe<Order_By>;
  show_over_time?: InputMaybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Attendance_Groups_Stddev_Pop_Fields = {
  __typename?: 'attendance_groups_stddev_pop_fields';
  allow_out_punch?: Maybe<Scalars['Float']>;
  allow_pc_punch?: Maybe<Scalars['Float']>;
  calendar_id?: Maybe<Scalars['Float']>;
  clockIn_need_photo?: Maybe<Scalars['Float']>;
  face_punch?: Maybe<Scalars['Float']>;
  gps_range?: Maybe<Scalars['Float']>;
  group_type?: Maybe<Scalars['Float']>;
  hide_staff_punch_time?: Maybe<Scalars['Float']>;
  out_punch_allowed_hide_addr?: Maybe<Scalars['Float']>;
  out_punch_need_approval?: Maybe<Scalars['Float']>;
  out_punch_need_photo?: Maybe<Scalars['Float']>;
  out_punch_need_remark?: Maybe<Scalars['Float']>;
  punch_type?: Maybe<Scalars['Float']>;
  rest_clockIn_need_approval?: Maybe<Scalars['Float']>;
  show_cumulative_time?: Maybe<Scalars['Float']>;
  show_over_time?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "attendance_groups" */
export type Attendance_Groups_Stddev_Pop_Order_By = {
  allow_out_punch?: InputMaybe<Order_By>;
  allow_pc_punch?: InputMaybe<Order_By>;
  calendar_id?: InputMaybe<Order_By>;
  clockIn_need_photo?: InputMaybe<Order_By>;
  face_punch?: InputMaybe<Order_By>;
  gps_range?: InputMaybe<Order_By>;
  group_type?: InputMaybe<Order_By>;
  hide_staff_punch_time?: InputMaybe<Order_By>;
  out_punch_allowed_hide_addr?: InputMaybe<Order_By>;
  out_punch_need_approval?: InputMaybe<Order_By>;
  out_punch_need_photo?: InputMaybe<Order_By>;
  out_punch_need_remark?: InputMaybe<Order_By>;
  punch_type?: InputMaybe<Order_By>;
  rest_clockIn_need_approval?: InputMaybe<Order_By>;
  show_cumulative_time?: InputMaybe<Order_By>;
  show_over_time?: InputMaybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Attendance_Groups_Stddev_Samp_Fields = {
  __typename?: 'attendance_groups_stddev_samp_fields';
  allow_out_punch?: Maybe<Scalars['Float']>;
  allow_pc_punch?: Maybe<Scalars['Float']>;
  calendar_id?: Maybe<Scalars['Float']>;
  clockIn_need_photo?: Maybe<Scalars['Float']>;
  face_punch?: Maybe<Scalars['Float']>;
  gps_range?: Maybe<Scalars['Float']>;
  group_type?: Maybe<Scalars['Float']>;
  hide_staff_punch_time?: Maybe<Scalars['Float']>;
  out_punch_allowed_hide_addr?: Maybe<Scalars['Float']>;
  out_punch_need_approval?: Maybe<Scalars['Float']>;
  out_punch_need_photo?: Maybe<Scalars['Float']>;
  out_punch_need_remark?: Maybe<Scalars['Float']>;
  punch_type?: Maybe<Scalars['Float']>;
  rest_clockIn_need_approval?: Maybe<Scalars['Float']>;
  show_cumulative_time?: Maybe<Scalars['Float']>;
  show_over_time?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "attendance_groups" */
export type Attendance_Groups_Stddev_Samp_Order_By = {
  allow_out_punch?: InputMaybe<Order_By>;
  allow_pc_punch?: InputMaybe<Order_By>;
  calendar_id?: InputMaybe<Order_By>;
  clockIn_need_photo?: InputMaybe<Order_By>;
  face_punch?: InputMaybe<Order_By>;
  gps_range?: InputMaybe<Order_By>;
  group_type?: InputMaybe<Order_By>;
  hide_staff_punch_time?: InputMaybe<Order_By>;
  out_punch_allowed_hide_addr?: InputMaybe<Order_By>;
  out_punch_need_approval?: InputMaybe<Order_By>;
  out_punch_need_photo?: InputMaybe<Order_By>;
  out_punch_need_remark?: InputMaybe<Order_By>;
  punch_type?: InputMaybe<Order_By>;
  rest_clockIn_need_approval?: InputMaybe<Order_By>;
  show_cumulative_time?: InputMaybe<Order_By>;
  show_over_time?: InputMaybe<Order_By>;
};

/** Streaming cursor of the table "attendance_groups" */
export type Attendance_Groups_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Attendance_Groups_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Attendance_Groups_Stream_Cursor_Value_Input = {
  allow_out_punch?: InputMaybe<Scalars['smallint']>;
  allow_pc_punch?: InputMaybe<Scalars['smallint']>;
  calendar_id?: InputMaybe<Scalars['Int']>;
  clockIn_need_photo?: InputMaybe<Scalars['smallint']>;
  created_at?: InputMaybe<Scalars['timestamptz']>;
  effect_time?: InputMaybe<Scalars['timestamp']>;
  face_punch?: InputMaybe<Scalars['smallint']>;
  gps_range?: InputMaybe<Scalars['Int']>;
  group_type?: InputMaybe<Scalars['Int']>;
  hide_staff_punch_time?: InputMaybe<Scalars['smallint']>;
  id?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  out_punch_allowed_hide_addr?: InputMaybe<Scalars['smallint']>;
  out_punch_need_approval?: InputMaybe<Scalars['smallint']>;
  out_punch_need_photo?: InputMaybe<Scalars['smallint']>;
  out_punch_need_remark?: InputMaybe<Scalars['smallint']>;
  punch_type?: InputMaybe<Scalars['Int']>;
  rest_clockIn_need_approval?: InputMaybe<Scalars['smallint']>;
  show_cumulative_time?: InputMaybe<Scalars['smallint']>;
  show_over_time?: InputMaybe<Scalars['smallint']>;
  store_id?: InputMaybe<Scalars['String']>;
  time_zone?: InputMaybe<Scalars['String']>;
  updated_at?: InputMaybe<Scalars['timestamptz']>;
};

/** aggregate sum on columns */
export type Attendance_Groups_Sum_Fields = {
  __typename?: 'attendance_groups_sum_fields';
  allow_out_punch?: Maybe<Scalars['smallint']>;
  allow_pc_punch?: Maybe<Scalars['smallint']>;
  calendar_id?: Maybe<Scalars['Int']>;
  clockIn_need_photo?: Maybe<Scalars['smallint']>;
  face_punch?: Maybe<Scalars['smallint']>;
  gps_range?: Maybe<Scalars['Int']>;
  group_type?: Maybe<Scalars['Int']>;
  hide_staff_punch_time?: Maybe<Scalars['smallint']>;
  out_punch_allowed_hide_addr?: Maybe<Scalars['smallint']>;
  out_punch_need_approval?: Maybe<Scalars['smallint']>;
  out_punch_need_photo?: Maybe<Scalars['smallint']>;
  out_punch_need_remark?: Maybe<Scalars['smallint']>;
  punch_type?: Maybe<Scalars['Int']>;
  rest_clockIn_need_approval?: Maybe<Scalars['smallint']>;
  show_cumulative_time?: Maybe<Scalars['smallint']>;
  show_over_time?: Maybe<Scalars['smallint']>;
};

/** order by sum() on columns of table "attendance_groups" */
export type Attendance_Groups_Sum_Order_By = {
  allow_out_punch?: InputMaybe<Order_By>;
  allow_pc_punch?: InputMaybe<Order_By>;
  calendar_id?: InputMaybe<Order_By>;
  clockIn_need_photo?: InputMaybe<Order_By>;
  face_punch?: InputMaybe<Order_By>;
  gps_range?: InputMaybe<Order_By>;
  group_type?: InputMaybe<Order_By>;
  hide_staff_punch_time?: InputMaybe<Order_By>;
  out_punch_allowed_hide_addr?: InputMaybe<Order_By>;
  out_punch_need_approval?: InputMaybe<Order_By>;
  out_punch_need_photo?: InputMaybe<Order_By>;
  out_punch_need_remark?: InputMaybe<Order_By>;
  punch_type?: InputMaybe<Order_By>;
  rest_clockIn_need_approval?: InputMaybe<Order_By>;
  show_cumulative_time?: InputMaybe<Order_By>;
  show_over_time?: InputMaybe<Order_By>;
};

/** update columns of table "attendance_groups" */
export enum Attendance_Groups_Update_Column {
  /** column name */
  AllowOutPunch = 'allow_out_punch',
  /** column name */
  AllowPcPunch = 'allow_pc_punch',
  /** column name */
  CalendarId = 'calendar_id',
  /** column name */
  ClockInNeedPhoto = 'clockIn_need_photo',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  EffectTime = 'effect_time',
  /** column name */
  FacePunch = 'face_punch',
  /** column name */
  GpsRange = 'gps_range',
  /** column name */
  GroupType = 'group_type',
  /** column name */
  HideStaffPunchTime = 'hide_staff_punch_time',
  /** column name */
  Id = 'id',
  /** column name */
  Name = 'name',
  /** column name */
  OutPunchAllowedHideAddr = 'out_punch_allowed_hide_addr',
  /** column name */
  OutPunchNeedApproval = 'out_punch_need_approval',
  /** column name */
  OutPunchNeedPhoto = 'out_punch_need_photo',
  /** column name */
  OutPunchNeedRemark = 'out_punch_need_remark',
  /** column name */
  PunchType = 'punch_type',
  /** column name */
  RestClockInNeedApproval = 'rest_clockIn_need_approval',
  /** column name */
  ShowCumulativeTime = 'show_cumulative_time',
  /** column name */
  ShowOverTime = 'show_over_time',
  /** column name */
  StoreId = 'store_id',
  /** column name */
  TimeZone = 'time_zone',
  /** column name */
  UpdatedAt = 'updated_at'
}

export type Attendance_Groups_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: InputMaybe<Attendance_Groups_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Attendance_Groups_Set_Input>;
  /** filter the rows which have to be updated */
  where: Attendance_Groups_Bool_Exp;
};

/** aggregate var_pop on columns */
export type Attendance_Groups_Var_Pop_Fields = {
  __typename?: 'attendance_groups_var_pop_fields';
  allow_out_punch?: Maybe<Scalars['Float']>;
  allow_pc_punch?: Maybe<Scalars['Float']>;
  calendar_id?: Maybe<Scalars['Float']>;
  clockIn_need_photo?: Maybe<Scalars['Float']>;
  face_punch?: Maybe<Scalars['Float']>;
  gps_range?: Maybe<Scalars['Float']>;
  group_type?: Maybe<Scalars['Float']>;
  hide_staff_punch_time?: Maybe<Scalars['Float']>;
  out_punch_allowed_hide_addr?: Maybe<Scalars['Float']>;
  out_punch_need_approval?: Maybe<Scalars['Float']>;
  out_punch_need_photo?: Maybe<Scalars['Float']>;
  out_punch_need_remark?: Maybe<Scalars['Float']>;
  punch_type?: Maybe<Scalars['Float']>;
  rest_clockIn_need_approval?: Maybe<Scalars['Float']>;
  show_cumulative_time?: Maybe<Scalars['Float']>;
  show_over_time?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "attendance_groups" */
export type Attendance_Groups_Var_Pop_Order_By = {
  allow_out_punch?: InputMaybe<Order_By>;
  allow_pc_punch?: InputMaybe<Order_By>;
  calendar_id?: InputMaybe<Order_By>;
  clockIn_need_photo?: InputMaybe<Order_By>;
  face_punch?: InputMaybe<Order_By>;
  gps_range?: InputMaybe<Order_By>;
  group_type?: InputMaybe<Order_By>;
  hide_staff_punch_time?: InputMaybe<Order_By>;
  out_punch_allowed_hide_addr?: InputMaybe<Order_By>;
  out_punch_need_approval?: InputMaybe<Order_By>;
  out_punch_need_photo?: InputMaybe<Order_By>;
  out_punch_need_remark?: InputMaybe<Order_By>;
  punch_type?: InputMaybe<Order_By>;
  rest_clockIn_need_approval?: InputMaybe<Order_By>;
  show_cumulative_time?: InputMaybe<Order_By>;
  show_over_time?: InputMaybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Attendance_Groups_Var_Samp_Fields = {
  __typename?: 'attendance_groups_var_samp_fields';
  allow_out_punch?: Maybe<Scalars['Float']>;
  allow_pc_punch?: Maybe<Scalars['Float']>;
  calendar_id?: Maybe<Scalars['Float']>;
  clockIn_need_photo?: Maybe<Scalars['Float']>;
  face_punch?: Maybe<Scalars['Float']>;
  gps_range?: Maybe<Scalars['Float']>;
  group_type?: Maybe<Scalars['Float']>;
  hide_staff_punch_time?: Maybe<Scalars['Float']>;
  out_punch_allowed_hide_addr?: Maybe<Scalars['Float']>;
  out_punch_need_approval?: Maybe<Scalars['Float']>;
  out_punch_need_photo?: Maybe<Scalars['Float']>;
  out_punch_need_remark?: Maybe<Scalars['Float']>;
  punch_type?: Maybe<Scalars['Float']>;
  rest_clockIn_need_approval?: Maybe<Scalars['Float']>;
  show_cumulative_time?: Maybe<Scalars['Float']>;
  show_over_time?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "attendance_groups" */
export type Attendance_Groups_Var_Samp_Order_By = {
  allow_out_punch?: InputMaybe<Order_By>;
  allow_pc_punch?: InputMaybe<Order_By>;
  calendar_id?: InputMaybe<Order_By>;
  clockIn_need_photo?: InputMaybe<Order_By>;
  face_punch?: InputMaybe<Order_By>;
  gps_range?: InputMaybe<Order_By>;
  group_type?: InputMaybe<Order_By>;
  hide_staff_punch_time?: InputMaybe<Order_By>;
  out_punch_allowed_hide_addr?: InputMaybe<Order_By>;
  out_punch_need_approval?: InputMaybe<Order_By>;
  out_punch_need_photo?: InputMaybe<Order_By>;
  out_punch_need_remark?: InputMaybe<Order_By>;
  punch_type?: InputMaybe<Order_By>;
  rest_clockIn_need_approval?: InputMaybe<Order_By>;
  show_cumulative_time?: InputMaybe<Order_By>;
  show_over_time?: InputMaybe<Order_By>;
};

/** aggregate variance on columns */
export type Attendance_Groups_Variance_Fields = {
  __typename?: 'attendance_groups_variance_fields';
  allow_out_punch?: Maybe<Scalars['Float']>;
  allow_pc_punch?: Maybe<Scalars['Float']>;
  calendar_id?: Maybe<Scalars['Float']>;
  clockIn_need_photo?: Maybe<Scalars['Float']>;
  face_punch?: Maybe<Scalars['Float']>;
  gps_range?: Maybe<Scalars['Float']>;
  group_type?: Maybe<Scalars['Float']>;
  hide_staff_punch_time?: Maybe<Scalars['Float']>;
  out_punch_allowed_hide_addr?: Maybe<Scalars['Float']>;
  out_punch_need_approval?: Maybe<Scalars['Float']>;
  out_punch_need_photo?: Maybe<Scalars['Float']>;
  out_punch_need_remark?: Maybe<Scalars['Float']>;
  punch_type?: Maybe<Scalars['Float']>;
  rest_clockIn_need_approval?: Maybe<Scalars['Float']>;
  show_cumulative_time?: Maybe<Scalars['Float']>;
  show_over_time?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "attendance_groups" */
export type Attendance_Groups_Variance_Order_By = {
  allow_out_punch?: InputMaybe<Order_By>;
  allow_pc_punch?: InputMaybe<Order_By>;
  calendar_id?: InputMaybe<Order_By>;
  clockIn_need_photo?: InputMaybe<Order_By>;
  face_punch?: InputMaybe<Order_By>;
  gps_range?: InputMaybe<Order_By>;
  group_type?: InputMaybe<Order_By>;
  hide_staff_punch_time?: InputMaybe<Order_By>;
  out_punch_allowed_hide_addr?: InputMaybe<Order_By>;
  out_punch_need_approval?: InputMaybe<Order_By>;
  out_punch_need_photo?: InputMaybe<Order_By>;
  out_punch_need_remark?: InputMaybe<Order_By>;
  punch_type?: InputMaybe<Order_By>;
  rest_clockIn_need_approval?: InputMaybe<Order_By>;
  show_cumulative_time?: InputMaybe<Order_By>;
  show_over_time?: InputMaybe<Order_By>;
};

/** input type for incrementing numeric columns in table "attendance" */
export type Attendance_Inc_Input = {
  clock_in_result?: InputMaybe<Scalars['Int']>;
  clock_out_result?: InputMaybe<Scalars['Int']>;
  hours_of_attendance?: InputMaybe<Scalars['Float']>;
};

/** input type for inserting data into table "attendance" */
export type Attendance_Insert_Input = {
  attendanceLocationByClockInLocationId?: InputMaybe<Attendance_Locations_Obj_Rel_Insert_Input>;
  attendanceLocationByClockOutLocationId?: InputMaybe<Attendance_Locations_Obj_Rel_Insert_Input>;
  attendance_location?: InputMaybe<Attendance_Locations_Obj_Rel_Insert_Input>;
  attendance_location_id?: InputMaybe<Scalars['String']>;
  clock_in_location_id?: InputMaybe<Scalars['String']>;
  clock_in_result?: InputMaybe<Scalars['Int']>;
  clock_in_time?: InputMaybe<Scalars['time']>;
  clock_out_location_id?: InputMaybe<Scalars['String']>;
  clock_out_result?: InputMaybe<Scalars['Int']>;
  clock_out_time?: InputMaybe<Scalars['time']>;
  date?: InputMaybe<Scalars['date']>;
  department?: InputMaybe<Departments_Obj_Rel_Insert_Input>;
  department_id?: InputMaybe<Scalars['String']>;
  employee?: InputMaybe<Employees_Obj_Rel_Insert_Input>;
  employee_id?: InputMaybe<Scalars['String']>;
  hours_of_attendance?: InputMaybe<Scalars['Float']>;
  id?: InputMaybe<Scalars['String']>;
  shift_id?: InputMaybe<Scalars['String']>;
  shift_list?: InputMaybe<Shift_Lists_Obj_Rel_Insert_Input>;
};

/** columns and relationships of "attendance_locations" */
export type Attendance_Locations = {
  __typename?: 'attendance_locations';
  address?: Maybe<Scalars['String']>;
  /** An object relationship */
  attendance_group?: Maybe<Attendance_Groups>;
  attendance_group_id?: Maybe<Scalars['String']>;
  /** An array relationship */
  attendances: Array<Attendance>;
  /** An array relationship */
  attendancesByClockInLocationId: Array<Attendance>;
  /** An aggregate relationship */
  attendancesByClockInLocationId_aggregate: Attendance_Aggregate;
  /** An array relationship */
  attendancesByClockOutLocationId: Array<Attendance>;
  /** An aggregate relationship */
  attendancesByClockOutLocationId_aggregate: Attendance_Aggregate;
  /** An aggregate relationship */
  attendances_aggregate: Attendance_Aggregate;
  bssid?: Maybe<Scalars['String']>;
  feature?: Maybe<Scalars['String']>;
  gps_range?: Maybe<Scalars['Int']>;
  id: Scalars['String'];
  ip?: Maybe<Scalars['String']>;
  latitude?: Maybe<Scalars['numeric']>;
  longitude?: Maybe<Scalars['numeric']>;
  map_type?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  ssid?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['Int']>;
};


/** columns and relationships of "attendance_locations" */
export type Attendance_LocationsAttendancesArgs = {
  distinct_on?: InputMaybe<Array<Attendance_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Attendance_Order_By>>;
  where?: InputMaybe<Attendance_Bool_Exp>;
};


/** columns and relationships of "attendance_locations" */
export type Attendance_LocationsAttendancesByClockInLocationIdArgs = {
  distinct_on?: InputMaybe<Array<Attendance_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Attendance_Order_By>>;
  where?: InputMaybe<Attendance_Bool_Exp>;
};


/** columns and relationships of "attendance_locations" */
export type Attendance_LocationsAttendancesByClockInLocationId_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Attendance_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Attendance_Order_By>>;
  where?: InputMaybe<Attendance_Bool_Exp>;
};


/** columns and relationships of "attendance_locations" */
export type Attendance_LocationsAttendancesByClockOutLocationIdArgs = {
  distinct_on?: InputMaybe<Array<Attendance_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Attendance_Order_By>>;
  where?: InputMaybe<Attendance_Bool_Exp>;
};


/** columns and relationships of "attendance_locations" */
export type Attendance_LocationsAttendancesByClockOutLocationId_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Attendance_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Attendance_Order_By>>;
  where?: InputMaybe<Attendance_Bool_Exp>;
};


/** columns and relationships of "attendance_locations" */
export type Attendance_LocationsAttendances_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Attendance_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Attendance_Order_By>>;
  where?: InputMaybe<Attendance_Bool_Exp>;
};

/** aggregated selection of "attendance_locations" */
export type Attendance_Locations_Aggregate = {
  __typename?: 'attendance_locations_aggregate';
  aggregate?: Maybe<Attendance_Locations_Aggregate_Fields>;
  nodes: Array<Attendance_Locations>;
};

export type Attendance_Locations_Aggregate_Bool_Exp = {
  count?: InputMaybe<Attendance_Locations_Aggregate_Bool_Exp_Count>;
};

export type Attendance_Locations_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<Attendance_Locations_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<Attendance_Locations_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "attendance_locations" */
export type Attendance_Locations_Aggregate_Fields = {
  __typename?: 'attendance_locations_aggregate_fields';
  avg?: Maybe<Attendance_Locations_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Attendance_Locations_Max_Fields>;
  min?: Maybe<Attendance_Locations_Min_Fields>;
  stddev?: Maybe<Attendance_Locations_Stddev_Fields>;
  stddev_pop?: Maybe<Attendance_Locations_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Attendance_Locations_Stddev_Samp_Fields>;
  sum?: Maybe<Attendance_Locations_Sum_Fields>;
  var_pop?: Maybe<Attendance_Locations_Var_Pop_Fields>;
  var_samp?: Maybe<Attendance_Locations_Var_Samp_Fields>;
  variance?: Maybe<Attendance_Locations_Variance_Fields>;
};


/** aggregate fields of "attendance_locations" */
export type Attendance_Locations_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Attendance_Locations_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "attendance_locations" */
export type Attendance_Locations_Aggregate_Order_By = {
  avg?: InputMaybe<Attendance_Locations_Avg_Order_By>;
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<Attendance_Locations_Max_Order_By>;
  min?: InputMaybe<Attendance_Locations_Min_Order_By>;
  stddev?: InputMaybe<Attendance_Locations_Stddev_Order_By>;
  stddev_pop?: InputMaybe<Attendance_Locations_Stddev_Pop_Order_By>;
  stddev_samp?: InputMaybe<Attendance_Locations_Stddev_Samp_Order_By>;
  sum?: InputMaybe<Attendance_Locations_Sum_Order_By>;
  var_pop?: InputMaybe<Attendance_Locations_Var_Pop_Order_By>;
  var_samp?: InputMaybe<Attendance_Locations_Var_Samp_Order_By>;
  variance?: InputMaybe<Attendance_Locations_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "attendance_locations" */
export type Attendance_Locations_Arr_Rel_Insert_Input = {
  data: Array<Attendance_Locations_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<Attendance_Locations_On_Conflict>;
};

/** aggregate avg on columns */
export type Attendance_Locations_Avg_Fields = {
  __typename?: 'attendance_locations_avg_fields';
  gps_range?: Maybe<Scalars['Float']>;
  latitude?: Maybe<Scalars['Float']>;
  longitude?: Maybe<Scalars['Float']>;
  map_type?: Maybe<Scalars['Float']>;
  type?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "attendance_locations" */
export type Attendance_Locations_Avg_Order_By = {
  gps_range?: InputMaybe<Order_By>;
  latitude?: InputMaybe<Order_By>;
  longitude?: InputMaybe<Order_By>;
  map_type?: InputMaybe<Order_By>;
  type?: InputMaybe<Order_By>;
};

/** Boolean expression to filter rows from the table "attendance_locations". All fields are combined with a logical 'AND'. */
export type Attendance_Locations_Bool_Exp = {
  _and?: InputMaybe<Array<Attendance_Locations_Bool_Exp>>;
  _not?: InputMaybe<Attendance_Locations_Bool_Exp>;
  _or?: InputMaybe<Array<Attendance_Locations_Bool_Exp>>;
  address?: InputMaybe<String_Comparison_Exp>;
  attendance_group?: InputMaybe<Attendance_Groups_Bool_Exp>;
  attendance_group_id?: InputMaybe<String_Comparison_Exp>;
  attendances?: InputMaybe<Attendance_Bool_Exp>;
  attendancesByClockInLocationId?: InputMaybe<Attendance_Bool_Exp>;
  attendancesByClockInLocationId_aggregate?: InputMaybe<Attendance_Aggregate_Bool_Exp>;
  attendancesByClockOutLocationId?: InputMaybe<Attendance_Bool_Exp>;
  attendancesByClockOutLocationId_aggregate?: InputMaybe<Attendance_Aggregate_Bool_Exp>;
  attendances_aggregate?: InputMaybe<Attendance_Aggregate_Bool_Exp>;
  bssid?: InputMaybe<String_Comparison_Exp>;
  feature?: InputMaybe<String_Comparison_Exp>;
  gps_range?: InputMaybe<Int_Comparison_Exp>;
  id?: InputMaybe<String_Comparison_Exp>;
  ip?: InputMaybe<String_Comparison_Exp>;
  latitude?: InputMaybe<Numeric_Comparison_Exp>;
  longitude?: InputMaybe<Numeric_Comparison_Exp>;
  map_type?: InputMaybe<Int_Comparison_Exp>;
  name?: InputMaybe<String_Comparison_Exp>;
  ssid?: InputMaybe<String_Comparison_Exp>;
  type?: InputMaybe<Int_Comparison_Exp>;
};

/** unique or primary key constraints on table "attendance_locations" */
export enum Attendance_Locations_Constraint {
  /** unique or primary key constraint on columns "id" */
  AttendanceLocationsPrimary7 = 'attendance_locationsPRIMARY7'
}

/** input type for incrementing numeric columns in table "attendance_locations" */
export type Attendance_Locations_Inc_Input = {
  gps_range?: InputMaybe<Scalars['Int']>;
  latitude?: InputMaybe<Scalars['numeric']>;
  longitude?: InputMaybe<Scalars['numeric']>;
  map_type?: InputMaybe<Scalars['Int']>;
  type?: InputMaybe<Scalars['Int']>;
};

/** input type for inserting data into table "attendance_locations" */
export type Attendance_Locations_Insert_Input = {
  address?: InputMaybe<Scalars['String']>;
  attendance_group?: InputMaybe<Attendance_Groups_Obj_Rel_Insert_Input>;
  attendance_group_id?: InputMaybe<Scalars['String']>;
  attendances?: InputMaybe<Attendance_Arr_Rel_Insert_Input>;
  attendancesByClockInLocationId?: InputMaybe<Attendance_Arr_Rel_Insert_Input>;
  attendancesByClockOutLocationId?: InputMaybe<Attendance_Arr_Rel_Insert_Input>;
  bssid?: InputMaybe<Scalars['String']>;
  feature?: InputMaybe<Scalars['String']>;
  gps_range?: InputMaybe<Scalars['Int']>;
  id?: InputMaybe<Scalars['String']>;
  ip?: InputMaybe<Scalars['String']>;
  latitude?: InputMaybe<Scalars['numeric']>;
  longitude?: InputMaybe<Scalars['numeric']>;
  map_type?: InputMaybe<Scalars['Int']>;
  name?: InputMaybe<Scalars['String']>;
  ssid?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<Scalars['Int']>;
};

/** aggregate max on columns */
export type Attendance_Locations_Max_Fields = {
  __typename?: 'attendance_locations_max_fields';
  address?: Maybe<Scalars['String']>;
  attendance_group_id?: Maybe<Scalars['String']>;
  bssid?: Maybe<Scalars['String']>;
  feature?: Maybe<Scalars['String']>;
  gps_range?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['String']>;
  ip?: Maybe<Scalars['String']>;
  latitude?: Maybe<Scalars['numeric']>;
  longitude?: Maybe<Scalars['numeric']>;
  map_type?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  ssid?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['Int']>;
};

/** order by max() on columns of table "attendance_locations" */
export type Attendance_Locations_Max_Order_By = {
  address?: InputMaybe<Order_By>;
  attendance_group_id?: InputMaybe<Order_By>;
  bssid?: InputMaybe<Order_By>;
  feature?: InputMaybe<Order_By>;
  gps_range?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  ip?: InputMaybe<Order_By>;
  latitude?: InputMaybe<Order_By>;
  longitude?: InputMaybe<Order_By>;
  map_type?: InputMaybe<Order_By>;
  name?: InputMaybe<Order_By>;
  ssid?: InputMaybe<Order_By>;
  type?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type Attendance_Locations_Min_Fields = {
  __typename?: 'attendance_locations_min_fields';
  address?: Maybe<Scalars['String']>;
  attendance_group_id?: Maybe<Scalars['String']>;
  bssid?: Maybe<Scalars['String']>;
  feature?: Maybe<Scalars['String']>;
  gps_range?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['String']>;
  ip?: Maybe<Scalars['String']>;
  latitude?: Maybe<Scalars['numeric']>;
  longitude?: Maybe<Scalars['numeric']>;
  map_type?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  ssid?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['Int']>;
};

/** order by min() on columns of table "attendance_locations" */
export type Attendance_Locations_Min_Order_By = {
  address?: InputMaybe<Order_By>;
  attendance_group_id?: InputMaybe<Order_By>;
  bssid?: InputMaybe<Order_By>;
  feature?: InputMaybe<Order_By>;
  gps_range?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  ip?: InputMaybe<Order_By>;
  latitude?: InputMaybe<Order_By>;
  longitude?: InputMaybe<Order_By>;
  map_type?: InputMaybe<Order_By>;
  name?: InputMaybe<Order_By>;
  ssid?: InputMaybe<Order_By>;
  type?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "attendance_locations" */
export type Attendance_Locations_Mutation_Response = {
  __typename?: 'attendance_locations_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Attendance_Locations>;
};

/** input type for inserting object relation for remote table "attendance_locations" */
export type Attendance_Locations_Obj_Rel_Insert_Input = {
  data: Attendance_Locations_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<Attendance_Locations_On_Conflict>;
};

/** on_conflict condition type for table "attendance_locations" */
export type Attendance_Locations_On_Conflict = {
  constraint: Attendance_Locations_Constraint;
  update_columns?: Array<Attendance_Locations_Update_Column>;
  where?: InputMaybe<Attendance_Locations_Bool_Exp>;
};

/** Ordering options when selecting data from "attendance_locations". */
export type Attendance_Locations_Order_By = {
  address?: InputMaybe<Order_By>;
  attendance_group?: InputMaybe<Attendance_Groups_Order_By>;
  attendance_group_id?: InputMaybe<Order_By>;
  attendancesByClockInLocationId_aggregate?: InputMaybe<Attendance_Aggregate_Order_By>;
  attendancesByClockOutLocationId_aggregate?: InputMaybe<Attendance_Aggregate_Order_By>;
  attendances_aggregate?: InputMaybe<Attendance_Aggregate_Order_By>;
  bssid?: InputMaybe<Order_By>;
  feature?: InputMaybe<Order_By>;
  gps_range?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  ip?: InputMaybe<Order_By>;
  latitude?: InputMaybe<Order_By>;
  longitude?: InputMaybe<Order_By>;
  map_type?: InputMaybe<Order_By>;
  name?: InputMaybe<Order_By>;
  ssid?: InputMaybe<Order_By>;
  type?: InputMaybe<Order_By>;
};

/** primary key columns input for table: attendance_locations */
export type Attendance_Locations_Pk_Columns_Input = {
  id: Scalars['String'];
};

/** select columns of table "attendance_locations" */
export enum Attendance_Locations_Select_Column {
  /** column name */
  Address = 'address',
  /** column name */
  AttendanceGroupId = 'attendance_group_id',
  /** column name */
  Bssid = 'bssid',
  /** column name */
  Feature = 'feature',
  /** column name */
  GpsRange = 'gps_range',
  /** column name */
  Id = 'id',
  /** column name */
  Ip = 'ip',
  /** column name */
  Latitude = 'latitude',
  /** column name */
  Longitude = 'longitude',
  /** column name */
  MapType = 'map_type',
  /** column name */
  Name = 'name',
  /** column name */
  Ssid = 'ssid',
  /** column name */
  Type = 'type'
}

/** input type for updating data in table "attendance_locations" */
export type Attendance_Locations_Set_Input = {
  address?: InputMaybe<Scalars['String']>;
  attendance_group_id?: InputMaybe<Scalars['String']>;
  bssid?: InputMaybe<Scalars['String']>;
  feature?: InputMaybe<Scalars['String']>;
  gps_range?: InputMaybe<Scalars['Int']>;
  id?: InputMaybe<Scalars['String']>;
  ip?: InputMaybe<Scalars['String']>;
  latitude?: InputMaybe<Scalars['numeric']>;
  longitude?: InputMaybe<Scalars['numeric']>;
  map_type?: InputMaybe<Scalars['Int']>;
  name?: InputMaybe<Scalars['String']>;
  ssid?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<Scalars['Int']>;
};

/** aggregate stddev on columns */
export type Attendance_Locations_Stddev_Fields = {
  __typename?: 'attendance_locations_stddev_fields';
  gps_range?: Maybe<Scalars['Float']>;
  latitude?: Maybe<Scalars['Float']>;
  longitude?: Maybe<Scalars['Float']>;
  map_type?: Maybe<Scalars['Float']>;
  type?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "attendance_locations" */
export type Attendance_Locations_Stddev_Order_By = {
  gps_range?: InputMaybe<Order_By>;
  latitude?: InputMaybe<Order_By>;
  longitude?: InputMaybe<Order_By>;
  map_type?: InputMaybe<Order_By>;
  type?: InputMaybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Attendance_Locations_Stddev_Pop_Fields = {
  __typename?: 'attendance_locations_stddev_pop_fields';
  gps_range?: Maybe<Scalars['Float']>;
  latitude?: Maybe<Scalars['Float']>;
  longitude?: Maybe<Scalars['Float']>;
  map_type?: Maybe<Scalars['Float']>;
  type?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "attendance_locations" */
export type Attendance_Locations_Stddev_Pop_Order_By = {
  gps_range?: InputMaybe<Order_By>;
  latitude?: InputMaybe<Order_By>;
  longitude?: InputMaybe<Order_By>;
  map_type?: InputMaybe<Order_By>;
  type?: InputMaybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Attendance_Locations_Stddev_Samp_Fields = {
  __typename?: 'attendance_locations_stddev_samp_fields';
  gps_range?: Maybe<Scalars['Float']>;
  latitude?: Maybe<Scalars['Float']>;
  longitude?: Maybe<Scalars['Float']>;
  map_type?: Maybe<Scalars['Float']>;
  type?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "attendance_locations" */
export type Attendance_Locations_Stddev_Samp_Order_By = {
  gps_range?: InputMaybe<Order_By>;
  latitude?: InputMaybe<Order_By>;
  longitude?: InputMaybe<Order_By>;
  map_type?: InputMaybe<Order_By>;
  type?: InputMaybe<Order_By>;
};

/** Streaming cursor of the table "attendance_locations" */
export type Attendance_Locations_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Attendance_Locations_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Attendance_Locations_Stream_Cursor_Value_Input = {
  address?: InputMaybe<Scalars['String']>;
  attendance_group_id?: InputMaybe<Scalars['String']>;
  bssid?: InputMaybe<Scalars['String']>;
  feature?: InputMaybe<Scalars['String']>;
  gps_range?: InputMaybe<Scalars['Int']>;
  id?: InputMaybe<Scalars['String']>;
  ip?: InputMaybe<Scalars['String']>;
  latitude?: InputMaybe<Scalars['numeric']>;
  longitude?: InputMaybe<Scalars['numeric']>;
  map_type?: InputMaybe<Scalars['Int']>;
  name?: InputMaybe<Scalars['String']>;
  ssid?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<Scalars['Int']>;
};

/** aggregate sum on columns */
export type Attendance_Locations_Sum_Fields = {
  __typename?: 'attendance_locations_sum_fields';
  gps_range?: Maybe<Scalars['Int']>;
  latitude?: Maybe<Scalars['numeric']>;
  longitude?: Maybe<Scalars['numeric']>;
  map_type?: Maybe<Scalars['Int']>;
  type?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "attendance_locations" */
export type Attendance_Locations_Sum_Order_By = {
  gps_range?: InputMaybe<Order_By>;
  latitude?: InputMaybe<Order_By>;
  longitude?: InputMaybe<Order_By>;
  map_type?: InputMaybe<Order_By>;
  type?: InputMaybe<Order_By>;
};

/** update columns of table "attendance_locations" */
export enum Attendance_Locations_Update_Column {
  /** column name */
  Address = 'address',
  /** column name */
  AttendanceGroupId = 'attendance_group_id',
  /** column name */
  Bssid = 'bssid',
  /** column name */
  Feature = 'feature',
  /** column name */
  GpsRange = 'gps_range',
  /** column name */
  Id = 'id',
  /** column name */
  Ip = 'ip',
  /** column name */
  Latitude = 'latitude',
  /** column name */
  Longitude = 'longitude',
  /** column name */
  MapType = 'map_type',
  /** column name */
  Name = 'name',
  /** column name */
  Ssid = 'ssid',
  /** column name */
  Type = 'type'
}

export type Attendance_Locations_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: InputMaybe<Attendance_Locations_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Attendance_Locations_Set_Input>;
  /** filter the rows which have to be updated */
  where: Attendance_Locations_Bool_Exp;
};

/** aggregate var_pop on columns */
export type Attendance_Locations_Var_Pop_Fields = {
  __typename?: 'attendance_locations_var_pop_fields';
  gps_range?: Maybe<Scalars['Float']>;
  latitude?: Maybe<Scalars['Float']>;
  longitude?: Maybe<Scalars['Float']>;
  map_type?: Maybe<Scalars['Float']>;
  type?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "attendance_locations" */
export type Attendance_Locations_Var_Pop_Order_By = {
  gps_range?: InputMaybe<Order_By>;
  latitude?: InputMaybe<Order_By>;
  longitude?: InputMaybe<Order_By>;
  map_type?: InputMaybe<Order_By>;
  type?: InputMaybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Attendance_Locations_Var_Samp_Fields = {
  __typename?: 'attendance_locations_var_samp_fields';
  gps_range?: Maybe<Scalars['Float']>;
  latitude?: Maybe<Scalars['Float']>;
  longitude?: Maybe<Scalars['Float']>;
  map_type?: Maybe<Scalars['Float']>;
  type?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "attendance_locations" */
export type Attendance_Locations_Var_Samp_Order_By = {
  gps_range?: InputMaybe<Order_By>;
  latitude?: InputMaybe<Order_By>;
  longitude?: InputMaybe<Order_By>;
  map_type?: InputMaybe<Order_By>;
  type?: InputMaybe<Order_By>;
};

/** aggregate variance on columns */
export type Attendance_Locations_Variance_Fields = {
  __typename?: 'attendance_locations_variance_fields';
  gps_range?: Maybe<Scalars['Float']>;
  latitude?: Maybe<Scalars['Float']>;
  longitude?: Maybe<Scalars['Float']>;
  map_type?: Maybe<Scalars['Float']>;
  type?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "attendance_locations" */
export type Attendance_Locations_Variance_Order_By = {
  gps_range?: InputMaybe<Order_By>;
  latitude?: InputMaybe<Order_By>;
  longitude?: InputMaybe<Order_By>;
  map_type?: InputMaybe<Order_By>;
  type?: InputMaybe<Order_By>;
};

/** aggregate max on columns */
export type Attendance_Max_Fields = {
  __typename?: 'attendance_max_fields';
  /** A computed field, executes function "actual_length_day" */
  actual_length_day?: Maybe<Scalars['Float']>;
  /** A computed field, executes function "actual_length_hour" */
  actual_length_hour?: Maybe<Scalars['Float']>;
  attendance_location_id?: Maybe<Scalars['String']>;
  /** A computed field, executes function "check_lateness" */
  clockInResult?: Maybe<Scalars['Int']>;
  /** A computed field, executes function "check_earliness" */
  clockOutResult?: Maybe<Scalars['Int']>;
  clock_in_location_id?: Maybe<Scalars['String']>;
  clock_in_result?: Maybe<Scalars['Int']>;
  clock_out_location_id?: Maybe<Scalars['String']>;
  clock_out_result?: Maybe<Scalars['Int']>;
  date?: Maybe<Scalars['date']>;
  /** A computed field, executes function "date_yyyy_mm" */
  date_yyyy_mm?: Maybe<Scalars['String']>;
  department_id?: Maybe<Scalars['String']>;
  employee_id?: Maybe<Scalars['String']>;
  hours_of_attendance?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['String']>;
  /** A computed field, executes function "scheduled_length_day" */
  scheduled_length_day?: Maybe<Scalars['Float']>;
  /** A computed field, executes function "scheduled_length_hour" */
  scheduled_length_hour?: Maybe<Scalars['Float']>;
  shift_id?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "attendance" */
export type Attendance_Max_Order_By = {
  attendance_location_id?: InputMaybe<Order_By>;
  clock_in_location_id?: InputMaybe<Order_By>;
  clock_in_result?: InputMaybe<Order_By>;
  clock_out_location_id?: InputMaybe<Order_By>;
  clock_out_result?: InputMaybe<Order_By>;
  date?: InputMaybe<Order_By>;
  department_id?: InputMaybe<Order_By>;
  employee_id?: InputMaybe<Order_By>;
  hours_of_attendance?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  shift_id?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type Attendance_Min_Fields = {
  __typename?: 'attendance_min_fields';
  /** A computed field, executes function "actual_length_day" */
  actual_length_day?: Maybe<Scalars['Float']>;
  /** A computed field, executes function "actual_length_hour" */
  actual_length_hour?: Maybe<Scalars['Float']>;
  attendance_location_id?: Maybe<Scalars['String']>;
  /** A computed field, executes function "check_lateness" */
  clockInResult?: Maybe<Scalars['Int']>;
  /** A computed field, executes function "check_earliness" */
  clockOutResult?: Maybe<Scalars['Int']>;
  clock_in_location_id?: Maybe<Scalars['String']>;
  clock_in_result?: Maybe<Scalars['Int']>;
  clock_out_location_id?: Maybe<Scalars['String']>;
  clock_out_result?: Maybe<Scalars['Int']>;
  date?: Maybe<Scalars['date']>;
  /** A computed field, executes function "date_yyyy_mm" */
  date_yyyy_mm?: Maybe<Scalars['String']>;
  department_id?: Maybe<Scalars['String']>;
  employee_id?: Maybe<Scalars['String']>;
  hours_of_attendance?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['String']>;
  /** A computed field, executes function "scheduled_length_day" */
  scheduled_length_day?: Maybe<Scalars['Float']>;
  /** A computed field, executes function "scheduled_length_hour" */
  scheduled_length_hour?: Maybe<Scalars['Float']>;
  shift_id?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "attendance" */
export type Attendance_Min_Order_By = {
  attendance_location_id?: InputMaybe<Order_By>;
  clock_in_location_id?: InputMaybe<Order_By>;
  clock_in_result?: InputMaybe<Order_By>;
  clock_out_location_id?: InputMaybe<Order_By>;
  clock_out_result?: InputMaybe<Order_By>;
  date?: InputMaybe<Order_By>;
  department_id?: InputMaybe<Order_By>;
  employee_id?: InputMaybe<Order_By>;
  hours_of_attendance?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  shift_id?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "attendance" */
export type Attendance_Mutation_Response = {
  __typename?: 'attendance_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Attendance>;
};

/** on_conflict condition type for table "attendance" */
export type Attendance_On_Conflict = {
  constraint: Attendance_Constraint;
  update_columns?: Array<Attendance_Update_Column>;
  where?: InputMaybe<Attendance_Bool_Exp>;
};

/** Ordering options when selecting data from "attendance". */
export type Attendance_Order_By = {
  actual_length_day?: InputMaybe<Order_By>;
  actual_length_hour?: InputMaybe<Order_By>;
  attendanceLocationByClockInLocationId?: InputMaybe<Attendance_Locations_Order_By>;
  attendanceLocationByClockOutLocationId?: InputMaybe<Attendance_Locations_Order_By>;
  attendance_location?: InputMaybe<Attendance_Locations_Order_By>;
  attendance_location_id?: InputMaybe<Order_By>;
  clockInResult?: InputMaybe<Order_By>;
  clockOutResult?: InputMaybe<Order_By>;
  clock_in_location_id?: InputMaybe<Order_By>;
  clock_in_result?: InputMaybe<Order_By>;
  clock_in_time?: InputMaybe<Order_By>;
  clock_out_location_id?: InputMaybe<Order_By>;
  clock_out_result?: InputMaybe<Order_By>;
  clock_out_time?: InputMaybe<Order_By>;
  date?: InputMaybe<Order_By>;
  date_yyyy_mm?: InputMaybe<Order_By>;
  department?: InputMaybe<Departments_Order_By>;
  department_id?: InputMaybe<Order_By>;
  employee?: InputMaybe<Employees_Order_By>;
  employee_id?: InputMaybe<Order_By>;
  hours_of_attendance?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  scheduled_length_day?: InputMaybe<Order_By>;
  scheduled_length_hour?: InputMaybe<Order_By>;
  shift_id?: InputMaybe<Order_By>;
  shift_list?: InputMaybe<Shift_Lists_Order_By>;
};

/** primary key columns input for table: attendance */
export type Attendance_Pk_Columns_Input = {
  id: Scalars['String'];
};

/** select columns of table "attendance" */
export enum Attendance_Select_Column {
  /** column name */
  AttendanceLocationId = 'attendance_location_id',
  /** column name */
  ClockInLocationId = 'clock_in_location_id',
  /** column name */
  ClockInResult = 'clock_in_result',
  /** column name */
  ClockInTime = 'clock_in_time',
  /** column name */
  ClockOutLocationId = 'clock_out_location_id',
  /** column name */
  ClockOutResult = 'clock_out_result',
  /** column name */
  ClockOutTime = 'clock_out_time',
  /** column name */
  Date = 'date',
  /** column name */
  DepartmentId = 'department_id',
  /** column name */
  EmployeeId = 'employee_id',
  /** column name */
  HoursOfAttendance = 'hours_of_attendance',
  /** column name */
  Id = 'id',
  /** column name */
  ShiftId = 'shift_id'
}

/** input type for updating data in table "attendance" */
export type Attendance_Set_Input = {
  attendance_location_id?: InputMaybe<Scalars['String']>;
  clock_in_location_id?: InputMaybe<Scalars['String']>;
  clock_in_result?: InputMaybe<Scalars['Int']>;
  clock_in_time?: InputMaybe<Scalars['time']>;
  clock_out_location_id?: InputMaybe<Scalars['String']>;
  clock_out_result?: InputMaybe<Scalars['Int']>;
  clock_out_time?: InputMaybe<Scalars['time']>;
  date?: InputMaybe<Scalars['date']>;
  department_id?: InputMaybe<Scalars['String']>;
  employee_id?: InputMaybe<Scalars['String']>;
  hours_of_attendance?: InputMaybe<Scalars['Float']>;
  id?: InputMaybe<Scalars['String']>;
  shift_id?: InputMaybe<Scalars['String']>;
};

/** aggregate stddev on columns */
export type Attendance_Stddev_Fields = {
  __typename?: 'attendance_stddev_fields';
  /** A computed field, executes function "actual_length_day" */
  actual_length_day?: Maybe<Scalars['Float']>;
  /** A computed field, executes function "actual_length_hour" */
  actual_length_hour?: Maybe<Scalars['Float']>;
  /** A computed field, executes function "check_lateness" */
  clockInResult?: Maybe<Scalars['Int']>;
  /** A computed field, executes function "check_earliness" */
  clockOutResult?: Maybe<Scalars['Int']>;
  clock_in_result?: Maybe<Scalars['Float']>;
  clock_out_result?: Maybe<Scalars['Float']>;
  hours_of_attendance?: Maybe<Scalars['Float']>;
  /** A computed field, executes function "scheduled_length_day" */
  scheduled_length_day?: Maybe<Scalars['Float']>;
  /** A computed field, executes function "scheduled_length_hour" */
  scheduled_length_hour?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "attendance" */
export type Attendance_Stddev_Order_By = {
  clock_in_result?: InputMaybe<Order_By>;
  clock_out_result?: InputMaybe<Order_By>;
  hours_of_attendance?: InputMaybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Attendance_Stddev_Pop_Fields = {
  __typename?: 'attendance_stddev_pop_fields';
  /** A computed field, executes function "actual_length_day" */
  actual_length_day?: Maybe<Scalars['Float']>;
  /** A computed field, executes function "actual_length_hour" */
  actual_length_hour?: Maybe<Scalars['Float']>;
  /** A computed field, executes function "check_lateness" */
  clockInResult?: Maybe<Scalars['Int']>;
  /** A computed field, executes function "check_earliness" */
  clockOutResult?: Maybe<Scalars['Int']>;
  clock_in_result?: Maybe<Scalars['Float']>;
  clock_out_result?: Maybe<Scalars['Float']>;
  hours_of_attendance?: Maybe<Scalars['Float']>;
  /** A computed field, executes function "scheduled_length_day" */
  scheduled_length_day?: Maybe<Scalars['Float']>;
  /** A computed field, executes function "scheduled_length_hour" */
  scheduled_length_hour?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "attendance" */
export type Attendance_Stddev_Pop_Order_By = {
  clock_in_result?: InputMaybe<Order_By>;
  clock_out_result?: InputMaybe<Order_By>;
  hours_of_attendance?: InputMaybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Attendance_Stddev_Samp_Fields = {
  __typename?: 'attendance_stddev_samp_fields';
  /** A computed field, executes function "actual_length_day" */
  actual_length_day?: Maybe<Scalars['Float']>;
  /** A computed field, executes function "actual_length_hour" */
  actual_length_hour?: Maybe<Scalars['Float']>;
  /** A computed field, executes function "check_lateness" */
  clockInResult?: Maybe<Scalars['Int']>;
  /** A computed field, executes function "check_earliness" */
  clockOutResult?: Maybe<Scalars['Int']>;
  clock_in_result?: Maybe<Scalars['Float']>;
  clock_out_result?: Maybe<Scalars['Float']>;
  hours_of_attendance?: Maybe<Scalars['Float']>;
  /** A computed field, executes function "scheduled_length_day" */
  scheduled_length_day?: Maybe<Scalars['Float']>;
  /** A computed field, executes function "scheduled_length_hour" */
  scheduled_length_hour?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "attendance" */
export type Attendance_Stddev_Samp_Order_By = {
  clock_in_result?: InputMaybe<Order_By>;
  clock_out_result?: InputMaybe<Order_By>;
  hours_of_attendance?: InputMaybe<Order_By>;
};

/** Streaming cursor of the table "attendance" */
export type Attendance_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Attendance_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Attendance_Stream_Cursor_Value_Input = {
  attendance_location_id?: InputMaybe<Scalars['String']>;
  clock_in_location_id?: InputMaybe<Scalars['String']>;
  clock_in_result?: InputMaybe<Scalars['Int']>;
  clock_in_time?: InputMaybe<Scalars['time']>;
  clock_out_location_id?: InputMaybe<Scalars['String']>;
  clock_out_result?: InputMaybe<Scalars['Int']>;
  clock_out_time?: InputMaybe<Scalars['time']>;
  date?: InputMaybe<Scalars['date']>;
  department_id?: InputMaybe<Scalars['String']>;
  employee_id?: InputMaybe<Scalars['String']>;
  hours_of_attendance?: InputMaybe<Scalars['Float']>;
  id?: InputMaybe<Scalars['String']>;
  shift_id?: InputMaybe<Scalars['String']>;
};

/** aggregate sum on columns */
export type Attendance_Sum_Fields = {
  __typename?: 'attendance_sum_fields';
  /** A computed field, executes function "actual_length_day" */
  actual_length_day?: Maybe<Scalars['Float']>;
  /** A computed field, executes function "actual_length_hour" */
  actual_length_hour?: Maybe<Scalars['Float']>;
  /** A computed field, executes function "check_lateness" */
  clockInResult?: Maybe<Scalars['Int']>;
  /** A computed field, executes function "check_earliness" */
  clockOutResult?: Maybe<Scalars['Int']>;
  clock_in_result?: Maybe<Scalars['Int']>;
  clock_out_result?: Maybe<Scalars['Int']>;
  hours_of_attendance?: Maybe<Scalars['Float']>;
  /** A computed field, executes function "scheduled_length_day" */
  scheduled_length_day?: Maybe<Scalars['Float']>;
  /** A computed field, executes function "scheduled_length_hour" */
  scheduled_length_hour?: Maybe<Scalars['Float']>;
};

/** order by sum() on columns of table "attendance" */
export type Attendance_Sum_Order_By = {
  clock_in_result?: InputMaybe<Order_By>;
  clock_out_result?: InputMaybe<Order_By>;
  hours_of_attendance?: InputMaybe<Order_By>;
};

/** update columns of table "attendance" */
export enum Attendance_Update_Column {
  /** column name */
  AttendanceLocationId = 'attendance_location_id',
  /** column name */
  ClockInLocationId = 'clock_in_location_id',
  /** column name */
  ClockInResult = 'clock_in_result',
  /** column name */
  ClockInTime = 'clock_in_time',
  /** column name */
  ClockOutLocationId = 'clock_out_location_id',
  /** column name */
  ClockOutResult = 'clock_out_result',
  /** column name */
  ClockOutTime = 'clock_out_time',
  /** column name */
  Date = 'date',
  /** column name */
  DepartmentId = 'department_id',
  /** column name */
  EmployeeId = 'employee_id',
  /** column name */
  HoursOfAttendance = 'hours_of_attendance',
  /** column name */
  Id = 'id',
  /** column name */
  ShiftId = 'shift_id'
}

export type Attendance_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: InputMaybe<Attendance_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Attendance_Set_Input>;
  /** filter the rows which have to be updated */
  where: Attendance_Bool_Exp;
};

/** aggregate var_pop on columns */
export type Attendance_Var_Pop_Fields = {
  __typename?: 'attendance_var_pop_fields';
  /** A computed field, executes function "actual_length_day" */
  actual_length_day?: Maybe<Scalars['Float']>;
  /** A computed field, executes function "actual_length_hour" */
  actual_length_hour?: Maybe<Scalars['Float']>;
  /** A computed field, executes function "check_lateness" */
  clockInResult?: Maybe<Scalars['Int']>;
  /** A computed field, executes function "check_earliness" */
  clockOutResult?: Maybe<Scalars['Int']>;
  clock_in_result?: Maybe<Scalars['Float']>;
  clock_out_result?: Maybe<Scalars['Float']>;
  hours_of_attendance?: Maybe<Scalars['Float']>;
  /** A computed field, executes function "scheduled_length_day" */
  scheduled_length_day?: Maybe<Scalars['Float']>;
  /** A computed field, executes function "scheduled_length_hour" */
  scheduled_length_hour?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "attendance" */
export type Attendance_Var_Pop_Order_By = {
  clock_in_result?: InputMaybe<Order_By>;
  clock_out_result?: InputMaybe<Order_By>;
  hours_of_attendance?: InputMaybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Attendance_Var_Samp_Fields = {
  __typename?: 'attendance_var_samp_fields';
  /** A computed field, executes function "actual_length_day" */
  actual_length_day?: Maybe<Scalars['Float']>;
  /** A computed field, executes function "actual_length_hour" */
  actual_length_hour?: Maybe<Scalars['Float']>;
  /** A computed field, executes function "check_lateness" */
  clockInResult?: Maybe<Scalars['Int']>;
  /** A computed field, executes function "check_earliness" */
  clockOutResult?: Maybe<Scalars['Int']>;
  clock_in_result?: Maybe<Scalars['Float']>;
  clock_out_result?: Maybe<Scalars['Float']>;
  hours_of_attendance?: Maybe<Scalars['Float']>;
  /** A computed field, executes function "scheduled_length_day" */
  scheduled_length_day?: Maybe<Scalars['Float']>;
  /** A computed field, executes function "scheduled_length_hour" */
  scheduled_length_hour?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "attendance" */
export type Attendance_Var_Samp_Order_By = {
  clock_in_result?: InputMaybe<Order_By>;
  clock_out_result?: InputMaybe<Order_By>;
  hours_of_attendance?: InputMaybe<Order_By>;
};

/** aggregate variance on columns */
export type Attendance_Variance_Fields = {
  __typename?: 'attendance_variance_fields';
  /** A computed field, executes function "actual_length_day" */
  actual_length_day?: Maybe<Scalars['Float']>;
  /** A computed field, executes function "actual_length_hour" */
  actual_length_hour?: Maybe<Scalars['Float']>;
  /** A computed field, executes function "check_lateness" */
  clockInResult?: Maybe<Scalars['Int']>;
  /** A computed field, executes function "check_earliness" */
  clockOutResult?: Maybe<Scalars['Int']>;
  clock_in_result?: Maybe<Scalars['Float']>;
  clock_out_result?: Maybe<Scalars['Float']>;
  hours_of_attendance?: Maybe<Scalars['Float']>;
  /** A computed field, executes function "scheduled_length_day" */
  scheduled_length_day?: Maybe<Scalars['Float']>;
  /** A computed field, executes function "scheduled_length_hour" */
  scheduled_length_hour?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "attendance" */
export type Attendance_Variance_Order_By = {
  clock_in_result?: InputMaybe<Order_By>;
  clock_out_result?: InputMaybe<Order_By>;
  hours_of_attendance?: InputMaybe<Order_By>;
};

/** Boolean expression to compare columns of type "bigint". All fields are combined with logical 'AND'. */
export type Bigint_Comparison_Exp = {
  _eq?: InputMaybe<Scalars['bigint']>;
  _gt?: InputMaybe<Scalars['bigint']>;
  _gte?: InputMaybe<Scalars['bigint']>;
  _in?: InputMaybe<Array<Scalars['bigint']>>;
  _is_null?: InputMaybe<Scalars['Boolean']>;
  _lt?: InputMaybe<Scalars['bigint']>;
  _lte?: InputMaybe<Scalars['bigint']>;
  _neq?: InputMaybe<Scalars['bigint']>;
  _nin?: InputMaybe<Array<Scalars['bigint']>>;
};

/** columns and relationships of "bills" */
export type Bills = {
  __typename?: 'bills';
  area_code?: Maybe<Scalars['String']>;
  area_id?: Maybe<Scalars['bigint']>;
  area_name?: Maybe<Scalars['String']>;
  brand_code?: Maybe<Scalars['String']>;
  brand_name?: Maybe<Scalars['String']>;
  bs_code?: Maybe<Scalars['String']>;
  bs_id: Scalars['bigint'];
  bs_remark?: Maybe<Scalars['String']>;
  btpw_user_account?: Maybe<Scalars['String']>;
  card_kind_name?: Maybe<Scalars['String']>;
  center_code?: Maybe<Scalars['String']>;
  center_name?: Maybe<Scalars['String']>;
  create_time?: Maybe<Scalars['timestamp']>;
  de_from?: Maybe<Scalars['String']>;
  delflg?: Maybe<Scalars['Int']>;
  dinner_type_id?: Maybe<Scalars['Int']>;
  dinner_type_name?: Maybe<Scalars['String']>;
  disc_money?: Maybe<Scalars['numeric']>;
  disc_total?: Maybe<Scalars['numeric']>;
  income_total?: Maybe<Scalars['numeric']>;
  is_continued_bill?: Maybe<Scalars['Boolean']>;
  is_continued_bill_name?: Maybe<Scalars['String']>;
  is_give_invoice?: Maybe<Scalars['String']>;
  item_income_total?: Maybe<Scalars['numeric']>;
  item_orig_money?: Maybe<Scalars['numeric']>;
  last_total?: Maybe<Scalars['numeric']>;
  member_card_no?: Maybe<Scalars['String']>;
  member_id?: Maybe<Scalars['String']>;
  member_mobile?: Maybe<Scalars['String']>;
  member_money?: Maybe<Scalars['numeric']>;
  member_name?: Maybe<Scalars['String']>;
  modify_time?: Maybe<Scalars['timestamp']>;
  not_income_money?: Maybe<Scalars['numeric']>;
  open_time?: Maybe<Scalars['timestamp']>;
  order_code?: Maybe<Scalars['String']>;
  order_origin_id?: Maybe<Scalars['Int']>;
  order_origin_name?: Maybe<Scalars['String']>;
  order_type?: Maybe<Scalars['String']>;
  orig_server_fee?: Maybe<Scalars['numeric']>;
  orig_total?: Maybe<Scalars['numeric']>;
  orig_zdxfbq?: Maybe<Scalars['Int']>;
  owo_open_id?: Maybe<Scalars['String']>;
  owo_union_id?: Maybe<Scalars['String']>;
  people_qty?: Maybe<Scalars['Int']>;
  point_code?: Maybe<Scalars['String']>;
  point_name?: Maybe<Scalars['String']>;
  present_money?: Maybe<Scalars['numeric']>;
  promote_money?: Maybe<Scalars['numeric']>;
  quota_money?: Maybe<Scalars['numeric']>;
  sale_type_id?: Maybe<Scalars['Int']>;
  sale_type_name?: Maybe<Scalars['String']>;
  salesman_code?: Maybe<Scalars['String']>;
  salesman_name?: Maybe<Scalars['String']>;
  service_fee_income_money?: Maybe<Scalars['numeric']>;
  service_fee_last_total?: Maybe<Scalars['numeric']>;
  service_fee_not_income_money?: Maybe<Scalars['numeric']>;
  settle_biz_date?: Maybe<Scalars['date']>;
  settle_biz_month?: Maybe<Scalars['String']>;
  settle_state?: Maybe<Scalars['String']>;
  settle_time?: Maybe<Scalars['timestamp']>;
  /** An array relationship */
  settledetails: Array<Settledetails>;
  /** An aggregate relationship */
  settledetails_aggregate: Settledetails_Aggregate;
  shop_code?: Maybe<Scalars['String']>;
  shop_id?: Maybe<Scalars['String']>;
  shop_name?: Maybe<Scalars['String']>;
  shop_out_code?: Maybe<Scalars['String']>;
  /** An array relationship */
  solditems: Array<Solditems>;
  /** An aggregate relationship */
  solditems_aggregate: Solditems_Aggregate;
  state?: Maybe<Scalars['String']>;
  /** An object relationship */
  store?: Maybe<Stores>;
  table_qty?: Maybe<Scalars['Int']>;
  tax_money?: Maybe<Scalars['numeric']>;
  team_id?: Maybe<Scalars['String']>;
  third_serial?: Maybe<Scalars['String']>;
  ts_code?: Maybe<Scalars['String']>;
  waiter_code?: Maybe<Scalars['String']>;
  waiter_name?: Maybe<Scalars['String']>;
  wipe_money?: Maybe<Scalars['numeric']>;
  zdxf_income_money?: Maybe<Scalars['numeric']>;
};


/** columns and relationships of "bills" */
export type BillsSettledetailsArgs = {
  distinct_on?: InputMaybe<Array<Settledetails_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Settledetails_Order_By>>;
  where?: InputMaybe<Settledetails_Bool_Exp>;
};


/** columns and relationships of "bills" */
export type BillsSettledetails_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Settledetails_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Settledetails_Order_By>>;
  where?: InputMaybe<Settledetails_Bool_Exp>;
};


/** columns and relationships of "bills" */
export type BillsSolditemsArgs = {
  distinct_on?: InputMaybe<Array<Solditems_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Solditems_Order_By>>;
  where?: InputMaybe<Solditems_Bool_Exp>;
};


/** columns and relationships of "bills" */
export type BillsSolditems_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Solditems_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Solditems_Order_By>>;
  where?: InputMaybe<Solditems_Bool_Exp>;
};

/** aggregated selection of "bills" */
export type Bills_Aggregate = {
  __typename?: 'bills_aggregate';
  aggregate?: Maybe<Bills_Aggregate_Fields>;
  nodes: Array<Bills>;
};

export type Bills_Aggregate_Bool_Exp = {
  bool_and?: InputMaybe<Bills_Aggregate_Bool_Exp_Bool_And>;
  bool_or?: InputMaybe<Bills_Aggregate_Bool_Exp_Bool_Or>;
  count?: InputMaybe<Bills_Aggregate_Bool_Exp_Count>;
};

export type Bills_Aggregate_Bool_Exp_Bool_And = {
  arguments: Bills_Select_Column_Bills_Aggregate_Bool_Exp_Bool_And_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<Bills_Bool_Exp>;
  predicate: Boolean_Comparison_Exp;
};

export type Bills_Aggregate_Bool_Exp_Bool_Or = {
  arguments: Bills_Select_Column_Bills_Aggregate_Bool_Exp_Bool_Or_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<Bills_Bool_Exp>;
  predicate: Boolean_Comparison_Exp;
};

export type Bills_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<Bills_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<Bills_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "bills" */
export type Bills_Aggregate_Fields = {
  __typename?: 'bills_aggregate_fields';
  avg?: Maybe<Bills_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Bills_Max_Fields>;
  min?: Maybe<Bills_Min_Fields>;
  stddev?: Maybe<Bills_Stddev_Fields>;
  stddev_pop?: Maybe<Bills_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Bills_Stddev_Samp_Fields>;
  sum?: Maybe<Bills_Sum_Fields>;
  var_pop?: Maybe<Bills_Var_Pop_Fields>;
  var_samp?: Maybe<Bills_Var_Samp_Fields>;
  variance?: Maybe<Bills_Variance_Fields>;
};


/** aggregate fields of "bills" */
export type Bills_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Bills_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "bills" */
export type Bills_Aggregate_Order_By = {
  avg?: InputMaybe<Bills_Avg_Order_By>;
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<Bills_Max_Order_By>;
  min?: InputMaybe<Bills_Min_Order_By>;
  stddev?: InputMaybe<Bills_Stddev_Order_By>;
  stddev_pop?: InputMaybe<Bills_Stddev_Pop_Order_By>;
  stddev_samp?: InputMaybe<Bills_Stddev_Samp_Order_By>;
  sum?: InputMaybe<Bills_Sum_Order_By>;
  var_pop?: InputMaybe<Bills_Var_Pop_Order_By>;
  var_samp?: InputMaybe<Bills_Var_Samp_Order_By>;
  variance?: InputMaybe<Bills_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "bills" */
export type Bills_Arr_Rel_Insert_Input = {
  data: Array<Bills_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<Bills_On_Conflict>;
};

/** aggregate avg on columns */
export type Bills_Avg_Fields = {
  __typename?: 'bills_avg_fields';
  area_id?: Maybe<Scalars['Float']>;
  bs_id?: Maybe<Scalars['Float']>;
  delflg?: Maybe<Scalars['Float']>;
  dinner_type_id?: Maybe<Scalars['Float']>;
  disc_money?: Maybe<Scalars['Float']>;
  disc_total?: Maybe<Scalars['Float']>;
  income_total?: Maybe<Scalars['Float']>;
  item_income_total?: Maybe<Scalars['Float']>;
  item_orig_money?: Maybe<Scalars['Float']>;
  last_total?: Maybe<Scalars['Float']>;
  member_money?: Maybe<Scalars['Float']>;
  not_income_money?: Maybe<Scalars['Float']>;
  order_origin_id?: Maybe<Scalars['Float']>;
  orig_server_fee?: Maybe<Scalars['Float']>;
  orig_total?: Maybe<Scalars['Float']>;
  orig_zdxfbq?: Maybe<Scalars['Float']>;
  people_qty?: Maybe<Scalars['Float']>;
  present_money?: Maybe<Scalars['Float']>;
  promote_money?: Maybe<Scalars['Float']>;
  quota_money?: Maybe<Scalars['Float']>;
  sale_type_id?: Maybe<Scalars['Float']>;
  service_fee_income_money?: Maybe<Scalars['Float']>;
  service_fee_last_total?: Maybe<Scalars['Float']>;
  service_fee_not_income_money?: Maybe<Scalars['Float']>;
  table_qty?: Maybe<Scalars['Float']>;
  tax_money?: Maybe<Scalars['Float']>;
  wipe_money?: Maybe<Scalars['Float']>;
  zdxf_income_money?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "bills" */
export type Bills_Avg_Order_By = {
  area_id?: InputMaybe<Order_By>;
  bs_id?: InputMaybe<Order_By>;
  delflg?: InputMaybe<Order_By>;
  dinner_type_id?: InputMaybe<Order_By>;
  disc_money?: InputMaybe<Order_By>;
  disc_total?: InputMaybe<Order_By>;
  income_total?: InputMaybe<Order_By>;
  item_income_total?: InputMaybe<Order_By>;
  item_orig_money?: InputMaybe<Order_By>;
  last_total?: InputMaybe<Order_By>;
  member_money?: InputMaybe<Order_By>;
  not_income_money?: InputMaybe<Order_By>;
  order_origin_id?: InputMaybe<Order_By>;
  orig_server_fee?: InputMaybe<Order_By>;
  orig_total?: InputMaybe<Order_By>;
  orig_zdxfbq?: InputMaybe<Order_By>;
  people_qty?: InputMaybe<Order_By>;
  present_money?: InputMaybe<Order_By>;
  promote_money?: InputMaybe<Order_By>;
  quota_money?: InputMaybe<Order_By>;
  sale_type_id?: InputMaybe<Order_By>;
  service_fee_income_money?: InputMaybe<Order_By>;
  service_fee_last_total?: InputMaybe<Order_By>;
  service_fee_not_income_money?: InputMaybe<Order_By>;
  table_qty?: InputMaybe<Order_By>;
  tax_money?: InputMaybe<Order_By>;
  wipe_money?: InputMaybe<Order_By>;
  zdxf_income_money?: InputMaybe<Order_By>;
};

/** Boolean expression to filter rows from the table "bills". All fields are combined with a logical 'AND'. */
export type Bills_Bool_Exp = {
  _and?: InputMaybe<Array<Bills_Bool_Exp>>;
  _not?: InputMaybe<Bills_Bool_Exp>;
  _or?: InputMaybe<Array<Bills_Bool_Exp>>;
  area_code?: InputMaybe<String_Comparison_Exp>;
  area_id?: InputMaybe<Bigint_Comparison_Exp>;
  area_name?: InputMaybe<String_Comparison_Exp>;
  brand_code?: InputMaybe<String_Comparison_Exp>;
  brand_name?: InputMaybe<String_Comparison_Exp>;
  bs_code?: InputMaybe<String_Comparison_Exp>;
  bs_id?: InputMaybe<Bigint_Comparison_Exp>;
  bs_remark?: InputMaybe<String_Comparison_Exp>;
  btpw_user_account?: InputMaybe<String_Comparison_Exp>;
  card_kind_name?: InputMaybe<String_Comparison_Exp>;
  center_code?: InputMaybe<String_Comparison_Exp>;
  center_name?: InputMaybe<String_Comparison_Exp>;
  create_time?: InputMaybe<Timestamp_Comparison_Exp>;
  de_from?: InputMaybe<String_Comparison_Exp>;
  delflg?: InputMaybe<Int_Comparison_Exp>;
  dinner_type_id?: InputMaybe<Int_Comparison_Exp>;
  dinner_type_name?: InputMaybe<String_Comparison_Exp>;
  disc_money?: InputMaybe<Numeric_Comparison_Exp>;
  disc_total?: InputMaybe<Numeric_Comparison_Exp>;
  income_total?: InputMaybe<Numeric_Comparison_Exp>;
  is_continued_bill?: InputMaybe<Boolean_Comparison_Exp>;
  is_continued_bill_name?: InputMaybe<String_Comparison_Exp>;
  is_give_invoice?: InputMaybe<String_Comparison_Exp>;
  item_income_total?: InputMaybe<Numeric_Comparison_Exp>;
  item_orig_money?: InputMaybe<Numeric_Comparison_Exp>;
  last_total?: InputMaybe<Numeric_Comparison_Exp>;
  member_card_no?: InputMaybe<String_Comparison_Exp>;
  member_id?: InputMaybe<String_Comparison_Exp>;
  member_mobile?: InputMaybe<String_Comparison_Exp>;
  member_money?: InputMaybe<Numeric_Comparison_Exp>;
  member_name?: InputMaybe<String_Comparison_Exp>;
  modify_time?: InputMaybe<Timestamp_Comparison_Exp>;
  not_income_money?: InputMaybe<Numeric_Comparison_Exp>;
  open_time?: InputMaybe<Timestamp_Comparison_Exp>;
  order_code?: InputMaybe<String_Comparison_Exp>;
  order_origin_id?: InputMaybe<Int_Comparison_Exp>;
  order_origin_name?: InputMaybe<String_Comparison_Exp>;
  order_type?: InputMaybe<String_Comparison_Exp>;
  orig_server_fee?: InputMaybe<Numeric_Comparison_Exp>;
  orig_total?: InputMaybe<Numeric_Comparison_Exp>;
  orig_zdxfbq?: InputMaybe<Int_Comparison_Exp>;
  owo_open_id?: InputMaybe<String_Comparison_Exp>;
  owo_union_id?: InputMaybe<String_Comparison_Exp>;
  people_qty?: InputMaybe<Int_Comparison_Exp>;
  point_code?: InputMaybe<String_Comparison_Exp>;
  point_name?: InputMaybe<String_Comparison_Exp>;
  present_money?: InputMaybe<Numeric_Comparison_Exp>;
  promote_money?: InputMaybe<Numeric_Comparison_Exp>;
  quota_money?: InputMaybe<Numeric_Comparison_Exp>;
  sale_type_id?: InputMaybe<Int_Comparison_Exp>;
  sale_type_name?: InputMaybe<String_Comparison_Exp>;
  salesman_code?: InputMaybe<String_Comparison_Exp>;
  salesman_name?: InputMaybe<String_Comparison_Exp>;
  service_fee_income_money?: InputMaybe<Numeric_Comparison_Exp>;
  service_fee_last_total?: InputMaybe<Numeric_Comparison_Exp>;
  service_fee_not_income_money?: InputMaybe<Numeric_Comparison_Exp>;
  settle_biz_date?: InputMaybe<Date_Comparison_Exp>;
  settle_biz_month?: InputMaybe<String_Comparison_Exp>;
  settle_state?: InputMaybe<String_Comparison_Exp>;
  settle_time?: InputMaybe<Timestamp_Comparison_Exp>;
  settledetails?: InputMaybe<Settledetails_Bool_Exp>;
  settledetails_aggregate?: InputMaybe<Settledetails_Aggregate_Bool_Exp>;
  shop_code?: InputMaybe<String_Comparison_Exp>;
  shop_id?: InputMaybe<String_Comparison_Exp>;
  shop_name?: InputMaybe<String_Comparison_Exp>;
  shop_out_code?: InputMaybe<String_Comparison_Exp>;
  solditems?: InputMaybe<Solditems_Bool_Exp>;
  solditems_aggregate?: InputMaybe<Solditems_Aggregate_Bool_Exp>;
  state?: InputMaybe<String_Comparison_Exp>;
  store?: InputMaybe<Stores_Bool_Exp>;
  table_qty?: InputMaybe<Int_Comparison_Exp>;
  tax_money?: InputMaybe<Numeric_Comparison_Exp>;
  team_id?: InputMaybe<String_Comparison_Exp>;
  third_serial?: InputMaybe<String_Comparison_Exp>;
  ts_code?: InputMaybe<String_Comparison_Exp>;
  waiter_code?: InputMaybe<String_Comparison_Exp>;
  waiter_name?: InputMaybe<String_Comparison_Exp>;
  wipe_money?: InputMaybe<Numeric_Comparison_Exp>;
  zdxf_income_money?: InputMaybe<Numeric_Comparison_Exp>;
};

/** unique or primary key constraints on table "bills" */
export enum Bills_Constraint {
  /** unique or primary key constraint on columns "bs_id" */
  BillsPrimary9 = 'billsPRIMARY9'
}

/** input type for incrementing numeric columns in table "bills" */
export type Bills_Inc_Input = {
  area_id?: InputMaybe<Scalars['bigint']>;
  bs_id?: InputMaybe<Scalars['bigint']>;
  delflg?: InputMaybe<Scalars['Int']>;
  dinner_type_id?: InputMaybe<Scalars['Int']>;
  disc_money?: InputMaybe<Scalars['numeric']>;
  disc_total?: InputMaybe<Scalars['numeric']>;
  income_total?: InputMaybe<Scalars['numeric']>;
  item_income_total?: InputMaybe<Scalars['numeric']>;
  item_orig_money?: InputMaybe<Scalars['numeric']>;
  last_total?: InputMaybe<Scalars['numeric']>;
  member_money?: InputMaybe<Scalars['numeric']>;
  not_income_money?: InputMaybe<Scalars['numeric']>;
  order_origin_id?: InputMaybe<Scalars['Int']>;
  orig_server_fee?: InputMaybe<Scalars['numeric']>;
  orig_total?: InputMaybe<Scalars['numeric']>;
  orig_zdxfbq?: InputMaybe<Scalars['Int']>;
  people_qty?: InputMaybe<Scalars['Int']>;
  present_money?: InputMaybe<Scalars['numeric']>;
  promote_money?: InputMaybe<Scalars['numeric']>;
  quota_money?: InputMaybe<Scalars['numeric']>;
  sale_type_id?: InputMaybe<Scalars['Int']>;
  service_fee_income_money?: InputMaybe<Scalars['numeric']>;
  service_fee_last_total?: InputMaybe<Scalars['numeric']>;
  service_fee_not_income_money?: InputMaybe<Scalars['numeric']>;
  table_qty?: InputMaybe<Scalars['Int']>;
  tax_money?: InputMaybe<Scalars['numeric']>;
  wipe_money?: InputMaybe<Scalars['numeric']>;
  zdxf_income_money?: InputMaybe<Scalars['numeric']>;
};

/** input type for inserting data into table "bills" */
export type Bills_Insert_Input = {
  area_code?: InputMaybe<Scalars['String']>;
  area_id?: InputMaybe<Scalars['bigint']>;
  area_name?: InputMaybe<Scalars['String']>;
  brand_code?: InputMaybe<Scalars['String']>;
  brand_name?: InputMaybe<Scalars['String']>;
  bs_code?: InputMaybe<Scalars['String']>;
  bs_id?: InputMaybe<Scalars['bigint']>;
  bs_remark?: InputMaybe<Scalars['String']>;
  btpw_user_account?: InputMaybe<Scalars['String']>;
  card_kind_name?: InputMaybe<Scalars['String']>;
  center_code?: InputMaybe<Scalars['String']>;
  center_name?: InputMaybe<Scalars['String']>;
  create_time?: InputMaybe<Scalars['timestamp']>;
  de_from?: InputMaybe<Scalars['String']>;
  delflg?: InputMaybe<Scalars['Int']>;
  dinner_type_id?: InputMaybe<Scalars['Int']>;
  dinner_type_name?: InputMaybe<Scalars['String']>;
  disc_money?: InputMaybe<Scalars['numeric']>;
  disc_total?: InputMaybe<Scalars['numeric']>;
  income_total?: InputMaybe<Scalars['numeric']>;
  is_continued_bill?: InputMaybe<Scalars['Boolean']>;
  is_continued_bill_name?: InputMaybe<Scalars['String']>;
  is_give_invoice?: InputMaybe<Scalars['String']>;
  item_income_total?: InputMaybe<Scalars['numeric']>;
  item_orig_money?: InputMaybe<Scalars['numeric']>;
  last_total?: InputMaybe<Scalars['numeric']>;
  member_card_no?: InputMaybe<Scalars['String']>;
  member_id?: InputMaybe<Scalars['String']>;
  member_mobile?: InputMaybe<Scalars['String']>;
  member_money?: InputMaybe<Scalars['numeric']>;
  member_name?: InputMaybe<Scalars['String']>;
  modify_time?: InputMaybe<Scalars['timestamp']>;
  not_income_money?: InputMaybe<Scalars['numeric']>;
  open_time?: InputMaybe<Scalars['timestamp']>;
  order_code?: InputMaybe<Scalars['String']>;
  order_origin_id?: InputMaybe<Scalars['Int']>;
  order_origin_name?: InputMaybe<Scalars['String']>;
  order_type?: InputMaybe<Scalars['String']>;
  orig_server_fee?: InputMaybe<Scalars['numeric']>;
  orig_total?: InputMaybe<Scalars['numeric']>;
  orig_zdxfbq?: InputMaybe<Scalars['Int']>;
  owo_open_id?: InputMaybe<Scalars['String']>;
  owo_union_id?: InputMaybe<Scalars['String']>;
  people_qty?: InputMaybe<Scalars['Int']>;
  point_code?: InputMaybe<Scalars['String']>;
  point_name?: InputMaybe<Scalars['String']>;
  present_money?: InputMaybe<Scalars['numeric']>;
  promote_money?: InputMaybe<Scalars['numeric']>;
  quota_money?: InputMaybe<Scalars['numeric']>;
  sale_type_id?: InputMaybe<Scalars['Int']>;
  sale_type_name?: InputMaybe<Scalars['String']>;
  salesman_code?: InputMaybe<Scalars['String']>;
  salesman_name?: InputMaybe<Scalars['String']>;
  service_fee_income_money?: InputMaybe<Scalars['numeric']>;
  service_fee_last_total?: InputMaybe<Scalars['numeric']>;
  service_fee_not_income_money?: InputMaybe<Scalars['numeric']>;
  settle_biz_date?: InputMaybe<Scalars['date']>;
  settle_biz_month?: InputMaybe<Scalars['String']>;
  settle_state?: InputMaybe<Scalars['String']>;
  settle_time?: InputMaybe<Scalars['timestamp']>;
  settledetails?: InputMaybe<Settledetails_Arr_Rel_Insert_Input>;
  shop_code?: InputMaybe<Scalars['String']>;
  shop_id?: InputMaybe<Scalars['String']>;
  shop_name?: InputMaybe<Scalars['String']>;
  shop_out_code?: InputMaybe<Scalars['String']>;
  solditems?: InputMaybe<Solditems_Arr_Rel_Insert_Input>;
  state?: InputMaybe<Scalars['String']>;
  store?: InputMaybe<Stores_Obj_Rel_Insert_Input>;
  table_qty?: InputMaybe<Scalars['Int']>;
  tax_money?: InputMaybe<Scalars['numeric']>;
  team_id?: InputMaybe<Scalars['String']>;
  third_serial?: InputMaybe<Scalars['String']>;
  ts_code?: InputMaybe<Scalars['String']>;
  waiter_code?: InputMaybe<Scalars['String']>;
  waiter_name?: InputMaybe<Scalars['String']>;
  wipe_money?: InputMaybe<Scalars['numeric']>;
  zdxf_income_money?: InputMaybe<Scalars['numeric']>;
};

/** aggregate max on columns */
export type Bills_Max_Fields = {
  __typename?: 'bills_max_fields';
  area_code?: Maybe<Scalars['String']>;
  area_id?: Maybe<Scalars['bigint']>;
  area_name?: Maybe<Scalars['String']>;
  brand_code?: Maybe<Scalars['String']>;
  brand_name?: Maybe<Scalars['String']>;
  bs_code?: Maybe<Scalars['String']>;
  bs_id?: Maybe<Scalars['bigint']>;
  bs_remark?: Maybe<Scalars['String']>;
  btpw_user_account?: Maybe<Scalars['String']>;
  card_kind_name?: Maybe<Scalars['String']>;
  center_code?: Maybe<Scalars['String']>;
  center_name?: Maybe<Scalars['String']>;
  create_time?: Maybe<Scalars['timestamp']>;
  de_from?: Maybe<Scalars['String']>;
  delflg?: Maybe<Scalars['Int']>;
  dinner_type_id?: Maybe<Scalars['Int']>;
  dinner_type_name?: Maybe<Scalars['String']>;
  disc_money?: Maybe<Scalars['numeric']>;
  disc_total?: Maybe<Scalars['numeric']>;
  income_total?: Maybe<Scalars['numeric']>;
  is_continued_bill_name?: Maybe<Scalars['String']>;
  is_give_invoice?: Maybe<Scalars['String']>;
  item_income_total?: Maybe<Scalars['numeric']>;
  item_orig_money?: Maybe<Scalars['numeric']>;
  last_total?: Maybe<Scalars['numeric']>;
  member_card_no?: Maybe<Scalars['String']>;
  member_id?: Maybe<Scalars['String']>;
  member_mobile?: Maybe<Scalars['String']>;
  member_money?: Maybe<Scalars['numeric']>;
  member_name?: Maybe<Scalars['String']>;
  modify_time?: Maybe<Scalars['timestamp']>;
  not_income_money?: Maybe<Scalars['numeric']>;
  open_time?: Maybe<Scalars['timestamp']>;
  order_code?: Maybe<Scalars['String']>;
  order_origin_id?: Maybe<Scalars['Int']>;
  order_origin_name?: Maybe<Scalars['String']>;
  order_type?: Maybe<Scalars['String']>;
  orig_server_fee?: Maybe<Scalars['numeric']>;
  orig_total?: Maybe<Scalars['numeric']>;
  orig_zdxfbq?: Maybe<Scalars['Int']>;
  owo_open_id?: Maybe<Scalars['String']>;
  owo_union_id?: Maybe<Scalars['String']>;
  people_qty?: Maybe<Scalars['Int']>;
  point_code?: Maybe<Scalars['String']>;
  point_name?: Maybe<Scalars['String']>;
  present_money?: Maybe<Scalars['numeric']>;
  promote_money?: Maybe<Scalars['numeric']>;
  quota_money?: Maybe<Scalars['numeric']>;
  sale_type_id?: Maybe<Scalars['Int']>;
  sale_type_name?: Maybe<Scalars['String']>;
  salesman_code?: Maybe<Scalars['String']>;
  salesman_name?: Maybe<Scalars['String']>;
  service_fee_income_money?: Maybe<Scalars['numeric']>;
  service_fee_last_total?: Maybe<Scalars['numeric']>;
  service_fee_not_income_money?: Maybe<Scalars['numeric']>;
  settle_biz_date?: Maybe<Scalars['date']>;
  settle_biz_month?: Maybe<Scalars['String']>;
  settle_state?: Maybe<Scalars['String']>;
  settle_time?: Maybe<Scalars['timestamp']>;
  shop_code?: Maybe<Scalars['String']>;
  shop_id?: Maybe<Scalars['String']>;
  shop_name?: Maybe<Scalars['String']>;
  shop_out_code?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  table_qty?: Maybe<Scalars['Int']>;
  tax_money?: Maybe<Scalars['numeric']>;
  team_id?: Maybe<Scalars['String']>;
  third_serial?: Maybe<Scalars['String']>;
  ts_code?: Maybe<Scalars['String']>;
  waiter_code?: Maybe<Scalars['String']>;
  waiter_name?: Maybe<Scalars['String']>;
  wipe_money?: Maybe<Scalars['numeric']>;
  zdxf_income_money?: Maybe<Scalars['numeric']>;
};

/** order by max() on columns of table "bills" */
export type Bills_Max_Order_By = {
  area_code?: InputMaybe<Order_By>;
  area_id?: InputMaybe<Order_By>;
  area_name?: InputMaybe<Order_By>;
  brand_code?: InputMaybe<Order_By>;
  brand_name?: InputMaybe<Order_By>;
  bs_code?: InputMaybe<Order_By>;
  bs_id?: InputMaybe<Order_By>;
  bs_remark?: InputMaybe<Order_By>;
  btpw_user_account?: InputMaybe<Order_By>;
  card_kind_name?: InputMaybe<Order_By>;
  center_code?: InputMaybe<Order_By>;
  center_name?: InputMaybe<Order_By>;
  create_time?: InputMaybe<Order_By>;
  de_from?: InputMaybe<Order_By>;
  delflg?: InputMaybe<Order_By>;
  dinner_type_id?: InputMaybe<Order_By>;
  dinner_type_name?: InputMaybe<Order_By>;
  disc_money?: InputMaybe<Order_By>;
  disc_total?: InputMaybe<Order_By>;
  income_total?: InputMaybe<Order_By>;
  is_continued_bill_name?: InputMaybe<Order_By>;
  is_give_invoice?: InputMaybe<Order_By>;
  item_income_total?: InputMaybe<Order_By>;
  item_orig_money?: InputMaybe<Order_By>;
  last_total?: InputMaybe<Order_By>;
  member_card_no?: InputMaybe<Order_By>;
  member_id?: InputMaybe<Order_By>;
  member_mobile?: InputMaybe<Order_By>;
  member_money?: InputMaybe<Order_By>;
  member_name?: InputMaybe<Order_By>;
  modify_time?: InputMaybe<Order_By>;
  not_income_money?: InputMaybe<Order_By>;
  open_time?: InputMaybe<Order_By>;
  order_code?: InputMaybe<Order_By>;
  order_origin_id?: InputMaybe<Order_By>;
  order_origin_name?: InputMaybe<Order_By>;
  order_type?: InputMaybe<Order_By>;
  orig_server_fee?: InputMaybe<Order_By>;
  orig_total?: InputMaybe<Order_By>;
  orig_zdxfbq?: InputMaybe<Order_By>;
  owo_open_id?: InputMaybe<Order_By>;
  owo_union_id?: InputMaybe<Order_By>;
  people_qty?: InputMaybe<Order_By>;
  point_code?: InputMaybe<Order_By>;
  point_name?: InputMaybe<Order_By>;
  present_money?: InputMaybe<Order_By>;
  promote_money?: InputMaybe<Order_By>;
  quota_money?: InputMaybe<Order_By>;
  sale_type_id?: InputMaybe<Order_By>;
  sale_type_name?: InputMaybe<Order_By>;
  salesman_code?: InputMaybe<Order_By>;
  salesman_name?: InputMaybe<Order_By>;
  service_fee_income_money?: InputMaybe<Order_By>;
  service_fee_last_total?: InputMaybe<Order_By>;
  service_fee_not_income_money?: InputMaybe<Order_By>;
  settle_biz_date?: InputMaybe<Order_By>;
  settle_biz_month?: InputMaybe<Order_By>;
  settle_state?: InputMaybe<Order_By>;
  settle_time?: InputMaybe<Order_By>;
  shop_code?: InputMaybe<Order_By>;
  shop_id?: InputMaybe<Order_By>;
  shop_name?: InputMaybe<Order_By>;
  shop_out_code?: InputMaybe<Order_By>;
  state?: InputMaybe<Order_By>;
  table_qty?: InputMaybe<Order_By>;
  tax_money?: InputMaybe<Order_By>;
  team_id?: InputMaybe<Order_By>;
  third_serial?: InputMaybe<Order_By>;
  ts_code?: InputMaybe<Order_By>;
  waiter_code?: InputMaybe<Order_By>;
  waiter_name?: InputMaybe<Order_By>;
  wipe_money?: InputMaybe<Order_By>;
  zdxf_income_money?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type Bills_Min_Fields = {
  __typename?: 'bills_min_fields';
  area_code?: Maybe<Scalars['String']>;
  area_id?: Maybe<Scalars['bigint']>;
  area_name?: Maybe<Scalars['String']>;
  brand_code?: Maybe<Scalars['String']>;
  brand_name?: Maybe<Scalars['String']>;
  bs_code?: Maybe<Scalars['String']>;
  bs_id?: Maybe<Scalars['bigint']>;
  bs_remark?: Maybe<Scalars['String']>;
  btpw_user_account?: Maybe<Scalars['String']>;
  card_kind_name?: Maybe<Scalars['String']>;
  center_code?: Maybe<Scalars['String']>;
  center_name?: Maybe<Scalars['String']>;
  create_time?: Maybe<Scalars['timestamp']>;
  de_from?: Maybe<Scalars['String']>;
  delflg?: Maybe<Scalars['Int']>;
  dinner_type_id?: Maybe<Scalars['Int']>;
  dinner_type_name?: Maybe<Scalars['String']>;
  disc_money?: Maybe<Scalars['numeric']>;
  disc_total?: Maybe<Scalars['numeric']>;
  income_total?: Maybe<Scalars['numeric']>;
  is_continued_bill_name?: Maybe<Scalars['String']>;
  is_give_invoice?: Maybe<Scalars['String']>;
  item_income_total?: Maybe<Scalars['numeric']>;
  item_orig_money?: Maybe<Scalars['numeric']>;
  last_total?: Maybe<Scalars['numeric']>;
  member_card_no?: Maybe<Scalars['String']>;
  member_id?: Maybe<Scalars['String']>;
  member_mobile?: Maybe<Scalars['String']>;
  member_money?: Maybe<Scalars['numeric']>;
  member_name?: Maybe<Scalars['String']>;
  modify_time?: Maybe<Scalars['timestamp']>;
  not_income_money?: Maybe<Scalars['numeric']>;
  open_time?: Maybe<Scalars['timestamp']>;
  order_code?: Maybe<Scalars['String']>;
  order_origin_id?: Maybe<Scalars['Int']>;
  order_origin_name?: Maybe<Scalars['String']>;
  order_type?: Maybe<Scalars['String']>;
  orig_server_fee?: Maybe<Scalars['numeric']>;
  orig_total?: Maybe<Scalars['numeric']>;
  orig_zdxfbq?: Maybe<Scalars['Int']>;
  owo_open_id?: Maybe<Scalars['String']>;
  owo_union_id?: Maybe<Scalars['String']>;
  people_qty?: Maybe<Scalars['Int']>;
  point_code?: Maybe<Scalars['String']>;
  point_name?: Maybe<Scalars['String']>;
  present_money?: Maybe<Scalars['numeric']>;
  promote_money?: Maybe<Scalars['numeric']>;
  quota_money?: Maybe<Scalars['numeric']>;
  sale_type_id?: Maybe<Scalars['Int']>;
  sale_type_name?: Maybe<Scalars['String']>;
  salesman_code?: Maybe<Scalars['String']>;
  salesman_name?: Maybe<Scalars['String']>;
  service_fee_income_money?: Maybe<Scalars['numeric']>;
  service_fee_last_total?: Maybe<Scalars['numeric']>;
  service_fee_not_income_money?: Maybe<Scalars['numeric']>;
  settle_biz_date?: Maybe<Scalars['date']>;
  settle_biz_month?: Maybe<Scalars['String']>;
  settle_state?: Maybe<Scalars['String']>;
  settle_time?: Maybe<Scalars['timestamp']>;
  shop_code?: Maybe<Scalars['String']>;
  shop_id?: Maybe<Scalars['String']>;
  shop_name?: Maybe<Scalars['String']>;
  shop_out_code?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  table_qty?: Maybe<Scalars['Int']>;
  tax_money?: Maybe<Scalars['numeric']>;
  team_id?: Maybe<Scalars['String']>;
  third_serial?: Maybe<Scalars['String']>;
  ts_code?: Maybe<Scalars['String']>;
  waiter_code?: Maybe<Scalars['String']>;
  waiter_name?: Maybe<Scalars['String']>;
  wipe_money?: Maybe<Scalars['numeric']>;
  zdxf_income_money?: Maybe<Scalars['numeric']>;
};

/** order by min() on columns of table "bills" */
export type Bills_Min_Order_By = {
  area_code?: InputMaybe<Order_By>;
  area_id?: InputMaybe<Order_By>;
  area_name?: InputMaybe<Order_By>;
  brand_code?: InputMaybe<Order_By>;
  brand_name?: InputMaybe<Order_By>;
  bs_code?: InputMaybe<Order_By>;
  bs_id?: InputMaybe<Order_By>;
  bs_remark?: InputMaybe<Order_By>;
  btpw_user_account?: InputMaybe<Order_By>;
  card_kind_name?: InputMaybe<Order_By>;
  center_code?: InputMaybe<Order_By>;
  center_name?: InputMaybe<Order_By>;
  create_time?: InputMaybe<Order_By>;
  de_from?: InputMaybe<Order_By>;
  delflg?: InputMaybe<Order_By>;
  dinner_type_id?: InputMaybe<Order_By>;
  dinner_type_name?: InputMaybe<Order_By>;
  disc_money?: InputMaybe<Order_By>;
  disc_total?: InputMaybe<Order_By>;
  income_total?: InputMaybe<Order_By>;
  is_continued_bill_name?: InputMaybe<Order_By>;
  is_give_invoice?: InputMaybe<Order_By>;
  item_income_total?: InputMaybe<Order_By>;
  item_orig_money?: InputMaybe<Order_By>;
  last_total?: InputMaybe<Order_By>;
  member_card_no?: InputMaybe<Order_By>;
  member_id?: InputMaybe<Order_By>;
  member_mobile?: InputMaybe<Order_By>;
  member_money?: InputMaybe<Order_By>;
  member_name?: InputMaybe<Order_By>;
  modify_time?: InputMaybe<Order_By>;
  not_income_money?: InputMaybe<Order_By>;
  open_time?: InputMaybe<Order_By>;
  order_code?: InputMaybe<Order_By>;
  order_origin_id?: InputMaybe<Order_By>;
  order_origin_name?: InputMaybe<Order_By>;
  order_type?: InputMaybe<Order_By>;
  orig_server_fee?: InputMaybe<Order_By>;
  orig_total?: InputMaybe<Order_By>;
  orig_zdxfbq?: InputMaybe<Order_By>;
  owo_open_id?: InputMaybe<Order_By>;
  owo_union_id?: InputMaybe<Order_By>;
  people_qty?: InputMaybe<Order_By>;
  point_code?: InputMaybe<Order_By>;
  point_name?: InputMaybe<Order_By>;
  present_money?: InputMaybe<Order_By>;
  promote_money?: InputMaybe<Order_By>;
  quota_money?: InputMaybe<Order_By>;
  sale_type_id?: InputMaybe<Order_By>;
  sale_type_name?: InputMaybe<Order_By>;
  salesman_code?: InputMaybe<Order_By>;
  salesman_name?: InputMaybe<Order_By>;
  service_fee_income_money?: InputMaybe<Order_By>;
  service_fee_last_total?: InputMaybe<Order_By>;
  service_fee_not_income_money?: InputMaybe<Order_By>;
  settle_biz_date?: InputMaybe<Order_By>;
  settle_biz_month?: InputMaybe<Order_By>;
  settle_state?: InputMaybe<Order_By>;
  settle_time?: InputMaybe<Order_By>;
  shop_code?: InputMaybe<Order_By>;
  shop_id?: InputMaybe<Order_By>;
  shop_name?: InputMaybe<Order_By>;
  shop_out_code?: InputMaybe<Order_By>;
  state?: InputMaybe<Order_By>;
  table_qty?: InputMaybe<Order_By>;
  tax_money?: InputMaybe<Order_By>;
  team_id?: InputMaybe<Order_By>;
  third_serial?: InputMaybe<Order_By>;
  ts_code?: InputMaybe<Order_By>;
  waiter_code?: InputMaybe<Order_By>;
  waiter_name?: InputMaybe<Order_By>;
  wipe_money?: InputMaybe<Order_By>;
  zdxf_income_money?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "bills" */
export type Bills_Mutation_Response = {
  __typename?: 'bills_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Bills>;
};

/** input type for inserting object relation for remote table "bills" */
export type Bills_Obj_Rel_Insert_Input = {
  data: Bills_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<Bills_On_Conflict>;
};

/** on_conflict condition type for table "bills" */
export type Bills_On_Conflict = {
  constraint: Bills_Constraint;
  update_columns?: Array<Bills_Update_Column>;
  where?: InputMaybe<Bills_Bool_Exp>;
};

/** Ordering options when selecting data from "bills". */
export type Bills_Order_By = {
  area_code?: InputMaybe<Order_By>;
  area_id?: InputMaybe<Order_By>;
  area_name?: InputMaybe<Order_By>;
  brand_code?: InputMaybe<Order_By>;
  brand_name?: InputMaybe<Order_By>;
  bs_code?: InputMaybe<Order_By>;
  bs_id?: InputMaybe<Order_By>;
  bs_remark?: InputMaybe<Order_By>;
  btpw_user_account?: InputMaybe<Order_By>;
  card_kind_name?: InputMaybe<Order_By>;
  center_code?: InputMaybe<Order_By>;
  center_name?: InputMaybe<Order_By>;
  create_time?: InputMaybe<Order_By>;
  de_from?: InputMaybe<Order_By>;
  delflg?: InputMaybe<Order_By>;
  dinner_type_id?: InputMaybe<Order_By>;
  dinner_type_name?: InputMaybe<Order_By>;
  disc_money?: InputMaybe<Order_By>;
  disc_total?: InputMaybe<Order_By>;
  income_total?: InputMaybe<Order_By>;
  is_continued_bill?: InputMaybe<Order_By>;
  is_continued_bill_name?: InputMaybe<Order_By>;
  is_give_invoice?: InputMaybe<Order_By>;
  item_income_total?: InputMaybe<Order_By>;
  item_orig_money?: InputMaybe<Order_By>;
  last_total?: InputMaybe<Order_By>;
  member_card_no?: InputMaybe<Order_By>;
  member_id?: InputMaybe<Order_By>;
  member_mobile?: InputMaybe<Order_By>;
  member_money?: InputMaybe<Order_By>;
  member_name?: InputMaybe<Order_By>;
  modify_time?: InputMaybe<Order_By>;
  not_income_money?: InputMaybe<Order_By>;
  open_time?: InputMaybe<Order_By>;
  order_code?: InputMaybe<Order_By>;
  order_origin_id?: InputMaybe<Order_By>;
  order_origin_name?: InputMaybe<Order_By>;
  order_type?: InputMaybe<Order_By>;
  orig_server_fee?: InputMaybe<Order_By>;
  orig_total?: InputMaybe<Order_By>;
  orig_zdxfbq?: InputMaybe<Order_By>;
  owo_open_id?: InputMaybe<Order_By>;
  owo_union_id?: InputMaybe<Order_By>;
  people_qty?: InputMaybe<Order_By>;
  point_code?: InputMaybe<Order_By>;
  point_name?: InputMaybe<Order_By>;
  present_money?: InputMaybe<Order_By>;
  promote_money?: InputMaybe<Order_By>;
  quota_money?: InputMaybe<Order_By>;
  sale_type_id?: InputMaybe<Order_By>;
  sale_type_name?: InputMaybe<Order_By>;
  salesman_code?: InputMaybe<Order_By>;
  salesman_name?: InputMaybe<Order_By>;
  service_fee_income_money?: InputMaybe<Order_By>;
  service_fee_last_total?: InputMaybe<Order_By>;
  service_fee_not_income_money?: InputMaybe<Order_By>;
  settle_biz_date?: InputMaybe<Order_By>;
  settle_biz_month?: InputMaybe<Order_By>;
  settle_state?: InputMaybe<Order_By>;
  settle_time?: InputMaybe<Order_By>;
  settledetails_aggregate?: InputMaybe<Settledetails_Aggregate_Order_By>;
  shop_code?: InputMaybe<Order_By>;
  shop_id?: InputMaybe<Order_By>;
  shop_name?: InputMaybe<Order_By>;
  shop_out_code?: InputMaybe<Order_By>;
  solditems_aggregate?: InputMaybe<Solditems_Aggregate_Order_By>;
  state?: InputMaybe<Order_By>;
  store?: InputMaybe<Stores_Order_By>;
  table_qty?: InputMaybe<Order_By>;
  tax_money?: InputMaybe<Order_By>;
  team_id?: InputMaybe<Order_By>;
  third_serial?: InputMaybe<Order_By>;
  ts_code?: InputMaybe<Order_By>;
  waiter_code?: InputMaybe<Order_By>;
  waiter_name?: InputMaybe<Order_By>;
  wipe_money?: InputMaybe<Order_By>;
  zdxf_income_money?: InputMaybe<Order_By>;
};

/** primary key columns input for table: bills */
export type Bills_Pk_Columns_Input = {
  bs_id: Scalars['bigint'];
};

/** select columns of table "bills" */
export enum Bills_Select_Column {
  /** column name */
  AreaCode = 'area_code',
  /** column name */
  AreaId = 'area_id',
  /** column name */
  AreaName = 'area_name',
  /** column name */
  BrandCode = 'brand_code',
  /** column name */
  BrandName = 'brand_name',
  /** column name */
  BsCode = 'bs_code',
  /** column name */
  BsId = 'bs_id',
  /** column name */
  BsRemark = 'bs_remark',
  /** column name */
  BtpwUserAccount = 'btpw_user_account',
  /** column name */
  CardKindName = 'card_kind_name',
  /** column name */
  CenterCode = 'center_code',
  /** column name */
  CenterName = 'center_name',
  /** column name */
  CreateTime = 'create_time',
  /** column name */
  DeFrom = 'de_from',
  /** column name */
  Delflg = 'delflg',
  /** column name */
  DinnerTypeId = 'dinner_type_id',
  /** column name */
  DinnerTypeName = 'dinner_type_name',
  /** column name */
  DiscMoney = 'disc_money',
  /** column name */
  DiscTotal = 'disc_total',
  /** column name */
  IncomeTotal = 'income_total',
  /** column name */
  IsContinuedBill = 'is_continued_bill',
  /** column name */
  IsContinuedBillName = 'is_continued_bill_name',
  /** column name */
  IsGiveInvoice = 'is_give_invoice',
  /** column name */
  ItemIncomeTotal = 'item_income_total',
  /** column name */
  ItemOrigMoney = 'item_orig_money',
  /** column name */
  LastTotal = 'last_total',
  /** column name */
  MemberCardNo = 'member_card_no',
  /** column name */
  MemberId = 'member_id',
  /** column name */
  MemberMobile = 'member_mobile',
  /** column name */
  MemberMoney = 'member_money',
  /** column name */
  MemberName = 'member_name',
  /** column name */
  ModifyTime = 'modify_time',
  /** column name */
  NotIncomeMoney = 'not_income_money',
  /** column name */
  OpenTime = 'open_time',
  /** column name */
  OrderCode = 'order_code',
  /** column name */
  OrderOriginId = 'order_origin_id',
  /** column name */
  OrderOriginName = 'order_origin_name',
  /** column name */
  OrderType = 'order_type',
  /** column name */
  OrigServerFee = 'orig_server_fee',
  /** column name */
  OrigTotal = 'orig_total',
  /** column name */
  OrigZdxfbq = 'orig_zdxfbq',
  /** column name */
  OwoOpenId = 'owo_open_id',
  /** column name */
  OwoUnionId = 'owo_union_id',
  /** column name */
  PeopleQty = 'people_qty',
  /** column name */
  PointCode = 'point_code',
  /** column name */
  PointName = 'point_name',
  /** column name */
  PresentMoney = 'present_money',
  /** column name */
  PromoteMoney = 'promote_money',
  /** column name */
  QuotaMoney = 'quota_money',
  /** column name */
  SaleTypeId = 'sale_type_id',
  /** column name */
  SaleTypeName = 'sale_type_name',
  /** column name */
  SalesmanCode = 'salesman_code',
  /** column name */
  SalesmanName = 'salesman_name',
  /** column name */
  ServiceFeeIncomeMoney = 'service_fee_income_money',
  /** column name */
  ServiceFeeLastTotal = 'service_fee_last_total',
  /** column name */
  ServiceFeeNotIncomeMoney = 'service_fee_not_income_money',
  /** column name */
  SettleBizDate = 'settle_biz_date',
  /** column name */
  SettleBizMonth = 'settle_biz_month',
  /** column name */
  SettleState = 'settle_state',
  /** column name */
  SettleTime = 'settle_time',
  /** column name */
  ShopCode = 'shop_code',
  /** column name */
  ShopId = 'shop_id',
  /** column name */
  ShopName = 'shop_name',
  /** column name */
  ShopOutCode = 'shop_out_code',
  /** column name */
  State = 'state',
  /** column name */
  TableQty = 'table_qty',
  /** column name */
  TaxMoney = 'tax_money',
  /** column name */
  TeamId = 'team_id',
  /** column name */
  ThirdSerial = 'third_serial',
  /** column name */
  TsCode = 'ts_code',
  /** column name */
  WaiterCode = 'waiter_code',
  /** column name */
  WaiterName = 'waiter_name',
  /** column name */
  WipeMoney = 'wipe_money',
  /** column name */
  ZdxfIncomeMoney = 'zdxf_income_money'
}

/** select "bills_aggregate_bool_exp_bool_and_arguments_columns" columns of table "bills" */
export enum Bills_Select_Column_Bills_Aggregate_Bool_Exp_Bool_And_Arguments_Columns {
  /** column name */
  IsContinuedBill = 'is_continued_bill'
}

/** select "bills_aggregate_bool_exp_bool_or_arguments_columns" columns of table "bills" */
export enum Bills_Select_Column_Bills_Aggregate_Bool_Exp_Bool_Or_Arguments_Columns {
  /** column name */
  IsContinuedBill = 'is_continued_bill'
}

/** input type for updating data in table "bills" */
export type Bills_Set_Input = {
  area_code?: InputMaybe<Scalars['String']>;
  area_id?: InputMaybe<Scalars['bigint']>;
  area_name?: InputMaybe<Scalars['String']>;
  brand_code?: InputMaybe<Scalars['String']>;
  brand_name?: InputMaybe<Scalars['String']>;
  bs_code?: InputMaybe<Scalars['String']>;
  bs_id?: InputMaybe<Scalars['bigint']>;
  bs_remark?: InputMaybe<Scalars['String']>;
  btpw_user_account?: InputMaybe<Scalars['String']>;
  card_kind_name?: InputMaybe<Scalars['String']>;
  center_code?: InputMaybe<Scalars['String']>;
  center_name?: InputMaybe<Scalars['String']>;
  create_time?: InputMaybe<Scalars['timestamp']>;
  de_from?: InputMaybe<Scalars['String']>;
  delflg?: InputMaybe<Scalars['Int']>;
  dinner_type_id?: InputMaybe<Scalars['Int']>;
  dinner_type_name?: InputMaybe<Scalars['String']>;
  disc_money?: InputMaybe<Scalars['numeric']>;
  disc_total?: InputMaybe<Scalars['numeric']>;
  income_total?: InputMaybe<Scalars['numeric']>;
  is_continued_bill?: InputMaybe<Scalars['Boolean']>;
  is_continued_bill_name?: InputMaybe<Scalars['String']>;
  is_give_invoice?: InputMaybe<Scalars['String']>;
  item_income_total?: InputMaybe<Scalars['numeric']>;
  item_orig_money?: InputMaybe<Scalars['numeric']>;
  last_total?: InputMaybe<Scalars['numeric']>;
  member_card_no?: InputMaybe<Scalars['String']>;
  member_id?: InputMaybe<Scalars['String']>;
  member_mobile?: InputMaybe<Scalars['String']>;
  member_money?: InputMaybe<Scalars['numeric']>;
  member_name?: InputMaybe<Scalars['String']>;
  modify_time?: InputMaybe<Scalars['timestamp']>;
  not_income_money?: InputMaybe<Scalars['numeric']>;
  open_time?: InputMaybe<Scalars['timestamp']>;
  order_code?: InputMaybe<Scalars['String']>;
  order_origin_id?: InputMaybe<Scalars['Int']>;
  order_origin_name?: InputMaybe<Scalars['String']>;
  order_type?: InputMaybe<Scalars['String']>;
  orig_server_fee?: InputMaybe<Scalars['numeric']>;
  orig_total?: InputMaybe<Scalars['numeric']>;
  orig_zdxfbq?: InputMaybe<Scalars['Int']>;
  owo_open_id?: InputMaybe<Scalars['String']>;
  owo_union_id?: InputMaybe<Scalars['String']>;
  people_qty?: InputMaybe<Scalars['Int']>;
  point_code?: InputMaybe<Scalars['String']>;
  point_name?: InputMaybe<Scalars['String']>;
  present_money?: InputMaybe<Scalars['numeric']>;
  promote_money?: InputMaybe<Scalars['numeric']>;
  quota_money?: InputMaybe<Scalars['numeric']>;
  sale_type_id?: InputMaybe<Scalars['Int']>;
  sale_type_name?: InputMaybe<Scalars['String']>;
  salesman_code?: InputMaybe<Scalars['String']>;
  salesman_name?: InputMaybe<Scalars['String']>;
  service_fee_income_money?: InputMaybe<Scalars['numeric']>;
  service_fee_last_total?: InputMaybe<Scalars['numeric']>;
  service_fee_not_income_money?: InputMaybe<Scalars['numeric']>;
  settle_biz_date?: InputMaybe<Scalars['date']>;
  settle_biz_month?: InputMaybe<Scalars['String']>;
  settle_state?: InputMaybe<Scalars['String']>;
  settle_time?: InputMaybe<Scalars['timestamp']>;
  shop_code?: InputMaybe<Scalars['String']>;
  shop_id?: InputMaybe<Scalars['String']>;
  shop_name?: InputMaybe<Scalars['String']>;
  shop_out_code?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
  table_qty?: InputMaybe<Scalars['Int']>;
  tax_money?: InputMaybe<Scalars['numeric']>;
  team_id?: InputMaybe<Scalars['String']>;
  third_serial?: InputMaybe<Scalars['String']>;
  ts_code?: InputMaybe<Scalars['String']>;
  waiter_code?: InputMaybe<Scalars['String']>;
  waiter_name?: InputMaybe<Scalars['String']>;
  wipe_money?: InputMaybe<Scalars['numeric']>;
  zdxf_income_money?: InputMaybe<Scalars['numeric']>;
};

/** aggregate stddev on columns */
export type Bills_Stddev_Fields = {
  __typename?: 'bills_stddev_fields';
  area_id?: Maybe<Scalars['Float']>;
  bs_id?: Maybe<Scalars['Float']>;
  delflg?: Maybe<Scalars['Float']>;
  dinner_type_id?: Maybe<Scalars['Float']>;
  disc_money?: Maybe<Scalars['Float']>;
  disc_total?: Maybe<Scalars['Float']>;
  income_total?: Maybe<Scalars['Float']>;
  item_income_total?: Maybe<Scalars['Float']>;
  item_orig_money?: Maybe<Scalars['Float']>;
  last_total?: Maybe<Scalars['Float']>;
  member_money?: Maybe<Scalars['Float']>;
  not_income_money?: Maybe<Scalars['Float']>;
  order_origin_id?: Maybe<Scalars['Float']>;
  orig_server_fee?: Maybe<Scalars['Float']>;
  orig_total?: Maybe<Scalars['Float']>;
  orig_zdxfbq?: Maybe<Scalars['Float']>;
  people_qty?: Maybe<Scalars['Float']>;
  present_money?: Maybe<Scalars['Float']>;
  promote_money?: Maybe<Scalars['Float']>;
  quota_money?: Maybe<Scalars['Float']>;
  sale_type_id?: Maybe<Scalars['Float']>;
  service_fee_income_money?: Maybe<Scalars['Float']>;
  service_fee_last_total?: Maybe<Scalars['Float']>;
  service_fee_not_income_money?: Maybe<Scalars['Float']>;
  table_qty?: Maybe<Scalars['Float']>;
  tax_money?: Maybe<Scalars['Float']>;
  wipe_money?: Maybe<Scalars['Float']>;
  zdxf_income_money?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "bills" */
export type Bills_Stddev_Order_By = {
  area_id?: InputMaybe<Order_By>;
  bs_id?: InputMaybe<Order_By>;
  delflg?: InputMaybe<Order_By>;
  dinner_type_id?: InputMaybe<Order_By>;
  disc_money?: InputMaybe<Order_By>;
  disc_total?: InputMaybe<Order_By>;
  income_total?: InputMaybe<Order_By>;
  item_income_total?: InputMaybe<Order_By>;
  item_orig_money?: InputMaybe<Order_By>;
  last_total?: InputMaybe<Order_By>;
  member_money?: InputMaybe<Order_By>;
  not_income_money?: InputMaybe<Order_By>;
  order_origin_id?: InputMaybe<Order_By>;
  orig_server_fee?: InputMaybe<Order_By>;
  orig_total?: InputMaybe<Order_By>;
  orig_zdxfbq?: InputMaybe<Order_By>;
  people_qty?: InputMaybe<Order_By>;
  present_money?: InputMaybe<Order_By>;
  promote_money?: InputMaybe<Order_By>;
  quota_money?: InputMaybe<Order_By>;
  sale_type_id?: InputMaybe<Order_By>;
  service_fee_income_money?: InputMaybe<Order_By>;
  service_fee_last_total?: InputMaybe<Order_By>;
  service_fee_not_income_money?: InputMaybe<Order_By>;
  table_qty?: InputMaybe<Order_By>;
  tax_money?: InputMaybe<Order_By>;
  wipe_money?: InputMaybe<Order_By>;
  zdxf_income_money?: InputMaybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Bills_Stddev_Pop_Fields = {
  __typename?: 'bills_stddev_pop_fields';
  area_id?: Maybe<Scalars['Float']>;
  bs_id?: Maybe<Scalars['Float']>;
  delflg?: Maybe<Scalars['Float']>;
  dinner_type_id?: Maybe<Scalars['Float']>;
  disc_money?: Maybe<Scalars['Float']>;
  disc_total?: Maybe<Scalars['Float']>;
  income_total?: Maybe<Scalars['Float']>;
  item_income_total?: Maybe<Scalars['Float']>;
  item_orig_money?: Maybe<Scalars['Float']>;
  last_total?: Maybe<Scalars['Float']>;
  member_money?: Maybe<Scalars['Float']>;
  not_income_money?: Maybe<Scalars['Float']>;
  order_origin_id?: Maybe<Scalars['Float']>;
  orig_server_fee?: Maybe<Scalars['Float']>;
  orig_total?: Maybe<Scalars['Float']>;
  orig_zdxfbq?: Maybe<Scalars['Float']>;
  people_qty?: Maybe<Scalars['Float']>;
  present_money?: Maybe<Scalars['Float']>;
  promote_money?: Maybe<Scalars['Float']>;
  quota_money?: Maybe<Scalars['Float']>;
  sale_type_id?: Maybe<Scalars['Float']>;
  service_fee_income_money?: Maybe<Scalars['Float']>;
  service_fee_last_total?: Maybe<Scalars['Float']>;
  service_fee_not_income_money?: Maybe<Scalars['Float']>;
  table_qty?: Maybe<Scalars['Float']>;
  tax_money?: Maybe<Scalars['Float']>;
  wipe_money?: Maybe<Scalars['Float']>;
  zdxf_income_money?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "bills" */
export type Bills_Stddev_Pop_Order_By = {
  area_id?: InputMaybe<Order_By>;
  bs_id?: InputMaybe<Order_By>;
  delflg?: InputMaybe<Order_By>;
  dinner_type_id?: InputMaybe<Order_By>;
  disc_money?: InputMaybe<Order_By>;
  disc_total?: InputMaybe<Order_By>;
  income_total?: InputMaybe<Order_By>;
  item_income_total?: InputMaybe<Order_By>;
  item_orig_money?: InputMaybe<Order_By>;
  last_total?: InputMaybe<Order_By>;
  member_money?: InputMaybe<Order_By>;
  not_income_money?: InputMaybe<Order_By>;
  order_origin_id?: InputMaybe<Order_By>;
  orig_server_fee?: InputMaybe<Order_By>;
  orig_total?: InputMaybe<Order_By>;
  orig_zdxfbq?: InputMaybe<Order_By>;
  people_qty?: InputMaybe<Order_By>;
  present_money?: InputMaybe<Order_By>;
  promote_money?: InputMaybe<Order_By>;
  quota_money?: InputMaybe<Order_By>;
  sale_type_id?: InputMaybe<Order_By>;
  service_fee_income_money?: InputMaybe<Order_By>;
  service_fee_last_total?: InputMaybe<Order_By>;
  service_fee_not_income_money?: InputMaybe<Order_By>;
  table_qty?: InputMaybe<Order_By>;
  tax_money?: InputMaybe<Order_By>;
  wipe_money?: InputMaybe<Order_By>;
  zdxf_income_money?: InputMaybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Bills_Stddev_Samp_Fields = {
  __typename?: 'bills_stddev_samp_fields';
  area_id?: Maybe<Scalars['Float']>;
  bs_id?: Maybe<Scalars['Float']>;
  delflg?: Maybe<Scalars['Float']>;
  dinner_type_id?: Maybe<Scalars['Float']>;
  disc_money?: Maybe<Scalars['Float']>;
  disc_total?: Maybe<Scalars['Float']>;
  income_total?: Maybe<Scalars['Float']>;
  item_income_total?: Maybe<Scalars['Float']>;
  item_orig_money?: Maybe<Scalars['Float']>;
  last_total?: Maybe<Scalars['Float']>;
  member_money?: Maybe<Scalars['Float']>;
  not_income_money?: Maybe<Scalars['Float']>;
  order_origin_id?: Maybe<Scalars['Float']>;
  orig_server_fee?: Maybe<Scalars['Float']>;
  orig_total?: Maybe<Scalars['Float']>;
  orig_zdxfbq?: Maybe<Scalars['Float']>;
  people_qty?: Maybe<Scalars['Float']>;
  present_money?: Maybe<Scalars['Float']>;
  promote_money?: Maybe<Scalars['Float']>;
  quota_money?: Maybe<Scalars['Float']>;
  sale_type_id?: Maybe<Scalars['Float']>;
  service_fee_income_money?: Maybe<Scalars['Float']>;
  service_fee_last_total?: Maybe<Scalars['Float']>;
  service_fee_not_income_money?: Maybe<Scalars['Float']>;
  table_qty?: Maybe<Scalars['Float']>;
  tax_money?: Maybe<Scalars['Float']>;
  wipe_money?: Maybe<Scalars['Float']>;
  zdxf_income_money?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "bills" */
export type Bills_Stddev_Samp_Order_By = {
  area_id?: InputMaybe<Order_By>;
  bs_id?: InputMaybe<Order_By>;
  delflg?: InputMaybe<Order_By>;
  dinner_type_id?: InputMaybe<Order_By>;
  disc_money?: InputMaybe<Order_By>;
  disc_total?: InputMaybe<Order_By>;
  income_total?: InputMaybe<Order_By>;
  item_income_total?: InputMaybe<Order_By>;
  item_orig_money?: InputMaybe<Order_By>;
  last_total?: InputMaybe<Order_By>;
  member_money?: InputMaybe<Order_By>;
  not_income_money?: InputMaybe<Order_By>;
  order_origin_id?: InputMaybe<Order_By>;
  orig_server_fee?: InputMaybe<Order_By>;
  orig_total?: InputMaybe<Order_By>;
  orig_zdxfbq?: InputMaybe<Order_By>;
  people_qty?: InputMaybe<Order_By>;
  present_money?: InputMaybe<Order_By>;
  promote_money?: InputMaybe<Order_By>;
  quota_money?: InputMaybe<Order_By>;
  sale_type_id?: InputMaybe<Order_By>;
  service_fee_income_money?: InputMaybe<Order_By>;
  service_fee_last_total?: InputMaybe<Order_By>;
  service_fee_not_income_money?: InputMaybe<Order_By>;
  table_qty?: InputMaybe<Order_By>;
  tax_money?: InputMaybe<Order_By>;
  wipe_money?: InputMaybe<Order_By>;
  zdxf_income_money?: InputMaybe<Order_By>;
};

/** Streaming cursor of the table "bills" */
export type Bills_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Bills_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Bills_Stream_Cursor_Value_Input = {
  area_code?: InputMaybe<Scalars['String']>;
  area_id?: InputMaybe<Scalars['bigint']>;
  area_name?: InputMaybe<Scalars['String']>;
  brand_code?: InputMaybe<Scalars['String']>;
  brand_name?: InputMaybe<Scalars['String']>;
  bs_code?: InputMaybe<Scalars['String']>;
  bs_id?: InputMaybe<Scalars['bigint']>;
  bs_remark?: InputMaybe<Scalars['String']>;
  btpw_user_account?: InputMaybe<Scalars['String']>;
  card_kind_name?: InputMaybe<Scalars['String']>;
  center_code?: InputMaybe<Scalars['String']>;
  center_name?: InputMaybe<Scalars['String']>;
  create_time?: InputMaybe<Scalars['timestamp']>;
  de_from?: InputMaybe<Scalars['String']>;
  delflg?: InputMaybe<Scalars['Int']>;
  dinner_type_id?: InputMaybe<Scalars['Int']>;
  dinner_type_name?: InputMaybe<Scalars['String']>;
  disc_money?: InputMaybe<Scalars['numeric']>;
  disc_total?: InputMaybe<Scalars['numeric']>;
  income_total?: InputMaybe<Scalars['numeric']>;
  is_continued_bill?: InputMaybe<Scalars['Boolean']>;
  is_continued_bill_name?: InputMaybe<Scalars['String']>;
  is_give_invoice?: InputMaybe<Scalars['String']>;
  item_income_total?: InputMaybe<Scalars['numeric']>;
  item_orig_money?: InputMaybe<Scalars['numeric']>;
  last_total?: InputMaybe<Scalars['numeric']>;
  member_card_no?: InputMaybe<Scalars['String']>;
  member_id?: InputMaybe<Scalars['String']>;
  member_mobile?: InputMaybe<Scalars['String']>;
  member_money?: InputMaybe<Scalars['numeric']>;
  member_name?: InputMaybe<Scalars['String']>;
  modify_time?: InputMaybe<Scalars['timestamp']>;
  not_income_money?: InputMaybe<Scalars['numeric']>;
  open_time?: InputMaybe<Scalars['timestamp']>;
  order_code?: InputMaybe<Scalars['String']>;
  order_origin_id?: InputMaybe<Scalars['Int']>;
  order_origin_name?: InputMaybe<Scalars['String']>;
  order_type?: InputMaybe<Scalars['String']>;
  orig_server_fee?: InputMaybe<Scalars['numeric']>;
  orig_total?: InputMaybe<Scalars['numeric']>;
  orig_zdxfbq?: InputMaybe<Scalars['Int']>;
  owo_open_id?: InputMaybe<Scalars['String']>;
  owo_union_id?: InputMaybe<Scalars['String']>;
  people_qty?: InputMaybe<Scalars['Int']>;
  point_code?: InputMaybe<Scalars['String']>;
  point_name?: InputMaybe<Scalars['String']>;
  present_money?: InputMaybe<Scalars['numeric']>;
  promote_money?: InputMaybe<Scalars['numeric']>;
  quota_money?: InputMaybe<Scalars['numeric']>;
  sale_type_id?: InputMaybe<Scalars['Int']>;
  sale_type_name?: InputMaybe<Scalars['String']>;
  salesman_code?: InputMaybe<Scalars['String']>;
  salesman_name?: InputMaybe<Scalars['String']>;
  service_fee_income_money?: InputMaybe<Scalars['numeric']>;
  service_fee_last_total?: InputMaybe<Scalars['numeric']>;
  service_fee_not_income_money?: InputMaybe<Scalars['numeric']>;
  settle_biz_date?: InputMaybe<Scalars['date']>;
  settle_biz_month?: InputMaybe<Scalars['String']>;
  settle_state?: InputMaybe<Scalars['String']>;
  settle_time?: InputMaybe<Scalars['timestamp']>;
  shop_code?: InputMaybe<Scalars['String']>;
  shop_id?: InputMaybe<Scalars['String']>;
  shop_name?: InputMaybe<Scalars['String']>;
  shop_out_code?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
  table_qty?: InputMaybe<Scalars['Int']>;
  tax_money?: InputMaybe<Scalars['numeric']>;
  team_id?: InputMaybe<Scalars['String']>;
  third_serial?: InputMaybe<Scalars['String']>;
  ts_code?: InputMaybe<Scalars['String']>;
  waiter_code?: InputMaybe<Scalars['String']>;
  waiter_name?: InputMaybe<Scalars['String']>;
  wipe_money?: InputMaybe<Scalars['numeric']>;
  zdxf_income_money?: InputMaybe<Scalars['numeric']>;
};

/** aggregate sum on columns */
export type Bills_Sum_Fields = {
  __typename?: 'bills_sum_fields';
  area_id?: Maybe<Scalars['bigint']>;
  bs_id?: Maybe<Scalars['bigint']>;
  delflg?: Maybe<Scalars['Int']>;
  dinner_type_id?: Maybe<Scalars['Int']>;
  disc_money?: Maybe<Scalars['numeric']>;
  disc_total?: Maybe<Scalars['numeric']>;
  income_total?: Maybe<Scalars['numeric']>;
  item_income_total?: Maybe<Scalars['numeric']>;
  item_orig_money?: Maybe<Scalars['numeric']>;
  last_total?: Maybe<Scalars['numeric']>;
  member_money?: Maybe<Scalars['numeric']>;
  not_income_money?: Maybe<Scalars['numeric']>;
  order_origin_id?: Maybe<Scalars['Int']>;
  orig_server_fee?: Maybe<Scalars['numeric']>;
  orig_total?: Maybe<Scalars['numeric']>;
  orig_zdxfbq?: Maybe<Scalars['Int']>;
  people_qty?: Maybe<Scalars['Int']>;
  present_money?: Maybe<Scalars['numeric']>;
  promote_money?: Maybe<Scalars['numeric']>;
  quota_money?: Maybe<Scalars['numeric']>;
  sale_type_id?: Maybe<Scalars['Int']>;
  service_fee_income_money?: Maybe<Scalars['numeric']>;
  service_fee_last_total?: Maybe<Scalars['numeric']>;
  service_fee_not_income_money?: Maybe<Scalars['numeric']>;
  table_qty?: Maybe<Scalars['Int']>;
  tax_money?: Maybe<Scalars['numeric']>;
  wipe_money?: Maybe<Scalars['numeric']>;
  zdxf_income_money?: Maybe<Scalars['numeric']>;
};

/** order by sum() on columns of table "bills" */
export type Bills_Sum_Order_By = {
  area_id?: InputMaybe<Order_By>;
  bs_id?: InputMaybe<Order_By>;
  delflg?: InputMaybe<Order_By>;
  dinner_type_id?: InputMaybe<Order_By>;
  disc_money?: InputMaybe<Order_By>;
  disc_total?: InputMaybe<Order_By>;
  income_total?: InputMaybe<Order_By>;
  item_income_total?: InputMaybe<Order_By>;
  item_orig_money?: InputMaybe<Order_By>;
  last_total?: InputMaybe<Order_By>;
  member_money?: InputMaybe<Order_By>;
  not_income_money?: InputMaybe<Order_By>;
  order_origin_id?: InputMaybe<Order_By>;
  orig_server_fee?: InputMaybe<Order_By>;
  orig_total?: InputMaybe<Order_By>;
  orig_zdxfbq?: InputMaybe<Order_By>;
  people_qty?: InputMaybe<Order_By>;
  present_money?: InputMaybe<Order_By>;
  promote_money?: InputMaybe<Order_By>;
  quota_money?: InputMaybe<Order_By>;
  sale_type_id?: InputMaybe<Order_By>;
  service_fee_income_money?: InputMaybe<Order_By>;
  service_fee_last_total?: InputMaybe<Order_By>;
  service_fee_not_income_money?: InputMaybe<Order_By>;
  table_qty?: InputMaybe<Order_By>;
  tax_money?: InputMaybe<Order_By>;
  wipe_money?: InputMaybe<Order_By>;
  zdxf_income_money?: InputMaybe<Order_By>;
};

/** update columns of table "bills" */
export enum Bills_Update_Column {
  /** column name */
  AreaCode = 'area_code',
  /** column name */
  AreaId = 'area_id',
  /** column name */
  AreaName = 'area_name',
  /** column name */
  BrandCode = 'brand_code',
  /** column name */
  BrandName = 'brand_name',
  /** column name */
  BsCode = 'bs_code',
  /** column name */
  BsId = 'bs_id',
  /** column name */
  BsRemark = 'bs_remark',
  /** column name */
  BtpwUserAccount = 'btpw_user_account',
  /** column name */
  CardKindName = 'card_kind_name',
  /** column name */
  CenterCode = 'center_code',
  /** column name */
  CenterName = 'center_name',
  /** column name */
  CreateTime = 'create_time',
  /** column name */
  DeFrom = 'de_from',
  /** column name */
  Delflg = 'delflg',
  /** column name */
  DinnerTypeId = 'dinner_type_id',
  /** column name */
  DinnerTypeName = 'dinner_type_name',
  /** column name */
  DiscMoney = 'disc_money',
  /** column name */
  DiscTotal = 'disc_total',
  /** column name */
  IncomeTotal = 'income_total',
  /** column name */
  IsContinuedBill = 'is_continued_bill',
  /** column name */
  IsContinuedBillName = 'is_continued_bill_name',
  /** column name */
  IsGiveInvoice = 'is_give_invoice',
  /** column name */
  ItemIncomeTotal = 'item_income_total',
  /** column name */
  ItemOrigMoney = 'item_orig_money',
  /** column name */
  LastTotal = 'last_total',
  /** column name */
  MemberCardNo = 'member_card_no',
  /** column name */
  MemberId = 'member_id',
  /** column name */
  MemberMobile = 'member_mobile',
  /** column name */
  MemberMoney = 'member_money',
  /** column name */
  MemberName = 'member_name',
  /** column name */
  ModifyTime = 'modify_time',
  /** column name */
  NotIncomeMoney = 'not_income_money',
  /** column name */
  OpenTime = 'open_time',
  /** column name */
  OrderCode = 'order_code',
  /** column name */
  OrderOriginId = 'order_origin_id',
  /** column name */
  OrderOriginName = 'order_origin_name',
  /** column name */
  OrderType = 'order_type',
  /** column name */
  OrigServerFee = 'orig_server_fee',
  /** column name */
  OrigTotal = 'orig_total',
  /** column name */
  OrigZdxfbq = 'orig_zdxfbq',
  /** column name */
  OwoOpenId = 'owo_open_id',
  /** column name */
  OwoUnionId = 'owo_union_id',
  /** column name */
  PeopleQty = 'people_qty',
  /** column name */
  PointCode = 'point_code',
  /** column name */
  PointName = 'point_name',
  /** column name */
  PresentMoney = 'present_money',
  /** column name */
  PromoteMoney = 'promote_money',
  /** column name */
  QuotaMoney = 'quota_money',
  /** column name */
  SaleTypeId = 'sale_type_id',
  /** column name */
  SaleTypeName = 'sale_type_name',
  /** column name */
  SalesmanCode = 'salesman_code',
  /** column name */
  SalesmanName = 'salesman_name',
  /** column name */
  ServiceFeeIncomeMoney = 'service_fee_income_money',
  /** column name */
  ServiceFeeLastTotal = 'service_fee_last_total',
  /** column name */
  ServiceFeeNotIncomeMoney = 'service_fee_not_income_money',
  /** column name */
  SettleBizDate = 'settle_biz_date',
  /** column name */
  SettleBizMonth = 'settle_biz_month',
  /** column name */
  SettleState = 'settle_state',
  /** column name */
  SettleTime = 'settle_time',
  /** column name */
  ShopCode = 'shop_code',
  /** column name */
  ShopId = 'shop_id',
  /** column name */
  ShopName = 'shop_name',
  /** column name */
  ShopOutCode = 'shop_out_code',
  /** column name */
  State = 'state',
  /** column name */
  TableQty = 'table_qty',
  /** column name */
  TaxMoney = 'tax_money',
  /** column name */
  TeamId = 'team_id',
  /** column name */
  ThirdSerial = 'third_serial',
  /** column name */
  TsCode = 'ts_code',
  /** column name */
  WaiterCode = 'waiter_code',
  /** column name */
  WaiterName = 'waiter_name',
  /** column name */
  WipeMoney = 'wipe_money',
  /** column name */
  ZdxfIncomeMoney = 'zdxf_income_money'
}

export type Bills_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: InputMaybe<Bills_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Bills_Set_Input>;
  /** filter the rows which have to be updated */
  where: Bills_Bool_Exp;
};

/** aggregate var_pop on columns */
export type Bills_Var_Pop_Fields = {
  __typename?: 'bills_var_pop_fields';
  area_id?: Maybe<Scalars['Float']>;
  bs_id?: Maybe<Scalars['Float']>;
  delflg?: Maybe<Scalars['Float']>;
  dinner_type_id?: Maybe<Scalars['Float']>;
  disc_money?: Maybe<Scalars['Float']>;
  disc_total?: Maybe<Scalars['Float']>;
  income_total?: Maybe<Scalars['Float']>;
  item_income_total?: Maybe<Scalars['Float']>;
  item_orig_money?: Maybe<Scalars['Float']>;
  last_total?: Maybe<Scalars['Float']>;
  member_money?: Maybe<Scalars['Float']>;
  not_income_money?: Maybe<Scalars['Float']>;
  order_origin_id?: Maybe<Scalars['Float']>;
  orig_server_fee?: Maybe<Scalars['Float']>;
  orig_total?: Maybe<Scalars['Float']>;
  orig_zdxfbq?: Maybe<Scalars['Float']>;
  people_qty?: Maybe<Scalars['Float']>;
  present_money?: Maybe<Scalars['Float']>;
  promote_money?: Maybe<Scalars['Float']>;
  quota_money?: Maybe<Scalars['Float']>;
  sale_type_id?: Maybe<Scalars['Float']>;
  service_fee_income_money?: Maybe<Scalars['Float']>;
  service_fee_last_total?: Maybe<Scalars['Float']>;
  service_fee_not_income_money?: Maybe<Scalars['Float']>;
  table_qty?: Maybe<Scalars['Float']>;
  tax_money?: Maybe<Scalars['Float']>;
  wipe_money?: Maybe<Scalars['Float']>;
  zdxf_income_money?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "bills" */
export type Bills_Var_Pop_Order_By = {
  area_id?: InputMaybe<Order_By>;
  bs_id?: InputMaybe<Order_By>;
  delflg?: InputMaybe<Order_By>;
  dinner_type_id?: InputMaybe<Order_By>;
  disc_money?: InputMaybe<Order_By>;
  disc_total?: InputMaybe<Order_By>;
  income_total?: InputMaybe<Order_By>;
  item_income_total?: InputMaybe<Order_By>;
  item_orig_money?: InputMaybe<Order_By>;
  last_total?: InputMaybe<Order_By>;
  member_money?: InputMaybe<Order_By>;
  not_income_money?: InputMaybe<Order_By>;
  order_origin_id?: InputMaybe<Order_By>;
  orig_server_fee?: InputMaybe<Order_By>;
  orig_total?: InputMaybe<Order_By>;
  orig_zdxfbq?: InputMaybe<Order_By>;
  people_qty?: InputMaybe<Order_By>;
  present_money?: InputMaybe<Order_By>;
  promote_money?: InputMaybe<Order_By>;
  quota_money?: InputMaybe<Order_By>;
  sale_type_id?: InputMaybe<Order_By>;
  service_fee_income_money?: InputMaybe<Order_By>;
  service_fee_last_total?: InputMaybe<Order_By>;
  service_fee_not_income_money?: InputMaybe<Order_By>;
  table_qty?: InputMaybe<Order_By>;
  tax_money?: InputMaybe<Order_By>;
  wipe_money?: InputMaybe<Order_By>;
  zdxf_income_money?: InputMaybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Bills_Var_Samp_Fields = {
  __typename?: 'bills_var_samp_fields';
  area_id?: Maybe<Scalars['Float']>;
  bs_id?: Maybe<Scalars['Float']>;
  delflg?: Maybe<Scalars['Float']>;
  dinner_type_id?: Maybe<Scalars['Float']>;
  disc_money?: Maybe<Scalars['Float']>;
  disc_total?: Maybe<Scalars['Float']>;
  income_total?: Maybe<Scalars['Float']>;
  item_income_total?: Maybe<Scalars['Float']>;
  item_orig_money?: Maybe<Scalars['Float']>;
  last_total?: Maybe<Scalars['Float']>;
  member_money?: Maybe<Scalars['Float']>;
  not_income_money?: Maybe<Scalars['Float']>;
  order_origin_id?: Maybe<Scalars['Float']>;
  orig_server_fee?: Maybe<Scalars['Float']>;
  orig_total?: Maybe<Scalars['Float']>;
  orig_zdxfbq?: Maybe<Scalars['Float']>;
  people_qty?: Maybe<Scalars['Float']>;
  present_money?: Maybe<Scalars['Float']>;
  promote_money?: Maybe<Scalars['Float']>;
  quota_money?: Maybe<Scalars['Float']>;
  sale_type_id?: Maybe<Scalars['Float']>;
  service_fee_income_money?: Maybe<Scalars['Float']>;
  service_fee_last_total?: Maybe<Scalars['Float']>;
  service_fee_not_income_money?: Maybe<Scalars['Float']>;
  table_qty?: Maybe<Scalars['Float']>;
  tax_money?: Maybe<Scalars['Float']>;
  wipe_money?: Maybe<Scalars['Float']>;
  zdxf_income_money?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "bills" */
export type Bills_Var_Samp_Order_By = {
  area_id?: InputMaybe<Order_By>;
  bs_id?: InputMaybe<Order_By>;
  delflg?: InputMaybe<Order_By>;
  dinner_type_id?: InputMaybe<Order_By>;
  disc_money?: InputMaybe<Order_By>;
  disc_total?: InputMaybe<Order_By>;
  income_total?: InputMaybe<Order_By>;
  item_income_total?: InputMaybe<Order_By>;
  item_orig_money?: InputMaybe<Order_By>;
  last_total?: InputMaybe<Order_By>;
  member_money?: InputMaybe<Order_By>;
  not_income_money?: InputMaybe<Order_By>;
  order_origin_id?: InputMaybe<Order_By>;
  orig_server_fee?: InputMaybe<Order_By>;
  orig_total?: InputMaybe<Order_By>;
  orig_zdxfbq?: InputMaybe<Order_By>;
  people_qty?: InputMaybe<Order_By>;
  present_money?: InputMaybe<Order_By>;
  promote_money?: InputMaybe<Order_By>;
  quota_money?: InputMaybe<Order_By>;
  sale_type_id?: InputMaybe<Order_By>;
  service_fee_income_money?: InputMaybe<Order_By>;
  service_fee_last_total?: InputMaybe<Order_By>;
  service_fee_not_income_money?: InputMaybe<Order_By>;
  table_qty?: InputMaybe<Order_By>;
  tax_money?: InputMaybe<Order_By>;
  wipe_money?: InputMaybe<Order_By>;
  zdxf_income_money?: InputMaybe<Order_By>;
};

/** aggregate variance on columns */
export type Bills_Variance_Fields = {
  __typename?: 'bills_variance_fields';
  area_id?: Maybe<Scalars['Float']>;
  bs_id?: Maybe<Scalars['Float']>;
  delflg?: Maybe<Scalars['Float']>;
  dinner_type_id?: Maybe<Scalars['Float']>;
  disc_money?: Maybe<Scalars['Float']>;
  disc_total?: Maybe<Scalars['Float']>;
  income_total?: Maybe<Scalars['Float']>;
  item_income_total?: Maybe<Scalars['Float']>;
  item_orig_money?: Maybe<Scalars['Float']>;
  last_total?: Maybe<Scalars['Float']>;
  member_money?: Maybe<Scalars['Float']>;
  not_income_money?: Maybe<Scalars['Float']>;
  order_origin_id?: Maybe<Scalars['Float']>;
  orig_server_fee?: Maybe<Scalars['Float']>;
  orig_total?: Maybe<Scalars['Float']>;
  orig_zdxfbq?: Maybe<Scalars['Float']>;
  people_qty?: Maybe<Scalars['Float']>;
  present_money?: Maybe<Scalars['Float']>;
  promote_money?: Maybe<Scalars['Float']>;
  quota_money?: Maybe<Scalars['Float']>;
  sale_type_id?: Maybe<Scalars['Float']>;
  service_fee_income_money?: Maybe<Scalars['Float']>;
  service_fee_last_total?: Maybe<Scalars['Float']>;
  service_fee_not_income_money?: Maybe<Scalars['Float']>;
  table_qty?: Maybe<Scalars['Float']>;
  tax_money?: Maybe<Scalars['Float']>;
  wipe_money?: Maybe<Scalars['Float']>;
  zdxf_income_money?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "bills" */
export type Bills_Variance_Order_By = {
  area_id?: InputMaybe<Order_By>;
  bs_id?: InputMaybe<Order_By>;
  delflg?: InputMaybe<Order_By>;
  dinner_type_id?: InputMaybe<Order_By>;
  disc_money?: InputMaybe<Order_By>;
  disc_total?: InputMaybe<Order_By>;
  income_total?: InputMaybe<Order_By>;
  item_income_total?: InputMaybe<Order_By>;
  item_orig_money?: InputMaybe<Order_By>;
  last_total?: InputMaybe<Order_By>;
  member_money?: InputMaybe<Order_By>;
  not_income_money?: InputMaybe<Order_By>;
  order_origin_id?: InputMaybe<Order_By>;
  orig_server_fee?: InputMaybe<Order_By>;
  orig_total?: InputMaybe<Order_By>;
  orig_zdxfbq?: InputMaybe<Order_By>;
  people_qty?: InputMaybe<Order_By>;
  present_money?: InputMaybe<Order_By>;
  promote_money?: InputMaybe<Order_By>;
  quota_money?: InputMaybe<Order_By>;
  sale_type_id?: InputMaybe<Order_By>;
  service_fee_income_money?: InputMaybe<Order_By>;
  service_fee_last_total?: InputMaybe<Order_By>;
  service_fee_not_income_money?: InputMaybe<Order_By>;
  table_qty?: InputMaybe<Order_By>;
  tax_money?: InputMaybe<Order_By>;
  wipe_money?: InputMaybe<Order_By>;
  zdxf_income_money?: InputMaybe<Order_By>;
};

/** columns and relationships of "bonusdeductions" */
export type Bonusdeductions = {
  __typename?: 'bonusdeductions';
  amount?: Maybe<Scalars['numeric']>;
  /** An object relationship */
  bonusdeductiontype: Bonusdeductiontypes;
  bonusdeductiontype_id: Scalars['String'];
  /** An object relationship */
  department: Departments;
  department_id: Scalars['String'];
  /** An object relationship */
  employee: Employees;
  employee_id: Scalars['String'];
  id: Scalars['String'];
  month: Scalars['String'];
};

/** aggregated selection of "bonusdeductions" */
export type Bonusdeductions_Aggregate = {
  __typename?: 'bonusdeductions_aggregate';
  aggregate?: Maybe<Bonusdeductions_Aggregate_Fields>;
  nodes: Array<Bonusdeductions>;
};

export type Bonusdeductions_Aggregate_Bool_Exp = {
  count?: InputMaybe<Bonusdeductions_Aggregate_Bool_Exp_Count>;
};

export type Bonusdeductions_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<Bonusdeductions_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<Bonusdeductions_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "bonusdeductions" */
export type Bonusdeductions_Aggregate_Fields = {
  __typename?: 'bonusdeductions_aggregate_fields';
  avg?: Maybe<Bonusdeductions_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Bonusdeductions_Max_Fields>;
  min?: Maybe<Bonusdeductions_Min_Fields>;
  stddev?: Maybe<Bonusdeductions_Stddev_Fields>;
  stddev_pop?: Maybe<Bonusdeductions_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Bonusdeductions_Stddev_Samp_Fields>;
  sum?: Maybe<Bonusdeductions_Sum_Fields>;
  var_pop?: Maybe<Bonusdeductions_Var_Pop_Fields>;
  var_samp?: Maybe<Bonusdeductions_Var_Samp_Fields>;
  variance?: Maybe<Bonusdeductions_Variance_Fields>;
};


/** aggregate fields of "bonusdeductions" */
export type Bonusdeductions_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Bonusdeductions_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "bonusdeductions" */
export type Bonusdeductions_Aggregate_Order_By = {
  avg?: InputMaybe<Bonusdeductions_Avg_Order_By>;
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<Bonusdeductions_Max_Order_By>;
  min?: InputMaybe<Bonusdeductions_Min_Order_By>;
  stddev?: InputMaybe<Bonusdeductions_Stddev_Order_By>;
  stddev_pop?: InputMaybe<Bonusdeductions_Stddev_Pop_Order_By>;
  stddev_samp?: InputMaybe<Bonusdeductions_Stddev_Samp_Order_By>;
  sum?: InputMaybe<Bonusdeductions_Sum_Order_By>;
  var_pop?: InputMaybe<Bonusdeductions_Var_Pop_Order_By>;
  var_samp?: InputMaybe<Bonusdeductions_Var_Samp_Order_By>;
  variance?: InputMaybe<Bonusdeductions_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "bonusdeductions" */
export type Bonusdeductions_Arr_Rel_Insert_Input = {
  data: Array<Bonusdeductions_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<Bonusdeductions_On_Conflict>;
};

/** aggregate avg on columns */
export type Bonusdeductions_Avg_Fields = {
  __typename?: 'bonusdeductions_avg_fields';
  amount?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "bonusdeductions" */
export type Bonusdeductions_Avg_Order_By = {
  amount?: InputMaybe<Order_By>;
};

/** Boolean expression to filter rows from the table "bonusdeductions". All fields are combined with a logical 'AND'. */
export type Bonusdeductions_Bool_Exp = {
  _and?: InputMaybe<Array<Bonusdeductions_Bool_Exp>>;
  _not?: InputMaybe<Bonusdeductions_Bool_Exp>;
  _or?: InputMaybe<Array<Bonusdeductions_Bool_Exp>>;
  amount?: InputMaybe<Numeric_Comparison_Exp>;
  bonusdeductiontype?: InputMaybe<Bonusdeductiontypes_Bool_Exp>;
  bonusdeductiontype_id?: InputMaybe<String_Comparison_Exp>;
  department?: InputMaybe<Departments_Bool_Exp>;
  department_id?: InputMaybe<String_Comparison_Exp>;
  employee?: InputMaybe<Employees_Bool_Exp>;
  employee_id?: InputMaybe<String_Comparison_Exp>;
  id?: InputMaybe<String_Comparison_Exp>;
  month?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "bonusdeductions" */
export enum Bonusdeductions_Constraint {
  /** unique or primary key constraint on columns "id" */
  BonusdeductionsPkey = 'bonusdeductions_pkey'
}

/** input type for incrementing numeric columns in table "bonusdeductions" */
export type Bonusdeductions_Inc_Input = {
  amount?: InputMaybe<Scalars['numeric']>;
};

/** input type for inserting data into table "bonusdeductions" */
export type Bonusdeductions_Insert_Input = {
  amount?: InputMaybe<Scalars['numeric']>;
  bonusdeductiontype?: InputMaybe<Bonusdeductiontypes_Obj_Rel_Insert_Input>;
  bonusdeductiontype_id?: InputMaybe<Scalars['String']>;
  department?: InputMaybe<Departments_Obj_Rel_Insert_Input>;
  department_id?: InputMaybe<Scalars['String']>;
  employee?: InputMaybe<Employees_Obj_Rel_Insert_Input>;
  employee_id?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['String']>;
  month?: InputMaybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Bonusdeductions_Max_Fields = {
  __typename?: 'bonusdeductions_max_fields';
  amount?: Maybe<Scalars['numeric']>;
  bonusdeductiontype_id?: Maybe<Scalars['String']>;
  department_id?: Maybe<Scalars['String']>;
  employee_id?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  month?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "bonusdeductions" */
export type Bonusdeductions_Max_Order_By = {
  amount?: InputMaybe<Order_By>;
  bonusdeductiontype_id?: InputMaybe<Order_By>;
  department_id?: InputMaybe<Order_By>;
  employee_id?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  month?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type Bonusdeductions_Min_Fields = {
  __typename?: 'bonusdeductions_min_fields';
  amount?: Maybe<Scalars['numeric']>;
  bonusdeductiontype_id?: Maybe<Scalars['String']>;
  department_id?: Maybe<Scalars['String']>;
  employee_id?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  month?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "bonusdeductions" */
export type Bonusdeductions_Min_Order_By = {
  amount?: InputMaybe<Order_By>;
  bonusdeductiontype_id?: InputMaybe<Order_By>;
  department_id?: InputMaybe<Order_By>;
  employee_id?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  month?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "bonusdeductions" */
export type Bonusdeductions_Mutation_Response = {
  __typename?: 'bonusdeductions_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Bonusdeductions>;
};

/** on_conflict condition type for table "bonusdeductions" */
export type Bonusdeductions_On_Conflict = {
  constraint: Bonusdeductions_Constraint;
  update_columns?: Array<Bonusdeductions_Update_Column>;
  where?: InputMaybe<Bonusdeductions_Bool_Exp>;
};

/** Ordering options when selecting data from "bonusdeductions". */
export type Bonusdeductions_Order_By = {
  amount?: InputMaybe<Order_By>;
  bonusdeductiontype?: InputMaybe<Bonusdeductiontypes_Order_By>;
  bonusdeductiontype_id?: InputMaybe<Order_By>;
  department?: InputMaybe<Departments_Order_By>;
  department_id?: InputMaybe<Order_By>;
  employee?: InputMaybe<Employees_Order_By>;
  employee_id?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  month?: InputMaybe<Order_By>;
};

/** primary key columns input for table: bonusdeductions */
export type Bonusdeductions_Pk_Columns_Input = {
  id: Scalars['String'];
};

/** select columns of table "bonusdeductions" */
export enum Bonusdeductions_Select_Column {
  /** column name */
  Amount = 'amount',
  /** column name */
  BonusdeductiontypeId = 'bonusdeductiontype_id',
  /** column name */
  DepartmentId = 'department_id',
  /** column name */
  EmployeeId = 'employee_id',
  /** column name */
  Id = 'id',
  /** column name */
  Month = 'month'
}

/** input type for updating data in table "bonusdeductions" */
export type Bonusdeductions_Set_Input = {
  amount?: InputMaybe<Scalars['numeric']>;
  bonusdeductiontype_id?: InputMaybe<Scalars['String']>;
  department_id?: InputMaybe<Scalars['String']>;
  employee_id?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['String']>;
  month?: InputMaybe<Scalars['String']>;
};

/** aggregate stddev on columns */
export type Bonusdeductions_Stddev_Fields = {
  __typename?: 'bonusdeductions_stddev_fields';
  amount?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "bonusdeductions" */
export type Bonusdeductions_Stddev_Order_By = {
  amount?: InputMaybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Bonusdeductions_Stddev_Pop_Fields = {
  __typename?: 'bonusdeductions_stddev_pop_fields';
  amount?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "bonusdeductions" */
export type Bonusdeductions_Stddev_Pop_Order_By = {
  amount?: InputMaybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Bonusdeductions_Stddev_Samp_Fields = {
  __typename?: 'bonusdeductions_stddev_samp_fields';
  amount?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "bonusdeductions" */
export type Bonusdeductions_Stddev_Samp_Order_By = {
  amount?: InputMaybe<Order_By>;
};

/** Streaming cursor of the table "bonusdeductions" */
export type Bonusdeductions_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Bonusdeductions_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Bonusdeductions_Stream_Cursor_Value_Input = {
  amount?: InputMaybe<Scalars['numeric']>;
  bonusdeductiontype_id?: InputMaybe<Scalars['String']>;
  department_id?: InputMaybe<Scalars['String']>;
  employee_id?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['String']>;
  month?: InputMaybe<Scalars['String']>;
};

/** aggregate sum on columns */
export type Bonusdeductions_Sum_Fields = {
  __typename?: 'bonusdeductions_sum_fields';
  amount?: Maybe<Scalars['numeric']>;
};

/** order by sum() on columns of table "bonusdeductions" */
export type Bonusdeductions_Sum_Order_By = {
  amount?: InputMaybe<Order_By>;
};

/** update columns of table "bonusdeductions" */
export enum Bonusdeductions_Update_Column {
  /** column name */
  Amount = 'amount',
  /** column name */
  BonusdeductiontypeId = 'bonusdeductiontype_id',
  /** column name */
  DepartmentId = 'department_id',
  /** column name */
  EmployeeId = 'employee_id',
  /** column name */
  Id = 'id',
  /** column name */
  Month = 'month'
}

export type Bonusdeductions_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: InputMaybe<Bonusdeductions_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Bonusdeductions_Set_Input>;
  /** filter the rows which have to be updated */
  where: Bonusdeductions_Bool_Exp;
};

/** aggregate var_pop on columns */
export type Bonusdeductions_Var_Pop_Fields = {
  __typename?: 'bonusdeductions_var_pop_fields';
  amount?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "bonusdeductions" */
export type Bonusdeductions_Var_Pop_Order_By = {
  amount?: InputMaybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Bonusdeductions_Var_Samp_Fields = {
  __typename?: 'bonusdeductions_var_samp_fields';
  amount?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "bonusdeductions" */
export type Bonusdeductions_Var_Samp_Order_By = {
  amount?: InputMaybe<Order_By>;
};

/** aggregate variance on columns */
export type Bonusdeductions_Variance_Fields = {
  __typename?: 'bonusdeductions_variance_fields';
  amount?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "bonusdeductions" */
export type Bonusdeductions_Variance_Order_By = {
  amount?: InputMaybe<Order_By>;
};

/** columns and relationships of "bonusdeductiontypes" */
export type Bonusdeductiontypes = {
  __typename?: 'bonusdeductiontypes';
  /** An array relationship */
  bonusdeductions: Array<Bonusdeductions>;
  /** An aggregate relationship */
  bonusdeductions_aggregate: Bonusdeductions_Aggregate;
  id: Scalars['String'];
  is_bonus: Scalars['Boolean'];
  name: Scalars['String'];
};


/** columns and relationships of "bonusdeductiontypes" */
export type BonusdeductiontypesBonusdeductionsArgs = {
  distinct_on?: InputMaybe<Array<Bonusdeductions_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Bonusdeductions_Order_By>>;
  where?: InputMaybe<Bonusdeductions_Bool_Exp>;
};


/** columns and relationships of "bonusdeductiontypes" */
export type BonusdeductiontypesBonusdeductions_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Bonusdeductions_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Bonusdeductions_Order_By>>;
  where?: InputMaybe<Bonusdeductions_Bool_Exp>;
};

/** aggregated selection of "bonusdeductiontypes" */
export type Bonusdeductiontypes_Aggregate = {
  __typename?: 'bonusdeductiontypes_aggregate';
  aggregate?: Maybe<Bonusdeductiontypes_Aggregate_Fields>;
  nodes: Array<Bonusdeductiontypes>;
};

/** aggregate fields of "bonusdeductiontypes" */
export type Bonusdeductiontypes_Aggregate_Fields = {
  __typename?: 'bonusdeductiontypes_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Bonusdeductiontypes_Max_Fields>;
  min?: Maybe<Bonusdeductiontypes_Min_Fields>;
};


/** aggregate fields of "bonusdeductiontypes" */
export type Bonusdeductiontypes_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Bonusdeductiontypes_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** Boolean expression to filter rows from the table "bonusdeductiontypes". All fields are combined with a logical 'AND'. */
export type Bonusdeductiontypes_Bool_Exp = {
  _and?: InputMaybe<Array<Bonusdeductiontypes_Bool_Exp>>;
  _not?: InputMaybe<Bonusdeductiontypes_Bool_Exp>;
  _or?: InputMaybe<Array<Bonusdeductiontypes_Bool_Exp>>;
  bonusdeductions?: InputMaybe<Bonusdeductions_Bool_Exp>;
  bonusdeductions_aggregate?: InputMaybe<Bonusdeductions_Aggregate_Bool_Exp>;
  id?: InputMaybe<String_Comparison_Exp>;
  is_bonus?: InputMaybe<Boolean_Comparison_Exp>;
  name?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "bonusdeductiontypes" */
export enum Bonusdeductiontypes_Constraint {
  /** unique or primary key constraint on columns "name" */
  BonusdeductiontypesNameKey = 'bonusdeductiontypes_name_key',
  /** unique or primary key constraint on columns "id" */
  BonusdeductiontypesPkey = 'bonusdeductiontypes_pkey'
}

/** input type for inserting data into table "bonusdeductiontypes" */
export type Bonusdeductiontypes_Insert_Input = {
  bonusdeductions?: InputMaybe<Bonusdeductions_Arr_Rel_Insert_Input>;
  id?: InputMaybe<Scalars['String']>;
  is_bonus?: InputMaybe<Scalars['Boolean']>;
  name?: InputMaybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Bonusdeductiontypes_Max_Fields = {
  __typename?: 'bonusdeductiontypes_max_fields';
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};

/** aggregate min on columns */
export type Bonusdeductiontypes_Min_Fields = {
  __typename?: 'bonusdeductiontypes_min_fields';
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};

/** response of any mutation on the table "bonusdeductiontypes" */
export type Bonusdeductiontypes_Mutation_Response = {
  __typename?: 'bonusdeductiontypes_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Bonusdeductiontypes>;
};

/** input type for inserting object relation for remote table "bonusdeductiontypes" */
export type Bonusdeductiontypes_Obj_Rel_Insert_Input = {
  data: Bonusdeductiontypes_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<Bonusdeductiontypes_On_Conflict>;
};

/** on_conflict condition type for table "bonusdeductiontypes" */
export type Bonusdeductiontypes_On_Conflict = {
  constraint: Bonusdeductiontypes_Constraint;
  update_columns?: Array<Bonusdeductiontypes_Update_Column>;
  where?: InputMaybe<Bonusdeductiontypes_Bool_Exp>;
};

/** Ordering options when selecting data from "bonusdeductiontypes". */
export type Bonusdeductiontypes_Order_By = {
  bonusdeductions_aggregate?: InputMaybe<Bonusdeductions_Aggregate_Order_By>;
  id?: InputMaybe<Order_By>;
  is_bonus?: InputMaybe<Order_By>;
  name?: InputMaybe<Order_By>;
};

/** primary key columns input for table: bonusdeductiontypes */
export type Bonusdeductiontypes_Pk_Columns_Input = {
  id: Scalars['String'];
};

/** select columns of table "bonusdeductiontypes" */
export enum Bonusdeductiontypes_Select_Column {
  /** column name */
  Id = 'id',
  /** column name */
  IsBonus = 'is_bonus',
  /** column name */
  Name = 'name'
}

/** input type for updating data in table "bonusdeductiontypes" */
export type Bonusdeductiontypes_Set_Input = {
  id?: InputMaybe<Scalars['String']>;
  is_bonus?: InputMaybe<Scalars['Boolean']>;
  name?: InputMaybe<Scalars['String']>;
};

/** Streaming cursor of the table "bonusdeductiontypes" */
export type Bonusdeductiontypes_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Bonusdeductiontypes_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Bonusdeductiontypes_Stream_Cursor_Value_Input = {
  id?: InputMaybe<Scalars['String']>;
  is_bonus?: InputMaybe<Scalars['Boolean']>;
  name?: InputMaybe<Scalars['String']>;
};

/** update columns of table "bonusdeductiontypes" */
export enum Bonusdeductiontypes_Update_Column {
  /** column name */
  Id = 'id',
  /** column name */
  IsBonus = 'is_bonus',
  /** column name */
  Name = 'name'
}

export type Bonusdeductiontypes_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Bonusdeductiontypes_Set_Input>;
  /** filter the rows which have to be updated */
  where: Bonusdeductiontypes_Bool_Exp;
};

/** columns and relationships of "brands" */
export type Brands = {
  __typename?: 'brands';
  /** An array relationship */
  brands_employees: Array<Brands_Employees>;
  /** An aggregate relationship */
  brands_employees_aggregate: Brands_Employees_Aggregate;
  /** An object relationship */
  department?: Maybe<Departments>;
  department_id?: Maybe<Scalars['String']>;
  /** An array relationship */
  fooditems: Array<Fooditems>;
  /** An aggregate relationship */
  fooditems_aggregate: Fooditems_Aggregate;
  id: Scalars['String'];
  is_operation: Scalars['Boolean'];
  name: Scalars['String'];
  status: Scalars['Int'];
  /** An array relationship */
  stores: Array<Stores>;
  /** An aggregate relationship */
  stores_aggregate: Stores_Aggregate;
  tcsl_id?: Maybe<Scalars['String']>;
};


/** columns and relationships of "brands" */
export type BrandsBrands_EmployeesArgs = {
  distinct_on?: InputMaybe<Array<Brands_Employees_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Brands_Employees_Order_By>>;
  where?: InputMaybe<Brands_Employees_Bool_Exp>;
};


/** columns and relationships of "brands" */
export type BrandsBrands_Employees_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Brands_Employees_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Brands_Employees_Order_By>>;
  where?: InputMaybe<Brands_Employees_Bool_Exp>;
};


/** columns and relationships of "brands" */
export type BrandsFooditemsArgs = {
  distinct_on?: InputMaybe<Array<Fooditems_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Fooditems_Order_By>>;
  where?: InputMaybe<Fooditems_Bool_Exp>;
};


/** columns and relationships of "brands" */
export type BrandsFooditems_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Fooditems_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Fooditems_Order_By>>;
  where?: InputMaybe<Fooditems_Bool_Exp>;
};


/** columns and relationships of "brands" */
export type BrandsStoresArgs = {
  distinct_on?: InputMaybe<Array<Stores_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Stores_Order_By>>;
  where?: InputMaybe<Stores_Bool_Exp>;
};


/** columns and relationships of "brands" */
export type BrandsStores_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Stores_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Stores_Order_By>>;
  where?: InputMaybe<Stores_Bool_Exp>;
};

/** aggregated selection of "brands" */
export type Brands_Aggregate = {
  __typename?: 'brands_aggregate';
  aggregate?: Maybe<Brands_Aggregate_Fields>;
  nodes: Array<Brands>;
};

export type Brands_Aggregate_Bool_Exp = {
  bool_and?: InputMaybe<Brands_Aggregate_Bool_Exp_Bool_And>;
  bool_or?: InputMaybe<Brands_Aggregate_Bool_Exp_Bool_Or>;
  count?: InputMaybe<Brands_Aggregate_Bool_Exp_Count>;
};

export type Brands_Aggregate_Bool_Exp_Bool_And = {
  arguments: Brands_Select_Column_Brands_Aggregate_Bool_Exp_Bool_And_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<Brands_Bool_Exp>;
  predicate: Boolean_Comparison_Exp;
};

export type Brands_Aggregate_Bool_Exp_Bool_Or = {
  arguments: Brands_Select_Column_Brands_Aggregate_Bool_Exp_Bool_Or_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<Brands_Bool_Exp>;
  predicate: Boolean_Comparison_Exp;
};

export type Brands_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<Brands_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<Brands_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "brands" */
export type Brands_Aggregate_Fields = {
  __typename?: 'brands_aggregate_fields';
  avg?: Maybe<Brands_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Brands_Max_Fields>;
  min?: Maybe<Brands_Min_Fields>;
  stddev?: Maybe<Brands_Stddev_Fields>;
  stddev_pop?: Maybe<Brands_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Brands_Stddev_Samp_Fields>;
  sum?: Maybe<Brands_Sum_Fields>;
  var_pop?: Maybe<Brands_Var_Pop_Fields>;
  var_samp?: Maybe<Brands_Var_Samp_Fields>;
  variance?: Maybe<Brands_Variance_Fields>;
};


/** aggregate fields of "brands" */
export type Brands_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Brands_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "brands" */
export type Brands_Aggregate_Order_By = {
  avg?: InputMaybe<Brands_Avg_Order_By>;
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<Brands_Max_Order_By>;
  min?: InputMaybe<Brands_Min_Order_By>;
  stddev?: InputMaybe<Brands_Stddev_Order_By>;
  stddev_pop?: InputMaybe<Brands_Stddev_Pop_Order_By>;
  stddev_samp?: InputMaybe<Brands_Stddev_Samp_Order_By>;
  sum?: InputMaybe<Brands_Sum_Order_By>;
  var_pop?: InputMaybe<Brands_Var_Pop_Order_By>;
  var_samp?: InputMaybe<Brands_Var_Samp_Order_By>;
  variance?: InputMaybe<Brands_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "brands" */
export type Brands_Arr_Rel_Insert_Input = {
  data: Array<Brands_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<Brands_On_Conflict>;
};

/** aggregate avg on columns */
export type Brands_Avg_Fields = {
  __typename?: 'brands_avg_fields';
  status?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "brands" */
export type Brands_Avg_Order_By = {
  status?: InputMaybe<Order_By>;
};

/** Boolean expression to filter rows from the table "brands". All fields are combined with a logical 'AND'. */
export type Brands_Bool_Exp = {
  _and?: InputMaybe<Array<Brands_Bool_Exp>>;
  _not?: InputMaybe<Brands_Bool_Exp>;
  _or?: InputMaybe<Array<Brands_Bool_Exp>>;
  brands_employees?: InputMaybe<Brands_Employees_Bool_Exp>;
  brands_employees_aggregate?: InputMaybe<Brands_Employees_Aggregate_Bool_Exp>;
  department?: InputMaybe<Departments_Bool_Exp>;
  department_id?: InputMaybe<String_Comparison_Exp>;
  fooditems?: InputMaybe<Fooditems_Bool_Exp>;
  fooditems_aggregate?: InputMaybe<Fooditems_Aggregate_Bool_Exp>;
  id?: InputMaybe<String_Comparison_Exp>;
  is_operation?: InputMaybe<Boolean_Comparison_Exp>;
  name?: InputMaybe<String_Comparison_Exp>;
  status?: InputMaybe<Int_Comparison_Exp>;
  stores?: InputMaybe<Stores_Bool_Exp>;
  stores_aggregate?: InputMaybe<Stores_Aggregate_Bool_Exp>;
  tcsl_id?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "brands" */
export enum Brands_Constraint {
  /** unique or primary key constraint on columns "id" */
  BrandsPrimary10 = 'brandsPRIMARY10',
  /** unique or primary key constraint on columns "tcsl_id" */
  BrandsTcslIdKey = 'brands_tcsl_id_key'
}

/** columns and relationships of "brands_employees" */
export type Brands_Employees = {
  __typename?: 'brands_employees';
  /** An object relationship */
  brand: Brands;
  brand_id: Scalars['String'];
  /** An object relationship */
  employee: Employees;
  employee_id: Scalars['String'];
};

/** aggregated selection of "brands_employees" */
export type Brands_Employees_Aggregate = {
  __typename?: 'brands_employees_aggregate';
  aggregate?: Maybe<Brands_Employees_Aggregate_Fields>;
  nodes: Array<Brands_Employees>;
};

export type Brands_Employees_Aggregate_Bool_Exp = {
  count?: InputMaybe<Brands_Employees_Aggregate_Bool_Exp_Count>;
};

export type Brands_Employees_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<Brands_Employees_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<Brands_Employees_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "brands_employees" */
export type Brands_Employees_Aggregate_Fields = {
  __typename?: 'brands_employees_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Brands_Employees_Max_Fields>;
  min?: Maybe<Brands_Employees_Min_Fields>;
};


/** aggregate fields of "brands_employees" */
export type Brands_Employees_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Brands_Employees_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "brands_employees" */
export type Brands_Employees_Aggregate_Order_By = {
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<Brands_Employees_Max_Order_By>;
  min?: InputMaybe<Brands_Employees_Min_Order_By>;
};

/** input type for inserting array relation for remote table "brands_employees" */
export type Brands_Employees_Arr_Rel_Insert_Input = {
  data: Array<Brands_Employees_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<Brands_Employees_On_Conflict>;
};

/** Boolean expression to filter rows from the table "brands_employees". All fields are combined with a logical 'AND'. */
export type Brands_Employees_Bool_Exp = {
  _and?: InputMaybe<Array<Brands_Employees_Bool_Exp>>;
  _not?: InputMaybe<Brands_Employees_Bool_Exp>;
  _or?: InputMaybe<Array<Brands_Employees_Bool_Exp>>;
  brand?: InputMaybe<Brands_Bool_Exp>;
  brand_id?: InputMaybe<String_Comparison_Exp>;
  employee?: InputMaybe<Employees_Bool_Exp>;
  employee_id?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "brands_employees" */
export enum Brands_Employees_Constraint {
  /** unique or primary key constraint on columns "employee_id", "brand_id" */
  BrandsEmployeesPkey = 'brands_employees_pkey'
}

/** input type for inserting data into table "brands_employees" */
export type Brands_Employees_Insert_Input = {
  brand?: InputMaybe<Brands_Obj_Rel_Insert_Input>;
  brand_id?: InputMaybe<Scalars['String']>;
  employee?: InputMaybe<Employees_Obj_Rel_Insert_Input>;
  employee_id?: InputMaybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Brands_Employees_Max_Fields = {
  __typename?: 'brands_employees_max_fields';
  brand_id?: Maybe<Scalars['String']>;
  employee_id?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "brands_employees" */
export type Brands_Employees_Max_Order_By = {
  brand_id?: InputMaybe<Order_By>;
  employee_id?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type Brands_Employees_Min_Fields = {
  __typename?: 'brands_employees_min_fields';
  brand_id?: Maybe<Scalars['String']>;
  employee_id?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "brands_employees" */
export type Brands_Employees_Min_Order_By = {
  brand_id?: InputMaybe<Order_By>;
  employee_id?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "brands_employees" */
export type Brands_Employees_Mutation_Response = {
  __typename?: 'brands_employees_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Brands_Employees>;
};

/** on_conflict condition type for table "brands_employees" */
export type Brands_Employees_On_Conflict = {
  constraint: Brands_Employees_Constraint;
  update_columns?: Array<Brands_Employees_Update_Column>;
  where?: InputMaybe<Brands_Employees_Bool_Exp>;
};

/** Ordering options when selecting data from "brands_employees". */
export type Brands_Employees_Order_By = {
  brand?: InputMaybe<Brands_Order_By>;
  brand_id?: InputMaybe<Order_By>;
  employee?: InputMaybe<Employees_Order_By>;
  employee_id?: InputMaybe<Order_By>;
};

/** primary key columns input for table: brands_employees */
export type Brands_Employees_Pk_Columns_Input = {
  brand_id: Scalars['String'];
  employee_id: Scalars['String'];
};

/** select columns of table "brands_employees" */
export enum Brands_Employees_Select_Column {
  /** column name */
  BrandId = 'brand_id',
  /** column name */
  EmployeeId = 'employee_id'
}

/** input type for updating data in table "brands_employees" */
export type Brands_Employees_Set_Input = {
  brand_id?: InputMaybe<Scalars['String']>;
  employee_id?: InputMaybe<Scalars['String']>;
};

/** Streaming cursor of the table "brands_employees" */
export type Brands_Employees_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Brands_Employees_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Brands_Employees_Stream_Cursor_Value_Input = {
  brand_id?: InputMaybe<Scalars['String']>;
  employee_id?: InputMaybe<Scalars['String']>;
};

/** update columns of table "brands_employees" */
export enum Brands_Employees_Update_Column {
  /** column name */
  BrandId = 'brand_id',
  /** column name */
  EmployeeId = 'employee_id'
}

export type Brands_Employees_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Brands_Employees_Set_Input>;
  /** filter the rows which have to be updated */
  where: Brands_Employees_Bool_Exp;
};

/** input type for incrementing numeric columns in table "brands" */
export type Brands_Inc_Input = {
  status?: InputMaybe<Scalars['Int']>;
};

/** input type for inserting data into table "brands" */
export type Brands_Insert_Input = {
  brands_employees?: InputMaybe<Brands_Employees_Arr_Rel_Insert_Input>;
  department?: InputMaybe<Departments_Obj_Rel_Insert_Input>;
  department_id?: InputMaybe<Scalars['String']>;
  fooditems?: InputMaybe<Fooditems_Arr_Rel_Insert_Input>;
  id?: InputMaybe<Scalars['String']>;
  is_operation?: InputMaybe<Scalars['Boolean']>;
  name?: InputMaybe<Scalars['String']>;
  status?: InputMaybe<Scalars['Int']>;
  stores?: InputMaybe<Stores_Arr_Rel_Insert_Input>;
  tcsl_id?: InputMaybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Brands_Max_Fields = {
  __typename?: 'brands_max_fields';
  department_id?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['Int']>;
  tcsl_id?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "brands" */
export type Brands_Max_Order_By = {
  department_id?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  name?: InputMaybe<Order_By>;
  status?: InputMaybe<Order_By>;
  tcsl_id?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type Brands_Min_Fields = {
  __typename?: 'brands_min_fields';
  department_id?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['Int']>;
  tcsl_id?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "brands" */
export type Brands_Min_Order_By = {
  department_id?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  name?: InputMaybe<Order_By>;
  status?: InputMaybe<Order_By>;
  tcsl_id?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "brands" */
export type Brands_Mutation_Response = {
  __typename?: 'brands_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Brands>;
};

/** input type for inserting object relation for remote table "brands" */
export type Brands_Obj_Rel_Insert_Input = {
  data: Brands_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<Brands_On_Conflict>;
};

/** on_conflict condition type for table "brands" */
export type Brands_On_Conflict = {
  constraint: Brands_Constraint;
  update_columns?: Array<Brands_Update_Column>;
  where?: InputMaybe<Brands_Bool_Exp>;
};

/** Ordering options when selecting data from "brands". */
export type Brands_Order_By = {
  brands_employees_aggregate?: InputMaybe<Brands_Employees_Aggregate_Order_By>;
  department?: InputMaybe<Departments_Order_By>;
  department_id?: InputMaybe<Order_By>;
  fooditems_aggregate?: InputMaybe<Fooditems_Aggregate_Order_By>;
  id?: InputMaybe<Order_By>;
  is_operation?: InputMaybe<Order_By>;
  name?: InputMaybe<Order_By>;
  status?: InputMaybe<Order_By>;
  stores_aggregate?: InputMaybe<Stores_Aggregate_Order_By>;
  tcsl_id?: InputMaybe<Order_By>;
};

/** primary key columns input for table: brands */
export type Brands_Pk_Columns_Input = {
  id: Scalars['String'];
};

/** select columns of table "brands" */
export enum Brands_Select_Column {
  /** column name */
  DepartmentId = 'department_id',
  /** column name */
  Id = 'id',
  /** column name */
  IsOperation = 'is_operation',
  /** column name */
  Name = 'name',
  /** column name */
  Status = 'status',
  /** column name */
  TcslId = 'tcsl_id'
}

/** select "brands_aggregate_bool_exp_bool_and_arguments_columns" columns of table "brands" */
export enum Brands_Select_Column_Brands_Aggregate_Bool_Exp_Bool_And_Arguments_Columns {
  /** column name */
  IsOperation = 'is_operation'
}

/** select "brands_aggregate_bool_exp_bool_or_arguments_columns" columns of table "brands" */
export enum Brands_Select_Column_Brands_Aggregate_Bool_Exp_Bool_Or_Arguments_Columns {
  /** column name */
  IsOperation = 'is_operation'
}

/** input type for updating data in table "brands" */
export type Brands_Set_Input = {
  department_id?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['String']>;
  is_operation?: InputMaybe<Scalars['Boolean']>;
  name?: InputMaybe<Scalars['String']>;
  status?: InputMaybe<Scalars['Int']>;
  tcsl_id?: InputMaybe<Scalars['String']>;
};

/** aggregate stddev on columns */
export type Brands_Stddev_Fields = {
  __typename?: 'brands_stddev_fields';
  status?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "brands" */
export type Brands_Stddev_Order_By = {
  status?: InputMaybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Brands_Stddev_Pop_Fields = {
  __typename?: 'brands_stddev_pop_fields';
  status?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "brands" */
export type Brands_Stddev_Pop_Order_By = {
  status?: InputMaybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Brands_Stddev_Samp_Fields = {
  __typename?: 'brands_stddev_samp_fields';
  status?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "brands" */
export type Brands_Stddev_Samp_Order_By = {
  status?: InputMaybe<Order_By>;
};

/** Streaming cursor of the table "brands" */
export type Brands_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Brands_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Brands_Stream_Cursor_Value_Input = {
  department_id?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['String']>;
  is_operation?: InputMaybe<Scalars['Boolean']>;
  name?: InputMaybe<Scalars['String']>;
  status?: InputMaybe<Scalars['Int']>;
  tcsl_id?: InputMaybe<Scalars['String']>;
};

/** aggregate sum on columns */
export type Brands_Sum_Fields = {
  __typename?: 'brands_sum_fields';
  status?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "brands" */
export type Brands_Sum_Order_By = {
  status?: InputMaybe<Order_By>;
};

/** update columns of table "brands" */
export enum Brands_Update_Column {
  /** column name */
  DepartmentId = 'department_id',
  /** column name */
  Id = 'id',
  /** column name */
  IsOperation = 'is_operation',
  /** column name */
  Name = 'name',
  /** column name */
  Status = 'status',
  /** column name */
  TcslId = 'tcsl_id'
}

export type Brands_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: InputMaybe<Brands_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Brands_Set_Input>;
  /** filter the rows which have to be updated */
  where: Brands_Bool_Exp;
};

/** aggregate var_pop on columns */
export type Brands_Var_Pop_Fields = {
  __typename?: 'brands_var_pop_fields';
  status?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "brands" */
export type Brands_Var_Pop_Order_By = {
  status?: InputMaybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Brands_Var_Samp_Fields = {
  __typename?: 'brands_var_samp_fields';
  status?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "brands" */
export type Brands_Var_Samp_Order_By = {
  status?: InputMaybe<Order_By>;
};

/** aggregate variance on columns */
export type Brands_Variance_Fields = {
  __typename?: 'brands_variance_fields';
  status?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "brands" */
export type Brands_Variance_Order_By = {
  status?: InputMaybe<Order_By>;
};

/** Boolean expression to compare columns of type "bytea". All fields are combined with logical 'AND'. */
export type Bytea_Comparison_Exp = {
  _eq?: InputMaybe<Scalars['bytea']>;
  _gt?: InputMaybe<Scalars['bytea']>;
  _gte?: InputMaybe<Scalars['bytea']>;
  _in?: InputMaybe<Array<Scalars['bytea']>>;
  _is_null?: InputMaybe<Scalars['Boolean']>;
  _lt?: InputMaybe<Scalars['bytea']>;
  _lte?: InputMaybe<Scalars['bytea']>;
  _neq?: InputMaybe<Scalars['bytea']>;
  _nin?: InputMaybe<Array<Scalars['bytea']>>;
};

/** ordering argument of a cursor */
export enum Cursor_Ordering {
  /** ascending ordering of the cursor */
  Asc = 'ASC',
  /** descending ordering of the cursor */
  Desc = 'DESC'
}

/** Boolean expression to compare columns of type "date". All fields are combined with logical 'AND'. */
export type Date_Comparison_Exp = {
  _eq?: InputMaybe<Scalars['date']>;
  _gt?: InputMaybe<Scalars['date']>;
  _gte?: InputMaybe<Scalars['date']>;
  _in?: InputMaybe<Array<Scalars['date']>>;
  _is_null?: InputMaybe<Scalars['Boolean']>;
  _lt?: InputMaybe<Scalars['date']>;
  _lte?: InputMaybe<Scalars['date']>;
  _neq?: InputMaybe<Scalars['date']>;
  _nin?: InputMaybe<Array<Scalars['date']>>;
};

/** columns and relationships of "departments" */
export type Departments = {
  __typename?: 'departments';
  /** An object relationship */
  attendance_group?: Maybe<Attendance_Groups>;
  attendance_group_id?: Maybe<Scalars['String']>;
  /** An array relationship */
  attendances: Array<Attendance>;
  /** An aggregate relationship */
  attendances_aggregate: Attendance_Aggregate;
  /** An array relationship */
  bonusdeductions: Array<Bonusdeductions>;
  /** An aggregate relationship */
  bonusdeductions_aggregate: Bonusdeductions_Aggregate;
  /** An array relationship */
  brands: Array<Brands>;
  /** An aggregate relationship */
  brands_aggregate: Brands_Aggregate;
  /** An array relationship */
  child_departments: Array<Departments>;
  /** An aggregate relationship */
  child_departments_aggregate: Departments_Aggregate;
  /** An array relationship */
  departments_employees: Array<Departments_Employees>;
  /** An aggregate relationship */
  departments_employees_aggregate: Departments_Employees_Aggregate;
  /** An object relationship */
  departments_store?: Maybe<Departments_Stores>;
  /** An array relationship */
  departmentstores: Array<Departments_Stores>;
  /** An aggregate relationship */
  departmentstores_aggregate: Departments_Stores_Aggregate;
  /** An object relationship */
  employee?: Maybe<Employees>;
  /** An array relationship */
  employee_department_histories: Array<Employee_Salary_Department>;
  /** An aggregate relationship */
  employee_department_histories_aggregate: Employee_Salary_Department_Aggregate;
  /** An array relationship */
  employees: Array<Employees>;
  /** An aggregate relationship */
  employees_aggregate: Employees_Aggregate;
  id: Scalars['String'];
  /** An array relationship */
  insurance_funds: Array<Insurance_Funds>;
  /** An aggregate relationship */
  insurance_funds_aggregate: Insurance_Funds_Aggregate;
  is_store?: Maybe<Scalars['smallint']>;
  manager_id?: Maybe<Scalars['String']>;
  /** An array relationship */
  monthlysalaries: Array<Monthlysalary>;
  /** An array relationship */
  monthlysalariesByEmployeeDepartmentId: Array<Monthlysalary>;
  /** An aggregate relationship */
  monthlysalariesByEmployeeDepartmentId_aggregate: Monthlysalary_Aggregate;
  /** An aggregate relationship */
  monthlysalaries_aggregate: Monthlysalary_Aggregate;
  name?: Maybe<Scalars['String']>;
  /** An object relationship */
  outside_salary_account?: Maybe<Salary_Accounts>;
  outside_salary_account_id?: Maybe<Scalars['String']>;
  /** An object relationship */
  own_salary_account?: Maybe<Salary_Accounts>;
  own_salary_account_id?: Maybe<Scalars['String']>;
  /** An object relationship */
  parent_department?: Maybe<Departments>;
  parent_department_id?: Maybe<Scalars['String']>;
  ranking?: Maybe<Scalars['Int']>;
  small_department_name?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['smallint']>;
  /** An object relationship */
  store?: Maybe<Stores>;
  store_id?: Maybe<Scalars['String']>;
  /** An array relationship */
  stores: Array<Stores>;
  /** An aggregate relationship */
  stores_aggregate: Stores_Aggregate;
};


/** columns and relationships of "departments" */
export type DepartmentsAttendancesArgs = {
  distinct_on?: InputMaybe<Array<Attendance_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Attendance_Order_By>>;
  where?: InputMaybe<Attendance_Bool_Exp>;
};


/** columns and relationships of "departments" */
export type DepartmentsAttendances_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Attendance_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Attendance_Order_By>>;
  where?: InputMaybe<Attendance_Bool_Exp>;
};


/** columns and relationships of "departments" */
export type DepartmentsBonusdeductionsArgs = {
  distinct_on?: InputMaybe<Array<Bonusdeductions_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Bonusdeductions_Order_By>>;
  where?: InputMaybe<Bonusdeductions_Bool_Exp>;
};


/** columns and relationships of "departments" */
export type DepartmentsBonusdeductions_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Bonusdeductions_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Bonusdeductions_Order_By>>;
  where?: InputMaybe<Bonusdeductions_Bool_Exp>;
};


/** columns and relationships of "departments" */
export type DepartmentsBrandsArgs = {
  distinct_on?: InputMaybe<Array<Brands_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Brands_Order_By>>;
  where?: InputMaybe<Brands_Bool_Exp>;
};


/** columns and relationships of "departments" */
export type DepartmentsBrands_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Brands_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Brands_Order_By>>;
  where?: InputMaybe<Brands_Bool_Exp>;
};


/** columns and relationships of "departments" */
export type DepartmentsChild_DepartmentsArgs = {
  distinct_on?: InputMaybe<Array<Departments_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Departments_Order_By>>;
  where?: InputMaybe<Departments_Bool_Exp>;
};


/** columns and relationships of "departments" */
export type DepartmentsChild_Departments_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Departments_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Departments_Order_By>>;
  where?: InputMaybe<Departments_Bool_Exp>;
};


/** columns and relationships of "departments" */
export type DepartmentsDepartments_EmployeesArgs = {
  distinct_on?: InputMaybe<Array<Departments_Employees_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Departments_Employees_Order_By>>;
  where?: InputMaybe<Departments_Employees_Bool_Exp>;
};


/** columns and relationships of "departments" */
export type DepartmentsDepartments_Employees_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Departments_Employees_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Departments_Employees_Order_By>>;
  where?: InputMaybe<Departments_Employees_Bool_Exp>;
};


/** columns and relationships of "departments" */
export type DepartmentsDepartmentstoresArgs = {
  distinct_on?: InputMaybe<Array<Departments_Stores_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Departments_Stores_Order_By>>;
  where?: InputMaybe<Departments_Stores_Bool_Exp>;
};


/** columns and relationships of "departments" */
export type DepartmentsDepartmentstores_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Departments_Stores_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Departments_Stores_Order_By>>;
  where?: InputMaybe<Departments_Stores_Bool_Exp>;
};


/** columns and relationships of "departments" */
export type DepartmentsEmployee_Department_HistoriesArgs = {
  distinct_on?: InputMaybe<Array<Employee_Salary_Department_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Employee_Salary_Department_Order_By>>;
  where?: InputMaybe<Employee_Salary_Department_Bool_Exp>;
};


/** columns and relationships of "departments" */
export type DepartmentsEmployee_Department_Histories_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Employee_Salary_Department_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Employee_Salary_Department_Order_By>>;
  where?: InputMaybe<Employee_Salary_Department_Bool_Exp>;
};


/** columns and relationships of "departments" */
export type DepartmentsEmployeesArgs = {
  distinct_on?: InputMaybe<Array<Employees_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Employees_Order_By>>;
  where?: InputMaybe<Employees_Bool_Exp>;
};


/** columns and relationships of "departments" */
export type DepartmentsEmployees_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Employees_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Employees_Order_By>>;
  where?: InputMaybe<Employees_Bool_Exp>;
};


/** columns and relationships of "departments" */
export type DepartmentsInsurance_FundsArgs = {
  distinct_on?: InputMaybe<Array<Insurance_Funds_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Insurance_Funds_Order_By>>;
  where?: InputMaybe<Insurance_Funds_Bool_Exp>;
};


/** columns and relationships of "departments" */
export type DepartmentsInsurance_Funds_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Insurance_Funds_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Insurance_Funds_Order_By>>;
  where?: InputMaybe<Insurance_Funds_Bool_Exp>;
};


/** columns and relationships of "departments" */
export type DepartmentsMonthlysalariesArgs = {
  distinct_on?: InputMaybe<Array<Monthlysalary_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Monthlysalary_Order_By>>;
  where?: InputMaybe<Monthlysalary_Bool_Exp>;
};


/** columns and relationships of "departments" */
export type DepartmentsMonthlysalariesByEmployeeDepartmentIdArgs = {
  distinct_on?: InputMaybe<Array<Monthlysalary_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Monthlysalary_Order_By>>;
  where?: InputMaybe<Monthlysalary_Bool_Exp>;
};


/** columns and relationships of "departments" */
export type DepartmentsMonthlysalariesByEmployeeDepartmentId_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Monthlysalary_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Monthlysalary_Order_By>>;
  where?: InputMaybe<Monthlysalary_Bool_Exp>;
};


/** columns and relationships of "departments" */
export type DepartmentsMonthlysalaries_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Monthlysalary_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Monthlysalary_Order_By>>;
  where?: InputMaybe<Monthlysalary_Bool_Exp>;
};


/** columns and relationships of "departments" */
export type DepartmentsStoresArgs = {
  distinct_on?: InputMaybe<Array<Stores_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Stores_Order_By>>;
  where?: InputMaybe<Stores_Bool_Exp>;
};


/** columns and relationships of "departments" */
export type DepartmentsStores_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Stores_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Stores_Order_By>>;
  where?: InputMaybe<Stores_Bool_Exp>;
};

/** aggregated selection of "departments" */
export type Departments_Aggregate = {
  __typename?: 'departments_aggregate';
  aggregate?: Maybe<Departments_Aggregate_Fields>;
  nodes: Array<Departments>;
};

export type Departments_Aggregate_Bool_Exp = {
  count?: InputMaybe<Departments_Aggregate_Bool_Exp_Count>;
};

export type Departments_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<Departments_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<Departments_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "departments" */
export type Departments_Aggregate_Fields = {
  __typename?: 'departments_aggregate_fields';
  avg?: Maybe<Departments_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Departments_Max_Fields>;
  min?: Maybe<Departments_Min_Fields>;
  stddev?: Maybe<Departments_Stddev_Fields>;
  stddev_pop?: Maybe<Departments_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Departments_Stddev_Samp_Fields>;
  sum?: Maybe<Departments_Sum_Fields>;
  var_pop?: Maybe<Departments_Var_Pop_Fields>;
  var_samp?: Maybe<Departments_Var_Samp_Fields>;
  variance?: Maybe<Departments_Variance_Fields>;
};


/** aggregate fields of "departments" */
export type Departments_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Departments_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "departments" */
export type Departments_Aggregate_Order_By = {
  avg?: InputMaybe<Departments_Avg_Order_By>;
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<Departments_Max_Order_By>;
  min?: InputMaybe<Departments_Min_Order_By>;
  stddev?: InputMaybe<Departments_Stddev_Order_By>;
  stddev_pop?: InputMaybe<Departments_Stddev_Pop_Order_By>;
  stddev_samp?: InputMaybe<Departments_Stddev_Samp_Order_By>;
  sum?: InputMaybe<Departments_Sum_Order_By>;
  var_pop?: InputMaybe<Departments_Var_Pop_Order_By>;
  var_samp?: InputMaybe<Departments_Var_Samp_Order_By>;
  variance?: InputMaybe<Departments_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "departments" */
export type Departments_Arr_Rel_Insert_Input = {
  data: Array<Departments_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<Departments_On_Conflict>;
};

/** aggregate avg on columns */
export type Departments_Avg_Fields = {
  __typename?: 'departments_avg_fields';
  is_store?: Maybe<Scalars['Float']>;
  ranking?: Maybe<Scalars['Float']>;
  status?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "departments" */
export type Departments_Avg_Order_By = {
  is_store?: InputMaybe<Order_By>;
  ranking?: InputMaybe<Order_By>;
  status?: InputMaybe<Order_By>;
};

/** Boolean expression to filter rows from the table "departments". All fields are combined with a logical 'AND'. */
export type Departments_Bool_Exp = {
  _and?: InputMaybe<Array<Departments_Bool_Exp>>;
  _not?: InputMaybe<Departments_Bool_Exp>;
  _or?: InputMaybe<Array<Departments_Bool_Exp>>;
  attendance_group?: InputMaybe<Attendance_Groups_Bool_Exp>;
  attendance_group_id?: InputMaybe<String_Comparison_Exp>;
  attendances?: InputMaybe<Attendance_Bool_Exp>;
  attendances_aggregate?: InputMaybe<Attendance_Aggregate_Bool_Exp>;
  bonusdeductions?: InputMaybe<Bonusdeductions_Bool_Exp>;
  bonusdeductions_aggregate?: InputMaybe<Bonusdeductions_Aggregate_Bool_Exp>;
  brands?: InputMaybe<Brands_Bool_Exp>;
  brands_aggregate?: InputMaybe<Brands_Aggregate_Bool_Exp>;
  child_departments?: InputMaybe<Departments_Bool_Exp>;
  child_departments_aggregate?: InputMaybe<Departments_Aggregate_Bool_Exp>;
  departments_employees?: InputMaybe<Departments_Employees_Bool_Exp>;
  departments_employees_aggregate?: InputMaybe<Departments_Employees_Aggregate_Bool_Exp>;
  departments_store?: InputMaybe<Departments_Stores_Bool_Exp>;
  departmentstores?: InputMaybe<Departments_Stores_Bool_Exp>;
  departmentstores_aggregate?: InputMaybe<Departments_Stores_Aggregate_Bool_Exp>;
  employee?: InputMaybe<Employees_Bool_Exp>;
  employee_department_histories?: InputMaybe<Employee_Salary_Department_Bool_Exp>;
  employee_department_histories_aggregate?: InputMaybe<Employee_Salary_Department_Aggregate_Bool_Exp>;
  employees?: InputMaybe<Employees_Bool_Exp>;
  employees_aggregate?: InputMaybe<Employees_Aggregate_Bool_Exp>;
  id?: InputMaybe<String_Comparison_Exp>;
  insurance_funds?: InputMaybe<Insurance_Funds_Bool_Exp>;
  insurance_funds_aggregate?: InputMaybe<Insurance_Funds_Aggregate_Bool_Exp>;
  is_store?: InputMaybe<Smallint_Comparison_Exp>;
  manager_id?: InputMaybe<String_Comparison_Exp>;
  monthlysalaries?: InputMaybe<Monthlysalary_Bool_Exp>;
  monthlysalariesByEmployeeDepartmentId?: InputMaybe<Monthlysalary_Bool_Exp>;
  monthlysalariesByEmployeeDepartmentId_aggregate?: InputMaybe<Monthlysalary_Aggregate_Bool_Exp>;
  monthlysalaries_aggregate?: InputMaybe<Monthlysalary_Aggregate_Bool_Exp>;
  name?: InputMaybe<String_Comparison_Exp>;
  outside_salary_account?: InputMaybe<Salary_Accounts_Bool_Exp>;
  outside_salary_account_id?: InputMaybe<String_Comparison_Exp>;
  own_salary_account?: InputMaybe<Salary_Accounts_Bool_Exp>;
  own_salary_account_id?: InputMaybe<String_Comparison_Exp>;
  parent_department?: InputMaybe<Departments_Bool_Exp>;
  parent_department_id?: InputMaybe<String_Comparison_Exp>;
  ranking?: InputMaybe<Int_Comparison_Exp>;
  small_department_name?: InputMaybe<String_Comparison_Exp>;
  status?: InputMaybe<Smallint_Comparison_Exp>;
  store?: InputMaybe<Stores_Bool_Exp>;
  store_id?: InputMaybe<String_Comparison_Exp>;
  stores?: InputMaybe<Stores_Bool_Exp>;
  stores_aggregate?: InputMaybe<Stores_Aggregate_Bool_Exp>;
};

/** unique or primary key constraints on table "departments" */
export enum Departments_Constraint {
  /** unique or primary key constraint on columns "id" */
  DepartmentsPrimary13 = 'departmentsPRIMARY13'
}

/** columns and relationships of "departments_employees" */
export type Departments_Employees = {
  __typename?: 'departments_employees';
  /** An object relationship */
  department: Departments;
  department_id: Scalars['String'];
  /** An object relationship */
  employee: Employees;
  employee_id: Scalars['String'];
};

/** aggregated selection of "departments_employees" */
export type Departments_Employees_Aggregate = {
  __typename?: 'departments_employees_aggregate';
  aggregate?: Maybe<Departments_Employees_Aggregate_Fields>;
  nodes: Array<Departments_Employees>;
};

export type Departments_Employees_Aggregate_Bool_Exp = {
  count?: InputMaybe<Departments_Employees_Aggregate_Bool_Exp_Count>;
};

export type Departments_Employees_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<Departments_Employees_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<Departments_Employees_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "departments_employees" */
export type Departments_Employees_Aggregate_Fields = {
  __typename?: 'departments_employees_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Departments_Employees_Max_Fields>;
  min?: Maybe<Departments_Employees_Min_Fields>;
};


/** aggregate fields of "departments_employees" */
export type Departments_Employees_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Departments_Employees_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "departments_employees" */
export type Departments_Employees_Aggregate_Order_By = {
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<Departments_Employees_Max_Order_By>;
  min?: InputMaybe<Departments_Employees_Min_Order_By>;
};

/** input type for inserting array relation for remote table "departments_employees" */
export type Departments_Employees_Arr_Rel_Insert_Input = {
  data: Array<Departments_Employees_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<Departments_Employees_On_Conflict>;
};

/** Boolean expression to filter rows from the table "departments_employees". All fields are combined with a logical 'AND'. */
export type Departments_Employees_Bool_Exp = {
  _and?: InputMaybe<Array<Departments_Employees_Bool_Exp>>;
  _not?: InputMaybe<Departments_Employees_Bool_Exp>;
  _or?: InputMaybe<Array<Departments_Employees_Bool_Exp>>;
  department?: InputMaybe<Departments_Bool_Exp>;
  department_id?: InputMaybe<String_Comparison_Exp>;
  employee?: InputMaybe<Employees_Bool_Exp>;
  employee_id?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "departments_employees" */
export enum Departments_Employees_Constraint {
  /** unique or primary key constraint on columns "employee_id", "department_id" */
  DepartmentsEmployeesPkey = 'departments_employees_pkey'
}

/** input type for inserting data into table "departments_employees" */
export type Departments_Employees_Insert_Input = {
  department?: InputMaybe<Departments_Obj_Rel_Insert_Input>;
  department_id?: InputMaybe<Scalars['String']>;
  employee?: InputMaybe<Employees_Obj_Rel_Insert_Input>;
  employee_id?: InputMaybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Departments_Employees_Max_Fields = {
  __typename?: 'departments_employees_max_fields';
  department_id?: Maybe<Scalars['String']>;
  employee_id?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "departments_employees" */
export type Departments_Employees_Max_Order_By = {
  department_id?: InputMaybe<Order_By>;
  employee_id?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type Departments_Employees_Min_Fields = {
  __typename?: 'departments_employees_min_fields';
  department_id?: Maybe<Scalars['String']>;
  employee_id?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "departments_employees" */
export type Departments_Employees_Min_Order_By = {
  department_id?: InputMaybe<Order_By>;
  employee_id?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "departments_employees" */
export type Departments_Employees_Mutation_Response = {
  __typename?: 'departments_employees_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Departments_Employees>;
};

/** on_conflict condition type for table "departments_employees" */
export type Departments_Employees_On_Conflict = {
  constraint: Departments_Employees_Constraint;
  update_columns?: Array<Departments_Employees_Update_Column>;
  where?: InputMaybe<Departments_Employees_Bool_Exp>;
};

/** Ordering options when selecting data from "departments_employees". */
export type Departments_Employees_Order_By = {
  department?: InputMaybe<Departments_Order_By>;
  department_id?: InputMaybe<Order_By>;
  employee?: InputMaybe<Employees_Order_By>;
  employee_id?: InputMaybe<Order_By>;
};

/** primary key columns input for table: departments_employees */
export type Departments_Employees_Pk_Columns_Input = {
  department_id: Scalars['String'];
  employee_id: Scalars['String'];
};

/** select columns of table "departments_employees" */
export enum Departments_Employees_Select_Column {
  /** column name */
  DepartmentId = 'department_id',
  /** column name */
  EmployeeId = 'employee_id'
}

/** input type for updating data in table "departments_employees" */
export type Departments_Employees_Set_Input = {
  department_id?: InputMaybe<Scalars['String']>;
  employee_id?: InputMaybe<Scalars['String']>;
};

/** Streaming cursor of the table "departments_employees" */
export type Departments_Employees_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Departments_Employees_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Departments_Employees_Stream_Cursor_Value_Input = {
  department_id?: InputMaybe<Scalars['String']>;
  employee_id?: InputMaybe<Scalars['String']>;
};

/** update columns of table "departments_employees" */
export enum Departments_Employees_Update_Column {
  /** column name */
  DepartmentId = 'department_id',
  /** column name */
  EmployeeId = 'employee_id'
}

export type Departments_Employees_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Departments_Employees_Set_Input>;
  /** filter the rows which have to be updated */
  where: Departments_Employees_Bool_Exp;
};

/** input type for incrementing numeric columns in table "departments" */
export type Departments_Inc_Input = {
  is_store?: InputMaybe<Scalars['smallint']>;
  ranking?: InputMaybe<Scalars['Int']>;
  status?: InputMaybe<Scalars['smallint']>;
};

/** input type for inserting data into table "departments" */
export type Departments_Insert_Input = {
  attendance_group?: InputMaybe<Attendance_Groups_Obj_Rel_Insert_Input>;
  attendance_group_id?: InputMaybe<Scalars['String']>;
  attendances?: InputMaybe<Attendance_Arr_Rel_Insert_Input>;
  bonusdeductions?: InputMaybe<Bonusdeductions_Arr_Rel_Insert_Input>;
  brands?: InputMaybe<Brands_Arr_Rel_Insert_Input>;
  child_departments?: InputMaybe<Departments_Arr_Rel_Insert_Input>;
  departments_employees?: InputMaybe<Departments_Employees_Arr_Rel_Insert_Input>;
  departments_store?: InputMaybe<Departments_Stores_Obj_Rel_Insert_Input>;
  departmentstores?: InputMaybe<Departments_Stores_Arr_Rel_Insert_Input>;
  employee?: InputMaybe<Employees_Obj_Rel_Insert_Input>;
  employee_department_histories?: InputMaybe<Employee_Salary_Department_Arr_Rel_Insert_Input>;
  employees?: InputMaybe<Employees_Arr_Rel_Insert_Input>;
  id?: InputMaybe<Scalars['String']>;
  insurance_funds?: InputMaybe<Insurance_Funds_Arr_Rel_Insert_Input>;
  is_store?: InputMaybe<Scalars['smallint']>;
  manager_id?: InputMaybe<Scalars['String']>;
  monthlysalaries?: InputMaybe<Monthlysalary_Arr_Rel_Insert_Input>;
  monthlysalariesByEmployeeDepartmentId?: InputMaybe<Monthlysalary_Arr_Rel_Insert_Input>;
  name?: InputMaybe<Scalars['String']>;
  outside_salary_account?: InputMaybe<Salary_Accounts_Obj_Rel_Insert_Input>;
  outside_salary_account_id?: InputMaybe<Scalars['String']>;
  own_salary_account?: InputMaybe<Salary_Accounts_Obj_Rel_Insert_Input>;
  own_salary_account_id?: InputMaybe<Scalars['String']>;
  parent_department?: InputMaybe<Departments_Obj_Rel_Insert_Input>;
  parent_department_id?: InputMaybe<Scalars['String']>;
  ranking?: InputMaybe<Scalars['Int']>;
  small_department_name?: InputMaybe<Scalars['String']>;
  status?: InputMaybe<Scalars['smallint']>;
  store?: InputMaybe<Stores_Obj_Rel_Insert_Input>;
  store_id?: InputMaybe<Scalars['String']>;
  stores?: InputMaybe<Stores_Arr_Rel_Insert_Input>;
};

/** aggregate max on columns */
export type Departments_Max_Fields = {
  __typename?: 'departments_max_fields';
  attendance_group_id?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  is_store?: Maybe<Scalars['smallint']>;
  manager_id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  outside_salary_account_id?: Maybe<Scalars['String']>;
  own_salary_account_id?: Maybe<Scalars['String']>;
  parent_department_id?: Maybe<Scalars['String']>;
  ranking?: Maybe<Scalars['Int']>;
  small_department_name?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['smallint']>;
  store_id?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "departments" */
export type Departments_Max_Order_By = {
  attendance_group_id?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  is_store?: InputMaybe<Order_By>;
  manager_id?: InputMaybe<Order_By>;
  name?: InputMaybe<Order_By>;
  outside_salary_account_id?: InputMaybe<Order_By>;
  own_salary_account_id?: InputMaybe<Order_By>;
  parent_department_id?: InputMaybe<Order_By>;
  ranking?: InputMaybe<Order_By>;
  small_department_name?: InputMaybe<Order_By>;
  status?: InputMaybe<Order_By>;
  store_id?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type Departments_Min_Fields = {
  __typename?: 'departments_min_fields';
  attendance_group_id?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  is_store?: Maybe<Scalars['smallint']>;
  manager_id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  outside_salary_account_id?: Maybe<Scalars['String']>;
  own_salary_account_id?: Maybe<Scalars['String']>;
  parent_department_id?: Maybe<Scalars['String']>;
  ranking?: Maybe<Scalars['Int']>;
  small_department_name?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['smallint']>;
  store_id?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "departments" */
export type Departments_Min_Order_By = {
  attendance_group_id?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  is_store?: InputMaybe<Order_By>;
  manager_id?: InputMaybe<Order_By>;
  name?: InputMaybe<Order_By>;
  outside_salary_account_id?: InputMaybe<Order_By>;
  own_salary_account_id?: InputMaybe<Order_By>;
  parent_department_id?: InputMaybe<Order_By>;
  ranking?: InputMaybe<Order_By>;
  small_department_name?: InputMaybe<Order_By>;
  status?: InputMaybe<Order_By>;
  store_id?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "departments" */
export type Departments_Mutation_Response = {
  __typename?: 'departments_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Departments>;
};

/** input type for inserting object relation for remote table "departments" */
export type Departments_Obj_Rel_Insert_Input = {
  data: Departments_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<Departments_On_Conflict>;
};

/** on_conflict condition type for table "departments" */
export type Departments_On_Conflict = {
  constraint: Departments_Constraint;
  update_columns?: Array<Departments_Update_Column>;
  where?: InputMaybe<Departments_Bool_Exp>;
};

/** Ordering options when selecting data from "departments". */
export type Departments_Order_By = {
  attendance_group?: InputMaybe<Attendance_Groups_Order_By>;
  attendance_group_id?: InputMaybe<Order_By>;
  attendances_aggregate?: InputMaybe<Attendance_Aggregate_Order_By>;
  bonusdeductions_aggregate?: InputMaybe<Bonusdeductions_Aggregate_Order_By>;
  brands_aggregate?: InputMaybe<Brands_Aggregate_Order_By>;
  child_departments_aggregate?: InputMaybe<Departments_Aggregate_Order_By>;
  departments_employees_aggregate?: InputMaybe<Departments_Employees_Aggregate_Order_By>;
  departments_store?: InputMaybe<Departments_Stores_Order_By>;
  departmentstores_aggregate?: InputMaybe<Departments_Stores_Aggregate_Order_By>;
  employee?: InputMaybe<Employees_Order_By>;
  employee_department_histories_aggregate?: InputMaybe<Employee_Salary_Department_Aggregate_Order_By>;
  employees_aggregate?: InputMaybe<Employees_Aggregate_Order_By>;
  id?: InputMaybe<Order_By>;
  insurance_funds_aggregate?: InputMaybe<Insurance_Funds_Aggregate_Order_By>;
  is_store?: InputMaybe<Order_By>;
  manager_id?: InputMaybe<Order_By>;
  monthlysalariesByEmployeeDepartmentId_aggregate?: InputMaybe<Monthlysalary_Aggregate_Order_By>;
  monthlysalaries_aggregate?: InputMaybe<Monthlysalary_Aggregate_Order_By>;
  name?: InputMaybe<Order_By>;
  outside_salary_account?: InputMaybe<Salary_Accounts_Order_By>;
  outside_salary_account_id?: InputMaybe<Order_By>;
  own_salary_account?: InputMaybe<Salary_Accounts_Order_By>;
  own_salary_account_id?: InputMaybe<Order_By>;
  parent_department?: InputMaybe<Departments_Order_By>;
  parent_department_id?: InputMaybe<Order_By>;
  ranking?: InputMaybe<Order_By>;
  small_department_name?: InputMaybe<Order_By>;
  status?: InputMaybe<Order_By>;
  store?: InputMaybe<Stores_Order_By>;
  store_id?: InputMaybe<Order_By>;
  stores_aggregate?: InputMaybe<Stores_Aggregate_Order_By>;
};

/** primary key columns input for table: departments */
export type Departments_Pk_Columns_Input = {
  id: Scalars['String'];
};

/** select columns of table "departments" */
export enum Departments_Select_Column {
  /** column name */
  AttendanceGroupId = 'attendance_group_id',
  /** column name */
  Id = 'id',
  /** column name */
  IsStore = 'is_store',
  /** column name */
  ManagerId = 'manager_id',
  /** column name */
  Name = 'name',
  /** column name */
  OutsideSalaryAccountId = 'outside_salary_account_id',
  /** column name */
  OwnSalaryAccountId = 'own_salary_account_id',
  /** column name */
  ParentDepartmentId = 'parent_department_id',
  /** column name */
  Ranking = 'ranking',
  /** column name */
  SmallDepartmentName = 'small_department_name',
  /** column name */
  Status = 'status',
  /** column name */
  StoreId = 'store_id'
}

/** input type for updating data in table "departments" */
export type Departments_Set_Input = {
  attendance_group_id?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['String']>;
  is_store?: InputMaybe<Scalars['smallint']>;
  manager_id?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  outside_salary_account_id?: InputMaybe<Scalars['String']>;
  own_salary_account_id?: InputMaybe<Scalars['String']>;
  parent_department_id?: InputMaybe<Scalars['String']>;
  ranking?: InputMaybe<Scalars['Int']>;
  small_department_name?: InputMaybe<Scalars['String']>;
  status?: InputMaybe<Scalars['smallint']>;
  store_id?: InputMaybe<Scalars['String']>;
};

/** aggregate stddev on columns */
export type Departments_Stddev_Fields = {
  __typename?: 'departments_stddev_fields';
  is_store?: Maybe<Scalars['Float']>;
  ranking?: Maybe<Scalars['Float']>;
  status?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "departments" */
export type Departments_Stddev_Order_By = {
  is_store?: InputMaybe<Order_By>;
  ranking?: InputMaybe<Order_By>;
  status?: InputMaybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Departments_Stddev_Pop_Fields = {
  __typename?: 'departments_stddev_pop_fields';
  is_store?: Maybe<Scalars['Float']>;
  ranking?: Maybe<Scalars['Float']>;
  status?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "departments" */
export type Departments_Stddev_Pop_Order_By = {
  is_store?: InputMaybe<Order_By>;
  ranking?: InputMaybe<Order_By>;
  status?: InputMaybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Departments_Stddev_Samp_Fields = {
  __typename?: 'departments_stddev_samp_fields';
  is_store?: Maybe<Scalars['Float']>;
  ranking?: Maybe<Scalars['Float']>;
  status?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "departments" */
export type Departments_Stddev_Samp_Order_By = {
  is_store?: InputMaybe<Order_By>;
  ranking?: InputMaybe<Order_By>;
  status?: InputMaybe<Order_By>;
};

/** columns and relationships of "departments_stores" */
export type Departments_Stores = {
  __typename?: 'departments_stores';
  /** An object relationship */
  department: Departments;
  department_id: Scalars['String'];
  shop_id: Scalars['String'];
  /** An object relationship */
  store: Stores;
};

/** aggregated selection of "departments_stores" */
export type Departments_Stores_Aggregate = {
  __typename?: 'departments_stores_aggregate';
  aggregate?: Maybe<Departments_Stores_Aggregate_Fields>;
  nodes: Array<Departments_Stores>;
};

export type Departments_Stores_Aggregate_Bool_Exp = {
  count?: InputMaybe<Departments_Stores_Aggregate_Bool_Exp_Count>;
};

export type Departments_Stores_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<Departments_Stores_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<Departments_Stores_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "departments_stores" */
export type Departments_Stores_Aggregate_Fields = {
  __typename?: 'departments_stores_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Departments_Stores_Max_Fields>;
  min?: Maybe<Departments_Stores_Min_Fields>;
};


/** aggregate fields of "departments_stores" */
export type Departments_Stores_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Departments_Stores_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "departments_stores" */
export type Departments_Stores_Aggregate_Order_By = {
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<Departments_Stores_Max_Order_By>;
  min?: InputMaybe<Departments_Stores_Min_Order_By>;
};

/** input type for inserting array relation for remote table "departments_stores" */
export type Departments_Stores_Arr_Rel_Insert_Input = {
  data: Array<Departments_Stores_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<Departments_Stores_On_Conflict>;
};

/** Boolean expression to filter rows from the table "departments_stores". All fields are combined with a logical 'AND'. */
export type Departments_Stores_Bool_Exp = {
  _and?: InputMaybe<Array<Departments_Stores_Bool_Exp>>;
  _not?: InputMaybe<Departments_Stores_Bool_Exp>;
  _or?: InputMaybe<Array<Departments_Stores_Bool_Exp>>;
  department?: InputMaybe<Departments_Bool_Exp>;
  department_id?: InputMaybe<String_Comparison_Exp>;
  shop_id?: InputMaybe<String_Comparison_Exp>;
  store?: InputMaybe<Stores_Bool_Exp>;
};

/** unique or primary key constraints on table "departments_stores" */
export enum Departments_Stores_Constraint {
  /** unique or primary key constraint on columns "department_id" */
  DepartmentstoresPrimary14 = 'departmentstoresPRIMARY14'
}

/** input type for inserting data into table "departments_stores" */
export type Departments_Stores_Insert_Input = {
  department?: InputMaybe<Departments_Obj_Rel_Insert_Input>;
  department_id?: InputMaybe<Scalars['String']>;
  shop_id?: InputMaybe<Scalars['String']>;
  store?: InputMaybe<Stores_Obj_Rel_Insert_Input>;
};

/** aggregate max on columns */
export type Departments_Stores_Max_Fields = {
  __typename?: 'departments_stores_max_fields';
  department_id?: Maybe<Scalars['String']>;
  shop_id?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "departments_stores" */
export type Departments_Stores_Max_Order_By = {
  department_id?: InputMaybe<Order_By>;
  shop_id?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type Departments_Stores_Min_Fields = {
  __typename?: 'departments_stores_min_fields';
  department_id?: Maybe<Scalars['String']>;
  shop_id?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "departments_stores" */
export type Departments_Stores_Min_Order_By = {
  department_id?: InputMaybe<Order_By>;
  shop_id?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "departments_stores" */
export type Departments_Stores_Mutation_Response = {
  __typename?: 'departments_stores_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Departments_Stores>;
};

/** input type for inserting object relation for remote table "departments_stores" */
export type Departments_Stores_Obj_Rel_Insert_Input = {
  data: Departments_Stores_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<Departments_Stores_On_Conflict>;
};

/** on_conflict condition type for table "departments_stores" */
export type Departments_Stores_On_Conflict = {
  constraint: Departments_Stores_Constraint;
  update_columns?: Array<Departments_Stores_Update_Column>;
  where?: InputMaybe<Departments_Stores_Bool_Exp>;
};

/** Ordering options when selecting data from "departments_stores". */
export type Departments_Stores_Order_By = {
  department?: InputMaybe<Departments_Order_By>;
  department_id?: InputMaybe<Order_By>;
  shop_id?: InputMaybe<Order_By>;
  store?: InputMaybe<Stores_Order_By>;
};

/** primary key columns input for table: departments_stores */
export type Departments_Stores_Pk_Columns_Input = {
  department_id: Scalars['String'];
};

/** select columns of table "departments_stores" */
export enum Departments_Stores_Select_Column {
  /** column name */
  DepartmentId = 'department_id',
  /** column name */
  ShopId = 'shop_id'
}

/** input type for updating data in table "departments_stores" */
export type Departments_Stores_Set_Input = {
  department_id?: InputMaybe<Scalars['String']>;
  shop_id?: InputMaybe<Scalars['String']>;
};

/** Streaming cursor of the table "departments_stores" */
export type Departments_Stores_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Departments_Stores_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Departments_Stores_Stream_Cursor_Value_Input = {
  department_id?: InputMaybe<Scalars['String']>;
  shop_id?: InputMaybe<Scalars['String']>;
};

/** update columns of table "departments_stores" */
export enum Departments_Stores_Update_Column {
  /** column name */
  DepartmentId = 'department_id',
  /** column name */
  ShopId = 'shop_id'
}

export type Departments_Stores_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Departments_Stores_Set_Input>;
  /** filter the rows which have to be updated */
  where: Departments_Stores_Bool_Exp;
};

/** Streaming cursor of the table "departments" */
export type Departments_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Departments_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Departments_Stream_Cursor_Value_Input = {
  attendance_group_id?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['String']>;
  is_store?: InputMaybe<Scalars['smallint']>;
  manager_id?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  outside_salary_account_id?: InputMaybe<Scalars['String']>;
  own_salary_account_id?: InputMaybe<Scalars['String']>;
  parent_department_id?: InputMaybe<Scalars['String']>;
  ranking?: InputMaybe<Scalars['Int']>;
  small_department_name?: InputMaybe<Scalars['String']>;
  status?: InputMaybe<Scalars['smallint']>;
  store_id?: InputMaybe<Scalars['String']>;
};

/** aggregate sum on columns */
export type Departments_Sum_Fields = {
  __typename?: 'departments_sum_fields';
  is_store?: Maybe<Scalars['smallint']>;
  ranking?: Maybe<Scalars['Int']>;
  status?: Maybe<Scalars['smallint']>;
};

/** order by sum() on columns of table "departments" */
export type Departments_Sum_Order_By = {
  is_store?: InputMaybe<Order_By>;
  ranking?: InputMaybe<Order_By>;
  status?: InputMaybe<Order_By>;
};

/** update columns of table "departments" */
export enum Departments_Update_Column {
  /** column name */
  AttendanceGroupId = 'attendance_group_id',
  /** column name */
  Id = 'id',
  /** column name */
  IsStore = 'is_store',
  /** column name */
  ManagerId = 'manager_id',
  /** column name */
  Name = 'name',
  /** column name */
  OutsideSalaryAccountId = 'outside_salary_account_id',
  /** column name */
  OwnSalaryAccountId = 'own_salary_account_id',
  /** column name */
  ParentDepartmentId = 'parent_department_id',
  /** column name */
  Ranking = 'ranking',
  /** column name */
  SmallDepartmentName = 'small_department_name',
  /** column name */
  Status = 'status',
  /** column name */
  StoreId = 'store_id'
}

export type Departments_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: InputMaybe<Departments_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Departments_Set_Input>;
  /** filter the rows which have to be updated */
  where: Departments_Bool_Exp;
};

/** aggregate var_pop on columns */
export type Departments_Var_Pop_Fields = {
  __typename?: 'departments_var_pop_fields';
  is_store?: Maybe<Scalars['Float']>;
  ranking?: Maybe<Scalars['Float']>;
  status?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "departments" */
export type Departments_Var_Pop_Order_By = {
  is_store?: InputMaybe<Order_By>;
  ranking?: InputMaybe<Order_By>;
  status?: InputMaybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Departments_Var_Samp_Fields = {
  __typename?: 'departments_var_samp_fields';
  is_store?: Maybe<Scalars['Float']>;
  ranking?: Maybe<Scalars['Float']>;
  status?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "departments" */
export type Departments_Var_Samp_Order_By = {
  is_store?: InputMaybe<Order_By>;
  ranking?: InputMaybe<Order_By>;
  status?: InputMaybe<Order_By>;
};

/** aggregate variance on columns */
export type Departments_Variance_Fields = {
  __typename?: 'departments_variance_fields';
  is_store?: Maybe<Scalars['Float']>;
  ranking?: Maybe<Scalars['Float']>;
  status?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "departments" */
export type Departments_Variance_Order_By = {
  is_store?: InputMaybe<Order_By>;
  ranking?: InputMaybe<Order_By>;
  status?: InputMaybe<Order_By>;
};

/** columns and relationships of "dsstorebills" */
export type Dsstorebills = {
  __typename?: 'dsstorebills';
  APMonth?: Maybe<Scalars['Int']>;
  APYear?: Maybe<Scalars['Int']>;
  ArriveAmount?: Maybe<Scalars['numeric']>;
  ArriveMoney?: Maybe<Scalars['numeric']>;
  BatchCode?: Maybe<Scalars['String']>;
  BillBusType?: Maybe<Scalars['String']>;
  BillBusTypeId?: Maybe<Scalars['String']>;
  BillNO?: Maybe<Scalars['String']>;
  BillType?: Maybe<Scalars['String']>;
  BusUnit?: Maybe<Scalars['String']>;
  BusUser?: Maybe<Scalars['String']>;
  GiftFlag?: Maybe<Scalars['Boolean']>;
  InBusAmount?: Maybe<Scalars['numeric']>;
  InMainAmount?: Maybe<Scalars['numeric']>;
  InStoreMoney?: Maybe<Scalars['numeric']>;
  IncludeTaxMoney?: Maybe<Scalars['numeric']>;
  ItemAbc?: Maybe<Scalars['String']>;
  ItemBigClassCode?: Maybe<Scalars['String']>;
  ItemBigClassName?: Maybe<Scalars['String']>;
  ItemCode?: Maybe<Scalars['String']>;
  ItemID?: Maybe<Scalars['String']>;
  ItemName?: Maybe<Scalars['String']>;
  ItemSign?: Maybe<Scalars['String']>;
  ItemSmallClassCode?: Maybe<Scalars['String']>;
  ItemSmallClassName?: Maybe<Scalars['String']>;
  ItemSpec?: Maybe<Scalars['String']>;
  MainUnit?: Maybe<Scalars['String']>;
  MakeTime?: Maybe<Scalars['String']>;
  OtherSideCode?: Maybe<Scalars['String']>;
  OtherSideID?: Maybe<Scalars['String']>;
  OtherSideName?: Maybe<Scalars['String']>;
  OtherSideType?: Maybe<Scalars['String']>;
  OutBusAmount?: Maybe<Scalars['numeric']>;
  OutMainAmount?: Maybe<Scalars['numeric']>;
  OutStoreMoney?: Maybe<Scalars['numeric']>;
  ParentBillNO?: Maybe<Scalars['String']>;
  PushInStoreAmount?: Maybe<Scalars['numeric']>;
  PushInStoreMoney?: Maybe<Scalars['numeric']>;
  PushOutStoreAmount?: Maybe<Scalars['numeric']>;
  PushOutStoreMoney?: Maybe<Scalars['numeric']>;
  SaleMoney?: Maybe<Scalars['numeric']>;
  SellIncludeTaxMoney?: Maybe<Scalars['numeric']>;
  SellTaxMoney?: Maybe<Scalars['numeric']>;
  SellTaxes?: Maybe<Scalars['numeric']>;
  ShopCode?: Maybe<Scalars['String']>;
  ShopID?: Maybe<Scalars['String']>;
  ShopName?: Maybe<Scalars['String']>;
  StoreBillDTID: Scalars['String'];
  StoreBillID?: Maybe<Scalars['String']>;
  StoreBillIDRemark?: Maybe<Scalars['String']>;
  StoreBillReState?: Maybe<Scalars['Boolean']>;
  StoreBillRemark?: Maybe<Scalars['String']>;
  StoreCode: Scalars['String'];
  StoreID?: Maybe<Scalars['String']>;
  StoreName?: Maybe<Scalars['String']>;
  SysBatchCode?: Maybe<Scalars['Int']>;
  TaxMoney?: Maybe<Scalars['numeric']>;
  Taxes?: Maybe<Scalars['numeric']>;
  arriveAssistAmount?: Maybe<Scalars['numeric']>;
  auditDate?: Maybe<Scalars['date']>;
  busDate?: Maybe<Scalars['String']>;
  createDate?: Maybe<Scalars['String']>;
  isOut?: Maybe<Scalars['Int']>;
  modifyDate?: Maybe<Scalars['String']>;
  outputRate?: Maybe<Scalars['numeric']>;
  processMoney?: Maybe<Scalars['numeric']>;
  referenceMoney?: Maybe<Scalars['numeric']>;
  referencePrice?: Maybe<Scalars['numeric']>;
  shopJoinFlag?: Maybe<Scalars['Int']>;
  /** An object relationship */
  store?: Maybe<Stores>;
  /** An object relationship */
  supplyitem?: Maybe<Supplyitems>;
  transMoney?: Maybe<Scalars['numeric']>;
  yield?: Maybe<Scalars['numeric']>;
  ztSupplierCode?: Maybe<Scalars['String']>;
  ztSupplierID?: Maybe<Scalars['String']>;
  ztSupplierName?: Maybe<Scalars['String']>;
};

/** aggregated selection of "dsstorebills" */
export type Dsstorebills_Aggregate = {
  __typename?: 'dsstorebills_aggregate';
  aggregate?: Maybe<Dsstorebills_Aggregate_Fields>;
  nodes: Array<Dsstorebills>;
};

export type Dsstorebills_Aggregate_Bool_Exp = {
  bool_and?: InputMaybe<Dsstorebills_Aggregate_Bool_Exp_Bool_And>;
  bool_or?: InputMaybe<Dsstorebills_Aggregate_Bool_Exp_Bool_Or>;
  count?: InputMaybe<Dsstorebills_Aggregate_Bool_Exp_Count>;
};

export type Dsstorebills_Aggregate_Bool_Exp_Bool_And = {
  arguments: Dsstorebills_Select_Column_Dsstorebills_Aggregate_Bool_Exp_Bool_And_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<Dsstorebills_Bool_Exp>;
  predicate: Boolean_Comparison_Exp;
};

export type Dsstorebills_Aggregate_Bool_Exp_Bool_Or = {
  arguments: Dsstorebills_Select_Column_Dsstorebills_Aggregate_Bool_Exp_Bool_Or_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<Dsstorebills_Bool_Exp>;
  predicate: Boolean_Comparison_Exp;
};

export type Dsstorebills_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<Dsstorebills_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<Dsstorebills_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "dsstorebills" */
export type Dsstorebills_Aggregate_Fields = {
  __typename?: 'dsstorebills_aggregate_fields';
  avg?: Maybe<Dsstorebills_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Dsstorebills_Max_Fields>;
  min?: Maybe<Dsstorebills_Min_Fields>;
  stddev?: Maybe<Dsstorebills_Stddev_Fields>;
  stddev_pop?: Maybe<Dsstorebills_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Dsstorebills_Stddev_Samp_Fields>;
  sum?: Maybe<Dsstorebills_Sum_Fields>;
  var_pop?: Maybe<Dsstorebills_Var_Pop_Fields>;
  var_samp?: Maybe<Dsstorebills_Var_Samp_Fields>;
  variance?: Maybe<Dsstorebills_Variance_Fields>;
};


/** aggregate fields of "dsstorebills" */
export type Dsstorebills_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Dsstorebills_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "dsstorebills" */
export type Dsstorebills_Aggregate_Order_By = {
  avg?: InputMaybe<Dsstorebills_Avg_Order_By>;
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<Dsstorebills_Max_Order_By>;
  min?: InputMaybe<Dsstorebills_Min_Order_By>;
  stddev?: InputMaybe<Dsstorebills_Stddev_Order_By>;
  stddev_pop?: InputMaybe<Dsstorebills_Stddev_Pop_Order_By>;
  stddev_samp?: InputMaybe<Dsstorebills_Stddev_Samp_Order_By>;
  sum?: InputMaybe<Dsstorebills_Sum_Order_By>;
  var_pop?: InputMaybe<Dsstorebills_Var_Pop_Order_By>;
  var_samp?: InputMaybe<Dsstorebills_Var_Samp_Order_By>;
  variance?: InputMaybe<Dsstorebills_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "dsstorebills" */
export type Dsstorebills_Arr_Rel_Insert_Input = {
  data: Array<Dsstorebills_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<Dsstorebills_On_Conflict>;
};

/** aggregate avg on columns */
export type Dsstorebills_Avg_Fields = {
  __typename?: 'dsstorebills_avg_fields';
  APMonth?: Maybe<Scalars['Float']>;
  APYear?: Maybe<Scalars['Float']>;
  ArriveAmount?: Maybe<Scalars['Float']>;
  ArriveMoney?: Maybe<Scalars['Float']>;
  InBusAmount?: Maybe<Scalars['Float']>;
  InMainAmount?: Maybe<Scalars['Float']>;
  InStoreMoney?: Maybe<Scalars['Float']>;
  IncludeTaxMoney?: Maybe<Scalars['Float']>;
  OutBusAmount?: Maybe<Scalars['Float']>;
  OutMainAmount?: Maybe<Scalars['Float']>;
  OutStoreMoney?: Maybe<Scalars['Float']>;
  PushInStoreAmount?: Maybe<Scalars['Float']>;
  PushInStoreMoney?: Maybe<Scalars['Float']>;
  PushOutStoreAmount?: Maybe<Scalars['Float']>;
  PushOutStoreMoney?: Maybe<Scalars['Float']>;
  SaleMoney?: Maybe<Scalars['Float']>;
  SellIncludeTaxMoney?: Maybe<Scalars['Float']>;
  SellTaxMoney?: Maybe<Scalars['Float']>;
  SellTaxes?: Maybe<Scalars['Float']>;
  SysBatchCode?: Maybe<Scalars['Float']>;
  TaxMoney?: Maybe<Scalars['Float']>;
  Taxes?: Maybe<Scalars['Float']>;
  arriveAssistAmount?: Maybe<Scalars['Float']>;
  isOut?: Maybe<Scalars['Float']>;
  outputRate?: Maybe<Scalars['Float']>;
  processMoney?: Maybe<Scalars['Float']>;
  referenceMoney?: Maybe<Scalars['Float']>;
  referencePrice?: Maybe<Scalars['Float']>;
  shopJoinFlag?: Maybe<Scalars['Float']>;
  transMoney?: Maybe<Scalars['Float']>;
  yield?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "dsstorebills" */
export type Dsstorebills_Avg_Order_By = {
  APMonth?: InputMaybe<Order_By>;
  APYear?: InputMaybe<Order_By>;
  ArriveAmount?: InputMaybe<Order_By>;
  ArriveMoney?: InputMaybe<Order_By>;
  InBusAmount?: InputMaybe<Order_By>;
  InMainAmount?: InputMaybe<Order_By>;
  InStoreMoney?: InputMaybe<Order_By>;
  IncludeTaxMoney?: InputMaybe<Order_By>;
  OutBusAmount?: InputMaybe<Order_By>;
  OutMainAmount?: InputMaybe<Order_By>;
  OutStoreMoney?: InputMaybe<Order_By>;
  PushInStoreAmount?: InputMaybe<Order_By>;
  PushInStoreMoney?: InputMaybe<Order_By>;
  PushOutStoreAmount?: InputMaybe<Order_By>;
  PushOutStoreMoney?: InputMaybe<Order_By>;
  SaleMoney?: InputMaybe<Order_By>;
  SellIncludeTaxMoney?: InputMaybe<Order_By>;
  SellTaxMoney?: InputMaybe<Order_By>;
  SellTaxes?: InputMaybe<Order_By>;
  SysBatchCode?: InputMaybe<Order_By>;
  TaxMoney?: InputMaybe<Order_By>;
  Taxes?: InputMaybe<Order_By>;
  arriveAssistAmount?: InputMaybe<Order_By>;
  isOut?: InputMaybe<Order_By>;
  outputRate?: InputMaybe<Order_By>;
  processMoney?: InputMaybe<Order_By>;
  referenceMoney?: InputMaybe<Order_By>;
  referencePrice?: InputMaybe<Order_By>;
  shopJoinFlag?: InputMaybe<Order_By>;
  transMoney?: InputMaybe<Order_By>;
  yield?: InputMaybe<Order_By>;
};

/** Boolean expression to filter rows from the table "dsstorebills". All fields are combined with a logical 'AND'. */
export type Dsstorebills_Bool_Exp = {
  APMonth?: InputMaybe<Int_Comparison_Exp>;
  APYear?: InputMaybe<Int_Comparison_Exp>;
  ArriveAmount?: InputMaybe<Numeric_Comparison_Exp>;
  ArriveMoney?: InputMaybe<Numeric_Comparison_Exp>;
  BatchCode?: InputMaybe<String_Comparison_Exp>;
  BillBusType?: InputMaybe<String_Comparison_Exp>;
  BillBusTypeId?: InputMaybe<String_Comparison_Exp>;
  BillNO?: InputMaybe<String_Comparison_Exp>;
  BillType?: InputMaybe<String_Comparison_Exp>;
  BusUnit?: InputMaybe<String_Comparison_Exp>;
  BusUser?: InputMaybe<String_Comparison_Exp>;
  GiftFlag?: InputMaybe<Boolean_Comparison_Exp>;
  InBusAmount?: InputMaybe<Numeric_Comparison_Exp>;
  InMainAmount?: InputMaybe<Numeric_Comparison_Exp>;
  InStoreMoney?: InputMaybe<Numeric_Comparison_Exp>;
  IncludeTaxMoney?: InputMaybe<Numeric_Comparison_Exp>;
  ItemAbc?: InputMaybe<String_Comparison_Exp>;
  ItemBigClassCode?: InputMaybe<String_Comparison_Exp>;
  ItemBigClassName?: InputMaybe<String_Comparison_Exp>;
  ItemCode?: InputMaybe<String_Comparison_Exp>;
  ItemID?: InputMaybe<String_Comparison_Exp>;
  ItemName?: InputMaybe<String_Comparison_Exp>;
  ItemSign?: InputMaybe<String_Comparison_Exp>;
  ItemSmallClassCode?: InputMaybe<String_Comparison_Exp>;
  ItemSmallClassName?: InputMaybe<String_Comparison_Exp>;
  ItemSpec?: InputMaybe<String_Comparison_Exp>;
  MainUnit?: InputMaybe<String_Comparison_Exp>;
  MakeTime?: InputMaybe<String_Comparison_Exp>;
  OtherSideCode?: InputMaybe<String_Comparison_Exp>;
  OtherSideID?: InputMaybe<String_Comparison_Exp>;
  OtherSideName?: InputMaybe<String_Comparison_Exp>;
  OtherSideType?: InputMaybe<String_Comparison_Exp>;
  OutBusAmount?: InputMaybe<Numeric_Comparison_Exp>;
  OutMainAmount?: InputMaybe<Numeric_Comparison_Exp>;
  OutStoreMoney?: InputMaybe<Numeric_Comparison_Exp>;
  ParentBillNO?: InputMaybe<String_Comparison_Exp>;
  PushInStoreAmount?: InputMaybe<Numeric_Comparison_Exp>;
  PushInStoreMoney?: InputMaybe<Numeric_Comparison_Exp>;
  PushOutStoreAmount?: InputMaybe<Numeric_Comparison_Exp>;
  PushOutStoreMoney?: InputMaybe<Numeric_Comparison_Exp>;
  SaleMoney?: InputMaybe<Numeric_Comparison_Exp>;
  SellIncludeTaxMoney?: InputMaybe<Numeric_Comparison_Exp>;
  SellTaxMoney?: InputMaybe<Numeric_Comparison_Exp>;
  SellTaxes?: InputMaybe<Numeric_Comparison_Exp>;
  ShopCode?: InputMaybe<String_Comparison_Exp>;
  ShopID?: InputMaybe<String_Comparison_Exp>;
  ShopName?: InputMaybe<String_Comparison_Exp>;
  StoreBillDTID?: InputMaybe<String_Comparison_Exp>;
  StoreBillID?: InputMaybe<String_Comparison_Exp>;
  StoreBillIDRemark?: InputMaybe<String_Comparison_Exp>;
  StoreBillReState?: InputMaybe<Boolean_Comparison_Exp>;
  StoreBillRemark?: InputMaybe<String_Comparison_Exp>;
  StoreCode?: InputMaybe<String_Comparison_Exp>;
  StoreID?: InputMaybe<String_Comparison_Exp>;
  StoreName?: InputMaybe<String_Comparison_Exp>;
  SysBatchCode?: InputMaybe<Int_Comparison_Exp>;
  TaxMoney?: InputMaybe<Numeric_Comparison_Exp>;
  Taxes?: InputMaybe<Numeric_Comparison_Exp>;
  _and?: InputMaybe<Array<Dsstorebills_Bool_Exp>>;
  _not?: InputMaybe<Dsstorebills_Bool_Exp>;
  _or?: InputMaybe<Array<Dsstorebills_Bool_Exp>>;
  arriveAssistAmount?: InputMaybe<Numeric_Comparison_Exp>;
  auditDate?: InputMaybe<Date_Comparison_Exp>;
  busDate?: InputMaybe<String_Comparison_Exp>;
  createDate?: InputMaybe<String_Comparison_Exp>;
  isOut?: InputMaybe<Int_Comparison_Exp>;
  modifyDate?: InputMaybe<String_Comparison_Exp>;
  outputRate?: InputMaybe<Numeric_Comparison_Exp>;
  processMoney?: InputMaybe<Numeric_Comparison_Exp>;
  referenceMoney?: InputMaybe<Numeric_Comparison_Exp>;
  referencePrice?: InputMaybe<Numeric_Comparison_Exp>;
  shopJoinFlag?: InputMaybe<Int_Comparison_Exp>;
  store?: InputMaybe<Stores_Bool_Exp>;
  supplyitem?: InputMaybe<Supplyitems_Bool_Exp>;
  transMoney?: InputMaybe<Numeric_Comparison_Exp>;
  yield?: InputMaybe<Numeric_Comparison_Exp>;
  ztSupplierCode?: InputMaybe<String_Comparison_Exp>;
  ztSupplierID?: InputMaybe<String_Comparison_Exp>;
  ztSupplierName?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "dsstorebills" */
export enum Dsstorebills_Constraint {
  /** unique or primary key constraint on columns "StoreBillDTID", "StoreCode" */
  DsstorebillsPkey = 'dsstorebills_pkey'
}

/** input type for incrementing numeric columns in table "dsstorebills" */
export type Dsstorebills_Inc_Input = {
  APMonth?: InputMaybe<Scalars['Int']>;
  APYear?: InputMaybe<Scalars['Int']>;
  ArriveAmount?: InputMaybe<Scalars['numeric']>;
  ArriveMoney?: InputMaybe<Scalars['numeric']>;
  InBusAmount?: InputMaybe<Scalars['numeric']>;
  InMainAmount?: InputMaybe<Scalars['numeric']>;
  InStoreMoney?: InputMaybe<Scalars['numeric']>;
  IncludeTaxMoney?: InputMaybe<Scalars['numeric']>;
  OutBusAmount?: InputMaybe<Scalars['numeric']>;
  OutMainAmount?: InputMaybe<Scalars['numeric']>;
  OutStoreMoney?: InputMaybe<Scalars['numeric']>;
  PushInStoreAmount?: InputMaybe<Scalars['numeric']>;
  PushInStoreMoney?: InputMaybe<Scalars['numeric']>;
  PushOutStoreAmount?: InputMaybe<Scalars['numeric']>;
  PushOutStoreMoney?: InputMaybe<Scalars['numeric']>;
  SaleMoney?: InputMaybe<Scalars['numeric']>;
  SellIncludeTaxMoney?: InputMaybe<Scalars['numeric']>;
  SellTaxMoney?: InputMaybe<Scalars['numeric']>;
  SellTaxes?: InputMaybe<Scalars['numeric']>;
  SysBatchCode?: InputMaybe<Scalars['Int']>;
  TaxMoney?: InputMaybe<Scalars['numeric']>;
  Taxes?: InputMaybe<Scalars['numeric']>;
  arriveAssistAmount?: InputMaybe<Scalars['numeric']>;
  isOut?: InputMaybe<Scalars['Int']>;
  outputRate?: InputMaybe<Scalars['numeric']>;
  processMoney?: InputMaybe<Scalars['numeric']>;
  referenceMoney?: InputMaybe<Scalars['numeric']>;
  referencePrice?: InputMaybe<Scalars['numeric']>;
  shopJoinFlag?: InputMaybe<Scalars['Int']>;
  transMoney?: InputMaybe<Scalars['numeric']>;
  yield?: InputMaybe<Scalars['numeric']>;
};

/** input type for inserting data into table "dsstorebills" */
export type Dsstorebills_Insert_Input = {
  APMonth?: InputMaybe<Scalars['Int']>;
  APYear?: InputMaybe<Scalars['Int']>;
  ArriveAmount?: InputMaybe<Scalars['numeric']>;
  ArriveMoney?: InputMaybe<Scalars['numeric']>;
  BatchCode?: InputMaybe<Scalars['String']>;
  BillBusType?: InputMaybe<Scalars['String']>;
  BillBusTypeId?: InputMaybe<Scalars['String']>;
  BillNO?: InputMaybe<Scalars['String']>;
  BillType?: InputMaybe<Scalars['String']>;
  BusUnit?: InputMaybe<Scalars['String']>;
  BusUser?: InputMaybe<Scalars['String']>;
  GiftFlag?: InputMaybe<Scalars['Boolean']>;
  InBusAmount?: InputMaybe<Scalars['numeric']>;
  InMainAmount?: InputMaybe<Scalars['numeric']>;
  InStoreMoney?: InputMaybe<Scalars['numeric']>;
  IncludeTaxMoney?: InputMaybe<Scalars['numeric']>;
  ItemAbc?: InputMaybe<Scalars['String']>;
  ItemBigClassCode?: InputMaybe<Scalars['String']>;
  ItemBigClassName?: InputMaybe<Scalars['String']>;
  ItemCode?: InputMaybe<Scalars['String']>;
  ItemID?: InputMaybe<Scalars['String']>;
  ItemName?: InputMaybe<Scalars['String']>;
  ItemSign?: InputMaybe<Scalars['String']>;
  ItemSmallClassCode?: InputMaybe<Scalars['String']>;
  ItemSmallClassName?: InputMaybe<Scalars['String']>;
  ItemSpec?: InputMaybe<Scalars['String']>;
  MainUnit?: InputMaybe<Scalars['String']>;
  MakeTime?: InputMaybe<Scalars['String']>;
  OtherSideCode?: InputMaybe<Scalars['String']>;
  OtherSideID?: InputMaybe<Scalars['String']>;
  OtherSideName?: InputMaybe<Scalars['String']>;
  OtherSideType?: InputMaybe<Scalars['String']>;
  OutBusAmount?: InputMaybe<Scalars['numeric']>;
  OutMainAmount?: InputMaybe<Scalars['numeric']>;
  OutStoreMoney?: InputMaybe<Scalars['numeric']>;
  ParentBillNO?: InputMaybe<Scalars['String']>;
  PushInStoreAmount?: InputMaybe<Scalars['numeric']>;
  PushInStoreMoney?: InputMaybe<Scalars['numeric']>;
  PushOutStoreAmount?: InputMaybe<Scalars['numeric']>;
  PushOutStoreMoney?: InputMaybe<Scalars['numeric']>;
  SaleMoney?: InputMaybe<Scalars['numeric']>;
  SellIncludeTaxMoney?: InputMaybe<Scalars['numeric']>;
  SellTaxMoney?: InputMaybe<Scalars['numeric']>;
  SellTaxes?: InputMaybe<Scalars['numeric']>;
  ShopCode?: InputMaybe<Scalars['String']>;
  ShopID?: InputMaybe<Scalars['String']>;
  ShopName?: InputMaybe<Scalars['String']>;
  StoreBillDTID?: InputMaybe<Scalars['String']>;
  StoreBillID?: InputMaybe<Scalars['String']>;
  StoreBillIDRemark?: InputMaybe<Scalars['String']>;
  StoreBillReState?: InputMaybe<Scalars['Boolean']>;
  StoreBillRemark?: InputMaybe<Scalars['String']>;
  StoreCode?: InputMaybe<Scalars['String']>;
  StoreID?: InputMaybe<Scalars['String']>;
  StoreName?: InputMaybe<Scalars['String']>;
  SysBatchCode?: InputMaybe<Scalars['Int']>;
  TaxMoney?: InputMaybe<Scalars['numeric']>;
  Taxes?: InputMaybe<Scalars['numeric']>;
  arriveAssistAmount?: InputMaybe<Scalars['numeric']>;
  auditDate?: InputMaybe<Scalars['date']>;
  busDate?: InputMaybe<Scalars['String']>;
  createDate?: InputMaybe<Scalars['String']>;
  isOut?: InputMaybe<Scalars['Int']>;
  modifyDate?: InputMaybe<Scalars['String']>;
  outputRate?: InputMaybe<Scalars['numeric']>;
  processMoney?: InputMaybe<Scalars['numeric']>;
  referenceMoney?: InputMaybe<Scalars['numeric']>;
  referencePrice?: InputMaybe<Scalars['numeric']>;
  shopJoinFlag?: InputMaybe<Scalars['Int']>;
  store?: InputMaybe<Stores_Obj_Rel_Insert_Input>;
  supplyitem?: InputMaybe<Supplyitems_Obj_Rel_Insert_Input>;
  transMoney?: InputMaybe<Scalars['numeric']>;
  yield?: InputMaybe<Scalars['numeric']>;
  ztSupplierCode?: InputMaybe<Scalars['String']>;
  ztSupplierID?: InputMaybe<Scalars['String']>;
  ztSupplierName?: InputMaybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Dsstorebills_Max_Fields = {
  __typename?: 'dsstorebills_max_fields';
  APMonth?: Maybe<Scalars['Int']>;
  APYear?: Maybe<Scalars['Int']>;
  ArriveAmount?: Maybe<Scalars['numeric']>;
  ArriveMoney?: Maybe<Scalars['numeric']>;
  BatchCode?: Maybe<Scalars['String']>;
  BillBusType?: Maybe<Scalars['String']>;
  BillBusTypeId?: Maybe<Scalars['String']>;
  BillNO?: Maybe<Scalars['String']>;
  BillType?: Maybe<Scalars['String']>;
  BusUnit?: Maybe<Scalars['String']>;
  BusUser?: Maybe<Scalars['String']>;
  InBusAmount?: Maybe<Scalars['numeric']>;
  InMainAmount?: Maybe<Scalars['numeric']>;
  InStoreMoney?: Maybe<Scalars['numeric']>;
  IncludeTaxMoney?: Maybe<Scalars['numeric']>;
  ItemAbc?: Maybe<Scalars['String']>;
  ItemBigClassCode?: Maybe<Scalars['String']>;
  ItemBigClassName?: Maybe<Scalars['String']>;
  ItemCode?: Maybe<Scalars['String']>;
  ItemID?: Maybe<Scalars['String']>;
  ItemName?: Maybe<Scalars['String']>;
  ItemSign?: Maybe<Scalars['String']>;
  ItemSmallClassCode?: Maybe<Scalars['String']>;
  ItemSmallClassName?: Maybe<Scalars['String']>;
  ItemSpec?: Maybe<Scalars['String']>;
  MainUnit?: Maybe<Scalars['String']>;
  MakeTime?: Maybe<Scalars['String']>;
  OtherSideCode?: Maybe<Scalars['String']>;
  OtherSideID?: Maybe<Scalars['String']>;
  OtherSideName?: Maybe<Scalars['String']>;
  OtherSideType?: Maybe<Scalars['String']>;
  OutBusAmount?: Maybe<Scalars['numeric']>;
  OutMainAmount?: Maybe<Scalars['numeric']>;
  OutStoreMoney?: Maybe<Scalars['numeric']>;
  ParentBillNO?: Maybe<Scalars['String']>;
  PushInStoreAmount?: Maybe<Scalars['numeric']>;
  PushInStoreMoney?: Maybe<Scalars['numeric']>;
  PushOutStoreAmount?: Maybe<Scalars['numeric']>;
  PushOutStoreMoney?: Maybe<Scalars['numeric']>;
  SaleMoney?: Maybe<Scalars['numeric']>;
  SellIncludeTaxMoney?: Maybe<Scalars['numeric']>;
  SellTaxMoney?: Maybe<Scalars['numeric']>;
  SellTaxes?: Maybe<Scalars['numeric']>;
  ShopCode?: Maybe<Scalars['String']>;
  ShopID?: Maybe<Scalars['String']>;
  ShopName?: Maybe<Scalars['String']>;
  StoreBillDTID?: Maybe<Scalars['String']>;
  StoreBillID?: Maybe<Scalars['String']>;
  StoreBillIDRemark?: Maybe<Scalars['String']>;
  StoreBillRemark?: Maybe<Scalars['String']>;
  StoreCode?: Maybe<Scalars['String']>;
  StoreID?: Maybe<Scalars['String']>;
  StoreName?: Maybe<Scalars['String']>;
  SysBatchCode?: Maybe<Scalars['Int']>;
  TaxMoney?: Maybe<Scalars['numeric']>;
  Taxes?: Maybe<Scalars['numeric']>;
  arriveAssistAmount?: Maybe<Scalars['numeric']>;
  auditDate?: Maybe<Scalars['date']>;
  busDate?: Maybe<Scalars['String']>;
  createDate?: Maybe<Scalars['String']>;
  isOut?: Maybe<Scalars['Int']>;
  modifyDate?: Maybe<Scalars['String']>;
  outputRate?: Maybe<Scalars['numeric']>;
  processMoney?: Maybe<Scalars['numeric']>;
  referenceMoney?: Maybe<Scalars['numeric']>;
  referencePrice?: Maybe<Scalars['numeric']>;
  shopJoinFlag?: Maybe<Scalars['Int']>;
  transMoney?: Maybe<Scalars['numeric']>;
  yield?: Maybe<Scalars['numeric']>;
  ztSupplierCode?: Maybe<Scalars['String']>;
  ztSupplierID?: Maybe<Scalars['String']>;
  ztSupplierName?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "dsstorebills" */
export type Dsstorebills_Max_Order_By = {
  APMonth?: InputMaybe<Order_By>;
  APYear?: InputMaybe<Order_By>;
  ArriveAmount?: InputMaybe<Order_By>;
  ArriveMoney?: InputMaybe<Order_By>;
  BatchCode?: InputMaybe<Order_By>;
  BillBusType?: InputMaybe<Order_By>;
  BillBusTypeId?: InputMaybe<Order_By>;
  BillNO?: InputMaybe<Order_By>;
  BillType?: InputMaybe<Order_By>;
  BusUnit?: InputMaybe<Order_By>;
  BusUser?: InputMaybe<Order_By>;
  InBusAmount?: InputMaybe<Order_By>;
  InMainAmount?: InputMaybe<Order_By>;
  InStoreMoney?: InputMaybe<Order_By>;
  IncludeTaxMoney?: InputMaybe<Order_By>;
  ItemAbc?: InputMaybe<Order_By>;
  ItemBigClassCode?: InputMaybe<Order_By>;
  ItemBigClassName?: InputMaybe<Order_By>;
  ItemCode?: InputMaybe<Order_By>;
  ItemID?: InputMaybe<Order_By>;
  ItemName?: InputMaybe<Order_By>;
  ItemSign?: InputMaybe<Order_By>;
  ItemSmallClassCode?: InputMaybe<Order_By>;
  ItemSmallClassName?: InputMaybe<Order_By>;
  ItemSpec?: InputMaybe<Order_By>;
  MainUnit?: InputMaybe<Order_By>;
  MakeTime?: InputMaybe<Order_By>;
  OtherSideCode?: InputMaybe<Order_By>;
  OtherSideID?: InputMaybe<Order_By>;
  OtherSideName?: InputMaybe<Order_By>;
  OtherSideType?: InputMaybe<Order_By>;
  OutBusAmount?: InputMaybe<Order_By>;
  OutMainAmount?: InputMaybe<Order_By>;
  OutStoreMoney?: InputMaybe<Order_By>;
  ParentBillNO?: InputMaybe<Order_By>;
  PushInStoreAmount?: InputMaybe<Order_By>;
  PushInStoreMoney?: InputMaybe<Order_By>;
  PushOutStoreAmount?: InputMaybe<Order_By>;
  PushOutStoreMoney?: InputMaybe<Order_By>;
  SaleMoney?: InputMaybe<Order_By>;
  SellIncludeTaxMoney?: InputMaybe<Order_By>;
  SellTaxMoney?: InputMaybe<Order_By>;
  SellTaxes?: InputMaybe<Order_By>;
  ShopCode?: InputMaybe<Order_By>;
  ShopID?: InputMaybe<Order_By>;
  ShopName?: InputMaybe<Order_By>;
  StoreBillDTID?: InputMaybe<Order_By>;
  StoreBillID?: InputMaybe<Order_By>;
  StoreBillIDRemark?: InputMaybe<Order_By>;
  StoreBillRemark?: InputMaybe<Order_By>;
  StoreCode?: InputMaybe<Order_By>;
  StoreID?: InputMaybe<Order_By>;
  StoreName?: InputMaybe<Order_By>;
  SysBatchCode?: InputMaybe<Order_By>;
  TaxMoney?: InputMaybe<Order_By>;
  Taxes?: InputMaybe<Order_By>;
  arriveAssistAmount?: InputMaybe<Order_By>;
  auditDate?: InputMaybe<Order_By>;
  busDate?: InputMaybe<Order_By>;
  createDate?: InputMaybe<Order_By>;
  isOut?: InputMaybe<Order_By>;
  modifyDate?: InputMaybe<Order_By>;
  outputRate?: InputMaybe<Order_By>;
  processMoney?: InputMaybe<Order_By>;
  referenceMoney?: InputMaybe<Order_By>;
  referencePrice?: InputMaybe<Order_By>;
  shopJoinFlag?: InputMaybe<Order_By>;
  transMoney?: InputMaybe<Order_By>;
  yield?: InputMaybe<Order_By>;
  ztSupplierCode?: InputMaybe<Order_By>;
  ztSupplierID?: InputMaybe<Order_By>;
  ztSupplierName?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type Dsstorebills_Min_Fields = {
  __typename?: 'dsstorebills_min_fields';
  APMonth?: Maybe<Scalars['Int']>;
  APYear?: Maybe<Scalars['Int']>;
  ArriveAmount?: Maybe<Scalars['numeric']>;
  ArriveMoney?: Maybe<Scalars['numeric']>;
  BatchCode?: Maybe<Scalars['String']>;
  BillBusType?: Maybe<Scalars['String']>;
  BillBusTypeId?: Maybe<Scalars['String']>;
  BillNO?: Maybe<Scalars['String']>;
  BillType?: Maybe<Scalars['String']>;
  BusUnit?: Maybe<Scalars['String']>;
  BusUser?: Maybe<Scalars['String']>;
  InBusAmount?: Maybe<Scalars['numeric']>;
  InMainAmount?: Maybe<Scalars['numeric']>;
  InStoreMoney?: Maybe<Scalars['numeric']>;
  IncludeTaxMoney?: Maybe<Scalars['numeric']>;
  ItemAbc?: Maybe<Scalars['String']>;
  ItemBigClassCode?: Maybe<Scalars['String']>;
  ItemBigClassName?: Maybe<Scalars['String']>;
  ItemCode?: Maybe<Scalars['String']>;
  ItemID?: Maybe<Scalars['String']>;
  ItemName?: Maybe<Scalars['String']>;
  ItemSign?: Maybe<Scalars['String']>;
  ItemSmallClassCode?: Maybe<Scalars['String']>;
  ItemSmallClassName?: Maybe<Scalars['String']>;
  ItemSpec?: Maybe<Scalars['String']>;
  MainUnit?: Maybe<Scalars['String']>;
  MakeTime?: Maybe<Scalars['String']>;
  OtherSideCode?: Maybe<Scalars['String']>;
  OtherSideID?: Maybe<Scalars['String']>;
  OtherSideName?: Maybe<Scalars['String']>;
  OtherSideType?: Maybe<Scalars['String']>;
  OutBusAmount?: Maybe<Scalars['numeric']>;
  OutMainAmount?: Maybe<Scalars['numeric']>;
  OutStoreMoney?: Maybe<Scalars['numeric']>;
  ParentBillNO?: Maybe<Scalars['String']>;
  PushInStoreAmount?: Maybe<Scalars['numeric']>;
  PushInStoreMoney?: Maybe<Scalars['numeric']>;
  PushOutStoreAmount?: Maybe<Scalars['numeric']>;
  PushOutStoreMoney?: Maybe<Scalars['numeric']>;
  SaleMoney?: Maybe<Scalars['numeric']>;
  SellIncludeTaxMoney?: Maybe<Scalars['numeric']>;
  SellTaxMoney?: Maybe<Scalars['numeric']>;
  SellTaxes?: Maybe<Scalars['numeric']>;
  ShopCode?: Maybe<Scalars['String']>;
  ShopID?: Maybe<Scalars['String']>;
  ShopName?: Maybe<Scalars['String']>;
  StoreBillDTID?: Maybe<Scalars['String']>;
  StoreBillID?: Maybe<Scalars['String']>;
  StoreBillIDRemark?: Maybe<Scalars['String']>;
  StoreBillRemark?: Maybe<Scalars['String']>;
  StoreCode?: Maybe<Scalars['String']>;
  StoreID?: Maybe<Scalars['String']>;
  StoreName?: Maybe<Scalars['String']>;
  SysBatchCode?: Maybe<Scalars['Int']>;
  TaxMoney?: Maybe<Scalars['numeric']>;
  Taxes?: Maybe<Scalars['numeric']>;
  arriveAssistAmount?: Maybe<Scalars['numeric']>;
  auditDate?: Maybe<Scalars['date']>;
  busDate?: Maybe<Scalars['String']>;
  createDate?: Maybe<Scalars['String']>;
  isOut?: Maybe<Scalars['Int']>;
  modifyDate?: Maybe<Scalars['String']>;
  outputRate?: Maybe<Scalars['numeric']>;
  processMoney?: Maybe<Scalars['numeric']>;
  referenceMoney?: Maybe<Scalars['numeric']>;
  referencePrice?: Maybe<Scalars['numeric']>;
  shopJoinFlag?: Maybe<Scalars['Int']>;
  transMoney?: Maybe<Scalars['numeric']>;
  yield?: Maybe<Scalars['numeric']>;
  ztSupplierCode?: Maybe<Scalars['String']>;
  ztSupplierID?: Maybe<Scalars['String']>;
  ztSupplierName?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "dsstorebills" */
export type Dsstorebills_Min_Order_By = {
  APMonth?: InputMaybe<Order_By>;
  APYear?: InputMaybe<Order_By>;
  ArriveAmount?: InputMaybe<Order_By>;
  ArriveMoney?: InputMaybe<Order_By>;
  BatchCode?: InputMaybe<Order_By>;
  BillBusType?: InputMaybe<Order_By>;
  BillBusTypeId?: InputMaybe<Order_By>;
  BillNO?: InputMaybe<Order_By>;
  BillType?: InputMaybe<Order_By>;
  BusUnit?: InputMaybe<Order_By>;
  BusUser?: InputMaybe<Order_By>;
  InBusAmount?: InputMaybe<Order_By>;
  InMainAmount?: InputMaybe<Order_By>;
  InStoreMoney?: InputMaybe<Order_By>;
  IncludeTaxMoney?: InputMaybe<Order_By>;
  ItemAbc?: InputMaybe<Order_By>;
  ItemBigClassCode?: InputMaybe<Order_By>;
  ItemBigClassName?: InputMaybe<Order_By>;
  ItemCode?: InputMaybe<Order_By>;
  ItemID?: InputMaybe<Order_By>;
  ItemName?: InputMaybe<Order_By>;
  ItemSign?: InputMaybe<Order_By>;
  ItemSmallClassCode?: InputMaybe<Order_By>;
  ItemSmallClassName?: InputMaybe<Order_By>;
  ItemSpec?: InputMaybe<Order_By>;
  MainUnit?: InputMaybe<Order_By>;
  MakeTime?: InputMaybe<Order_By>;
  OtherSideCode?: InputMaybe<Order_By>;
  OtherSideID?: InputMaybe<Order_By>;
  OtherSideName?: InputMaybe<Order_By>;
  OtherSideType?: InputMaybe<Order_By>;
  OutBusAmount?: InputMaybe<Order_By>;
  OutMainAmount?: InputMaybe<Order_By>;
  OutStoreMoney?: InputMaybe<Order_By>;
  ParentBillNO?: InputMaybe<Order_By>;
  PushInStoreAmount?: InputMaybe<Order_By>;
  PushInStoreMoney?: InputMaybe<Order_By>;
  PushOutStoreAmount?: InputMaybe<Order_By>;
  PushOutStoreMoney?: InputMaybe<Order_By>;
  SaleMoney?: InputMaybe<Order_By>;
  SellIncludeTaxMoney?: InputMaybe<Order_By>;
  SellTaxMoney?: InputMaybe<Order_By>;
  SellTaxes?: InputMaybe<Order_By>;
  ShopCode?: InputMaybe<Order_By>;
  ShopID?: InputMaybe<Order_By>;
  ShopName?: InputMaybe<Order_By>;
  StoreBillDTID?: InputMaybe<Order_By>;
  StoreBillID?: InputMaybe<Order_By>;
  StoreBillIDRemark?: InputMaybe<Order_By>;
  StoreBillRemark?: InputMaybe<Order_By>;
  StoreCode?: InputMaybe<Order_By>;
  StoreID?: InputMaybe<Order_By>;
  StoreName?: InputMaybe<Order_By>;
  SysBatchCode?: InputMaybe<Order_By>;
  TaxMoney?: InputMaybe<Order_By>;
  Taxes?: InputMaybe<Order_By>;
  arriveAssistAmount?: InputMaybe<Order_By>;
  auditDate?: InputMaybe<Order_By>;
  busDate?: InputMaybe<Order_By>;
  createDate?: InputMaybe<Order_By>;
  isOut?: InputMaybe<Order_By>;
  modifyDate?: InputMaybe<Order_By>;
  outputRate?: InputMaybe<Order_By>;
  processMoney?: InputMaybe<Order_By>;
  referenceMoney?: InputMaybe<Order_By>;
  referencePrice?: InputMaybe<Order_By>;
  shopJoinFlag?: InputMaybe<Order_By>;
  transMoney?: InputMaybe<Order_By>;
  yield?: InputMaybe<Order_By>;
  ztSupplierCode?: InputMaybe<Order_By>;
  ztSupplierID?: InputMaybe<Order_By>;
  ztSupplierName?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "dsstorebills" */
export type Dsstorebills_Mutation_Response = {
  __typename?: 'dsstorebills_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Dsstorebills>;
};

/** on_conflict condition type for table "dsstorebills" */
export type Dsstorebills_On_Conflict = {
  constraint: Dsstorebills_Constraint;
  update_columns?: Array<Dsstorebills_Update_Column>;
  where?: InputMaybe<Dsstorebills_Bool_Exp>;
};

/** Ordering options when selecting data from "dsstorebills". */
export type Dsstorebills_Order_By = {
  APMonth?: InputMaybe<Order_By>;
  APYear?: InputMaybe<Order_By>;
  ArriveAmount?: InputMaybe<Order_By>;
  ArriveMoney?: InputMaybe<Order_By>;
  BatchCode?: InputMaybe<Order_By>;
  BillBusType?: InputMaybe<Order_By>;
  BillBusTypeId?: InputMaybe<Order_By>;
  BillNO?: InputMaybe<Order_By>;
  BillType?: InputMaybe<Order_By>;
  BusUnit?: InputMaybe<Order_By>;
  BusUser?: InputMaybe<Order_By>;
  GiftFlag?: InputMaybe<Order_By>;
  InBusAmount?: InputMaybe<Order_By>;
  InMainAmount?: InputMaybe<Order_By>;
  InStoreMoney?: InputMaybe<Order_By>;
  IncludeTaxMoney?: InputMaybe<Order_By>;
  ItemAbc?: InputMaybe<Order_By>;
  ItemBigClassCode?: InputMaybe<Order_By>;
  ItemBigClassName?: InputMaybe<Order_By>;
  ItemCode?: InputMaybe<Order_By>;
  ItemID?: InputMaybe<Order_By>;
  ItemName?: InputMaybe<Order_By>;
  ItemSign?: InputMaybe<Order_By>;
  ItemSmallClassCode?: InputMaybe<Order_By>;
  ItemSmallClassName?: InputMaybe<Order_By>;
  ItemSpec?: InputMaybe<Order_By>;
  MainUnit?: InputMaybe<Order_By>;
  MakeTime?: InputMaybe<Order_By>;
  OtherSideCode?: InputMaybe<Order_By>;
  OtherSideID?: InputMaybe<Order_By>;
  OtherSideName?: InputMaybe<Order_By>;
  OtherSideType?: InputMaybe<Order_By>;
  OutBusAmount?: InputMaybe<Order_By>;
  OutMainAmount?: InputMaybe<Order_By>;
  OutStoreMoney?: InputMaybe<Order_By>;
  ParentBillNO?: InputMaybe<Order_By>;
  PushInStoreAmount?: InputMaybe<Order_By>;
  PushInStoreMoney?: InputMaybe<Order_By>;
  PushOutStoreAmount?: InputMaybe<Order_By>;
  PushOutStoreMoney?: InputMaybe<Order_By>;
  SaleMoney?: InputMaybe<Order_By>;
  SellIncludeTaxMoney?: InputMaybe<Order_By>;
  SellTaxMoney?: InputMaybe<Order_By>;
  SellTaxes?: InputMaybe<Order_By>;
  ShopCode?: InputMaybe<Order_By>;
  ShopID?: InputMaybe<Order_By>;
  ShopName?: InputMaybe<Order_By>;
  StoreBillDTID?: InputMaybe<Order_By>;
  StoreBillID?: InputMaybe<Order_By>;
  StoreBillIDRemark?: InputMaybe<Order_By>;
  StoreBillReState?: InputMaybe<Order_By>;
  StoreBillRemark?: InputMaybe<Order_By>;
  StoreCode?: InputMaybe<Order_By>;
  StoreID?: InputMaybe<Order_By>;
  StoreName?: InputMaybe<Order_By>;
  SysBatchCode?: InputMaybe<Order_By>;
  TaxMoney?: InputMaybe<Order_By>;
  Taxes?: InputMaybe<Order_By>;
  arriveAssistAmount?: InputMaybe<Order_By>;
  auditDate?: InputMaybe<Order_By>;
  busDate?: InputMaybe<Order_By>;
  createDate?: InputMaybe<Order_By>;
  isOut?: InputMaybe<Order_By>;
  modifyDate?: InputMaybe<Order_By>;
  outputRate?: InputMaybe<Order_By>;
  processMoney?: InputMaybe<Order_By>;
  referenceMoney?: InputMaybe<Order_By>;
  referencePrice?: InputMaybe<Order_By>;
  shopJoinFlag?: InputMaybe<Order_By>;
  store?: InputMaybe<Stores_Order_By>;
  supplyitem?: InputMaybe<Supplyitems_Order_By>;
  transMoney?: InputMaybe<Order_By>;
  yield?: InputMaybe<Order_By>;
  ztSupplierCode?: InputMaybe<Order_By>;
  ztSupplierID?: InputMaybe<Order_By>;
  ztSupplierName?: InputMaybe<Order_By>;
};

/** primary key columns input for table: dsstorebills */
export type Dsstorebills_Pk_Columns_Input = {
  StoreBillDTID: Scalars['String'];
  StoreCode: Scalars['String'];
};

/** select columns of table "dsstorebills" */
export enum Dsstorebills_Select_Column {
  /** column name */
  ApMonth = 'APMonth',
  /** column name */
  ApYear = 'APYear',
  /** column name */
  ArriveAmount = 'ArriveAmount',
  /** column name */
  ArriveMoney = 'ArriveMoney',
  /** column name */
  BatchCode = 'BatchCode',
  /** column name */
  BillBusType = 'BillBusType',
  /** column name */
  BillBusTypeId = 'BillBusTypeId',
  /** column name */
  BillNo = 'BillNO',
  /** column name */
  BillType = 'BillType',
  /** column name */
  BusUnit = 'BusUnit',
  /** column name */
  BusUser = 'BusUser',
  /** column name */
  GiftFlag = 'GiftFlag',
  /** column name */
  InBusAmount = 'InBusAmount',
  /** column name */
  InMainAmount = 'InMainAmount',
  /** column name */
  InStoreMoney = 'InStoreMoney',
  /** column name */
  IncludeTaxMoney = 'IncludeTaxMoney',
  /** column name */
  ItemAbc = 'ItemAbc',
  /** column name */
  ItemBigClassCode = 'ItemBigClassCode',
  /** column name */
  ItemBigClassName = 'ItemBigClassName',
  /** column name */
  ItemCode = 'ItemCode',
  /** column name */
  ItemId = 'ItemID',
  /** column name */
  ItemName = 'ItemName',
  /** column name */
  ItemSign = 'ItemSign',
  /** column name */
  ItemSmallClassCode = 'ItemSmallClassCode',
  /** column name */
  ItemSmallClassName = 'ItemSmallClassName',
  /** column name */
  ItemSpec = 'ItemSpec',
  /** column name */
  MainUnit = 'MainUnit',
  /** column name */
  MakeTime = 'MakeTime',
  /** column name */
  OtherSideCode = 'OtherSideCode',
  /** column name */
  OtherSideId = 'OtherSideID',
  /** column name */
  OtherSideName = 'OtherSideName',
  /** column name */
  OtherSideType = 'OtherSideType',
  /** column name */
  OutBusAmount = 'OutBusAmount',
  /** column name */
  OutMainAmount = 'OutMainAmount',
  /** column name */
  OutStoreMoney = 'OutStoreMoney',
  /** column name */
  ParentBillNo = 'ParentBillNO',
  /** column name */
  PushInStoreAmount = 'PushInStoreAmount',
  /** column name */
  PushInStoreMoney = 'PushInStoreMoney',
  /** column name */
  PushOutStoreAmount = 'PushOutStoreAmount',
  /** column name */
  PushOutStoreMoney = 'PushOutStoreMoney',
  /** column name */
  SaleMoney = 'SaleMoney',
  /** column name */
  SellIncludeTaxMoney = 'SellIncludeTaxMoney',
  /** column name */
  SellTaxMoney = 'SellTaxMoney',
  /** column name */
  SellTaxes = 'SellTaxes',
  /** column name */
  ShopCode = 'ShopCode',
  /** column name */
  ShopId = 'ShopID',
  /** column name */
  ShopName = 'ShopName',
  /** column name */
  StoreBillDtid = 'StoreBillDTID',
  /** column name */
  StoreBillId = 'StoreBillID',
  /** column name */
  StoreBillIdRemark = 'StoreBillIDRemark',
  /** column name */
  StoreBillReState = 'StoreBillReState',
  /** column name */
  StoreBillRemark = 'StoreBillRemark',
  /** column name */
  StoreCode = 'StoreCode',
  /** column name */
  StoreId = 'StoreID',
  /** column name */
  StoreName = 'StoreName',
  /** column name */
  SysBatchCode = 'SysBatchCode',
  /** column name */
  TaxMoney = 'TaxMoney',
  /** column name */
  Taxes = 'Taxes',
  /** column name */
  ArriveAssistAmount = 'arriveAssistAmount',
  /** column name */
  AuditDate = 'auditDate',
  /** column name */
  BusDate = 'busDate',
  /** column name */
  CreateDate = 'createDate',
  /** column name */
  IsOut = 'isOut',
  /** column name */
  ModifyDate = 'modifyDate',
  /** column name */
  OutputRate = 'outputRate',
  /** column name */
  ProcessMoney = 'processMoney',
  /** column name */
  ReferenceMoney = 'referenceMoney',
  /** column name */
  ReferencePrice = 'referencePrice',
  /** column name */
  ShopJoinFlag = 'shopJoinFlag',
  /** column name */
  TransMoney = 'transMoney',
  /** column name */
  Yield = 'yield',
  /** column name */
  ZtSupplierCode = 'ztSupplierCode',
  /** column name */
  ZtSupplierId = 'ztSupplierID',
  /** column name */
  ZtSupplierName = 'ztSupplierName'
}

/** select "dsstorebills_aggregate_bool_exp_bool_and_arguments_columns" columns of table "dsstorebills" */
export enum Dsstorebills_Select_Column_Dsstorebills_Aggregate_Bool_Exp_Bool_And_Arguments_Columns {
  /** column name */
  GiftFlag = 'GiftFlag',
  /** column name */
  StoreBillReState = 'StoreBillReState'
}

/** select "dsstorebills_aggregate_bool_exp_bool_or_arguments_columns" columns of table "dsstorebills" */
export enum Dsstorebills_Select_Column_Dsstorebills_Aggregate_Bool_Exp_Bool_Or_Arguments_Columns {
  /** column name */
  GiftFlag = 'GiftFlag',
  /** column name */
  StoreBillReState = 'StoreBillReState'
}

/** input type for updating data in table "dsstorebills" */
export type Dsstorebills_Set_Input = {
  APMonth?: InputMaybe<Scalars['Int']>;
  APYear?: InputMaybe<Scalars['Int']>;
  ArriveAmount?: InputMaybe<Scalars['numeric']>;
  ArriveMoney?: InputMaybe<Scalars['numeric']>;
  BatchCode?: InputMaybe<Scalars['String']>;
  BillBusType?: InputMaybe<Scalars['String']>;
  BillBusTypeId?: InputMaybe<Scalars['String']>;
  BillNO?: InputMaybe<Scalars['String']>;
  BillType?: InputMaybe<Scalars['String']>;
  BusUnit?: InputMaybe<Scalars['String']>;
  BusUser?: InputMaybe<Scalars['String']>;
  GiftFlag?: InputMaybe<Scalars['Boolean']>;
  InBusAmount?: InputMaybe<Scalars['numeric']>;
  InMainAmount?: InputMaybe<Scalars['numeric']>;
  InStoreMoney?: InputMaybe<Scalars['numeric']>;
  IncludeTaxMoney?: InputMaybe<Scalars['numeric']>;
  ItemAbc?: InputMaybe<Scalars['String']>;
  ItemBigClassCode?: InputMaybe<Scalars['String']>;
  ItemBigClassName?: InputMaybe<Scalars['String']>;
  ItemCode?: InputMaybe<Scalars['String']>;
  ItemID?: InputMaybe<Scalars['String']>;
  ItemName?: InputMaybe<Scalars['String']>;
  ItemSign?: InputMaybe<Scalars['String']>;
  ItemSmallClassCode?: InputMaybe<Scalars['String']>;
  ItemSmallClassName?: InputMaybe<Scalars['String']>;
  ItemSpec?: InputMaybe<Scalars['String']>;
  MainUnit?: InputMaybe<Scalars['String']>;
  MakeTime?: InputMaybe<Scalars['String']>;
  OtherSideCode?: InputMaybe<Scalars['String']>;
  OtherSideID?: InputMaybe<Scalars['String']>;
  OtherSideName?: InputMaybe<Scalars['String']>;
  OtherSideType?: InputMaybe<Scalars['String']>;
  OutBusAmount?: InputMaybe<Scalars['numeric']>;
  OutMainAmount?: InputMaybe<Scalars['numeric']>;
  OutStoreMoney?: InputMaybe<Scalars['numeric']>;
  ParentBillNO?: InputMaybe<Scalars['String']>;
  PushInStoreAmount?: InputMaybe<Scalars['numeric']>;
  PushInStoreMoney?: InputMaybe<Scalars['numeric']>;
  PushOutStoreAmount?: InputMaybe<Scalars['numeric']>;
  PushOutStoreMoney?: InputMaybe<Scalars['numeric']>;
  SaleMoney?: InputMaybe<Scalars['numeric']>;
  SellIncludeTaxMoney?: InputMaybe<Scalars['numeric']>;
  SellTaxMoney?: InputMaybe<Scalars['numeric']>;
  SellTaxes?: InputMaybe<Scalars['numeric']>;
  ShopCode?: InputMaybe<Scalars['String']>;
  ShopID?: InputMaybe<Scalars['String']>;
  ShopName?: InputMaybe<Scalars['String']>;
  StoreBillDTID?: InputMaybe<Scalars['String']>;
  StoreBillID?: InputMaybe<Scalars['String']>;
  StoreBillIDRemark?: InputMaybe<Scalars['String']>;
  StoreBillReState?: InputMaybe<Scalars['Boolean']>;
  StoreBillRemark?: InputMaybe<Scalars['String']>;
  StoreCode?: InputMaybe<Scalars['String']>;
  StoreID?: InputMaybe<Scalars['String']>;
  StoreName?: InputMaybe<Scalars['String']>;
  SysBatchCode?: InputMaybe<Scalars['Int']>;
  TaxMoney?: InputMaybe<Scalars['numeric']>;
  Taxes?: InputMaybe<Scalars['numeric']>;
  arriveAssistAmount?: InputMaybe<Scalars['numeric']>;
  auditDate?: InputMaybe<Scalars['date']>;
  busDate?: InputMaybe<Scalars['String']>;
  createDate?: InputMaybe<Scalars['String']>;
  isOut?: InputMaybe<Scalars['Int']>;
  modifyDate?: InputMaybe<Scalars['String']>;
  outputRate?: InputMaybe<Scalars['numeric']>;
  processMoney?: InputMaybe<Scalars['numeric']>;
  referenceMoney?: InputMaybe<Scalars['numeric']>;
  referencePrice?: InputMaybe<Scalars['numeric']>;
  shopJoinFlag?: InputMaybe<Scalars['Int']>;
  transMoney?: InputMaybe<Scalars['numeric']>;
  yield?: InputMaybe<Scalars['numeric']>;
  ztSupplierCode?: InputMaybe<Scalars['String']>;
  ztSupplierID?: InputMaybe<Scalars['String']>;
  ztSupplierName?: InputMaybe<Scalars['String']>;
};

/** aggregate stddev on columns */
export type Dsstorebills_Stddev_Fields = {
  __typename?: 'dsstorebills_stddev_fields';
  APMonth?: Maybe<Scalars['Float']>;
  APYear?: Maybe<Scalars['Float']>;
  ArriveAmount?: Maybe<Scalars['Float']>;
  ArriveMoney?: Maybe<Scalars['Float']>;
  InBusAmount?: Maybe<Scalars['Float']>;
  InMainAmount?: Maybe<Scalars['Float']>;
  InStoreMoney?: Maybe<Scalars['Float']>;
  IncludeTaxMoney?: Maybe<Scalars['Float']>;
  OutBusAmount?: Maybe<Scalars['Float']>;
  OutMainAmount?: Maybe<Scalars['Float']>;
  OutStoreMoney?: Maybe<Scalars['Float']>;
  PushInStoreAmount?: Maybe<Scalars['Float']>;
  PushInStoreMoney?: Maybe<Scalars['Float']>;
  PushOutStoreAmount?: Maybe<Scalars['Float']>;
  PushOutStoreMoney?: Maybe<Scalars['Float']>;
  SaleMoney?: Maybe<Scalars['Float']>;
  SellIncludeTaxMoney?: Maybe<Scalars['Float']>;
  SellTaxMoney?: Maybe<Scalars['Float']>;
  SellTaxes?: Maybe<Scalars['Float']>;
  SysBatchCode?: Maybe<Scalars['Float']>;
  TaxMoney?: Maybe<Scalars['Float']>;
  Taxes?: Maybe<Scalars['Float']>;
  arriveAssistAmount?: Maybe<Scalars['Float']>;
  isOut?: Maybe<Scalars['Float']>;
  outputRate?: Maybe<Scalars['Float']>;
  processMoney?: Maybe<Scalars['Float']>;
  referenceMoney?: Maybe<Scalars['Float']>;
  referencePrice?: Maybe<Scalars['Float']>;
  shopJoinFlag?: Maybe<Scalars['Float']>;
  transMoney?: Maybe<Scalars['Float']>;
  yield?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "dsstorebills" */
export type Dsstorebills_Stddev_Order_By = {
  APMonth?: InputMaybe<Order_By>;
  APYear?: InputMaybe<Order_By>;
  ArriveAmount?: InputMaybe<Order_By>;
  ArriveMoney?: InputMaybe<Order_By>;
  InBusAmount?: InputMaybe<Order_By>;
  InMainAmount?: InputMaybe<Order_By>;
  InStoreMoney?: InputMaybe<Order_By>;
  IncludeTaxMoney?: InputMaybe<Order_By>;
  OutBusAmount?: InputMaybe<Order_By>;
  OutMainAmount?: InputMaybe<Order_By>;
  OutStoreMoney?: InputMaybe<Order_By>;
  PushInStoreAmount?: InputMaybe<Order_By>;
  PushInStoreMoney?: InputMaybe<Order_By>;
  PushOutStoreAmount?: InputMaybe<Order_By>;
  PushOutStoreMoney?: InputMaybe<Order_By>;
  SaleMoney?: InputMaybe<Order_By>;
  SellIncludeTaxMoney?: InputMaybe<Order_By>;
  SellTaxMoney?: InputMaybe<Order_By>;
  SellTaxes?: InputMaybe<Order_By>;
  SysBatchCode?: InputMaybe<Order_By>;
  TaxMoney?: InputMaybe<Order_By>;
  Taxes?: InputMaybe<Order_By>;
  arriveAssistAmount?: InputMaybe<Order_By>;
  isOut?: InputMaybe<Order_By>;
  outputRate?: InputMaybe<Order_By>;
  processMoney?: InputMaybe<Order_By>;
  referenceMoney?: InputMaybe<Order_By>;
  referencePrice?: InputMaybe<Order_By>;
  shopJoinFlag?: InputMaybe<Order_By>;
  transMoney?: InputMaybe<Order_By>;
  yield?: InputMaybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Dsstorebills_Stddev_Pop_Fields = {
  __typename?: 'dsstorebills_stddev_pop_fields';
  APMonth?: Maybe<Scalars['Float']>;
  APYear?: Maybe<Scalars['Float']>;
  ArriveAmount?: Maybe<Scalars['Float']>;
  ArriveMoney?: Maybe<Scalars['Float']>;
  InBusAmount?: Maybe<Scalars['Float']>;
  InMainAmount?: Maybe<Scalars['Float']>;
  InStoreMoney?: Maybe<Scalars['Float']>;
  IncludeTaxMoney?: Maybe<Scalars['Float']>;
  OutBusAmount?: Maybe<Scalars['Float']>;
  OutMainAmount?: Maybe<Scalars['Float']>;
  OutStoreMoney?: Maybe<Scalars['Float']>;
  PushInStoreAmount?: Maybe<Scalars['Float']>;
  PushInStoreMoney?: Maybe<Scalars['Float']>;
  PushOutStoreAmount?: Maybe<Scalars['Float']>;
  PushOutStoreMoney?: Maybe<Scalars['Float']>;
  SaleMoney?: Maybe<Scalars['Float']>;
  SellIncludeTaxMoney?: Maybe<Scalars['Float']>;
  SellTaxMoney?: Maybe<Scalars['Float']>;
  SellTaxes?: Maybe<Scalars['Float']>;
  SysBatchCode?: Maybe<Scalars['Float']>;
  TaxMoney?: Maybe<Scalars['Float']>;
  Taxes?: Maybe<Scalars['Float']>;
  arriveAssistAmount?: Maybe<Scalars['Float']>;
  isOut?: Maybe<Scalars['Float']>;
  outputRate?: Maybe<Scalars['Float']>;
  processMoney?: Maybe<Scalars['Float']>;
  referenceMoney?: Maybe<Scalars['Float']>;
  referencePrice?: Maybe<Scalars['Float']>;
  shopJoinFlag?: Maybe<Scalars['Float']>;
  transMoney?: Maybe<Scalars['Float']>;
  yield?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "dsstorebills" */
export type Dsstorebills_Stddev_Pop_Order_By = {
  APMonth?: InputMaybe<Order_By>;
  APYear?: InputMaybe<Order_By>;
  ArriveAmount?: InputMaybe<Order_By>;
  ArriveMoney?: InputMaybe<Order_By>;
  InBusAmount?: InputMaybe<Order_By>;
  InMainAmount?: InputMaybe<Order_By>;
  InStoreMoney?: InputMaybe<Order_By>;
  IncludeTaxMoney?: InputMaybe<Order_By>;
  OutBusAmount?: InputMaybe<Order_By>;
  OutMainAmount?: InputMaybe<Order_By>;
  OutStoreMoney?: InputMaybe<Order_By>;
  PushInStoreAmount?: InputMaybe<Order_By>;
  PushInStoreMoney?: InputMaybe<Order_By>;
  PushOutStoreAmount?: InputMaybe<Order_By>;
  PushOutStoreMoney?: InputMaybe<Order_By>;
  SaleMoney?: InputMaybe<Order_By>;
  SellIncludeTaxMoney?: InputMaybe<Order_By>;
  SellTaxMoney?: InputMaybe<Order_By>;
  SellTaxes?: InputMaybe<Order_By>;
  SysBatchCode?: InputMaybe<Order_By>;
  TaxMoney?: InputMaybe<Order_By>;
  Taxes?: InputMaybe<Order_By>;
  arriveAssistAmount?: InputMaybe<Order_By>;
  isOut?: InputMaybe<Order_By>;
  outputRate?: InputMaybe<Order_By>;
  processMoney?: InputMaybe<Order_By>;
  referenceMoney?: InputMaybe<Order_By>;
  referencePrice?: InputMaybe<Order_By>;
  shopJoinFlag?: InputMaybe<Order_By>;
  transMoney?: InputMaybe<Order_By>;
  yield?: InputMaybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Dsstorebills_Stddev_Samp_Fields = {
  __typename?: 'dsstorebills_stddev_samp_fields';
  APMonth?: Maybe<Scalars['Float']>;
  APYear?: Maybe<Scalars['Float']>;
  ArriveAmount?: Maybe<Scalars['Float']>;
  ArriveMoney?: Maybe<Scalars['Float']>;
  InBusAmount?: Maybe<Scalars['Float']>;
  InMainAmount?: Maybe<Scalars['Float']>;
  InStoreMoney?: Maybe<Scalars['Float']>;
  IncludeTaxMoney?: Maybe<Scalars['Float']>;
  OutBusAmount?: Maybe<Scalars['Float']>;
  OutMainAmount?: Maybe<Scalars['Float']>;
  OutStoreMoney?: Maybe<Scalars['Float']>;
  PushInStoreAmount?: Maybe<Scalars['Float']>;
  PushInStoreMoney?: Maybe<Scalars['Float']>;
  PushOutStoreAmount?: Maybe<Scalars['Float']>;
  PushOutStoreMoney?: Maybe<Scalars['Float']>;
  SaleMoney?: Maybe<Scalars['Float']>;
  SellIncludeTaxMoney?: Maybe<Scalars['Float']>;
  SellTaxMoney?: Maybe<Scalars['Float']>;
  SellTaxes?: Maybe<Scalars['Float']>;
  SysBatchCode?: Maybe<Scalars['Float']>;
  TaxMoney?: Maybe<Scalars['Float']>;
  Taxes?: Maybe<Scalars['Float']>;
  arriveAssistAmount?: Maybe<Scalars['Float']>;
  isOut?: Maybe<Scalars['Float']>;
  outputRate?: Maybe<Scalars['Float']>;
  processMoney?: Maybe<Scalars['Float']>;
  referenceMoney?: Maybe<Scalars['Float']>;
  referencePrice?: Maybe<Scalars['Float']>;
  shopJoinFlag?: Maybe<Scalars['Float']>;
  transMoney?: Maybe<Scalars['Float']>;
  yield?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "dsstorebills" */
export type Dsstorebills_Stddev_Samp_Order_By = {
  APMonth?: InputMaybe<Order_By>;
  APYear?: InputMaybe<Order_By>;
  ArriveAmount?: InputMaybe<Order_By>;
  ArriveMoney?: InputMaybe<Order_By>;
  InBusAmount?: InputMaybe<Order_By>;
  InMainAmount?: InputMaybe<Order_By>;
  InStoreMoney?: InputMaybe<Order_By>;
  IncludeTaxMoney?: InputMaybe<Order_By>;
  OutBusAmount?: InputMaybe<Order_By>;
  OutMainAmount?: InputMaybe<Order_By>;
  OutStoreMoney?: InputMaybe<Order_By>;
  PushInStoreAmount?: InputMaybe<Order_By>;
  PushInStoreMoney?: InputMaybe<Order_By>;
  PushOutStoreAmount?: InputMaybe<Order_By>;
  PushOutStoreMoney?: InputMaybe<Order_By>;
  SaleMoney?: InputMaybe<Order_By>;
  SellIncludeTaxMoney?: InputMaybe<Order_By>;
  SellTaxMoney?: InputMaybe<Order_By>;
  SellTaxes?: InputMaybe<Order_By>;
  SysBatchCode?: InputMaybe<Order_By>;
  TaxMoney?: InputMaybe<Order_By>;
  Taxes?: InputMaybe<Order_By>;
  arriveAssistAmount?: InputMaybe<Order_By>;
  isOut?: InputMaybe<Order_By>;
  outputRate?: InputMaybe<Order_By>;
  processMoney?: InputMaybe<Order_By>;
  referenceMoney?: InputMaybe<Order_By>;
  referencePrice?: InputMaybe<Order_By>;
  shopJoinFlag?: InputMaybe<Order_By>;
  transMoney?: InputMaybe<Order_By>;
  yield?: InputMaybe<Order_By>;
};

/** Streaming cursor of the table "dsstorebills" */
export type Dsstorebills_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Dsstorebills_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Dsstorebills_Stream_Cursor_Value_Input = {
  APMonth?: InputMaybe<Scalars['Int']>;
  APYear?: InputMaybe<Scalars['Int']>;
  ArriveAmount?: InputMaybe<Scalars['numeric']>;
  ArriveMoney?: InputMaybe<Scalars['numeric']>;
  BatchCode?: InputMaybe<Scalars['String']>;
  BillBusType?: InputMaybe<Scalars['String']>;
  BillBusTypeId?: InputMaybe<Scalars['String']>;
  BillNO?: InputMaybe<Scalars['String']>;
  BillType?: InputMaybe<Scalars['String']>;
  BusUnit?: InputMaybe<Scalars['String']>;
  BusUser?: InputMaybe<Scalars['String']>;
  GiftFlag?: InputMaybe<Scalars['Boolean']>;
  InBusAmount?: InputMaybe<Scalars['numeric']>;
  InMainAmount?: InputMaybe<Scalars['numeric']>;
  InStoreMoney?: InputMaybe<Scalars['numeric']>;
  IncludeTaxMoney?: InputMaybe<Scalars['numeric']>;
  ItemAbc?: InputMaybe<Scalars['String']>;
  ItemBigClassCode?: InputMaybe<Scalars['String']>;
  ItemBigClassName?: InputMaybe<Scalars['String']>;
  ItemCode?: InputMaybe<Scalars['String']>;
  ItemID?: InputMaybe<Scalars['String']>;
  ItemName?: InputMaybe<Scalars['String']>;
  ItemSign?: InputMaybe<Scalars['String']>;
  ItemSmallClassCode?: InputMaybe<Scalars['String']>;
  ItemSmallClassName?: InputMaybe<Scalars['String']>;
  ItemSpec?: InputMaybe<Scalars['String']>;
  MainUnit?: InputMaybe<Scalars['String']>;
  MakeTime?: InputMaybe<Scalars['String']>;
  OtherSideCode?: InputMaybe<Scalars['String']>;
  OtherSideID?: InputMaybe<Scalars['String']>;
  OtherSideName?: InputMaybe<Scalars['String']>;
  OtherSideType?: InputMaybe<Scalars['String']>;
  OutBusAmount?: InputMaybe<Scalars['numeric']>;
  OutMainAmount?: InputMaybe<Scalars['numeric']>;
  OutStoreMoney?: InputMaybe<Scalars['numeric']>;
  ParentBillNO?: InputMaybe<Scalars['String']>;
  PushInStoreAmount?: InputMaybe<Scalars['numeric']>;
  PushInStoreMoney?: InputMaybe<Scalars['numeric']>;
  PushOutStoreAmount?: InputMaybe<Scalars['numeric']>;
  PushOutStoreMoney?: InputMaybe<Scalars['numeric']>;
  SaleMoney?: InputMaybe<Scalars['numeric']>;
  SellIncludeTaxMoney?: InputMaybe<Scalars['numeric']>;
  SellTaxMoney?: InputMaybe<Scalars['numeric']>;
  SellTaxes?: InputMaybe<Scalars['numeric']>;
  ShopCode?: InputMaybe<Scalars['String']>;
  ShopID?: InputMaybe<Scalars['String']>;
  ShopName?: InputMaybe<Scalars['String']>;
  StoreBillDTID?: InputMaybe<Scalars['String']>;
  StoreBillID?: InputMaybe<Scalars['String']>;
  StoreBillIDRemark?: InputMaybe<Scalars['String']>;
  StoreBillReState?: InputMaybe<Scalars['Boolean']>;
  StoreBillRemark?: InputMaybe<Scalars['String']>;
  StoreCode?: InputMaybe<Scalars['String']>;
  StoreID?: InputMaybe<Scalars['String']>;
  StoreName?: InputMaybe<Scalars['String']>;
  SysBatchCode?: InputMaybe<Scalars['Int']>;
  TaxMoney?: InputMaybe<Scalars['numeric']>;
  Taxes?: InputMaybe<Scalars['numeric']>;
  arriveAssistAmount?: InputMaybe<Scalars['numeric']>;
  auditDate?: InputMaybe<Scalars['date']>;
  busDate?: InputMaybe<Scalars['String']>;
  createDate?: InputMaybe<Scalars['String']>;
  isOut?: InputMaybe<Scalars['Int']>;
  modifyDate?: InputMaybe<Scalars['String']>;
  outputRate?: InputMaybe<Scalars['numeric']>;
  processMoney?: InputMaybe<Scalars['numeric']>;
  referenceMoney?: InputMaybe<Scalars['numeric']>;
  referencePrice?: InputMaybe<Scalars['numeric']>;
  shopJoinFlag?: InputMaybe<Scalars['Int']>;
  transMoney?: InputMaybe<Scalars['numeric']>;
  yield?: InputMaybe<Scalars['numeric']>;
  ztSupplierCode?: InputMaybe<Scalars['String']>;
  ztSupplierID?: InputMaybe<Scalars['String']>;
  ztSupplierName?: InputMaybe<Scalars['String']>;
};

/** aggregate sum on columns */
export type Dsstorebills_Sum_Fields = {
  __typename?: 'dsstorebills_sum_fields';
  APMonth?: Maybe<Scalars['Int']>;
  APYear?: Maybe<Scalars['Int']>;
  ArriveAmount?: Maybe<Scalars['numeric']>;
  ArriveMoney?: Maybe<Scalars['numeric']>;
  InBusAmount?: Maybe<Scalars['numeric']>;
  InMainAmount?: Maybe<Scalars['numeric']>;
  InStoreMoney?: Maybe<Scalars['numeric']>;
  IncludeTaxMoney?: Maybe<Scalars['numeric']>;
  OutBusAmount?: Maybe<Scalars['numeric']>;
  OutMainAmount?: Maybe<Scalars['numeric']>;
  OutStoreMoney?: Maybe<Scalars['numeric']>;
  PushInStoreAmount?: Maybe<Scalars['numeric']>;
  PushInStoreMoney?: Maybe<Scalars['numeric']>;
  PushOutStoreAmount?: Maybe<Scalars['numeric']>;
  PushOutStoreMoney?: Maybe<Scalars['numeric']>;
  SaleMoney?: Maybe<Scalars['numeric']>;
  SellIncludeTaxMoney?: Maybe<Scalars['numeric']>;
  SellTaxMoney?: Maybe<Scalars['numeric']>;
  SellTaxes?: Maybe<Scalars['numeric']>;
  SysBatchCode?: Maybe<Scalars['Int']>;
  TaxMoney?: Maybe<Scalars['numeric']>;
  Taxes?: Maybe<Scalars['numeric']>;
  arriveAssistAmount?: Maybe<Scalars['numeric']>;
  isOut?: Maybe<Scalars['Int']>;
  outputRate?: Maybe<Scalars['numeric']>;
  processMoney?: Maybe<Scalars['numeric']>;
  referenceMoney?: Maybe<Scalars['numeric']>;
  referencePrice?: Maybe<Scalars['numeric']>;
  shopJoinFlag?: Maybe<Scalars['Int']>;
  transMoney?: Maybe<Scalars['numeric']>;
  yield?: Maybe<Scalars['numeric']>;
};

/** order by sum() on columns of table "dsstorebills" */
export type Dsstorebills_Sum_Order_By = {
  APMonth?: InputMaybe<Order_By>;
  APYear?: InputMaybe<Order_By>;
  ArriveAmount?: InputMaybe<Order_By>;
  ArriveMoney?: InputMaybe<Order_By>;
  InBusAmount?: InputMaybe<Order_By>;
  InMainAmount?: InputMaybe<Order_By>;
  InStoreMoney?: InputMaybe<Order_By>;
  IncludeTaxMoney?: InputMaybe<Order_By>;
  OutBusAmount?: InputMaybe<Order_By>;
  OutMainAmount?: InputMaybe<Order_By>;
  OutStoreMoney?: InputMaybe<Order_By>;
  PushInStoreAmount?: InputMaybe<Order_By>;
  PushInStoreMoney?: InputMaybe<Order_By>;
  PushOutStoreAmount?: InputMaybe<Order_By>;
  PushOutStoreMoney?: InputMaybe<Order_By>;
  SaleMoney?: InputMaybe<Order_By>;
  SellIncludeTaxMoney?: InputMaybe<Order_By>;
  SellTaxMoney?: InputMaybe<Order_By>;
  SellTaxes?: InputMaybe<Order_By>;
  SysBatchCode?: InputMaybe<Order_By>;
  TaxMoney?: InputMaybe<Order_By>;
  Taxes?: InputMaybe<Order_By>;
  arriveAssistAmount?: InputMaybe<Order_By>;
  isOut?: InputMaybe<Order_By>;
  outputRate?: InputMaybe<Order_By>;
  processMoney?: InputMaybe<Order_By>;
  referenceMoney?: InputMaybe<Order_By>;
  referencePrice?: InputMaybe<Order_By>;
  shopJoinFlag?: InputMaybe<Order_By>;
  transMoney?: InputMaybe<Order_By>;
  yield?: InputMaybe<Order_By>;
};

/** update columns of table "dsstorebills" */
export enum Dsstorebills_Update_Column {
  /** column name */
  ApMonth = 'APMonth',
  /** column name */
  ApYear = 'APYear',
  /** column name */
  ArriveAmount = 'ArriveAmount',
  /** column name */
  ArriveMoney = 'ArriveMoney',
  /** column name */
  BatchCode = 'BatchCode',
  /** column name */
  BillBusType = 'BillBusType',
  /** column name */
  BillBusTypeId = 'BillBusTypeId',
  /** column name */
  BillNo = 'BillNO',
  /** column name */
  BillType = 'BillType',
  /** column name */
  BusUnit = 'BusUnit',
  /** column name */
  BusUser = 'BusUser',
  /** column name */
  GiftFlag = 'GiftFlag',
  /** column name */
  InBusAmount = 'InBusAmount',
  /** column name */
  InMainAmount = 'InMainAmount',
  /** column name */
  InStoreMoney = 'InStoreMoney',
  /** column name */
  IncludeTaxMoney = 'IncludeTaxMoney',
  /** column name */
  ItemAbc = 'ItemAbc',
  /** column name */
  ItemBigClassCode = 'ItemBigClassCode',
  /** column name */
  ItemBigClassName = 'ItemBigClassName',
  /** column name */
  ItemCode = 'ItemCode',
  /** column name */
  ItemId = 'ItemID',
  /** column name */
  ItemName = 'ItemName',
  /** column name */
  ItemSign = 'ItemSign',
  /** column name */
  ItemSmallClassCode = 'ItemSmallClassCode',
  /** column name */
  ItemSmallClassName = 'ItemSmallClassName',
  /** column name */
  ItemSpec = 'ItemSpec',
  /** column name */
  MainUnit = 'MainUnit',
  /** column name */
  MakeTime = 'MakeTime',
  /** column name */
  OtherSideCode = 'OtherSideCode',
  /** column name */
  OtherSideId = 'OtherSideID',
  /** column name */
  OtherSideName = 'OtherSideName',
  /** column name */
  OtherSideType = 'OtherSideType',
  /** column name */
  OutBusAmount = 'OutBusAmount',
  /** column name */
  OutMainAmount = 'OutMainAmount',
  /** column name */
  OutStoreMoney = 'OutStoreMoney',
  /** column name */
  ParentBillNo = 'ParentBillNO',
  /** column name */
  PushInStoreAmount = 'PushInStoreAmount',
  /** column name */
  PushInStoreMoney = 'PushInStoreMoney',
  /** column name */
  PushOutStoreAmount = 'PushOutStoreAmount',
  /** column name */
  PushOutStoreMoney = 'PushOutStoreMoney',
  /** column name */
  SaleMoney = 'SaleMoney',
  /** column name */
  SellIncludeTaxMoney = 'SellIncludeTaxMoney',
  /** column name */
  SellTaxMoney = 'SellTaxMoney',
  /** column name */
  SellTaxes = 'SellTaxes',
  /** column name */
  ShopCode = 'ShopCode',
  /** column name */
  ShopId = 'ShopID',
  /** column name */
  ShopName = 'ShopName',
  /** column name */
  StoreBillDtid = 'StoreBillDTID',
  /** column name */
  StoreBillId = 'StoreBillID',
  /** column name */
  StoreBillIdRemark = 'StoreBillIDRemark',
  /** column name */
  StoreBillReState = 'StoreBillReState',
  /** column name */
  StoreBillRemark = 'StoreBillRemark',
  /** column name */
  StoreCode = 'StoreCode',
  /** column name */
  StoreId = 'StoreID',
  /** column name */
  StoreName = 'StoreName',
  /** column name */
  SysBatchCode = 'SysBatchCode',
  /** column name */
  TaxMoney = 'TaxMoney',
  /** column name */
  Taxes = 'Taxes',
  /** column name */
  ArriveAssistAmount = 'arriveAssistAmount',
  /** column name */
  AuditDate = 'auditDate',
  /** column name */
  BusDate = 'busDate',
  /** column name */
  CreateDate = 'createDate',
  /** column name */
  IsOut = 'isOut',
  /** column name */
  ModifyDate = 'modifyDate',
  /** column name */
  OutputRate = 'outputRate',
  /** column name */
  ProcessMoney = 'processMoney',
  /** column name */
  ReferenceMoney = 'referenceMoney',
  /** column name */
  ReferencePrice = 'referencePrice',
  /** column name */
  ShopJoinFlag = 'shopJoinFlag',
  /** column name */
  TransMoney = 'transMoney',
  /** column name */
  Yield = 'yield',
  /** column name */
  ZtSupplierCode = 'ztSupplierCode',
  /** column name */
  ZtSupplierId = 'ztSupplierID',
  /** column name */
  ZtSupplierName = 'ztSupplierName'
}

export type Dsstorebills_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: InputMaybe<Dsstorebills_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Dsstorebills_Set_Input>;
  /** filter the rows which have to be updated */
  where: Dsstorebills_Bool_Exp;
};

/** aggregate var_pop on columns */
export type Dsstorebills_Var_Pop_Fields = {
  __typename?: 'dsstorebills_var_pop_fields';
  APMonth?: Maybe<Scalars['Float']>;
  APYear?: Maybe<Scalars['Float']>;
  ArriveAmount?: Maybe<Scalars['Float']>;
  ArriveMoney?: Maybe<Scalars['Float']>;
  InBusAmount?: Maybe<Scalars['Float']>;
  InMainAmount?: Maybe<Scalars['Float']>;
  InStoreMoney?: Maybe<Scalars['Float']>;
  IncludeTaxMoney?: Maybe<Scalars['Float']>;
  OutBusAmount?: Maybe<Scalars['Float']>;
  OutMainAmount?: Maybe<Scalars['Float']>;
  OutStoreMoney?: Maybe<Scalars['Float']>;
  PushInStoreAmount?: Maybe<Scalars['Float']>;
  PushInStoreMoney?: Maybe<Scalars['Float']>;
  PushOutStoreAmount?: Maybe<Scalars['Float']>;
  PushOutStoreMoney?: Maybe<Scalars['Float']>;
  SaleMoney?: Maybe<Scalars['Float']>;
  SellIncludeTaxMoney?: Maybe<Scalars['Float']>;
  SellTaxMoney?: Maybe<Scalars['Float']>;
  SellTaxes?: Maybe<Scalars['Float']>;
  SysBatchCode?: Maybe<Scalars['Float']>;
  TaxMoney?: Maybe<Scalars['Float']>;
  Taxes?: Maybe<Scalars['Float']>;
  arriveAssistAmount?: Maybe<Scalars['Float']>;
  isOut?: Maybe<Scalars['Float']>;
  outputRate?: Maybe<Scalars['Float']>;
  processMoney?: Maybe<Scalars['Float']>;
  referenceMoney?: Maybe<Scalars['Float']>;
  referencePrice?: Maybe<Scalars['Float']>;
  shopJoinFlag?: Maybe<Scalars['Float']>;
  transMoney?: Maybe<Scalars['Float']>;
  yield?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "dsstorebills" */
export type Dsstorebills_Var_Pop_Order_By = {
  APMonth?: InputMaybe<Order_By>;
  APYear?: InputMaybe<Order_By>;
  ArriveAmount?: InputMaybe<Order_By>;
  ArriveMoney?: InputMaybe<Order_By>;
  InBusAmount?: InputMaybe<Order_By>;
  InMainAmount?: InputMaybe<Order_By>;
  InStoreMoney?: InputMaybe<Order_By>;
  IncludeTaxMoney?: InputMaybe<Order_By>;
  OutBusAmount?: InputMaybe<Order_By>;
  OutMainAmount?: InputMaybe<Order_By>;
  OutStoreMoney?: InputMaybe<Order_By>;
  PushInStoreAmount?: InputMaybe<Order_By>;
  PushInStoreMoney?: InputMaybe<Order_By>;
  PushOutStoreAmount?: InputMaybe<Order_By>;
  PushOutStoreMoney?: InputMaybe<Order_By>;
  SaleMoney?: InputMaybe<Order_By>;
  SellIncludeTaxMoney?: InputMaybe<Order_By>;
  SellTaxMoney?: InputMaybe<Order_By>;
  SellTaxes?: InputMaybe<Order_By>;
  SysBatchCode?: InputMaybe<Order_By>;
  TaxMoney?: InputMaybe<Order_By>;
  Taxes?: InputMaybe<Order_By>;
  arriveAssistAmount?: InputMaybe<Order_By>;
  isOut?: InputMaybe<Order_By>;
  outputRate?: InputMaybe<Order_By>;
  processMoney?: InputMaybe<Order_By>;
  referenceMoney?: InputMaybe<Order_By>;
  referencePrice?: InputMaybe<Order_By>;
  shopJoinFlag?: InputMaybe<Order_By>;
  transMoney?: InputMaybe<Order_By>;
  yield?: InputMaybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Dsstorebills_Var_Samp_Fields = {
  __typename?: 'dsstorebills_var_samp_fields';
  APMonth?: Maybe<Scalars['Float']>;
  APYear?: Maybe<Scalars['Float']>;
  ArriveAmount?: Maybe<Scalars['Float']>;
  ArriveMoney?: Maybe<Scalars['Float']>;
  InBusAmount?: Maybe<Scalars['Float']>;
  InMainAmount?: Maybe<Scalars['Float']>;
  InStoreMoney?: Maybe<Scalars['Float']>;
  IncludeTaxMoney?: Maybe<Scalars['Float']>;
  OutBusAmount?: Maybe<Scalars['Float']>;
  OutMainAmount?: Maybe<Scalars['Float']>;
  OutStoreMoney?: Maybe<Scalars['Float']>;
  PushInStoreAmount?: Maybe<Scalars['Float']>;
  PushInStoreMoney?: Maybe<Scalars['Float']>;
  PushOutStoreAmount?: Maybe<Scalars['Float']>;
  PushOutStoreMoney?: Maybe<Scalars['Float']>;
  SaleMoney?: Maybe<Scalars['Float']>;
  SellIncludeTaxMoney?: Maybe<Scalars['Float']>;
  SellTaxMoney?: Maybe<Scalars['Float']>;
  SellTaxes?: Maybe<Scalars['Float']>;
  SysBatchCode?: Maybe<Scalars['Float']>;
  TaxMoney?: Maybe<Scalars['Float']>;
  Taxes?: Maybe<Scalars['Float']>;
  arriveAssistAmount?: Maybe<Scalars['Float']>;
  isOut?: Maybe<Scalars['Float']>;
  outputRate?: Maybe<Scalars['Float']>;
  processMoney?: Maybe<Scalars['Float']>;
  referenceMoney?: Maybe<Scalars['Float']>;
  referencePrice?: Maybe<Scalars['Float']>;
  shopJoinFlag?: Maybe<Scalars['Float']>;
  transMoney?: Maybe<Scalars['Float']>;
  yield?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "dsstorebills" */
export type Dsstorebills_Var_Samp_Order_By = {
  APMonth?: InputMaybe<Order_By>;
  APYear?: InputMaybe<Order_By>;
  ArriveAmount?: InputMaybe<Order_By>;
  ArriveMoney?: InputMaybe<Order_By>;
  InBusAmount?: InputMaybe<Order_By>;
  InMainAmount?: InputMaybe<Order_By>;
  InStoreMoney?: InputMaybe<Order_By>;
  IncludeTaxMoney?: InputMaybe<Order_By>;
  OutBusAmount?: InputMaybe<Order_By>;
  OutMainAmount?: InputMaybe<Order_By>;
  OutStoreMoney?: InputMaybe<Order_By>;
  PushInStoreAmount?: InputMaybe<Order_By>;
  PushInStoreMoney?: InputMaybe<Order_By>;
  PushOutStoreAmount?: InputMaybe<Order_By>;
  PushOutStoreMoney?: InputMaybe<Order_By>;
  SaleMoney?: InputMaybe<Order_By>;
  SellIncludeTaxMoney?: InputMaybe<Order_By>;
  SellTaxMoney?: InputMaybe<Order_By>;
  SellTaxes?: InputMaybe<Order_By>;
  SysBatchCode?: InputMaybe<Order_By>;
  TaxMoney?: InputMaybe<Order_By>;
  Taxes?: InputMaybe<Order_By>;
  arriveAssistAmount?: InputMaybe<Order_By>;
  isOut?: InputMaybe<Order_By>;
  outputRate?: InputMaybe<Order_By>;
  processMoney?: InputMaybe<Order_By>;
  referenceMoney?: InputMaybe<Order_By>;
  referencePrice?: InputMaybe<Order_By>;
  shopJoinFlag?: InputMaybe<Order_By>;
  transMoney?: InputMaybe<Order_By>;
  yield?: InputMaybe<Order_By>;
};

/** aggregate variance on columns */
export type Dsstorebills_Variance_Fields = {
  __typename?: 'dsstorebills_variance_fields';
  APMonth?: Maybe<Scalars['Float']>;
  APYear?: Maybe<Scalars['Float']>;
  ArriveAmount?: Maybe<Scalars['Float']>;
  ArriveMoney?: Maybe<Scalars['Float']>;
  InBusAmount?: Maybe<Scalars['Float']>;
  InMainAmount?: Maybe<Scalars['Float']>;
  InStoreMoney?: Maybe<Scalars['Float']>;
  IncludeTaxMoney?: Maybe<Scalars['Float']>;
  OutBusAmount?: Maybe<Scalars['Float']>;
  OutMainAmount?: Maybe<Scalars['Float']>;
  OutStoreMoney?: Maybe<Scalars['Float']>;
  PushInStoreAmount?: Maybe<Scalars['Float']>;
  PushInStoreMoney?: Maybe<Scalars['Float']>;
  PushOutStoreAmount?: Maybe<Scalars['Float']>;
  PushOutStoreMoney?: Maybe<Scalars['Float']>;
  SaleMoney?: Maybe<Scalars['Float']>;
  SellIncludeTaxMoney?: Maybe<Scalars['Float']>;
  SellTaxMoney?: Maybe<Scalars['Float']>;
  SellTaxes?: Maybe<Scalars['Float']>;
  SysBatchCode?: Maybe<Scalars['Float']>;
  TaxMoney?: Maybe<Scalars['Float']>;
  Taxes?: Maybe<Scalars['Float']>;
  arriveAssistAmount?: Maybe<Scalars['Float']>;
  isOut?: Maybe<Scalars['Float']>;
  outputRate?: Maybe<Scalars['Float']>;
  processMoney?: Maybe<Scalars['Float']>;
  referenceMoney?: Maybe<Scalars['Float']>;
  referencePrice?: Maybe<Scalars['Float']>;
  shopJoinFlag?: Maybe<Scalars['Float']>;
  transMoney?: Maybe<Scalars['Float']>;
  yield?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "dsstorebills" */
export type Dsstorebills_Variance_Order_By = {
  APMonth?: InputMaybe<Order_By>;
  APYear?: InputMaybe<Order_By>;
  ArriveAmount?: InputMaybe<Order_By>;
  ArriveMoney?: InputMaybe<Order_By>;
  InBusAmount?: InputMaybe<Order_By>;
  InMainAmount?: InputMaybe<Order_By>;
  InStoreMoney?: InputMaybe<Order_By>;
  IncludeTaxMoney?: InputMaybe<Order_By>;
  OutBusAmount?: InputMaybe<Order_By>;
  OutMainAmount?: InputMaybe<Order_By>;
  OutStoreMoney?: InputMaybe<Order_By>;
  PushInStoreAmount?: InputMaybe<Order_By>;
  PushInStoreMoney?: InputMaybe<Order_By>;
  PushOutStoreAmount?: InputMaybe<Order_By>;
  PushOutStoreMoney?: InputMaybe<Order_By>;
  SaleMoney?: InputMaybe<Order_By>;
  SellIncludeTaxMoney?: InputMaybe<Order_By>;
  SellTaxMoney?: InputMaybe<Order_By>;
  SellTaxes?: InputMaybe<Order_By>;
  SysBatchCode?: InputMaybe<Order_By>;
  TaxMoney?: InputMaybe<Order_By>;
  Taxes?: InputMaybe<Order_By>;
  arriveAssistAmount?: InputMaybe<Order_By>;
  isOut?: InputMaybe<Order_By>;
  outputRate?: InputMaybe<Order_By>;
  processMoney?: InputMaybe<Order_By>;
  referenceMoney?: InputMaybe<Order_By>;
  referencePrice?: InputMaybe<Order_By>;
  shopJoinFlag?: InputMaybe<Order_By>;
  transMoney?: InputMaybe<Order_By>;
  yield?: InputMaybe<Order_By>;
};

/** columns and relationships of "employee_attachments" */
export type Employee_Attachments = {
  __typename?: 'employee_attachments';
  created_time: Scalars['timestamptz'];
  /** An object relationship */
  employee?: Maybe<Employees>;
  employee_id?: Maybe<Scalars['String']>;
  file_name?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  kind?: Maybe<Scalars['String']>;
  path?: Maybe<Scalars['String']>;
};

/** aggregated selection of "employee_attachments" */
export type Employee_Attachments_Aggregate = {
  __typename?: 'employee_attachments_aggregate';
  aggregate?: Maybe<Employee_Attachments_Aggregate_Fields>;
  nodes: Array<Employee_Attachments>;
};

export type Employee_Attachments_Aggregate_Bool_Exp = {
  count?: InputMaybe<Employee_Attachments_Aggregate_Bool_Exp_Count>;
};

export type Employee_Attachments_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<Employee_Attachments_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<Employee_Attachments_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "employee_attachments" */
export type Employee_Attachments_Aggregate_Fields = {
  __typename?: 'employee_attachments_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Employee_Attachments_Max_Fields>;
  min?: Maybe<Employee_Attachments_Min_Fields>;
};


/** aggregate fields of "employee_attachments" */
export type Employee_Attachments_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Employee_Attachments_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "employee_attachments" */
export type Employee_Attachments_Aggregate_Order_By = {
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<Employee_Attachments_Max_Order_By>;
  min?: InputMaybe<Employee_Attachments_Min_Order_By>;
};

/** input type for inserting array relation for remote table "employee_attachments" */
export type Employee_Attachments_Arr_Rel_Insert_Input = {
  data: Array<Employee_Attachments_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<Employee_Attachments_On_Conflict>;
};

/** Boolean expression to filter rows from the table "employee_attachments". All fields are combined with a logical 'AND'. */
export type Employee_Attachments_Bool_Exp = {
  _and?: InputMaybe<Array<Employee_Attachments_Bool_Exp>>;
  _not?: InputMaybe<Employee_Attachments_Bool_Exp>;
  _or?: InputMaybe<Array<Employee_Attachments_Bool_Exp>>;
  created_time?: InputMaybe<Timestamptz_Comparison_Exp>;
  employee?: InputMaybe<Employees_Bool_Exp>;
  employee_id?: InputMaybe<String_Comparison_Exp>;
  file_name?: InputMaybe<String_Comparison_Exp>;
  id?: InputMaybe<String_Comparison_Exp>;
  kind?: InputMaybe<String_Comparison_Exp>;
  path?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "employee_attachments" */
export enum Employee_Attachments_Constraint {
  /** unique or primary key constraint on columns "id" */
  UserAttachmentsPrimary55 = 'user_attachmentsPRIMARY55'
}

/** input type for inserting data into table "employee_attachments" */
export type Employee_Attachments_Insert_Input = {
  created_time?: InputMaybe<Scalars['timestamptz']>;
  employee?: InputMaybe<Employees_Obj_Rel_Insert_Input>;
  employee_id?: InputMaybe<Scalars['String']>;
  file_name?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['String']>;
  kind?: InputMaybe<Scalars['String']>;
  path?: InputMaybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Employee_Attachments_Max_Fields = {
  __typename?: 'employee_attachments_max_fields';
  created_time?: Maybe<Scalars['timestamptz']>;
  employee_id?: Maybe<Scalars['String']>;
  file_name?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  kind?: Maybe<Scalars['String']>;
  path?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "employee_attachments" */
export type Employee_Attachments_Max_Order_By = {
  created_time?: InputMaybe<Order_By>;
  employee_id?: InputMaybe<Order_By>;
  file_name?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  kind?: InputMaybe<Order_By>;
  path?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type Employee_Attachments_Min_Fields = {
  __typename?: 'employee_attachments_min_fields';
  created_time?: Maybe<Scalars['timestamptz']>;
  employee_id?: Maybe<Scalars['String']>;
  file_name?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  kind?: Maybe<Scalars['String']>;
  path?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "employee_attachments" */
export type Employee_Attachments_Min_Order_By = {
  created_time?: InputMaybe<Order_By>;
  employee_id?: InputMaybe<Order_By>;
  file_name?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  kind?: InputMaybe<Order_By>;
  path?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "employee_attachments" */
export type Employee_Attachments_Mutation_Response = {
  __typename?: 'employee_attachments_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Employee_Attachments>;
};

/** on_conflict condition type for table "employee_attachments" */
export type Employee_Attachments_On_Conflict = {
  constraint: Employee_Attachments_Constraint;
  update_columns?: Array<Employee_Attachments_Update_Column>;
  where?: InputMaybe<Employee_Attachments_Bool_Exp>;
};

/** Ordering options when selecting data from "employee_attachments". */
export type Employee_Attachments_Order_By = {
  created_time?: InputMaybe<Order_By>;
  employee?: InputMaybe<Employees_Order_By>;
  employee_id?: InputMaybe<Order_By>;
  file_name?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  kind?: InputMaybe<Order_By>;
  path?: InputMaybe<Order_By>;
};

/** primary key columns input for table: employee_attachments */
export type Employee_Attachments_Pk_Columns_Input = {
  id: Scalars['String'];
};

/** select columns of table "employee_attachments" */
export enum Employee_Attachments_Select_Column {
  /** column name */
  CreatedTime = 'created_time',
  /** column name */
  EmployeeId = 'employee_id',
  /** column name */
  FileName = 'file_name',
  /** column name */
  Id = 'id',
  /** column name */
  Kind = 'kind',
  /** column name */
  Path = 'path'
}

/** input type for updating data in table "employee_attachments" */
export type Employee_Attachments_Set_Input = {
  created_time?: InputMaybe<Scalars['timestamptz']>;
  employee_id?: InputMaybe<Scalars['String']>;
  file_name?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['String']>;
  kind?: InputMaybe<Scalars['String']>;
  path?: InputMaybe<Scalars['String']>;
};

/** Streaming cursor of the table "employee_attachments" */
export type Employee_Attachments_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Employee_Attachments_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Employee_Attachments_Stream_Cursor_Value_Input = {
  created_time?: InputMaybe<Scalars['timestamptz']>;
  employee_id?: InputMaybe<Scalars['String']>;
  file_name?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['String']>;
  kind?: InputMaybe<Scalars['String']>;
  path?: InputMaybe<Scalars['String']>;
};

/** update columns of table "employee_attachments" */
export enum Employee_Attachments_Update_Column {
  /** column name */
  CreatedTime = 'created_time',
  /** column name */
  EmployeeId = 'employee_id',
  /** column name */
  FileName = 'file_name',
  /** column name */
  Id = 'id',
  /** column name */
  Kind = 'kind',
  /** column name */
  Path = 'path'
}

export type Employee_Attachments_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Employee_Attachments_Set_Input>;
  /** filter the rows which have to be updated */
  where: Employee_Attachments_Bool_Exp;
};

/** columns and relationships of "employee_insurance" */
export type Employee_Insurance = {
  __typename?: 'employee_insurance';
  corp_heating?: Maybe<Scalars['numeric']>;
  corp_housing_fund?: Maybe<Scalars['numeric']>;
  corp_major_medical?: Maybe<Scalars['numeric']>;
  corp_maternity_insurance?: Maybe<Scalars['numeric']>;
  corp_medical_insurance?: Maybe<Scalars['numeric']>;
  corp_pay?: Maybe<Scalars['numeric']>;
  corp_retirement_insurance?: Maybe<Scalars['numeric']>;
  corp_unemployment_insurance?: Maybe<Scalars['numeric']>;
  corp_work_injury?: Maybe<Scalars['numeric']>;
  /** An object relationship */
  employee: Employees;
  employee_id: Scalars['String'];
  heating_base?: Maybe<Scalars['numeric']>;
  id: Scalars['String'];
  medical_base?: Maybe<Scalars['numeric']>;
  month?: Maybe<Scalars['date']>;
  payment_start_date?: Maybe<Scalars['date']>;
  pension_base?: Maybe<Scalars['numeric']>;
  personal_fund_balance?: Maybe<Scalars['numeric']>;
  personal_housing_fund?: Maybe<Scalars['numeric']>;
  personal_major_medical?: Maybe<Scalars['numeric']>;
  personal_medical_insurance?: Maybe<Scalars['numeric']>;
  personal_pay?: Maybe<Scalars['numeric']>;
  personal_pension_insurance?: Maybe<Scalars['numeric']>;
  personal_unemployment_insurance?: Maybe<Scalars['numeric']>;
  unemployment_base?: Maybe<Scalars['numeric']>;
  work_injury_base?: Maybe<Scalars['numeric']>;
  /** A computed field, executes function "yyyy_mm" */
  yyyy_mm?: Maybe<Scalars['String']>;
};

/** aggregated selection of "employee_insurance" */
export type Employee_Insurance_Aggregate = {
  __typename?: 'employee_insurance_aggregate';
  aggregate?: Maybe<Employee_Insurance_Aggregate_Fields>;
  nodes: Array<Employee_Insurance>;
};

export type Employee_Insurance_Aggregate_Bool_Exp = {
  count?: InputMaybe<Employee_Insurance_Aggregate_Bool_Exp_Count>;
};

export type Employee_Insurance_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<Employee_Insurance_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<Employee_Insurance_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "employee_insurance" */
export type Employee_Insurance_Aggregate_Fields = {
  __typename?: 'employee_insurance_aggregate_fields';
  avg?: Maybe<Employee_Insurance_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Employee_Insurance_Max_Fields>;
  min?: Maybe<Employee_Insurance_Min_Fields>;
  stddev?: Maybe<Employee_Insurance_Stddev_Fields>;
  stddev_pop?: Maybe<Employee_Insurance_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Employee_Insurance_Stddev_Samp_Fields>;
  sum?: Maybe<Employee_Insurance_Sum_Fields>;
  var_pop?: Maybe<Employee_Insurance_Var_Pop_Fields>;
  var_samp?: Maybe<Employee_Insurance_Var_Samp_Fields>;
  variance?: Maybe<Employee_Insurance_Variance_Fields>;
};


/** aggregate fields of "employee_insurance" */
export type Employee_Insurance_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Employee_Insurance_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "employee_insurance" */
export type Employee_Insurance_Aggregate_Order_By = {
  avg?: InputMaybe<Employee_Insurance_Avg_Order_By>;
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<Employee_Insurance_Max_Order_By>;
  min?: InputMaybe<Employee_Insurance_Min_Order_By>;
  stddev?: InputMaybe<Employee_Insurance_Stddev_Order_By>;
  stddev_pop?: InputMaybe<Employee_Insurance_Stddev_Pop_Order_By>;
  stddev_samp?: InputMaybe<Employee_Insurance_Stddev_Samp_Order_By>;
  sum?: InputMaybe<Employee_Insurance_Sum_Order_By>;
  var_pop?: InputMaybe<Employee_Insurance_Var_Pop_Order_By>;
  var_samp?: InputMaybe<Employee_Insurance_Var_Samp_Order_By>;
  variance?: InputMaybe<Employee_Insurance_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "employee_insurance" */
export type Employee_Insurance_Arr_Rel_Insert_Input = {
  data: Array<Employee_Insurance_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<Employee_Insurance_On_Conflict>;
};

/** aggregate avg on columns */
export type Employee_Insurance_Avg_Fields = {
  __typename?: 'employee_insurance_avg_fields';
  corp_heating?: Maybe<Scalars['Float']>;
  corp_housing_fund?: Maybe<Scalars['Float']>;
  corp_major_medical?: Maybe<Scalars['Float']>;
  corp_maternity_insurance?: Maybe<Scalars['Float']>;
  corp_medical_insurance?: Maybe<Scalars['Float']>;
  corp_pay?: Maybe<Scalars['Float']>;
  corp_retirement_insurance?: Maybe<Scalars['Float']>;
  corp_unemployment_insurance?: Maybe<Scalars['Float']>;
  corp_work_injury?: Maybe<Scalars['Float']>;
  heating_base?: Maybe<Scalars['Float']>;
  medical_base?: Maybe<Scalars['Float']>;
  pension_base?: Maybe<Scalars['Float']>;
  personal_fund_balance?: Maybe<Scalars['Float']>;
  personal_housing_fund?: Maybe<Scalars['Float']>;
  personal_major_medical?: Maybe<Scalars['Float']>;
  personal_medical_insurance?: Maybe<Scalars['Float']>;
  personal_pay?: Maybe<Scalars['Float']>;
  personal_pension_insurance?: Maybe<Scalars['Float']>;
  personal_unemployment_insurance?: Maybe<Scalars['Float']>;
  unemployment_base?: Maybe<Scalars['Float']>;
  work_injury_base?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "employee_insurance" */
export type Employee_Insurance_Avg_Order_By = {
  corp_heating?: InputMaybe<Order_By>;
  corp_housing_fund?: InputMaybe<Order_By>;
  corp_major_medical?: InputMaybe<Order_By>;
  corp_maternity_insurance?: InputMaybe<Order_By>;
  corp_medical_insurance?: InputMaybe<Order_By>;
  corp_pay?: InputMaybe<Order_By>;
  corp_retirement_insurance?: InputMaybe<Order_By>;
  corp_unemployment_insurance?: InputMaybe<Order_By>;
  corp_work_injury?: InputMaybe<Order_By>;
  heating_base?: InputMaybe<Order_By>;
  medical_base?: InputMaybe<Order_By>;
  pension_base?: InputMaybe<Order_By>;
  personal_fund_balance?: InputMaybe<Order_By>;
  personal_housing_fund?: InputMaybe<Order_By>;
  personal_major_medical?: InputMaybe<Order_By>;
  personal_medical_insurance?: InputMaybe<Order_By>;
  personal_pay?: InputMaybe<Order_By>;
  personal_pension_insurance?: InputMaybe<Order_By>;
  personal_unemployment_insurance?: InputMaybe<Order_By>;
  unemployment_base?: InputMaybe<Order_By>;
  work_injury_base?: InputMaybe<Order_By>;
};

/** Boolean expression to filter rows from the table "employee_insurance". All fields are combined with a logical 'AND'. */
export type Employee_Insurance_Bool_Exp = {
  _and?: InputMaybe<Array<Employee_Insurance_Bool_Exp>>;
  _not?: InputMaybe<Employee_Insurance_Bool_Exp>;
  _or?: InputMaybe<Array<Employee_Insurance_Bool_Exp>>;
  corp_heating?: InputMaybe<Numeric_Comparison_Exp>;
  corp_housing_fund?: InputMaybe<Numeric_Comparison_Exp>;
  corp_major_medical?: InputMaybe<Numeric_Comparison_Exp>;
  corp_maternity_insurance?: InputMaybe<Numeric_Comparison_Exp>;
  corp_medical_insurance?: InputMaybe<Numeric_Comparison_Exp>;
  corp_pay?: InputMaybe<Numeric_Comparison_Exp>;
  corp_retirement_insurance?: InputMaybe<Numeric_Comparison_Exp>;
  corp_unemployment_insurance?: InputMaybe<Numeric_Comparison_Exp>;
  corp_work_injury?: InputMaybe<Numeric_Comparison_Exp>;
  employee?: InputMaybe<Employees_Bool_Exp>;
  employee_id?: InputMaybe<String_Comparison_Exp>;
  heating_base?: InputMaybe<Numeric_Comparison_Exp>;
  id?: InputMaybe<String_Comparison_Exp>;
  medical_base?: InputMaybe<Numeric_Comparison_Exp>;
  month?: InputMaybe<Date_Comparison_Exp>;
  payment_start_date?: InputMaybe<Date_Comparison_Exp>;
  pension_base?: InputMaybe<Numeric_Comparison_Exp>;
  personal_fund_balance?: InputMaybe<Numeric_Comparison_Exp>;
  personal_housing_fund?: InputMaybe<Numeric_Comparison_Exp>;
  personal_major_medical?: InputMaybe<Numeric_Comparison_Exp>;
  personal_medical_insurance?: InputMaybe<Numeric_Comparison_Exp>;
  personal_pay?: InputMaybe<Numeric_Comparison_Exp>;
  personal_pension_insurance?: InputMaybe<Numeric_Comparison_Exp>;
  personal_unemployment_insurance?: InputMaybe<Numeric_Comparison_Exp>;
  unemployment_base?: InputMaybe<Numeric_Comparison_Exp>;
  work_injury_base?: InputMaybe<Numeric_Comparison_Exp>;
  yyyy_mm?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "employee_insurance" */
export enum Employee_Insurance_Constraint {
  /** unique or primary key constraint on columns "employee_id", "month" */
  EmployeeInsuranceMonthEmployeeIdKey = 'employee_insurance_month_employee_id_key',
  /** unique or primary key constraint on columns "id" */
  EmployeeInsurancePkey = 'employee_insurance_pkey'
}

/** input type for incrementing numeric columns in table "employee_insurance" */
export type Employee_Insurance_Inc_Input = {
  corp_heating?: InputMaybe<Scalars['numeric']>;
  corp_housing_fund?: InputMaybe<Scalars['numeric']>;
  corp_major_medical?: InputMaybe<Scalars['numeric']>;
  corp_maternity_insurance?: InputMaybe<Scalars['numeric']>;
  corp_medical_insurance?: InputMaybe<Scalars['numeric']>;
  corp_pay?: InputMaybe<Scalars['numeric']>;
  corp_retirement_insurance?: InputMaybe<Scalars['numeric']>;
  corp_unemployment_insurance?: InputMaybe<Scalars['numeric']>;
  corp_work_injury?: InputMaybe<Scalars['numeric']>;
  heating_base?: InputMaybe<Scalars['numeric']>;
  medical_base?: InputMaybe<Scalars['numeric']>;
  pension_base?: InputMaybe<Scalars['numeric']>;
  personal_fund_balance?: InputMaybe<Scalars['numeric']>;
  personal_housing_fund?: InputMaybe<Scalars['numeric']>;
  personal_major_medical?: InputMaybe<Scalars['numeric']>;
  personal_medical_insurance?: InputMaybe<Scalars['numeric']>;
  personal_pay?: InputMaybe<Scalars['numeric']>;
  personal_pension_insurance?: InputMaybe<Scalars['numeric']>;
  personal_unemployment_insurance?: InputMaybe<Scalars['numeric']>;
  unemployment_base?: InputMaybe<Scalars['numeric']>;
  work_injury_base?: InputMaybe<Scalars['numeric']>;
};

/** input type for inserting data into table "employee_insurance" */
export type Employee_Insurance_Insert_Input = {
  corp_heating?: InputMaybe<Scalars['numeric']>;
  corp_housing_fund?: InputMaybe<Scalars['numeric']>;
  corp_major_medical?: InputMaybe<Scalars['numeric']>;
  corp_maternity_insurance?: InputMaybe<Scalars['numeric']>;
  corp_medical_insurance?: InputMaybe<Scalars['numeric']>;
  corp_pay?: InputMaybe<Scalars['numeric']>;
  corp_retirement_insurance?: InputMaybe<Scalars['numeric']>;
  corp_unemployment_insurance?: InputMaybe<Scalars['numeric']>;
  corp_work_injury?: InputMaybe<Scalars['numeric']>;
  employee?: InputMaybe<Employees_Obj_Rel_Insert_Input>;
  employee_id?: InputMaybe<Scalars['String']>;
  heating_base?: InputMaybe<Scalars['numeric']>;
  id?: InputMaybe<Scalars['String']>;
  medical_base?: InputMaybe<Scalars['numeric']>;
  month?: InputMaybe<Scalars['date']>;
  payment_start_date?: InputMaybe<Scalars['date']>;
  pension_base?: InputMaybe<Scalars['numeric']>;
  personal_fund_balance?: InputMaybe<Scalars['numeric']>;
  personal_housing_fund?: InputMaybe<Scalars['numeric']>;
  personal_major_medical?: InputMaybe<Scalars['numeric']>;
  personal_medical_insurance?: InputMaybe<Scalars['numeric']>;
  personal_pay?: InputMaybe<Scalars['numeric']>;
  personal_pension_insurance?: InputMaybe<Scalars['numeric']>;
  personal_unemployment_insurance?: InputMaybe<Scalars['numeric']>;
  unemployment_base?: InputMaybe<Scalars['numeric']>;
  work_injury_base?: InputMaybe<Scalars['numeric']>;
};

/** aggregate max on columns */
export type Employee_Insurance_Max_Fields = {
  __typename?: 'employee_insurance_max_fields';
  corp_heating?: Maybe<Scalars['numeric']>;
  corp_housing_fund?: Maybe<Scalars['numeric']>;
  corp_major_medical?: Maybe<Scalars['numeric']>;
  corp_maternity_insurance?: Maybe<Scalars['numeric']>;
  corp_medical_insurance?: Maybe<Scalars['numeric']>;
  corp_pay?: Maybe<Scalars['numeric']>;
  corp_retirement_insurance?: Maybe<Scalars['numeric']>;
  corp_unemployment_insurance?: Maybe<Scalars['numeric']>;
  corp_work_injury?: Maybe<Scalars['numeric']>;
  employee_id?: Maybe<Scalars['String']>;
  heating_base?: Maybe<Scalars['numeric']>;
  id?: Maybe<Scalars['String']>;
  medical_base?: Maybe<Scalars['numeric']>;
  month?: Maybe<Scalars['date']>;
  payment_start_date?: Maybe<Scalars['date']>;
  pension_base?: Maybe<Scalars['numeric']>;
  personal_fund_balance?: Maybe<Scalars['numeric']>;
  personal_housing_fund?: Maybe<Scalars['numeric']>;
  personal_major_medical?: Maybe<Scalars['numeric']>;
  personal_medical_insurance?: Maybe<Scalars['numeric']>;
  personal_pay?: Maybe<Scalars['numeric']>;
  personal_pension_insurance?: Maybe<Scalars['numeric']>;
  personal_unemployment_insurance?: Maybe<Scalars['numeric']>;
  unemployment_base?: Maybe<Scalars['numeric']>;
  work_injury_base?: Maybe<Scalars['numeric']>;
  /** A computed field, executes function "yyyy_mm" */
  yyyy_mm?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "employee_insurance" */
export type Employee_Insurance_Max_Order_By = {
  corp_heating?: InputMaybe<Order_By>;
  corp_housing_fund?: InputMaybe<Order_By>;
  corp_major_medical?: InputMaybe<Order_By>;
  corp_maternity_insurance?: InputMaybe<Order_By>;
  corp_medical_insurance?: InputMaybe<Order_By>;
  corp_pay?: InputMaybe<Order_By>;
  corp_retirement_insurance?: InputMaybe<Order_By>;
  corp_unemployment_insurance?: InputMaybe<Order_By>;
  corp_work_injury?: InputMaybe<Order_By>;
  employee_id?: InputMaybe<Order_By>;
  heating_base?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  medical_base?: InputMaybe<Order_By>;
  month?: InputMaybe<Order_By>;
  payment_start_date?: InputMaybe<Order_By>;
  pension_base?: InputMaybe<Order_By>;
  personal_fund_balance?: InputMaybe<Order_By>;
  personal_housing_fund?: InputMaybe<Order_By>;
  personal_major_medical?: InputMaybe<Order_By>;
  personal_medical_insurance?: InputMaybe<Order_By>;
  personal_pay?: InputMaybe<Order_By>;
  personal_pension_insurance?: InputMaybe<Order_By>;
  personal_unemployment_insurance?: InputMaybe<Order_By>;
  unemployment_base?: InputMaybe<Order_By>;
  work_injury_base?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type Employee_Insurance_Min_Fields = {
  __typename?: 'employee_insurance_min_fields';
  corp_heating?: Maybe<Scalars['numeric']>;
  corp_housing_fund?: Maybe<Scalars['numeric']>;
  corp_major_medical?: Maybe<Scalars['numeric']>;
  corp_maternity_insurance?: Maybe<Scalars['numeric']>;
  corp_medical_insurance?: Maybe<Scalars['numeric']>;
  corp_pay?: Maybe<Scalars['numeric']>;
  corp_retirement_insurance?: Maybe<Scalars['numeric']>;
  corp_unemployment_insurance?: Maybe<Scalars['numeric']>;
  corp_work_injury?: Maybe<Scalars['numeric']>;
  employee_id?: Maybe<Scalars['String']>;
  heating_base?: Maybe<Scalars['numeric']>;
  id?: Maybe<Scalars['String']>;
  medical_base?: Maybe<Scalars['numeric']>;
  month?: Maybe<Scalars['date']>;
  payment_start_date?: Maybe<Scalars['date']>;
  pension_base?: Maybe<Scalars['numeric']>;
  personal_fund_balance?: Maybe<Scalars['numeric']>;
  personal_housing_fund?: Maybe<Scalars['numeric']>;
  personal_major_medical?: Maybe<Scalars['numeric']>;
  personal_medical_insurance?: Maybe<Scalars['numeric']>;
  personal_pay?: Maybe<Scalars['numeric']>;
  personal_pension_insurance?: Maybe<Scalars['numeric']>;
  personal_unemployment_insurance?: Maybe<Scalars['numeric']>;
  unemployment_base?: Maybe<Scalars['numeric']>;
  work_injury_base?: Maybe<Scalars['numeric']>;
  /** A computed field, executes function "yyyy_mm" */
  yyyy_mm?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "employee_insurance" */
export type Employee_Insurance_Min_Order_By = {
  corp_heating?: InputMaybe<Order_By>;
  corp_housing_fund?: InputMaybe<Order_By>;
  corp_major_medical?: InputMaybe<Order_By>;
  corp_maternity_insurance?: InputMaybe<Order_By>;
  corp_medical_insurance?: InputMaybe<Order_By>;
  corp_pay?: InputMaybe<Order_By>;
  corp_retirement_insurance?: InputMaybe<Order_By>;
  corp_unemployment_insurance?: InputMaybe<Order_By>;
  corp_work_injury?: InputMaybe<Order_By>;
  employee_id?: InputMaybe<Order_By>;
  heating_base?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  medical_base?: InputMaybe<Order_By>;
  month?: InputMaybe<Order_By>;
  payment_start_date?: InputMaybe<Order_By>;
  pension_base?: InputMaybe<Order_By>;
  personal_fund_balance?: InputMaybe<Order_By>;
  personal_housing_fund?: InputMaybe<Order_By>;
  personal_major_medical?: InputMaybe<Order_By>;
  personal_medical_insurance?: InputMaybe<Order_By>;
  personal_pay?: InputMaybe<Order_By>;
  personal_pension_insurance?: InputMaybe<Order_By>;
  personal_unemployment_insurance?: InputMaybe<Order_By>;
  unemployment_base?: InputMaybe<Order_By>;
  work_injury_base?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "employee_insurance" */
export type Employee_Insurance_Mutation_Response = {
  __typename?: 'employee_insurance_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Employee_Insurance>;
};

/** on_conflict condition type for table "employee_insurance" */
export type Employee_Insurance_On_Conflict = {
  constraint: Employee_Insurance_Constraint;
  update_columns?: Array<Employee_Insurance_Update_Column>;
  where?: InputMaybe<Employee_Insurance_Bool_Exp>;
};

/** Ordering options when selecting data from "employee_insurance". */
export type Employee_Insurance_Order_By = {
  corp_heating?: InputMaybe<Order_By>;
  corp_housing_fund?: InputMaybe<Order_By>;
  corp_major_medical?: InputMaybe<Order_By>;
  corp_maternity_insurance?: InputMaybe<Order_By>;
  corp_medical_insurance?: InputMaybe<Order_By>;
  corp_pay?: InputMaybe<Order_By>;
  corp_retirement_insurance?: InputMaybe<Order_By>;
  corp_unemployment_insurance?: InputMaybe<Order_By>;
  corp_work_injury?: InputMaybe<Order_By>;
  employee?: InputMaybe<Employees_Order_By>;
  employee_id?: InputMaybe<Order_By>;
  heating_base?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  medical_base?: InputMaybe<Order_By>;
  month?: InputMaybe<Order_By>;
  payment_start_date?: InputMaybe<Order_By>;
  pension_base?: InputMaybe<Order_By>;
  personal_fund_balance?: InputMaybe<Order_By>;
  personal_housing_fund?: InputMaybe<Order_By>;
  personal_major_medical?: InputMaybe<Order_By>;
  personal_medical_insurance?: InputMaybe<Order_By>;
  personal_pay?: InputMaybe<Order_By>;
  personal_pension_insurance?: InputMaybe<Order_By>;
  personal_unemployment_insurance?: InputMaybe<Order_By>;
  unemployment_base?: InputMaybe<Order_By>;
  work_injury_base?: InputMaybe<Order_By>;
  yyyy_mm?: InputMaybe<Order_By>;
};

/** primary key columns input for table: employee_insurance */
export type Employee_Insurance_Pk_Columns_Input = {
  id: Scalars['String'];
};

/** select columns of table "employee_insurance" */
export enum Employee_Insurance_Select_Column {
  /** column name */
  CorpHeating = 'corp_heating',
  /** column name */
  CorpHousingFund = 'corp_housing_fund',
  /** column name */
  CorpMajorMedical = 'corp_major_medical',
  /** column name */
  CorpMaternityInsurance = 'corp_maternity_insurance',
  /** column name */
  CorpMedicalInsurance = 'corp_medical_insurance',
  /** column name */
  CorpPay = 'corp_pay',
  /** column name */
  CorpRetirementInsurance = 'corp_retirement_insurance',
  /** column name */
  CorpUnemploymentInsurance = 'corp_unemployment_insurance',
  /** column name */
  CorpWorkInjury = 'corp_work_injury',
  /** column name */
  EmployeeId = 'employee_id',
  /** column name */
  HeatingBase = 'heating_base',
  /** column name */
  Id = 'id',
  /** column name */
  MedicalBase = 'medical_base',
  /** column name */
  Month = 'month',
  /** column name */
  PaymentStartDate = 'payment_start_date',
  /** column name */
  PensionBase = 'pension_base',
  /** column name */
  PersonalFundBalance = 'personal_fund_balance',
  /** column name */
  PersonalHousingFund = 'personal_housing_fund',
  /** column name */
  PersonalMajorMedical = 'personal_major_medical',
  /** column name */
  PersonalMedicalInsurance = 'personal_medical_insurance',
  /** column name */
  PersonalPay = 'personal_pay',
  /** column name */
  PersonalPensionInsurance = 'personal_pension_insurance',
  /** column name */
  PersonalUnemploymentInsurance = 'personal_unemployment_insurance',
  /** column name */
  UnemploymentBase = 'unemployment_base',
  /** column name */
  WorkInjuryBase = 'work_injury_base'
}

/** input type for updating data in table "employee_insurance" */
export type Employee_Insurance_Set_Input = {
  corp_heating?: InputMaybe<Scalars['numeric']>;
  corp_housing_fund?: InputMaybe<Scalars['numeric']>;
  corp_major_medical?: InputMaybe<Scalars['numeric']>;
  corp_maternity_insurance?: InputMaybe<Scalars['numeric']>;
  corp_medical_insurance?: InputMaybe<Scalars['numeric']>;
  corp_pay?: InputMaybe<Scalars['numeric']>;
  corp_retirement_insurance?: InputMaybe<Scalars['numeric']>;
  corp_unemployment_insurance?: InputMaybe<Scalars['numeric']>;
  corp_work_injury?: InputMaybe<Scalars['numeric']>;
  employee_id?: InputMaybe<Scalars['String']>;
  heating_base?: InputMaybe<Scalars['numeric']>;
  id?: InputMaybe<Scalars['String']>;
  medical_base?: InputMaybe<Scalars['numeric']>;
  month?: InputMaybe<Scalars['date']>;
  payment_start_date?: InputMaybe<Scalars['date']>;
  pension_base?: InputMaybe<Scalars['numeric']>;
  personal_fund_balance?: InputMaybe<Scalars['numeric']>;
  personal_housing_fund?: InputMaybe<Scalars['numeric']>;
  personal_major_medical?: InputMaybe<Scalars['numeric']>;
  personal_medical_insurance?: InputMaybe<Scalars['numeric']>;
  personal_pay?: InputMaybe<Scalars['numeric']>;
  personal_pension_insurance?: InputMaybe<Scalars['numeric']>;
  personal_unemployment_insurance?: InputMaybe<Scalars['numeric']>;
  unemployment_base?: InputMaybe<Scalars['numeric']>;
  work_injury_base?: InputMaybe<Scalars['numeric']>;
};

/** aggregate stddev on columns */
export type Employee_Insurance_Stddev_Fields = {
  __typename?: 'employee_insurance_stddev_fields';
  corp_heating?: Maybe<Scalars['Float']>;
  corp_housing_fund?: Maybe<Scalars['Float']>;
  corp_major_medical?: Maybe<Scalars['Float']>;
  corp_maternity_insurance?: Maybe<Scalars['Float']>;
  corp_medical_insurance?: Maybe<Scalars['Float']>;
  corp_pay?: Maybe<Scalars['Float']>;
  corp_retirement_insurance?: Maybe<Scalars['Float']>;
  corp_unemployment_insurance?: Maybe<Scalars['Float']>;
  corp_work_injury?: Maybe<Scalars['Float']>;
  heating_base?: Maybe<Scalars['Float']>;
  medical_base?: Maybe<Scalars['Float']>;
  pension_base?: Maybe<Scalars['Float']>;
  personal_fund_balance?: Maybe<Scalars['Float']>;
  personal_housing_fund?: Maybe<Scalars['Float']>;
  personal_major_medical?: Maybe<Scalars['Float']>;
  personal_medical_insurance?: Maybe<Scalars['Float']>;
  personal_pay?: Maybe<Scalars['Float']>;
  personal_pension_insurance?: Maybe<Scalars['Float']>;
  personal_unemployment_insurance?: Maybe<Scalars['Float']>;
  unemployment_base?: Maybe<Scalars['Float']>;
  work_injury_base?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "employee_insurance" */
export type Employee_Insurance_Stddev_Order_By = {
  corp_heating?: InputMaybe<Order_By>;
  corp_housing_fund?: InputMaybe<Order_By>;
  corp_major_medical?: InputMaybe<Order_By>;
  corp_maternity_insurance?: InputMaybe<Order_By>;
  corp_medical_insurance?: InputMaybe<Order_By>;
  corp_pay?: InputMaybe<Order_By>;
  corp_retirement_insurance?: InputMaybe<Order_By>;
  corp_unemployment_insurance?: InputMaybe<Order_By>;
  corp_work_injury?: InputMaybe<Order_By>;
  heating_base?: InputMaybe<Order_By>;
  medical_base?: InputMaybe<Order_By>;
  pension_base?: InputMaybe<Order_By>;
  personal_fund_balance?: InputMaybe<Order_By>;
  personal_housing_fund?: InputMaybe<Order_By>;
  personal_major_medical?: InputMaybe<Order_By>;
  personal_medical_insurance?: InputMaybe<Order_By>;
  personal_pay?: InputMaybe<Order_By>;
  personal_pension_insurance?: InputMaybe<Order_By>;
  personal_unemployment_insurance?: InputMaybe<Order_By>;
  unemployment_base?: InputMaybe<Order_By>;
  work_injury_base?: InputMaybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Employee_Insurance_Stddev_Pop_Fields = {
  __typename?: 'employee_insurance_stddev_pop_fields';
  corp_heating?: Maybe<Scalars['Float']>;
  corp_housing_fund?: Maybe<Scalars['Float']>;
  corp_major_medical?: Maybe<Scalars['Float']>;
  corp_maternity_insurance?: Maybe<Scalars['Float']>;
  corp_medical_insurance?: Maybe<Scalars['Float']>;
  corp_pay?: Maybe<Scalars['Float']>;
  corp_retirement_insurance?: Maybe<Scalars['Float']>;
  corp_unemployment_insurance?: Maybe<Scalars['Float']>;
  corp_work_injury?: Maybe<Scalars['Float']>;
  heating_base?: Maybe<Scalars['Float']>;
  medical_base?: Maybe<Scalars['Float']>;
  pension_base?: Maybe<Scalars['Float']>;
  personal_fund_balance?: Maybe<Scalars['Float']>;
  personal_housing_fund?: Maybe<Scalars['Float']>;
  personal_major_medical?: Maybe<Scalars['Float']>;
  personal_medical_insurance?: Maybe<Scalars['Float']>;
  personal_pay?: Maybe<Scalars['Float']>;
  personal_pension_insurance?: Maybe<Scalars['Float']>;
  personal_unemployment_insurance?: Maybe<Scalars['Float']>;
  unemployment_base?: Maybe<Scalars['Float']>;
  work_injury_base?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "employee_insurance" */
export type Employee_Insurance_Stddev_Pop_Order_By = {
  corp_heating?: InputMaybe<Order_By>;
  corp_housing_fund?: InputMaybe<Order_By>;
  corp_major_medical?: InputMaybe<Order_By>;
  corp_maternity_insurance?: InputMaybe<Order_By>;
  corp_medical_insurance?: InputMaybe<Order_By>;
  corp_pay?: InputMaybe<Order_By>;
  corp_retirement_insurance?: InputMaybe<Order_By>;
  corp_unemployment_insurance?: InputMaybe<Order_By>;
  corp_work_injury?: InputMaybe<Order_By>;
  heating_base?: InputMaybe<Order_By>;
  medical_base?: InputMaybe<Order_By>;
  pension_base?: InputMaybe<Order_By>;
  personal_fund_balance?: InputMaybe<Order_By>;
  personal_housing_fund?: InputMaybe<Order_By>;
  personal_major_medical?: InputMaybe<Order_By>;
  personal_medical_insurance?: InputMaybe<Order_By>;
  personal_pay?: InputMaybe<Order_By>;
  personal_pension_insurance?: InputMaybe<Order_By>;
  personal_unemployment_insurance?: InputMaybe<Order_By>;
  unemployment_base?: InputMaybe<Order_By>;
  work_injury_base?: InputMaybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Employee_Insurance_Stddev_Samp_Fields = {
  __typename?: 'employee_insurance_stddev_samp_fields';
  corp_heating?: Maybe<Scalars['Float']>;
  corp_housing_fund?: Maybe<Scalars['Float']>;
  corp_major_medical?: Maybe<Scalars['Float']>;
  corp_maternity_insurance?: Maybe<Scalars['Float']>;
  corp_medical_insurance?: Maybe<Scalars['Float']>;
  corp_pay?: Maybe<Scalars['Float']>;
  corp_retirement_insurance?: Maybe<Scalars['Float']>;
  corp_unemployment_insurance?: Maybe<Scalars['Float']>;
  corp_work_injury?: Maybe<Scalars['Float']>;
  heating_base?: Maybe<Scalars['Float']>;
  medical_base?: Maybe<Scalars['Float']>;
  pension_base?: Maybe<Scalars['Float']>;
  personal_fund_balance?: Maybe<Scalars['Float']>;
  personal_housing_fund?: Maybe<Scalars['Float']>;
  personal_major_medical?: Maybe<Scalars['Float']>;
  personal_medical_insurance?: Maybe<Scalars['Float']>;
  personal_pay?: Maybe<Scalars['Float']>;
  personal_pension_insurance?: Maybe<Scalars['Float']>;
  personal_unemployment_insurance?: Maybe<Scalars['Float']>;
  unemployment_base?: Maybe<Scalars['Float']>;
  work_injury_base?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "employee_insurance" */
export type Employee_Insurance_Stddev_Samp_Order_By = {
  corp_heating?: InputMaybe<Order_By>;
  corp_housing_fund?: InputMaybe<Order_By>;
  corp_major_medical?: InputMaybe<Order_By>;
  corp_maternity_insurance?: InputMaybe<Order_By>;
  corp_medical_insurance?: InputMaybe<Order_By>;
  corp_pay?: InputMaybe<Order_By>;
  corp_retirement_insurance?: InputMaybe<Order_By>;
  corp_unemployment_insurance?: InputMaybe<Order_By>;
  corp_work_injury?: InputMaybe<Order_By>;
  heating_base?: InputMaybe<Order_By>;
  medical_base?: InputMaybe<Order_By>;
  pension_base?: InputMaybe<Order_By>;
  personal_fund_balance?: InputMaybe<Order_By>;
  personal_housing_fund?: InputMaybe<Order_By>;
  personal_major_medical?: InputMaybe<Order_By>;
  personal_medical_insurance?: InputMaybe<Order_By>;
  personal_pay?: InputMaybe<Order_By>;
  personal_pension_insurance?: InputMaybe<Order_By>;
  personal_unemployment_insurance?: InputMaybe<Order_By>;
  unemployment_base?: InputMaybe<Order_By>;
  work_injury_base?: InputMaybe<Order_By>;
};

/** Streaming cursor of the table "employee_insurance" */
export type Employee_Insurance_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Employee_Insurance_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Employee_Insurance_Stream_Cursor_Value_Input = {
  corp_heating?: InputMaybe<Scalars['numeric']>;
  corp_housing_fund?: InputMaybe<Scalars['numeric']>;
  corp_major_medical?: InputMaybe<Scalars['numeric']>;
  corp_maternity_insurance?: InputMaybe<Scalars['numeric']>;
  corp_medical_insurance?: InputMaybe<Scalars['numeric']>;
  corp_pay?: InputMaybe<Scalars['numeric']>;
  corp_retirement_insurance?: InputMaybe<Scalars['numeric']>;
  corp_unemployment_insurance?: InputMaybe<Scalars['numeric']>;
  corp_work_injury?: InputMaybe<Scalars['numeric']>;
  employee_id?: InputMaybe<Scalars['String']>;
  heating_base?: InputMaybe<Scalars['numeric']>;
  id?: InputMaybe<Scalars['String']>;
  medical_base?: InputMaybe<Scalars['numeric']>;
  month?: InputMaybe<Scalars['date']>;
  payment_start_date?: InputMaybe<Scalars['date']>;
  pension_base?: InputMaybe<Scalars['numeric']>;
  personal_fund_balance?: InputMaybe<Scalars['numeric']>;
  personal_housing_fund?: InputMaybe<Scalars['numeric']>;
  personal_major_medical?: InputMaybe<Scalars['numeric']>;
  personal_medical_insurance?: InputMaybe<Scalars['numeric']>;
  personal_pay?: InputMaybe<Scalars['numeric']>;
  personal_pension_insurance?: InputMaybe<Scalars['numeric']>;
  personal_unemployment_insurance?: InputMaybe<Scalars['numeric']>;
  unemployment_base?: InputMaybe<Scalars['numeric']>;
  work_injury_base?: InputMaybe<Scalars['numeric']>;
};

/** aggregate sum on columns */
export type Employee_Insurance_Sum_Fields = {
  __typename?: 'employee_insurance_sum_fields';
  corp_heating?: Maybe<Scalars['numeric']>;
  corp_housing_fund?: Maybe<Scalars['numeric']>;
  corp_major_medical?: Maybe<Scalars['numeric']>;
  corp_maternity_insurance?: Maybe<Scalars['numeric']>;
  corp_medical_insurance?: Maybe<Scalars['numeric']>;
  corp_pay?: Maybe<Scalars['numeric']>;
  corp_retirement_insurance?: Maybe<Scalars['numeric']>;
  corp_unemployment_insurance?: Maybe<Scalars['numeric']>;
  corp_work_injury?: Maybe<Scalars['numeric']>;
  heating_base?: Maybe<Scalars['numeric']>;
  medical_base?: Maybe<Scalars['numeric']>;
  pension_base?: Maybe<Scalars['numeric']>;
  personal_fund_balance?: Maybe<Scalars['numeric']>;
  personal_housing_fund?: Maybe<Scalars['numeric']>;
  personal_major_medical?: Maybe<Scalars['numeric']>;
  personal_medical_insurance?: Maybe<Scalars['numeric']>;
  personal_pay?: Maybe<Scalars['numeric']>;
  personal_pension_insurance?: Maybe<Scalars['numeric']>;
  personal_unemployment_insurance?: Maybe<Scalars['numeric']>;
  unemployment_base?: Maybe<Scalars['numeric']>;
  work_injury_base?: Maybe<Scalars['numeric']>;
};

/** order by sum() on columns of table "employee_insurance" */
export type Employee_Insurance_Sum_Order_By = {
  corp_heating?: InputMaybe<Order_By>;
  corp_housing_fund?: InputMaybe<Order_By>;
  corp_major_medical?: InputMaybe<Order_By>;
  corp_maternity_insurance?: InputMaybe<Order_By>;
  corp_medical_insurance?: InputMaybe<Order_By>;
  corp_pay?: InputMaybe<Order_By>;
  corp_retirement_insurance?: InputMaybe<Order_By>;
  corp_unemployment_insurance?: InputMaybe<Order_By>;
  corp_work_injury?: InputMaybe<Order_By>;
  heating_base?: InputMaybe<Order_By>;
  medical_base?: InputMaybe<Order_By>;
  pension_base?: InputMaybe<Order_By>;
  personal_fund_balance?: InputMaybe<Order_By>;
  personal_housing_fund?: InputMaybe<Order_By>;
  personal_major_medical?: InputMaybe<Order_By>;
  personal_medical_insurance?: InputMaybe<Order_By>;
  personal_pay?: InputMaybe<Order_By>;
  personal_pension_insurance?: InputMaybe<Order_By>;
  personal_unemployment_insurance?: InputMaybe<Order_By>;
  unemployment_base?: InputMaybe<Order_By>;
  work_injury_base?: InputMaybe<Order_By>;
};

/** update columns of table "employee_insurance" */
export enum Employee_Insurance_Update_Column {
  /** column name */
  CorpHeating = 'corp_heating',
  /** column name */
  CorpHousingFund = 'corp_housing_fund',
  /** column name */
  CorpMajorMedical = 'corp_major_medical',
  /** column name */
  CorpMaternityInsurance = 'corp_maternity_insurance',
  /** column name */
  CorpMedicalInsurance = 'corp_medical_insurance',
  /** column name */
  CorpPay = 'corp_pay',
  /** column name */
  CorpRetirementInsurance = 'corp_retirement_insurance',
  /** column name */
  CorpUnemploymentInsurance = 'corp_unemployment_insurance',
  /** column name */
  CorpWorkInjury = 'corp_work_injury',
  /** column name */
  EmployeeId = 'employee_id',
  /** column name */
  HeatingBase = 'heating_base',
  /** column name */
  Id = 'id',
  /** column name */
  MedicalBase = 'medical_base',
  /** column name */
  Month = 'month',
  /** column name */
  PaymentStartDate = 'payment_start_date',
  /** column name */
  PensionBase = 'pension_base',
  /** column name */
  PersonalFundBalance = 'personal_fund_balance',
  /** column name */
  PersonalHousingFund = 'personal_housing_fund',
  /** column name */
  PersonalMajorMedical = 'personal_major_medical',
  /** column name */
  PersonalMedicalInsurance = 'personal_medical_insurance',
  /** column name */
  PersonalPay = 'personal_pay',
  /** column name */
  PersonalPensionInsurance = 'personal_pension_insurance',
  /** column name */
  PersonalUnemploymentInsurance = 'personal_unemployment_insurance',
  /** column name */
  UnemploymentBase = 'unemployment_base',
  /** column name */
  WorkInjuryBase = 'work_injury_base'
}

export type Employee_Insurance_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: InputMaybe<Employee_Insurance_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Employee_Insurance_Set_Input>;
  /** filter the rows which have to be updated */
  where: Employee_Insurance_Bool_Exp;
};

/** aggregate var_pop on columns */
export type Employee_Insurance_Var_Pop_Fields = {
  __typename?: 'employee_insurance_var_pop_fields';
  corp_heating?: Maybe<Scalars['Float']>;
  corp_housing_fund?: Maybe<Scalars['Float']>;
  corp_major_medical?: Maybe<Scalars['Float']>;
  corp_maternity_insurance?: Maybe<Scalars['Float']>;
  corp_medical_insurance?: Maybe<Scalars['Float']>;
  corp_pay?: Maybe<Scalars['Float']>;
  corp_retirement_insurance?: Maybe<Scalars['Float']>;
  corp_unemployment_insurance?: Maybe<Scalars['Float']>;
  corp_work_injury?: Maybe<Scalars['Float']>;
  heating_base?: Maybe<Scalars['Float']>;
  medical_base?: Maybe<Scalars['Float']>;
  pension_base?: Maybe<Scalars['Float']>;
  personal_fund_balance?: Maybe<Scalars['Float']>;
  personal_housing_fund?: Maybe<Scalars['Float']>;
  personal_major_medical?: Maybe<Scalars['Float']>;
  personal_medical_insurance?: Maybe<Scalars['Float']>;
  personal_pay?: Maybe<Scalars['Float']>;
  personal_pension_insurance?: Maybe<Scalars['Float']>;
  personal_unemployment_insurance?: Maybe<Scalars['Float']>;
  unemployment_base?: Maybe<Scalars['Float']>;
  work_injury_base?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "employee_insurance" */
export type Employee_Insurance_Var_Pop_Order_By = {
  corp_heating?: InputMaybe<Order_By>;
  corp_housing_fund?: InputMaybe<Order_By>;
  corp_major_medical?: InputMaybe<Order_By>;
  corp_maternity_insurance?: InputMaybe<Order_By>;
  corp_medical_insurance?: InputMaybe<Order_By>;
  corp_pay?: InputMaybe<Order_By>;
  corp_retirement_insurance?: InputMaybe<Order_By>;
  corp_unemployment_insurance?: InputMaybe<Order_By>;
  corp_work_injury?: InputMaybe<Order_By>;
  heating_base?: InputMaybe<Order_By>;
  medical_base?: InputMaybe<Order_By>;
  pension_base?: InputMaybe<Order_By>;
  personal_fund_balance?: InputMaybe<Order_By>;
  personal_housing_fund?: InputMaybe<Order_By>;
  personal_major_medical?: InputMaybe<Order_By>;
  personal_medical_insurance?: InputMaybe<Order_By>;
  personal_pay?: InputMaybe<Order_By>;
  personal_pension_insurance?: InputMaybe<Order_By>;
  personal_unemployment_insurance?: InputMaybe<Order_By>;
  unemployment_base?: InputMaybe<Order_By>;
  work_injury_base?: InputMaybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Employee_Insurance_Var_Samp_Fields = {
  __typename?: 'employee_insurance_var_samp_fields';
  corp_heating?: Maybe<Scalars['Float']>;
  corp_housing_fund?: Maybe<Scalars['Float']>;
  corp_major_medical?: Maybe<Scalars['Float']>;
  corp_maternity_insurance?: Maybe<Scalars['Float']>;
  corp_medical_insurance?: Maybe<Scalars['Float']>;
  corp_pay?: Maybe<Scalars['Float']>;
  corp_retirement_insurance?: Maybe<Scalars['Float']>;
  corp_unemployment_insurance?: Maybe<Scalars['Float']>;
  corp_work_injury?: Maybe<Scalars['Float']>;
  heating_base?: Maybe<Scalars['Float']>;
  medical_base?: Maybe<Scalars['Float']>;
  pension_base?: Maybe<Scalars['Float']>;
  personal_fund_balance?: Maybe<Scalars['Float']>;
  personal_housing_fund?: Maybe<Scalars['Float']>;
  personal_major_medical?: Maybe<Scalars['Float']>;
  personal_medical_insurance?: Maybe<Scalars['Float']>;
  personal_pay?: Maybe<Scalars['Float']>;
  personal_pension_insurance?: Maybe<Scalars['Float']>;
  personal_unemployment_insurance?: Maybe<Scalars['Float']>;
  unemployment_base?: Maybe<Scalars['Float']>;
  work_injury_base?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "employee_insurance" */
export type Employee_Insurance_Var_Samp_Order_By = {
  corp_heating?: InputMaybe<Order_By>;
  corp_housing_fund?: InputMaybe<Order_By>;
  corp_major_medical?: InputMaybe<Order_By>;
  corp_maternity_insurance?: InputMaybe<Order_By>;
  corp_medical_insurance?: InputMaybe<Order_By>;
  corp_pay?: InputMaybe<Order_By>;
  corp_retirement_insurance?: InputMaybe<Order_By>;
  corp_unemployment_insurance?: InputMaybe<Order_By>;
  corp_work_injury?: InputMaybe<Order_By>;
  heating_base?: InputMaybe<Order_By>;
  medical_base?: InputMaybe<Order_By>;
  pension_base?: InputMaybe<Order_By>;
  personal_fund_balance?: InputMaybe<Order_By>;
  personal_housing_fund?: InputMaybe<Order_By>;
  personal_major_medical?: InputMaybe<Order_By>;
  personal_medical_insurance?: InputMaybe<Order_By>;
  personal_pay?: InputMaybe<Order_By>;
  personal_pension_insurance?: InputMaybe<Order_By>;
  personal_unemployment_insurance?: InputMaybe<Order_By>;
  unemployment_base?: InputMaybe<Order_By>;
  work_injury_base?: InputMaybe<Order_By>;
};

/** aggregate variance on columns */
export type Employee_Insurance_Variance_Fields = {
  __typename?: 'employee_insurance_variance_fields';
  corp_heating?: Maybe<Scalars['Float']>;
  corp_housing_fund?: Maybe<Scalars['Float']>;
  corp_major_medical?: Maybe<Scalars['Float']>;
  corp_maternity_insurance?: Maybe<Scalars['Float']>;
  corp_medical_insurance?: Maybe<Scalars['Float']>;
  corp_pay?: Maybe<Scalars['Float']>;
  corp_retirement_insurance?: Maybe<Scalars['Float']>;
  corp_unemployment_insurance?: Maybe<Scalars['Float']>;
  corp_work_injury?: Maybe<Scalars['Float']>;
  heating_base?: Maybe<Scalars['Float']>;
  medical_base?: Maybe<Scalars['Float']>;
  pension_base?: Maybe<Scalars['Float']>;
  personal_fund_balance?: Maybe<Scalars['Float']>;
  personal_housing_fund?: Maybe<Scalars['Float']>;
  personal_major_medical?: Maybe<Scalars['Float']>;
  personal_medical_insurance?: Maybe<Scalars['Float']>;
  personal_pay?: Maybe<Scalars['Float']>;
  personal_pension_insurance?: Maybe<Scalars['Float']>;
  personal_unemployment_insurance?: Maybe<Scalars['Float']>;
  unemployment_base?: Maybe<Scalars['Float']>;
  work_injury_base?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "employee_insurance" */
export type Employee_Insurance_Variance_Order_By = {
  corp_heating?: InputMaybe<Order_By>;
  corp_housing_fund?: InputMaybe<Order_By>;
  corp_major_medical?: InputMaybe<Order_By>;
  corp_maternity_insurance?: InputMaybe<Order_By>;
  corp_medical_insurance?: InputMaybe<Order_By>;
  corp_pay?: InputMaybe<Order_By>;
  corp_retirement_insurance?: InputMaybe<Order_By>;
  corp_unemployment_insurance?: InputMaybe<Order_By>;
  corp_work_injury?: InputMaybe<Order_By>;
  heating_base?: InputMaybe<Order_By>;
  medical_base?: InputMaybe<Order_By>;
  pension_base?: InputMaybe<Order_By>;
  personal_fund_balance?: InputMaybe<Order_By>;
  personal_housing_fund?: InputMaybe<Order_By>;
  personal_major_medical?: InputMaybe<Order_By>;
  personal_medical_insurance?: InputMaybe<Order_By>;
  personal_pay?: InputMaybe<Order_By>;
  personal_pension_insurance?: InputMaybe<Order_By>;
  personal_unemployment_insurance?: InputMaybe<Order_By>;
  unemployment_base?: InputMaybe<Order_By>;
  work_injury_base?: InputMaybe<Order_By>;
};

/** columns and relationships of "employee_leaves" */
export type Employee_Leaves = {
  __typename?: 'employee_leaves';
  /** An object relationship */
  employee: Employees;
  employee_id: Scalars['String'];
  end_date: Scalars['date'];
  id: Scalars['String'];
  /** An object relationship */
  leave_type: Leave_Types;
  leave_type_id: Scalars['String'];
  start_date: Scalars['date'];
  status: Scalars['Int'];
};

/** aggregated selection of "employee_leaves" */
export type Employee_Leaves_Aggregate = {
  __typename?: 'employee_leaves_aggregate';
  aggregate?: Maybe<Employee_Leaves_Aggregate_Fields>;
  nodes: Array<Employee_Leaves>;
};

export type Employee_Leaves_Aggregate_Bool_Exp = {
  count?: InputMaybe<Employee_Leaves_Aggregate_Bool_Exp_Count>;
};

export type Employee_Leaves_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<Employee_Leaves_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<Employee_Leaves_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "employee_leaves" */
export type Employee_Leaves_Aggregate_Fields = {
  __typename?: 'employee_leaves_aggregate_fields';
  avg?: Maybe<Employee_Leaves_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Employee_Leaves_Max_Fields>;
  min?: Maybe<Employee_Leaves_Min_Fields>;
  stddev?: Maybe<Employee_Leaves_Stddev_Fields>;
  stddev_pop?: Maybe<Employee_Leaves_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Employee_Leaves_Stddev_Samp_Fields>;
  sum?: Maybe<Employee_Leaves_Sum_Fields>;
  var_pop?: Maybe<Employee_Leaves_Var_Pop_Fields>;
  var_samp?: Maybe<Employee_Leaves_Var_Samp_Fields>;
  variance?: Maybe<Employee_Leaves_Variance_Fields>;
};


/** aggregate fields of "employee_leaves" */
export type Employee_Leaves_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Employee_Leaves_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "employee_leaves" */
export type Employee_Leaves_Aggregate_Order_By = {
  avg?: InputMaybe<Employee_Leaves_Avg_Order_By>;
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<Employee_Leaves_Max_Order_By>;
  min?: InputMaybe<Employee_Leaves_Min_Order_By>;
  stddev?: InputMaybe<Employee_Leaves_Stddev_Order_By>;
  stddev_pop?: InputMaybe<Employee_Leaves_Stddev_Pop_Order_By>;
  stddev_samp?: InputMaybe<Employee_Leaves_Stddev_Samp_Order_By>;
  sum?: InputMaybe<Employee_Leaves_Sum_Order_By>;
  var_pop?: InputMaybe<Employee_Leaves_Var_Pop_Order_By>;
  var_samp?: InputMaybe<Employee_Leaves_Var_Samp_Order_By>;
  variance?: InputMaybe<Employee_Leaves_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "employee_leaves" */
export type Employee_Leaves_Arr_Rel_Insert_Input = {
  data: Array<Employee_Leaves_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<Employee_Leaves_On_Conflict>;
};

/** aggregate avg on columns */
export type Employee_Leaves_Avg_Fields = {
  __typename?: 'employee_leaves_avg_fields';
  status?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "employee_leaves" */
export type Employee_Leaves_Avg_Order_By = {
  status?: InputMaybe<Order_By>;
};

/** Boolean expression to filter rows from the table "employee_leaves". All fields are combined with a logical 'AND'. */
export type Employee_Leaves_Bool_Exp = {
  _and?: InputMaybe<Array<Employee_Leaves_Bool_Exp>>;
  _not?: InputMaybe<Employee_Leaves_Bool_Exp>;
  _or?: InputMaybe<Array<Employee_Leaves_Bool_Exp>>;
  employee?: InputMaybe<Employees_Bool_Exp>;
  employee_id?: InputMaybe<String_Comparison_Exp>;
  end_date?: InputMaybe<Date_Comparison_Exp>;
  id?: InputMaybe<String_Comparison_Exp>;
  leave_type?: InputMaybe<Leave_Types_Bool_Exp>;
  leave_type_id?: InputMaybe<String_Comparison_Exp>;
  start_date?: InputMaybe<Date_Comparison_Exp>;
  status?: InputMaybe<Int_Comparison_Exp>;
};

/** unique or primary key constraints on table "employee_leaves" */
export enum Employee_Leaves_Constraint {
  /** unique or primary key constraint on columns "id" */
  EmployeeLeavesPkey = 'employee_leaves_pkey'
}

/** input type for incrementing numeric columns in table "employee_leaves" */
export type Employee_Leaves_Inc_Input = {
  status?: InputMaybe<Scalars['Int']>;
};

/** input type for inserting data into table "employee_leaves" */
export type Employee_Leaves_Insert_Input = {
  employee?: InputMaybe<Employees_Obj_Rel_Insert_Input>;
  employee_id?: InputMaybe<Scalars['String']>;
  end_date?: InputMaybe<Scalars['date']>;
  id?: InputMaybe<Scalars['String']>;
  leave_type?: InputMaybe<Leave_Types_Obj_Rel_Insert_Input>;
  leave_type_id?: InputMaybe<Scalars['String']>;
  start_date?: InputMaybe<Scalars['date']>;
  status?: InputMaybe<Scalars['Int']>;
};

/** aggregate max on columns */
export type Employee_Leaves_Max_Fields = {
  __typename?: 'employee_leaves_max_fields';
  employee_id?: Maybe<Scalars['String']>;
  end_date?: Maybe<Scalars['date']>;
  id?: Maybe<Scalars['String']>;
  leave_type_id?: Maybe<Scalars['String']>;
  start_date?: Maybe<Scalars['date']>;
  status?: Maybe<Scalars['Int']>;
};

/** order by max() on columns of table "employee_leaves" */
export type Employee_Leaves_Max_Order_By = {
  employee_id?: InputMaybe<Order_By>;
  end_date?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  leave_type_id?: InputMaybe<Order_By>;
  start_date?: InputMaybe<Order_By>;
  status?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type Employee_Leaves_Min_Fields = {
  __typename?: 'employee_leaves_min_fields';
  employee_id?: Maybe<Scalars['String']>;
  end_date?: Maybe<Scalars['date']>;
  id?: Maybe<Scalars['String']>;
  leave_type_id?: Maybe<Scalars['String']>;
  start_date?: Maybe<Scalars['date']>;
  status?: Maybe<Scalars['Int']>;
};

/** order by min() on columns of table "employee_leaves" */
export type Employee_Leaves_Min_Order_By = {
  employee_id?: InputMaybe<Order_By>;
  end_date?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  leave_type_id?: InputMaybe<Order_By>;
  start_date?: InputMaybe<Order_By>;
  status?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "employee_leaves" */
export type Employee_Leaves_Mutation_Response = {
  __typename?: 'employee_leaves_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Employee_Leaves>;
};

/** on_conflict condition type for table "employee_leaves" */
export type Employee_Leaves_On_Conflict = {
  constraint: Employee_Leaves_Constraint;
  update_columns?: Array<Employee_Leaves_Update_Column>;
  where?: InputMaybe<Employee_Leaves_Bool_Exp>;
};

/** Ordering options when selecting data from "employee_leaves". */
export type Employee_Leaves_Order_By = {
  employee?: InputMaybe<Employees_Order_By>;
  employee_id?: InputMaybe<Order_By>;
  end_date?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  leave_type?: InputMaybe<Leave_Types_Order_By>;
  leave_type_id?: InputMaybe<Order_By>;
  start_date?: InputMaybe<Order_By>;
  status?: InputMaybe<Order_By>;
};

/** primary key columns input for table: employee_leaves */
export type Employee_Leaves_Pk_Columns_Input = {
  id: Scalars['String'];
};

/** select columns of table "employee_leaves" */
export enum Employee_Leaves_Select_Column {
  /** column name */
  EmployeeId = 'employee_id',
  /** column name */
  EndDate = 'end_date',
  /** column name */
  Id = 'id',
  /** column name */
  LeaveTypeId = 'leave_type_id',
  /** column name */
  StartDate = 'start_date',
  /** column name */
  Status = 'status'
}

/** input type for updating data in table "employee_leaves" */
export type Employee_Leaves_Set_Input = {
  employee_id?: InputMaybe<Scalars['String']>;
  end_date?: InputMaybe<Scalars['date']>;
  id?: InputMaybe<Scalars['String']>;
  leave_type_id?: InputMaybe<Scalars['String']>;
  start_date?: InputMaybe<Scalars['date']>;
  status?: InputMaybe<Scalars['Int']>;
};

/** aggregate stddev on columns */
export type Employee_Leaves_Stddev_Fields = {
  __typename?: 'employee_leaves_stddev_fields';
  status?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "employee_leaves" */
export type Employee_Leaves_Stddev_Order_By = {
  status?: InputMaybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Employee_Leaves_Stddev_Pop_Fields = {
  __typename?: 'employee_leaves_stddev_pop_fields';
  status?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "employee_leaves" */
export type Employee_Leaves_Stddev_Pop_Order_By = {
  status?: InputMaybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Employee_Leaves_Stddev_Samp_Fields = {
  __typename?: 'employee_leaves_stddev_samp_fields';
  status?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "employee_leaves" */
export type Employee_Leaves_Stddev_Samp_Order_By = {
  status?: InputMaybe<Order_By>;
};

/** Streaming cursor of the table "employee_leaves" */
export type Employee_Leaves_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Employee_Leaves_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Employee_Leaves_Stream_Cursor_Value_Input = {
  employee_id?: InputMaybe<Scalars['String']>;
  end_date?: InputMaybe<Scalars['date']>;
  id?: InputMaybe<Scalars['String']>;
  leave_type_id?: InputMaybe<Scalars['String']>;
  start_date?: InputMaybe<Scalars['date']>;
  status?: InputMaybe<Scalars['Int']>;
};

/** aggregate sum on columns */
export type Employee_Leaves_Sum_Fields = {
  __typename?: 'employee_leaves_sum_fields';
  status?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "employee_leaves" */
export type Employee_Leaves_Sum_Order_By = {
  status?: InputMaybe<Order_By>;
};

/** update columns of table "employee_leaves" */
export enum Employee_Leaves_Update_Column {
  /** column name */
  EmployeeId = 'employee_id',
  /** column name */
  EndDate = 'end_date',
  /** column name */
  Id = 'id',
  /** column name */
  LeaveTypeId = 'leave_type_id',
  /** column name */
  StartDate = 'start_date',
  /** column name */
  Status = 'status'
}

export type Employee_Leaves_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: InputMaybe<Employee_Leaves_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Employee_Leaves_Set_Input>;
  /** filter the rows which have to be updated */
  where: Employee_Leaves_Bool_Exp;
};

/** aggregate var_pop on columns */
export type Employee_Leaves_Var_Pop_Fields = {
  __typename?: 'employee_leaves_var_pop_fields';
  status?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "employee_leaves" */
export type Employee_Leaves_Var_Pop_Order_By = {
  status?: InputMaybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Employee_Leaves_Var_Samp_Fields = {
  __typename?: 'employee_leaves_var_samp_fields';
  status?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "employee_leaves" */
export type Employee_Leaves_Var_Samp_Order_By = {
  status?: InputMaybe<Order_By>;
};

/** aggregate variance on columns */
export type Employee_Leaves_Variance_Fields = {
  __typename?: 'employee_leaves_variance_fields';
  status?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "employee_leaves" */
export type Employee_Leaves_Variance_Order_By = {
  status?: InputMaybe<Order_By>;
};

/** columns and relationships of "employee_salary_department" */
export type Employee_Salary_Department = {
  __typename?: 'employee_salary_department';
  change_date: Scalars['date'];
  /** An object relationship */
  department: Departments;
  department_id: Scalars['String'];
  /** An object relationship */
  employee: Employees;
  employee_id: Scalars['String'];
  id: Scalars['String'];
};

/** aggregated selection of "employee_salary_department" */
export type Employee_Salary_Department_Aggregate = {
  __typename?: 'employee_salary_department_aggregate';
  aggregate?: Maybe<Employee_Salary_Department_Aggregate_Fields>;
  nodes: Array<Employee_Salary_Department>;
};

export type Employee_Salary_Department_Aggregate_Bool_Exp = {
  count?: InputMaybe<Employee_Salary_Department_Aggregate_Bool_Exp_Count>;
};

export type Employee_Salary_Department_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<Employee_Salary_Department_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<Employee_Salary_Department_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "employee_salary_department" */
export type Employee_Salary_Department_Aggregate_Fields = {
  __typename?: 'employee_salary_department_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Employee_Salary_Department_Max_Fields>;
  min?: Maybe<Employee_Salary_Department_Min_Fields>;
};


/** aggregate fields of "employee_salary_department" */
export type Employee_Salary_Department_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Employee_Salary_Department_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "employee_salary_department" */
export type Employee_Salary_Department_Aggregate_Order_By = {
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<Employee_Salary_Department_Max_Order_By>;
  min?: InputMaybe<Employee_Salary_Department_Min_Order_By>;
};

/** input type for inserting array relation for remote table "employee_salary_department" */
export type Employee_Salary_Department_Arr_Rel_Insert_Input = {
  data: Array<Employee_Salary_Department_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<Employee_Salary_Department_On_Conflict>;
};

/** Boolean expression to filter rows from the table "employee_salary_department". All fields are combined with a logical 'AND'. */
export type Employee_Salary_Department_Bool_Exp = {
  _and?: InputMaybe<Array<Employee_Salary_Department_Bool_Exp>>;
  _not?: InputMaybe<Employee_Salary_Department_Bool_Exp>;
  _or?: InputMaybe<Array<Employee_Salary_Department_Bool_Exp>>;
  change_date?: InputMaybe<Date_Comparison_Exp>;
  department?: InputMaybe<Departments_Bool_Exp>;
  department_id?: InputMaybe<String_Comparison_Exp>;
  employee?: InputMaybe<Employees_Bool_Exp>;
  employee_id?: InputMaybe<String_Comparison_Exp>;
  id?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "employee_salary_department" */
export enum Employee_Salary_Department_Constraint {
  /** unique or primary key constraint on columns "employee_id", "department_id" */
  EmployeeDepartmentHistoryPkey = 'employee_department_history_pkey'
}

/** input type for inserting data into table "employee_salary_department" */
export type Employee_Salary_Department_Insert_Input = {
  change_date?: InputMaybe<Scalars['date']>;
  department?: InputMaybe<Departments_Obj_Rel_Insert_Input>;
  department_id?: InputMaybe<Scalars['String']>;
  employee?: InputMaybe<Employees_Obj_Rel_Insert_Input>;
  employee_id?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Employee_Salary_Department_Max_Fields = {
  __typename?: 'employee_salary_department_max_fields';
  change_date?: Maybe<Scalars['date']>;
  department_id?: Maybe<Scalars['String']>;
  employee_id?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "employee_salary_department" */
export type Employee_Salary_Department_Max_Order_By = {
  change_date?: InputMaybe<Order_By>;
  department_id?: InputMaybe<Order_By>;
  employee_id?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type Employee_Salary_Department_Min_Fields = {
  __typename?: 'employee_salary_department_min_fields';
  change_date?: Maybe<Scalars['date']>;
  department_id?: Maybe<Scalars['String']>;
  employee_id?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "employee_salary_department" */
export type Employee_Salary_Department_Min_Order_By = {
  change_date?: InputMaybe<Order_By>;
  department_id?: InputMaybe<Order_By>;
  employee_id?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "employee_salary_department" */
export type Employee_Salary_Department_Mutation_Response = {
  __typename?: 'employee_salary_department_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Employee_Salary_Department>;
};

/** on_conflict condition type for table "employee_salary_department" */
export type Employee_Salary_Department_On_Conflict = {
  constraint: Employee_Salary_Department_Constraint;
  update_columns?: Array<Employee_Salary_Department_Update_Column>;
  where?: InputMaybe<Employee_Salary_Department_Bool_Exp>;
};

/** Ordering options when selecting data from "employee_salary_department". */
export type Employee_Salary_Department_Order_By = {
  change_date?: InputMaybe<Order_By>;
  department?: InputMaybe<Departments_Order_By>;
  department_id?: InputMaybe<Order_By>;
  employee?: InputMaybe<Employees_Order_By>;
  employee_id?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** primary key columns input for table: employee_salary_department */
export type Employee_Salary_Department_Pk_Columns_Input = {
  department_id: Scalars['String'];
  employee_id: Scalars['String'];
};

/** select columns of table "employee_salary_department" */
export enum Employee_Salary_Department_Select_Column {
  /** column name */
  ChangeDate = 'change_date',
  /** column name */
  DepartmentId = 'department_id',
  /** column name */
  EmployeeId = 'employee_id',
  /** column name */
  Id = 'id'
}

/** input type for updating data in table "employee_salary_department" */
export type Employee_Salary_Department_Set_Input = {
  change_date?: InputMaybe<Scalars['date']>;
  department_id?: InputMaybe<Scalars['String']>;
  employee_id?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['String']>;
};

/** Streaming cursor of the table "employee_salary_department" */
export type Employee_Salary_Department_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Employee_Salary_Department_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Employee_Salary_Department_Stream_Cursor_Value_Input = {
  change_date?: InputMaybe<Scalars['date']>;
  department_id?: InputMaybe<Scalars['String']>;
  employee_id?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['String']>;
};

/** update columns of table "employee_salary_department" */
export enum Employee_Salary_Department_Update_Column {
  /** column name */
  ChangeDate = 'change_date',
  /** column name */
  DepartmentId = 'department_id',
  /** column name */
  EmployeeId = 'employee_id',
  /** column name */
  Id = 'id'
}

export type Employee_Salary_Department_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Employee_Salary_Department_Set_Input>;
  /** filter the rows which have to be updated */
  where: Employee_Salary_Department_Bool_Exp;
};

/** columns and relationships of "employees" */
export type Employees = {
  __typename?: 'employees';
  actual_conversion_time?: Maybe<Scalars['date']>;
  actual_overboard_time?: Maybe<Scalars['date']>;
  application?: Maybe<Scalars['Int']>;
  application_status?: Maybe<Scalars['Int']>;
  /** An array relationship */
  attendance_group_leaders: Array<Attendance_Group_Leaders>;
  /** An aggregate relationship */
  attendance_group_leaders_aggregate: Attendance_Group_Leaders_Aggregate;
  /** An array relationship */
  attendance_group_subleaders: Array<Attendance_Group_Subleaders>;
  /** An aggregate relationship */
  attendance_group_subleaders_aggregate: Attendance_Group_Subleaders_Aggregate;
  /** An array relationship */
  attendances: Array<Attendance>;
  /** An aggregate relationship */
  attendances_aggregate: Attendance_Aggregate;
  avatar?: Maybe<Scalars['String']>;
  bank_account_number?: Maybe<Scalars['String']>;
  bank_name?: Maybe<Scalars['String']>;
  basic_salary?: Maybe<Scalars['numeric']>;
  basic_salary_base?: Maybe<Scalars['numeric']>;
  basic_salary_monthly?: Maybe<Scalars['numeric']>;
  birthday?: Maybe<Scalars['date']>;
  /** A computed field, executes function "birthday_mm_dd" */
  birthday_mm_dd?: Maybe<Scalars['String']>;
  /** An array relationship */
  bonusdeductions: Array<Bonusdeductions>;
  /** An aggregate relationship */
  bonusdeductions_aggregate: Bonusdeductions_Aggregate;
  /** An array relationship */
  brands_employees: Array<Brands_Employees>;
  /** An aggregate relationship */
  brands_employees_aggregate: Brands_Employees_Aggregate;
  cancel_onboarding_notes?: Maybe<Scalars['String']>;
  cancel_onboarding_reason?: Maybe<Scalars['Int']>;
  created_at: Scalars['timestamptz'];
  /** An object relationship */
  department: Departments;
  department_id: Scalars['String'];
  /** An array relationship */
  departments: Array<Departments>;
  /** An aggregate relationship */
  departments_aggregate: Departments_Aggregate;
  /** An array relationship */
  departments_employees: Array<Departments_Employees>;
  /** An aggregate relationship */
  departments_employees_aggregate: Departments_Employees_Aggregate;
  departure_notes?: Maybe<Scalars['String']>;
  departure_type?: Maybe<Scalars['Int']>;
  email?: Maybe<Scalars['String']>;
  /** An object relationship */
  employee?: Maybe<Employees>;
  /** An array relationship */
  employee_attachments: Array<Employee_Attachments>;
  /** An aggregate relationship */
  employee_attachments_aggregate: Employee_Attachments_Aggregate;
  /** An array relationship */
  employee_department_histories: Array<Employee_Salary_Department>;
  /** An aggregate relationship */
  employee_department_histories_aggregate: Employee_Salary_Department_Aggregate;
  employee_form_status?: Maybe<Scalars['Int']>;
  /** An array relationship */
  employee_insurances: Array<Employee_Insurance>;
  /** An aggregate relationship */
  employee_insurances_aggregate: Employee_Insurance_Aggregate;
  /** An array relationship */
  employee_leaves: Array<Employee_Leaves>;
  /** An aggregate relationship */
  employee_leaves_aggregate: Employee_Leaves_Aggregate;
  employee_no?: Maybe<Scalars['String']>;
  employee_type?: Maybe<Scalars['smallint']>;
  /** An array relationship */
  employees: Array<Employees>;
  /** An aggregate relationship */
  employees_aggregate: Employees_Aggregate;
  /** An array relationship */
  employees_roles: Array<Employees_Roles>;
  /** An aggregate relationship */
  employees_roles_aggregate: Employees_Roles_Aggregate;
  en_name?: Maybe<Scalars['String']>;
  entered_workforce_date?: Maybe<Scalars['date']>;
  ethnicity?: Maybe<Scalars['Int']>;
  family_address?: Maybe<Scalars['String']>;
  gender_id?: Maybe<Scalars['smallint']>;
  has_insurance: Scalars['Boolean'];
  health_card_end?: Maybe<Scalars['date']>;
  health_card_image?: Maybe<Scalars['String']>;
  health_card_no?: Maybe<Scalars['String']>;
  health_card_start?: Maybe<Scalars['date']>;
  hire_date?: Maybe<Scalars['date']>;
  /** A computed field, executes function "hire_date_mm_dd" */
  hire_date_mm_dd?: Maybe<Scalars['String']>;
  hukou_location?: Maybe<Scalars['String']>;
  hukou_type?: Maybe<Scalars['Int']>;
  id: Scalars['String'];
  id_number?: Maybe<Scalars['String']>;
  id_photo?: Maybe<Scalars['String']>;
  id_photo_em_side?: Maybe<Scalars['String']>;
  id_photo_po_side?: Maybe<Scalars['String']>;
  id_type?: Maybe<Scalars['Int']>;
  /** An array relationship */
  insurance_funds: Array<Insurance_Funds>;
  /** An aggregate relationship */
  insurance_funds_aggregate: Insurance_Funds_Aggregate;
  insurance_start_date?: Maybe<Scalars['date']>;
  insurance_subsidy?: Maybe<Scalars['numeric']>;
  isAdmin: Scalars['smallint'];
  is_tenant_manager?: Maybe<Scalars['smallint']>;
  is_three_days_leave?: Maybe<Scalars['smallint']>;
  job_title?: Maybe<Scalars['String']>;
  last_day?: Maybe<Scalars['date']>;
  manager_id?: Maybe<Scalars['String']>;
  marital_status?: Maybe<Scalars['smallint']>;
  medical_insurance?: Maybe<Scalars['Int']>;
  mobile?: Maybe<Scalars['String']>;
  /** An array relationship */
  monthlysalaries: Array<Monthlysalary>;
  /** An aggregate relationship */
  monthlysalaries_aggregate: Monthlysalary_Aggregate;
  name: Scalars['String'];
  native_region?: Maybe<Scalars['json']>;
  notice_termination_agreement?: Maybe<Scalars['String']>;
  open_id?: Maybe<Scalars['String']>;
  overboard_note?: Maybe<Scalars['String']>;
  overtime_pay?: Maybe<Scalars['numeric']>;
  personal_email?: Maybe<Scalars['String']>;
  position_pay?: Maybe<Scalars['numeric']>;
  primary_emergency_contact?: Maybe<Scalars['json']>;
  probation_months?: Maybe<Scalars['Int']>;
  provident_fund_account?: Maybe<Scalars['String']>;
  resignation_handover?: Maybe<Scalars['String']>;
  /** An object relationship */
  salaryType?: Maybe<Salary_Types>;
  salary_account?: Maybe<Scalars['String']>;
  salary_type?: Maybe<Scalars['String']>;
  salary_type_id?: Maybe<Scalars['String']>;
  screenshot?: Maybe<Scalars['String']>;
  social_security_account?: Maybe<Scalars['String']>;
  social_security_number?: Maybe<Scalars['Int']>;
  status?: Maybe<Scalars['smallint']>;
  /** An array relationship */
  store_employees: Array<Store_Employee>;
  /** An aggregate relationship */
  store_employees_aggregate: Store_Employee_Aggregate;
  updated_at: Scalars['timestamptz'];
  user_id?: Maybe<Scalars['String']>;
  verification_code?: Maybe<Scalars['String']>;
  work_age_type?: Maybe<Scalars['String']>;
  work_location?: Maybe<Scalars['json']>;
};


/** columns and relationships of "employees" */
export type EmployeesAttendance_Group_LeadersArgs = {
  distinct_on?: InputMaybe<Array<Attendance_Group_Leaders_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Attendance_Group_Leaders_Order_By>>;
  where?: InputMaybe<Attendance_Group_Leaders_Bool_Exp>;
};


/** columns and relationships of "employees" */
export type EmployeesAttendance_Group_Leaders_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Attendance_Group_Leaders_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Attendance_Group_Leaders_Order_By>>;
  where?: InputMaybe<Attendance_Group_Leaders_Bool_Exp>;
};


/** columns and relationships of "employees" */
export type EmployeesAttendance_Group_SubleadersArgs = {
  distinct_on?: InputMaybe<Array<Attendance_Group_Subleaders_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Attendance_Group_Subleaders_Order_By>>;
  where?: InputMaybe<Attendance_Group_Subleaders_Bool_Exp>;
};


/** columns and relationships of "employees" */
export type EmployeesAttendance_Group_Subleaders_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Attendance_Group_Subleaders_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Attendance_Group_Subleaders_Order_By>>;
  where?: InputMaybe<Attendance_Group_Subleaders_Bool_Exp>;
};


/** columns and relationships of "employees" */
export type EmployeesAttendancesArgs = {
  distinct_on?: InputMaybe<Array<Attendance_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Attendance_Order_By>>;
  where?: InputMaybe<Attendance_Bool_Exp>;
};


/** columns and relationships of "employees" */
export type EmployeesAttendances_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Attendance_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Attendance_Order_By>>;
  where?: InputMaybe<Attendance_Bool_Exp>;
};


/** columns and relationships of "employees" */
export type EmployeesBonusdeductionsArgs = {
  distinct_on?: InputMaybe<Array<Bonusdeductions_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Bonusdeductions_Order_By>>;
  where?: InputMaybe<Bonusdeductions_Bool_Exp>;
};


/** columns and relationships of "employees" */
export type EmployeesBonusdeductions_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Bonusdeductions_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Bonusdeductions_Order_By>>;
  where?: InputMaybe<Bonusdeductions_Bool_Exp>;
};


/** columns and relationships of "employees" */
export type EmployeesBrands_EmployeesArgs = {
  distinct_on?: InputMaybe<Array<Brands_Employees_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Brands_Employees_Order_By>>;
  where?: InputMaybe<Brands_Employees_Bool_Exp>;
};


/** columns and relationships of "employees" */
export type EmployeesBrands_Employees_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Brands_Employees_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Brands_Employees_Order_By>>;
  where?: InputMaybe<Brands_Employees_Bool_Exp>;
};


/** columns and relationships of "employees" */
export type EmployeesDepartmentsArgs = {
  distinct_on?: InputMaybe<Array<Departments_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Departments_Order_By>>;
  where?: InputMaybe<Departments_Bool_Exp>;
};


/** columns and relationships of "employees" */
export type EmployeesDepartments_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Departments_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Departments_Order_By>>;
  where?: InputMaybe<Departments_Bool_Exp>;
};


/** columns and relationships of "employees" */
export type EmployeesDepartments_EmployeesArgs = {
  distinct_on?: InputMaybe<Array<Departments_Employees_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Departments_Employees_Order_By>>;
  where?: InputMaybe<Departments_Employees_Bool_Exp>;
};


/** columns and relationships of "employees" */
export type EmployeesDepartments_Employees_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Departments_Employees_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Departments_Employees_Order_By>>;
  where?: InputMaybe<Departments_Employees_Bool_Exp>;
};


/** columns and relationships of "employees" */
export type EmployeesEmployee_AttachmentsArgs = {
  distinct_on?: InputMaybe<Array<Employee_Attachments_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Employee_Attachments_Order_By>>;
  where?: InputMaybe<Employee_Attachments_Bool_Exp>;
};


/** columns and relationships of "employees" */
export type EmployeesEmployee_Attachments_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Employee_Attachments_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Employee_Attachments_Order_By>>;
  where?: InputMaybe<Employee_Attachments_Bool_Exp>;
};


/** columns and relationships of "employees" */
export type EmployeesEmployee_Department_HistoriesArgs = {
  distinct_on?: InputMaybe<Array<Employee_Salary_Department_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Employee_Salary_Department_Order_By>>;
  where?: InputMaybe<Employee_Salary_Department_Bool_Exp>;
};


/** columns and relationships of "employees" */
export type EmployeesEmployee_Department_Histories_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Employee_Salary_Department_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Employee_Salary_Department_Order_By>>;
  where?: InputMaybe<Employee_Salary_Department_Bool_Exp>;
};


/** columns and relationships of "employees" */
export type EmployeesEmployee_InsurancesArgs = {
  distinct_on?: InputMaybe<Array<Employee_Insurance_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Employee_Insurance_Order_By>>;
  where?: InputMaybe<Employee_Insurance_Bool_Exp>;
};


/** columns and relationships of "employees" */
export type EmployeesEmployee_Insurances_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Employee_Insurance_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Employee_Insurance_Order_By>>;
  where?: InputMaybe<Employee_Insurance_Bool_Exp>;
};


/** columns and relationships of "employees" */
export type EmployeesEmployee_LeavesArgs = {
  distinct_on?: InputMaybe<Array<Employee_Leaves_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Employee_Leaves_Order_By>>;
  where?: InputMaybe<Employee_Leaves_Bool_Exp>;
};


/** columns and relationships of "employees" */
export type EmployeesEmployee_Leaves_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Employee_Leaves_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Employee_Leaves_Order_By>>;
  where?: InputMaybe<Employee_Leaves_Bool_Exp>;
};


/** columns and relationships of "employees" */
export type EmployeesEmployeesArgs = {
  distinct_on?: InputMaybe<Array<Employees_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Employees_Order_By>>;
  where?: InputMaybe<Employees_Bool_Exp>;
};


/** columns and relationships of "employees" */
export type EmployeesEmployees_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Employees_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Employees_Order_By>>;
  where?: InputMaybe<Employees_Bool_Exp>;
};


/** columns and relationships of "employees" */
export type EmployeesEmployees_RolesArgs = {
  distinct_on?: InputMaybe<Array<Employees_Roles_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Employees_Roles_Order_By>>;
  where?: InputMaybe<Employees_Roles_Bool_Exp>;
};


/** columns and relationships of "employees" */
export type EmployeesEmployees_Roles_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Employees_Roles_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Employees_Roles_Order_By>>;
  where?: InputMaybe<Employees_Roles_Bool_Exp>;
};


/** columns and relationships of "employees" */
export type EmployeesInsurance_FundsArgs = {
  distinct_on?: InputMaybe<Array<Insurance_Funds_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Insurance_Funds_Order_By>>;
  where?: InputMaybe<Insurance_Funds_Bool_Exp>;
};


/** columns and relationships of "employees" */
export type EmployeesInsurance_Funds_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Insurance_Funds_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Insurance_Funds_Order_By>>;
  where?: InputMaybe<Insurance_Funds_Bool_Exp>;
};


/** columns and relationships of "employees" */
export type EmployeesMonthlysalariesArgs = {
  distinct_on?: InputMaybe<Array<Monthlysalary_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Monthlysalary_Order_By>>;
  where?: InputMaybe<Monthlysalary_Bool_Exp>;
};


/** columns and relationships of "employees" */
export type EmployeesMonthlysalaries_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Monthlysalary_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Monthlysalary_Order_By>>;
  where?: InputMaybe<Monthlysalary_Bool_Exp>;
};


/** columns and relationships of "employees" */
export type EmployeesNative_RegionArgs = {
  path?: InputMaybe<Scalars['String']>;
};


/** columns and relationships of "employees" */
export type EmployeesPrimary_Emergency_ContactArgs = {
  path?: InputMaybe<Scalars['String']>;
};


/** columns and relationships of "employees" */
export type EmployeesStore_EmployeesArgs = {
  distinct_on?: InputMaybe<Array<Store_Employee_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Store_Employee_Order_By>>;
  where?: InputMaybe<Store_Employee_Bool_Exp>;
};


/** columns and relationships of "employees" */
export type EmployeesStore_Employees_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Store_Employee_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Store_Employee_Order_By>>;
  where?: InputMaybe<Store_Employee_Bool_Exp>;
};


/** columns and relationships of "employees" */
export type EmployeesWork_LocationArgs = {
  path?: InputMaybe<Scalars['String']>;
};

/** aggregated selection of "employees" */
export type Employees_Aggregate = {
  __typename?: 'employees_aggregate';
  aggregate?: Maybe<Employees_Aggregate_Fields>;
  nodes: Array<Employees>;
};

export type Employees_Aggregate_Bool_Exp = {
  bool_and?: InputMaybe<Employees_Aggregate_Bool_Exp_Bool_And>;
  bool_or?: InputMaybe<Employees_Aggregate_Bool_Exp_Bool_Or>;
  count?: InputMaybe<Employees_Aggregate_Bool_Exp_Count>;
};

export type Employees_Aggregate_Bool_Exp_Bool_And = {
  arguments: Employees_Select_Column_Employees_Aggregate_Bool_Exp_Bool_And_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<Employees_Bool_Exp>;
  predicate: Boolean_Comparison_Exp;
};

export type Employees_Aggregate_Bool_Exp_Bool_Or = {
  arguments: Employees_Select_Column_Employees_Aggregate_Bool_Exp_Bool_Or_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<Employees_Bool_Exp>;
  predicate: Boolean_Comparison_Exp;
};

export type Employees_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<Employees_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<Employees_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "employees" */
export type Employees_Aggregate_Fields = {
  __typename?: 'employees_aggregate_fields';
  avg?: Maybe<Employees_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Employees_Max_Fields>;
  min?: Maybe<Employees_Min_Fields>;
  stddev?: Maybe<Employees_Stddev_Fields>;
  stddev_pop?: Maybe<Employees_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Employees_Stddev_Samp_Fields>;
  sum?: Maybe<Employees_Sum_Fields>;
  var_pop?: Maybe<Employees_Var_Pop_Fields>;
  var_samp?: Maybe<Employees_Var_Samp_Fields>;
  variance?: Maybe<Employees_Variance_Fields>;
};


/** aggregate fields of "employees" */
export type Employees_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Employees_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "employees" */
export type Employees_Aggregate_Order_By = {
  avg?: InputMaybe<Employees_Avg_Order_By>;
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<Employees_Max_Order_By>;
  min?: InputMaybe<Employees_Min_Order_By>;
  stddev?: InputMaybe<Employees_Stddev_Order_By>;
  stddev_pop?: InputMaybe<Employees_Stddev_Pop_Order_By>;
  stddev_samp?: InputMaybe<Employees_Stddev_Samp_Order_By>;
  sum?: InputMaybe<Employees_Sum_Order_By>;
  var_pop?: InputMaybe<Employees_Var_Pop_Order_By>;
  var_samp?: InputMaybe<Employees_Var_Samp_Order_By>;
  variance?: InputMaybe<Employees_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "employees" */
export type Employees_Arr_Rel_Insert_Input = {
  data: Array<Employees_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<Employees_On_Conflict>;
};

/** aggregate avg on columns */
export type Employees_Avg_Fields = {
  __typename?: 'employees_avg_fields';
  application?: Maybe<Scalars['Float']>;
  application_status?: Maybe<Scalars['Float']>;
  basic_salary?: Maybe<Scalars['Float']>;
  basic_salary_base?: Maybe<Scalars['Float']>;
  basic_salary_monthly?: Maybe<Scalars['Float']>;
  cancel_onboarding_reason?: Maybe<Scalars['Float']>;
  departure_type?: Maybe<Scalars['Float']>;
  employee_form_status?: Maybe<Scalars['Float']>;
  employee_type?: Maybe<Scalars['Float']>;
  ethnicity?: Maybe<Scalars['Float']>;
  gender_id?: Maybe<Scalars['Float']>;
  hukou_type?: Maybe<Scalars['Float']>;
  id_type?: Maybe<Scalars['Float']>;
  insurance_subsidy?: Maybe<Scalars['Float']>;
  isAdmin?: Maybe<Scalars['Float']>;
  is_tenant_manager?: Maybe<Scalars['Float']>;
  is_three_days_leave?: Maybe<Scalars['Float']>;
  marital_status?: Maybe<Scalars['Float']>;
  medical_insurance?: Maybe<Scalars['Float']>;
  overtime_pay?: Maybe<Scalars['Float']>;
  position_pay?: Maybe<Scalars['Float']>;
  probation_months?: Maybe<Scalars['Float']>;
  social_security_number?: Maybe<Scalars['Float']>;
  status?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "employees" */
export type Employees_Avg_Order_By = {
  application?: InputMaybe<Order_By>;
  application_status?: InputMaybe<Order_By>;
  basic_salary?: InputMaybe<Order_By>;
  basic_salary_base?: InputMaybe<Order_By>;
  basic_salary_monthly?: InputMaybe<Order_By>;
  cancel_onboarding_reason?: InputMaybe<Order_By>;
  departure_type?: InputMaybe<Order_By>;
  employee_form_status?: InputMaybe<Order_By>;
  employee_type?: InputMaybe<Order_By>;
  ethnicity?: InputMaybe<Order_By>;
  gender_id?: InputMaybe<Order_By>;
  hukou_type?: InputMaybe<Order_By>;
  id_type?: InputMaybe<Order_By>;
  insurance_subsidy?: InputMaybe<Order_By>;
  isAdmin?: InputMaybe<Order_By>;
  is_tenant_manager?: InputMaybe<Order_By>;
  is_three_days_leave?: InputMaybe<Order_By>;
  marital_status?: InputMaybe<Order_By>;
  medical_insurance?: InputMaybe<Order_By>;
  overtime_pay?: InputMaybe<Order_By>;
  position_pay?: InputMaybe<Order_By>;
  probation_months?: InputMaybe<Order_By>;
  social_security_number?: InputMaybe<Order_By>;
  status?: InputMaybe<Order_By>;
};

/** Boolean expression to filter rows from the table "employees". All fields are combined with a logical 'AND'. */
export type Employees_Bool_Exp = {
  _and?: InputMaybe<Array<Employees_Bool_Exp>>;
  _not?: InputMaybe<Employees_Bool_Exp>;
  _or?: InputMaybe<Array<Employees_Bool_Exp>>;
  actual_conversion_time?: InputMaybe<Date_Comparison_Exp>;
  actual_overboard_time?: InputMaybe<Date_Comparison_Exp>;
  application?: InputMaybe<Int_Comparison_Exp>;
  application_status?: InputMaybe<Int_Comparison_Exp>;
  attendance_group_leaders?: InputMaybe<Attendance_Group_Leaders_Bool_Exp>;
  attendance_group_leaders_aggregate?: InputMaybe<Attendance_Group_Leaders_Aggregate_Bool_Exp>;
  attendance_group_subleaders?: InputMaybe<Attendance_Group_Subleaders_Bool_Exp>;
  attendance_group_subleaders_aggregate?: InputMaybe<Attendance_Group_Subleaders_Aggregate_Bool_Exp>;
  attendances?: InputMaybe<Attendance_Bool_Exp>;
  attendances_aggregate?: InputMaybe<Attendance_Aggregate_Bool_Exp>;
  avatar?: InputMaybe<String_Comparison_Exp>;
  bank_account_number?: InputMaybe<String_Comparison_Exp>;
  bank_name?: InputMaybe<String_Comparison_Exp>;
  basic_salary?: InputMaybe<Numeric_Comparison_Exp>;
  basic_salary_base?: InputMaybe<Numeric_Comparison_Exp>;
  basic_salary_monthly?: InputMaybe<Numeric_Comparison_Exp>;
  birthday?: InputMaybe<Date_Comparison_Exp>;
  birthday_mm_dd?: InputMaybe<String_Comparison_Exp>;
  bonusdeductions?: InputMaybe<Bonusdeductions_Bool_Exp>;
  bonusdeductions_aggregate?: InputMaybe<Bonusdeductions_Aggregate_Bool_Exp>;
  brands_employees?: InputMaybe<Brands_Employees_Bool_Exp>;
  brands_employees_aggregate?: InputMaybe<Brands_Employees_Aggregate_Bool_Exp>;
  cancel_onboarding_notes?: InputMaybe<String_Comparison_Exp>;
  cancel_onboarding_reason?: InputMaybe<Int_Comparison_Exp>;
  created_at?: InputMaybe<Timestamptz_Comparison_Exp>;
  department?: InputMaybe<Departments_Bool_Exp>;
  department_id?: InputMaybe<String_Comparison_Exp>;
  departments?: InputMaybe<Departments_Bool_Exp>;
  departments_aggregate?: InputMaybe<Departments_Aggregate_Bool_Exp>;
  departments_employees?: InputMaybe<Departments_Employees_Bool_Exp>;
  departments_employees_aggregate?: InputMaybe<Departments_Employees_Aggregate_Bool_Exp>;
  departure_notes?: InputMaybe<String_Comparison_Exp>;
  departure_type?: InputMaybe<Int_Comparison_Exp>;
  email?: InputMaybe<String_Comparison_Exp>;
  employee?: InputMaybe<Employees_Bool_Exp>;
  employee_attachments?: InputMaybe<Employee_Attachments_Bool_Exp>;
  employee_attachments_aggregate?: InputMaybe<Employee_Attachments_Aggregate_Bool_Exp>;
  employee_department_histories?: InputMaybe<Employee_Salary_Department_Bool_Exp>;
  employee_department_histories_aggregate?: InputMaybe<Employee_Salary_Department_Aggregate_Bool_Exp>;
  employee_form_status?: InputMaybe<Int_Comparison_Exp>;
  employee_insurances?: InputMaybe<Employee_Insurance_Bool_Exp>;
  employee_insurances_aggregate?: InputMaybe<Employee_Insurance_Aggregate_Bool_Exp>;
  employee_leaves?: InputMaybe<Employee_Leaves_Bool_Exp>;
  employee_leaves_aggregate?: InputMaybe<Employee_Leaves_Aggregate_Bool_Exp>;
  employee_no?: InputMaybe<String_Comparison_Exp>;
  employee_type?: InputMaybe<Smallint_Comparison_Exp>;
  employees?: InputMaybe<Employees_Bool_Exp>;
  employees_aggregate?: InputMaybe<Employees_Aggregate_Bool_Exp>;
  employees_roles?: InputMaybe<Employees_Roles_Bool_Exp>;
  employees_roles_aggregate?: InputMaybe<Employees_Roles_Aggregate_Bool_Exp>;
  en_name?: InputMaybe<String_Comparison_Exp>;
  entered_workforce_date?: InputMaybe<Date_Comparison_Exp>;
  ethnicity?: InputMaybe<Int_Comparison_Exp>;
  family_address?: InputMaybe<String_Comparison_Exp>;
  gender_id?: InputMaybe<Smallint_Comparison_Exp>;
  has_insurance?: InputMaybe<Boolean_Comparison_Exp>;
  health_card_end?: InputMaybe<Date_Comparison_Exp>;
  health_card_image?: InputMaybe<String_Comparison_Exp>;
  health_card_no?: InputMaybe<String_Comparison_Exp>;
  health_card_start?: InputMaybe<Date_Comparison_Exp>;
  hire_date?: InputMaybe<Date_Comparison_Exp>;
  hire_date_mm_dd?: InputMaybe<String_Comparison_Exp>;
  hukou_location?: InputMaybe<String_Comparison_Exp>;
  hukou_type?: InputMaybe<Int_Comparison_Exp>;
  id?: InputMaybe<String_Comparison_Exp>;
  id_number?: InputMaybe<String_Comparison_Exp>;
  id_photo?: InputMaybe<String_Comparison_Exp>;
  id_photo_em_side?: InputMaybe<String_Comparison_Exp>;
  id_photo_po_side?: InputMaybe<String_Comparison_Exp>;
  id_type?: InputMaybe<Int_Comparison_Exp>;
  insurance_funds?: InputMaybe<Insurance_Funds_Bool_Exp>;
  insurance_funds_aggregate?: InputMaybe<Insurance_Funds_Aggregate_Bool_Exp>;
  insurance_start_date?: InputMaybe<Date_Comparison_Exp>;
  insurance_subsidy?: InputMaybe<Numeric_Comparison_Exp>;
  isAdmin?: InputMaybe<Smallint_Comparison_Exp>;
  is_tenant_manager?: InputMaybe<Smallint_Comparison_Exp>;
  is_three_days_leave?: InputMaybe<Smallint_Comparison_Exp>;
  job_title?: InputMaybe<String_Comparison_Exp>;
  last_day?: InputMaybe<Date_Comparison_Exp>;
  manager_id?: InputMaybe<String_Comparison_Exp>;
  marital_status?: InputMaybe<Smallint_Comparison_Exp>;
  medical_insurance?: InputMaybe<Int_Comparison_Exp>;
  mobile?: InputMaybe<String_Comparison_Exp>;
  monthlysalaries?: InputMaybe<Monthlysalary_Bool_Exp>;
  monthlysalaries_aggregate?: InputMaybe<Monthlysalary_Aggregate_Bool_Exp>;
  name?: InputMaybe<String_Comparison_Exp>;
  native_region?: InputMaybe<Json_Comparison_Exp>;
  notice_termination_agreement?: InputMaybe<String_Comparison_Exp>;
  open_id?: InputMaybe<String_Comparison_Exp>;
  overboard_note?: InputMaybe<String_Comparison_Exp>;
  overtime_pay?: InputMaybe<Numeric_Comparison_Exp>;
  personal_email?: InputMaybe<String_Comparison_Exp>;
  position_pay?: InputMaybe<Numeric_Comparison_Exp>;
  primary_emergency_contact?: InputMaybe<Json_Comparison_Exp>;
  probation_months?: InputMaybe<Int_Comparison_Exp>;
  provident_fund_account?: InputMaybe<String_Comparison_Exp>;
  resignation_handover?: InputMaybe<String_Comparison_Exp>;
  salaryType?: InputMaybe<Salary_Types_Bool_Exp>;
  salary_account?: InputMaybe<String_Comparison_Exp>;
  salary_type?: InputMaybe<String_Comparison_Exp>;
  salary_type_id?: InputMaybe<String_Comparison_Exp>;
  screenshot?: InputMaybe<String_Comparison_Exp>;
  social_security_account?: InputMaybe<String_Comparison_Exp>;
  social_security_number?: InputMaybe<Int_Comparison_Exp>;
  status?: InputMaybe<Smallint_Comparison_Exp>;
  store_employees?: InputMaybe<Store_Employee_Bool_Exp>;
  store_employees_aggregate?: InputMaybe<Store_Employee_Aggregate_Bool_Exp>;
  updated_at?: InputMaybe<Timestamptz_Comparison_Exp>;
  user_id?: InputMaybe<String_Comparison_Exp>;
  verification_code?: InputMaybe<String_Comparison_Exp>;
  work_age_type?: InputMaybe<String_Comparison_Exp>;
  work_location?: InputMaybe<Json_Comparison_Exp>;
};

/** unique or primary key constraints on table "employees" */
export enum Employees_Constraint {
  /** unique or primary key constraint on columns "id" */
  EmployeesPrimary18 = 'employeesPRIMARY18',
  /** unique or primary key constraint on columns "mobile" */
  UniqueMobile27 = 'unique_mobile27'
}

/** input type for incrementing numeric columns in table "employees" */
export type Employees_Inc_Input = {
  application?: InputMaybe<Scalars['Int']>;
  application_status?: InputMaybe<Scalars['Int']>;
  basic_salary?: InputMaybe<Scalars['numeric']>;
  basic_salary_base?: InputMaybe<Scalars['numeric']>;
  basic_salary_monthly?: InputMaybe<Scalars['numeric']>;
  cancel_onboarding_reason?: InputMaybe<Scalars['Int']>;
  departure_type?: InputMaybe<Scalars['Int']>;
  employee_form_status?: InputMaybe<Scalars['Int']>;
  employee_type?: InputMaybe<Scalars['smallint']>;
  ethnicity?: InputMaybe<Scalars['Int']>;
  gender_id?: InputMaybe<Scalars['smallint']>;
  hukou_type?: InputMaybe<Scalars['Int']>;
  id_type?: InputMaybe<Scalars['Int']>;
  insurance_subsidy?: InputMaybe<Scalars['numeric']>;
  isAdmin?: InputMaybe<Scalars['smallint']>;
  is_tenant_manager?: InputMaybe<Scalars['smallint']>;
  is_three_days_leave?: InputMaybe<Scalars['smallint']>;
  marital_status?: InputMaybe<Scalars['smallint']>;
  medical_insurance?: InputMaybe<Scalars['Int']>;
  overtime_pay?: InputMaybe<Scalars['numeric']>;
  position_pay?: InputMaybe<Scalars['numeric']>;
  probation_months?: InputMaybe<Scalars['Int']>;
  social_security_number?: InputMaybe<Scalars['Int']>;
  status?: InputMaybe<Scalars['smallint']>;
};

/** input type for inserting data into table "employees" */
export type Employees_Insert_Input = {
  actual_conversion_time?: InputMaybe<Scalars['date']>;
  actual_overboard_time?: InputMaybe<Scalars['date']>;
  application?: InputMaybe<Scalars['Int']>;
  application_status?: InputMaybe<Scalars['Int']>;
  attendance_group_leaders?: InputMaybe<Attendance_Group_Leaders_Arr_Rel_Insert_Input>;
  attendance_group_subleaders?: InputMaybe<Attendance_Group_Subleaders_Arr_Rel_Insert_Input>;
  attendances?: InputMaybe<Attendance_Arr_Rel_Insert_Input>;
  avatar?: InputMaybe<Scalars['String']>;
  bank_account_number?: InputMaybe<Scalars['String']>;
  bank_name?: InputMaybe<Scalars['String']>;
  basic_salary?: InputMaybe<Scalars['numeric']>;
  basic_salary_base?: InputMaybe<Scalars['numeric']>;
  basic_salary_monthly?: InputMaybe<Scalars['numeric']>;
  birthday?: InputMaybe<Scalars['date']>;
  bonusdeductions?: InputMaybe<Bonusdeductions_Arr_Rel_Insert_Input>;
  brands_employees?: InputMaybe<Brands_Employees_Arr_Rel_Insert_Input>;
  cancel_onboarding_notes?: InputMaybe<Scalars['String']>;
  cancel_onboarding_reason?: InputMaybe<Scalars['Int']>;
  created_at?: InputMaybe<Scalars['timestamptz']>;
  department?: InputMaybe<Departments_Obj_Rel_Insert_Input>;
  department_id?: InputMaybe<Scalars['String']>;
  departments?: InputMaybe<Departments_Arr_Rel_Insert_Input>;
  departments_employees?: InputMaybe<Departments_Employees_Arr_Rel_Insert_Input>;
  departure_notes?: InputMaybe<Scalars['String']>;
  departure_type?: InputMaybe<Scalars['Int']>;
  email?: InputMaybe<Scalars['String']>;
  employee?: InputMaybe<Employees_Obj_Rel_Insert_Input>;
  employee_attachments?: InputMaybe<Employee_Attachments_Arr_Rel_Insert_Input>;
  employee_department_histories?: InputMaybe<Employee_Salary_Department_Arr_Rel_Insert_Input>;
  employee_form_status?: InputMaybe<Scalars['Int']>;
  employee_insurances?: InputMaybe<Employee_Insurance_Arr_Rel_Insert_Input>;
  employee_leaves?: InputMaybe<Employee_Leaves_Arr_Rel_Insert_Input>;
  employee_no?: InputMaybe<Scalars['String']>;
  employee_type?: InputMaybe<Scalars['smallint']>;
  employees?: InputMaybe<Employees_Arr_Rel_Insert_Input>;
  employees_roles?: InputMaybe<Employees_Roles_Arr_Rel_Insert_Input>;
  en_name?: InputMaybe<Scalars['String']>;
  entered_workforce_date?: InputMaybe<Scalars['date']>;
  ethnicity?: InputMaybe<Scalars['Int']>;
  family_address?: InputMaybe<Scalars['String']>;
  gender_id?: InputMaybe<Scalars['smallint']>;
  has_insurance?: InputMaybe<Scalars['Boolean']>;
  health_card_end?: InputMaybe<Scalars['date']>;
  health_card_image?: InputMaybe<Scalars['String']>;
  health_card_no?: InputMaybe<Scalars['String']>;
  health_card_start?: InputMaybe<Scalars['date']>;
  hire_date?: InputMaybe<Scalars['date']>;
  hukou_location?: InputMaybe<Scalars['String']>;
  hukou_type?: InputMaybe<Scalars['Int']>;
  id?: InputMaybe<Scalars['String']>;
  id_number?: InputMaybe<Scalars['String']>;
  id_photo?: InputMaybe<Scalars['String']>;
  id_photo_em_side?: InputMaybe<Scalars['String']>;
  id_photo_po_side?: InputMaybe<Scalars['String']>;
  id_type?: InputMaybe<Scalars['Int']>;
  insurance_funds?: InputMaybe<Insurance_Funds_Arr_Rel_Insert_Input>;
  insurance_start_date?: InputMaybe<Scalars['date']>;
  insurance_subsidy?: InputMaybe<Scalars['numeric']>;
  isAdmin?: InputMaybe<Scalars['smallint']>;
  is_tenant_manager?: InputMaybe<Scalars['smallint']>;
  is_three_days_leave?: InputMaybe<Scalars['smallint']>;
  job_title?: InputMaybe<Scalars['String']>;
  last_day?: InputMaybe<Scalars['date']>;
  manager_id?: InputMaybe<Scalars['String']>;
  marital_status?: InputMaybe<Scalars['smallint']>;
  medical_insurance?: InputMaybe<Scalars['Int']>;
  mobile?: InputMaybe<Scalars['String']>;
  monthlysalaries?: InputMaybe<Monthlysalary_Arr_Rel_Insert_Input>;
  name?: InputMaybe<Scalars['String']>;
  native_region?: InputMaybe<Scalars['json']>;
  notice_termination_agreement?: InputMaybe<Scalars['String']>;
  open_id?: InputMaybe<Scalars['String']>;
  overboard_note?: InputMaybe<Scalars['String']>;
  overtime_pay?: InputMaybe<Scalars['numeric']>;
  personal_email?: InputMaybe<Scalars['String']>;
  position_pay?: InputMaybe<Scalars['numeric']>;
  primary_emergency_contact?: InputMaybe<Scalars['json']>;
  probation_months?: InputMaybe<Scalars['Int']>;
  provident_fund_account?: InputMaybe<Scalars['String']>;
  resignation_handover?: InputMaybe<Scalars['String']>;
  salaryType?: InputMaybe<Salary_Types_Obj_Rel_Insert_Input>;
  salary_account?: InputMaybe<Scalars['String']>;
  salary_type?: InputMaybe<Scalars['String']>;
  salary_type_id?: InputMaybe<Scalars['String']>;
  screenshot?: InputMaybe<Scalars['String']>;
  social_security_account?: InputMaybe<Scalars['String']>;
  social_security_number?: InputMaybe<Scalars['Int']>;
  status?: InputMaybe<Scalars['smallint']>;
  store_employees?: InputMaybe<Store_Employee_Arr_Rel_Insert_Input>;
  updated_at?: InputMaybe<Scalars['timestamptz']>;
  user_id?: InputMaybe<Scalars['String']>;
  verification_code?: InputMaybe<Scalars['String']>;
  work_age_type?: InputMaybe<Scalars['String']>;
  work_location?: InputMaybe<Scalars['json']>;
};

/** aggregate max on columns */
export type Employees_Max_Fields = {
  __typename?: 'employees_max_fields';
  actual_conversion_time?: Maybe<Scalars['date']>;
  actual_overboard_time?: Maybe<Scalars['date']>;
  application?: Maybe<Scalars['Int']>;
  application_status?: Maybe<Scalars['Int']>;
  avatar?: Maybe<Scalars['String']>;
  bank_account_number?: Maybe<Scalars['String']>;
  bank_name?: Maybe<Scalars['String']>;
  basic_salary?: Maybe<Scalars['numeric']>;
  basic_salary_base?: Maybe<Scalars['numeric']>;
  basic_salary_monthly?: Maybe<Scalars['numeric']>;
  birthday?: Maybe<Scalars['date']>;
  /** A computed field, executes function "birthday_mm_dd" */
  birthday_mm_dd?: Maybe<Scalars['String']>;
  cancel_onboarding_notes?: Maybe<Scalars['String']>;
  cancel_onboarding_reason?: Maybe<Scalars['Int']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  department_id?: Maybe<Scalars['String']>;
  departure_notes?: Maybe<Scalars['String']>;
  departure_type?: Maybe<Scalars['Int']>;
  email?: Maybe<Scalars['String']>;
  employee_form_status?: Maybe<Scalars['Int']>;
  employee_no?: Maybe<Scalars['String']>;
  employee_type?: Maybe<Scalars['smallint']>;
  en_name?: Maybe<Scalars['String']>;
  entered_workforce_date?: Maybe<Scalars['date']>;
  ethnicity?: Maybe<Scalars['Int']>;
  family_address?: Maybe<Scalars['String']>;
  gender_id?: Maybe<Scalars['smallint']>;
  health_card_end?: Maybe<Scalars['date']>;
  health_card_image?: Maybe<Scalars['String']>;
  health_card_no?: Maybe<Scalars['String']>;
  health_card_start?: Maybe<Scalars['date']>;
  hire_date?: Maybe<Scalars['date']>;
  /** A computed field, executes function "hire_date_mm_dd" */
  hire_date_mm_dd?: Maybe<Scalars['String']>;
  hukou_location?: Maybe<Scalars['String']>;
  hukou_type?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['String']>;
  id_number?: Maybe<Scalars['String']>;
  id_photo?: Maybe<Scalars['String']>;
  id_photo_em_side?: Maybe<Scalars['String']>;
  id_photo_po_side?: Maybe<Scalars['String']>;
  id_type?: Maybe<Scalars['Int']>;
  insurance_start_date?: Maybe<Scalars['date']>;
  insurance_subsidy?: Maybe<Scalars['numeric']>;
  isAdmin?: Maybe<Scalars['smallint']>;
  is_tenant_manager?: Maybe<Scalars['smallint']>;
  is_three_days_leave?: Maybe<Scalars['smallint']>;
  job_title?: Maybe<Scalars['String']>;
  last_day?: Maybe<Scalars['date']>;
  manager_id?: Maybe<Scalars['String']>;
  marital_status?: Maybe<Scalars['smallint']>;
  medical_insurance?: Maybe<Scalars['Int']>;
  mobile?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  notice_termination_agreement?: Maybe<Scalars['String']>;
  open_id?: Maybe<Scalars['String']>;
  overboard_note?: Maybe<Scalars['String']>;
  overtime_pay?: Maybe<Scalars['numeric']>;
  personal_email?: Maybe<Scalars['String']>;
  position_pay?: Maybe<Scalars['numeric']>;
  probation_months?: Maybe<Scalars['Int']>;
  provident_fund_account?: Maybe<Scalars['String']>;
  resignation_handover?: Maybe<Scalars['String']>;
  salary_account?: Maybe<Scalars['String']>;
  salary_type?: Maybe<Scalars['String']>;
  salary_type_id?: Maybe<Scalars['String']>;
  screenshot?: Maybe<Scalars['String']>;
  social_security_account?: Maybe<Scalars['String']>;
  social_security_number?: Maybe<Scalars['Int']>;
  status?: Maybe<Scalars['smallint']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  user_id?: Maybe<Scalars['String']>;
  verification_code?: Maybe<Scalars['String']>;
  work_age_type?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "employees" */
export type Employees_Max_Order_By = {
  actual_conversion_time?: InputMaybe<Order_By>;
  actual_overboard_time?: InputMaybe<Order_By>;
  application?: InputMaybe<Order_By>;
  application_status?: InputMaybe<Order_By>;
  avatar?: InputMaybe<Order_By>;
  bank_account_number?: InputMaybe<Order_By>;
  bank_name?: InputMaybe<Order_By>;
  basic_salary?: InputMaybe<Order_By>;
  basic_salary_base?: InputMaybe<Order_By>;
  basic_salary_monthly?: InputMaybe<Order_By>;
  birthday?: InputMaybe<Order_By>;
  cancel_onboarding_notes?: InputMaybe<Order_By>;
  cancel_onboarding_reason?: InputMaybe<Order_By>;
  created_at?: InputMaybe<Order_By>;
  department_id?: InputMaybe<Order_By>;
  departure_notes?: InputMaybe<Order_By>;
  departure_type?: InputMaybe<Order_By>;
  email?: InputMaybe<Order_By>;
  employee_form_status?: InputMaybe<Order_By>;
  employee_no?: InputMaybe<Order_By>;
  employee_type?: InputMaybe<Order_By>;
  en_name?: InputMaybe<Order_By>;
  entered_workforce_date?: InputMaybe<Order_By>;
  ethnicity?: InputMaybe<Order_By>;
  family_address?: InputMaybe<Order_By>;
  gender_id?: InputMaybe<Order_By>;
  health_card_end?: InputMaybe<Order_By>;
  health_card_image?: InputMaybe<Order_By>;
  health_card_no?: InputMaybe<Order_By>;
  health_card_start?: InputMaybe<Order_By>;
  hire_date?: InputMaybe<Order_By>;
  hukou_location?: InputMaybe<Order_By>;
  hukou_type?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  id_number?: InputMaybe<Order_By>;
  id_photo?: InputMaybe<Order_By>;
  id_photo_em_side?: InputMaybe<Order_By>;
  id_photo_po_side?: InputMaybe<Order_By>;
  id_type?: InputMaybe<Order_By>;
  insurance_start_date?: InputMaybe<Order_By>;
  insurance_subsidy?: InputMaybe<Order_By>;
  isAdmin?: InputMaybe<Order_By>;
  is_tenant_manager?: InputMaybe<Order_By>;
  is_three_days_leave?: InputMaybe<Order_By>;
  job_title?: InputMaybe<Order_By>;
  last_day?: InputMaybe<Order_By>;
  manager_id?: InputMaybe<Order_By>;
  marital_status?: InputMaybe<Order_By>;
  medical_insurance?: InputMaybe<Order_By>;
  mobile?: InputMaybe<Order_By>;
  name?: InputMaybe<Order_By>;
  notice_termination_agreement?: InputMaybe<Order_By>;
  open_id?: InputMaybe<Order_By>;
  overboard_note?: InputMaybe<Order_By>;
  overtime_pay?: InputMaybe<Order_By>;
  personal_email?: InputMaybe<Order_By>;
  position_pay?: InputMaybe<Order_By>;
  probation_months?: InputMaybe<Order_By>;
  provident_fund_account?: InputMaybe<Order_By>;
  resignation_handover?: InputMaybe<Order_By>;
  salary_account?: InputMaybe<Order_By>;
  salary_type?: InputMaybe<Order_By>;
  salary_type_id?: InputMaybe<Order_By>;
  screenshot?: InputMaybe<Order_By>;
  social_security_account?: InputMaybe<Order_By>;
  social_security_number?: InputMaybe<Order_By>;
  status?: InputMaybe<Order_By>;
  updated_at?: InputMaybe<Order_By>;
  user_id?: InputMaybe<Order_By>;
  verification_code?: InputMaybe<Order_By>;
  work_age_type?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type Employees_Min_Fields = {
  __typename?: 'employees_min_fields';
  actual_conversion_time?: Maybe<Scalars['date']>;
  actual_overboard_time?: Maybe<Scalars['date']>;
  application?: Maybe<Scalars['Int']>;
  application_status?: Maybe<Scalars['Int']>;
  avatar?: Maybe<Scalars['String']>;
  bank_account_number?: Maybe<Scalars['String']>;
  bank_name?: Maybe<Scalars['String']>;
  basic_salary?: Maybe<Scalars['numeric']>;
  basic_salary_base?: Maybe<Scalars['numeric']>;
  basic_salary_monthly?: Maybe<Scalars['numeric']>;
  birthday?: Maybe<Scalars['date']>;
  /** A computed field, executes function "birthday_mm_dd" */
  birthday_mm_dd?: Maybe<Scalars['String']>;
  cancel_onboarding_notes?: Maybe<Scalars['String']>;
  cancel_onboarding_reason?: Maybe<Scalars['Int']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  department_id?: Maybe<Scalars['String']>;
  departure_notes?: Maybe<Scalars['String']>;
  departure_type?: Maybe<Scalars['Int']>;
  email?: Maybe<Scalars['String']>;
  employee_form_status?: Maybe<Scalars['Int']>;
  employee_no?: Maybe<Scalars['String']>;
  employee_type?: Maybe<Scalars['smallint']>;
  en_name?: Maybe<Scalars['String']>;
  entered_workforce_date?: Maybe<Scalars['date']>;
  ethnicity?: Maybe<Scalars['Int']>;
  family_address?: Maybe<Scalars['String']>;
  gender_id?: Maybe<Scalars['smallint']>;
  health_card_end?: Maybe<Scalars['date']>;
  health_card_image?: Maybe<Scalars['String']>;
  health_card_no?: Maybe<Scalars['String']>;
  health_card_start?: Maybe<Scalars['date']>;
  hire_date?: Maybe<Scalars['date']>;
  /** A computed field, executes function "hire_date_mm_dd" */
  hire_date_mm_dd?: Maybe<Scalars['String']>;
  hukou_location?: Maybe<Scalars['String']>;
  hukou_type?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['String']>;
  id_number?: Maybe<Scalars['String']>;
  id_photo?: Maybe<Scalars['String']>;
  id_photo_em_side?: Maybe<Scalars['String']>;
  id_photo_po_side?: Maybe<Scalars['String']>;
  id_type?: Maybe<Scalars['Int']>;
  insurance_start_date?: Maybe<Scalars['date']>;
  insurance_subsidy?: Maybe<Scalars['numeric']>;
  isAdmin?: Maybe<Scalars['smallint']>;
  is_tenant_manager?: Maybe<Scalars['smallint']>;
  is_three_days_leave?: Maybe<Scalars['smallint']>;
  job_title?: Maybe<Scalars['String']>;
  last_day?: Maybe<Scalars['date']>;
  manager_id?: Maybe<Scalars['String']>;
  marital_status?: Maybe<Scalars['smallint']>;
  medical_insurance?: Maybe<Scalars['Int']>;
  mobile?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  notice_termination_agreement?: Maybe<Scalars['String']>;
  open_id?: Maybe<Scalars['String']>;
  overboard_note?: Maybe<Scalars['String']>;
  overtime_pay?: Maybe<Scalars['numeric']>;
  personal_email?: Maybe<Scalars['String']>;
  position_pay?: Maybe<Scalars['numeric']>;
  probation_months?: Maybe<Scalars['Int']>;
  provident_fund_account?: Maybe<Scalars['String']>;
  resignation_handover?: Maybe<Scalars['String']>;
  salary_account?: Maybe<Scalars['String']>;
  salary_type?: Maybe<Scalars['String']>;
  salary_type_id?: Maybe<Scalars['String']>;
  screenshot?: Maybe<Scalars['String']>;
  social_security_account?: Maybe<Scalars['String']>;
  social_security_number?: Maybe<Scalars['Int']>;
  status?: Maybe<Scalars['smallint']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  user_id?: Maybe<Scalars['String']>;
  verification_code?: Maybe<Scalars['String']>;
  work_age_type?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "employees" */
export type Employees_Min_Order_By = {
  actual_conversion_time?: InputMaybe<Order_By>;
  actual_overboard_time?: InputMaybe<Order_By>;
  application?: InputMaybe<Order_By>;
  application_status?: InputMaybe<Order_By>;
  avatar?: InputMaybe<Order_By>;
  bank_account_number?: InputMaybe<Order_By>;
  bank_name?: InputMaybe<Order_By>;
  basic_salary?: InputMaybe<Order_By>;
  basic_salary_base?: InputMaybe<Order_By>;
  basic_salary_monthly?: InputMaybe<Order_By>;
  birthday?: InputMaybe<Order_By>;
  cancel_onboarding_notes?: InputMaybe<Order_By>;
  cancel_onboarding_reason?: InputMaybe<Order_By>;
  created_at?: InputMaybe<Order_By>;
  department_id?: InputMaybe<Order_By>;
  departure_notes?: InputMaybe<Order_By>;
  departure_type?: InputMaybe<Order_By>;
  email?: InputMaybe<Order_By>;
  employee_form_status?: InputMaybe<Order_By>;
  employee_no?: InputMaybe<Order_By>;
  employee_type?: InputMaybe<Order_By>;
  en_name?: InputMaybe<Order_By>;
  entered_workforce_date?: InputMaybe<Order_By>;
  ethnicity?: InputMaybe<Order_By>;
  family_address?: InputMaybe<Order_By>;
  gender_id?: InputMaybe<Order_By>;
  health_card_end?: InputMaybe<Order_By>;
  health_card_image?: InputMaybe<Order_By>;
  health_card_no?: InputMaybe<Order_By>;
  health_card_start?: InputMaybe<Order_By>;
  hire_date?: InputMaybe<Order_By>;
  hukou_location?: InputMaybe<Order_By>;
  hukou_type?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  id_number?: InputMaybe<Order_By>;
  id_photo?: InputMaybe<Order_By>;
  id_photo_em_side?: InputMaybe<Order_By>;
  id_photo_po_side?: InputMaybe<Order_By>;
  id_type?: InputMaybe<Order_By>;
  insurance_start_date?: InputMaybe<Order_By>;
  insurance_subsidy?: InputMaybe<Order_By>;
  isAdmin?: InputMaybe<Order_By>;
  is_tenant_manager?: InputMaybe<Order_By>;
  is_three_days_leave?: InputMaybe<Order_By>;
  job_title?: InputMaybe<Order_By>;
  last_day?: InputMaybe<Order_By>;
  manager_id?: InputMaybe<Order_By>;
  marital_status?: InputMaybe<Order_By>;
  medical_insurance?: InputMaybe<Order_By>;
  mobile?: InputMaybe<Order_By>;
  name?: InputMaybe<Order_By>;
  notice_termination_agreement?: InputMaybe<Order_By>;
  open_id?: InputMaybe<Order_By>;
  overboard_note?: InputMaybe<Order_By>;
  overtime_pay?: InputMaybe<Order_By>;
  personal_email?: InputMaybe<Order_By>;
  position_pay?: InputMaybe<Order_By>;
  probation_months?: InputMaybe<Order_By>;
  provident_fund_account?: InputMaybe<Order_By>;
  resignation_handover?: InputMaybe<Order_By>;
  salary_account?: InputMaybe<Order_By>;
  salary_type?: InputMaybe<Order_By>;
  salary_type_id?: InputMaybe<Order_By>;
  screenshot?: InputMaybe<Order_By>;
  social_security_account?: InputMaybe<Order_By>;
  social_security_number?: InputMaybe<Order_By>;
  status?: InputMaybe<Order_By>;
  updated_at?: InputMaybe<Order_By>;
  user_id?: InputMaybe<Order_By>;
  verification_code?: InputMaybe<Order_By>;
  work_age_type?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "employees" */
export type Employees_Mutation_Response = {
  __typename?: 'employees_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Employees>;
};

/** input type for inserting object relation for remote table "employees" */
export type Employees_Obj_Rel_Insert_Input = {
  data: Employees_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<Employees_On_Conflict>;
};

/** on_conflict condition type for table "employees" */
export type Employees_On_Conflict = {
  constraint: Employees_Constraint;
  update_columns?: Array<Employees_Update_Column>;
  where?: InputMaybe<Employees_Bool_Exp>;
};

/** Ordering options when selecting data from "employees". */
export type Employees_Order_By = {
  actual_conversion_time?: InputMaybe<Order_By>;
  actual_overboard_time?: InputMaybe<Order_By>;
  application?: InputMaybe<Order_By>;
  application_status?: InputMaybe<Order_By>;
  attendance_group_leaders_aggregate?: InputMaybe<Attendance_Group_Leaders_Aggregate_Order_By>;
  attendance_group_subleaders_aggregate?: InputMaybe<Attendance_Group_Subleaders_Aggregate_Order_By>;
  attendances_aggregate?: InputMaybe<Attendance_Aggregate_Order_By>;
  avatar?: InputMaybe<Order_By>;
  bank_account_number?: InputMaybe<Order_By>;
  bank_name?: InputMaybe<Order_By>;
  basic_salary?: InputMaybe<Order_By>;
  basic_salary_base?: InputMaybe<Order_By>;
  basic_salary_monthly?: InputMaybe<Order_By>;
  birthday?: InputMaybe<Order_By>;
  birthday_mm_dd?: InputMaybe<Order_By>;
  bonusdeductions_aggregate?: InputMaybe<Bonusdeductions_Aggregate_Order_By>;
  brands_employees_aggregate?: InputMaybe<Brands_Employees_Aggregate_Order_By>;
  cancel_onboarding_notes?: InputMaybe<Order_By>;
  cancel_onboarding_reason?: InputMaybe<Order_By>;
  created_at?: InputMaybe<Order_By>;
  department?: InputMaybe<Departments_Order_By>;
  department_id?: InputMaybe<Order_By>;
  departments_aggregate?: InputMaybe<Departments_Aggregate_Order_By>;
  departments_employees_aggregate?: InputMaybe<Departments_Employees_Aggregate_Order_By>;
  departure_notes?: InputMaybe<Order_By>;
  departure_type?: InputMaybe<Order_By>;
  email?: InputMaybe<Order_By>;
  employee?: InputMaybe<Employees_Order_By>;
  employee_attachments_aggregate?: InputMaybe<Employee_Attachments_Aggregate_Order_By>;
  employee_department_histories_aggregate?: InputMaybe<Employee_Salary_Department_Aggregate_Order_By>;
  employee_form_status?: InputMaybe<Order_By>;
  employee_insurances_aggregate?: InputMaybe<Employee_Insurance_Aggregate_Order_By>;
  employee_leaves_aggregate?: InputMaybe<Employee_Leaves_Aggregate_Order_By>;
  employee_no?: InputMaybe<Order_By>;
  employee_type?: InputMaybe<Order_By>;
  employees_aggregate?: InputMaybe<Employees_Aggregate_Order_By>;
  employees_roles_aggregate?: InputMaybe<Employees_Roles_Aggregate_Order_By>;
  en_name?: InputMaybe<Order_By>;
  entered_workforce_date?: InputMaybe<Order_By>;
  ethnicity?: InputMaybe<Order_By>;
  family_address?: InputMaybe<Order_By>;
  gender_id?: InputMaybe<Order_By>;
  has_insurance?: InputMaybe<Order_By>;
  health_card_end?: InputMaybe<Order_By>;
  health_card_image?: InputMaybe<Order_By>;
  health_card_no?: InputMaybe<Order_By>;
  health_card_start?: InputMaybe<Order_By>;
  hire_date?: InputMaybe<Order_By>;
  hire_date_mm_dd?: InputMaybe<Order_By>;
  hukou_location?: InputMaybe<Order_By>;
  hukou_type?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  id_number?: InputMaybe<Order_By>;
  id_photo?: InputMaybe<Order_By>;
  id_photo_em_side?: InputMaybe<Order_By>;
  id_photo_po_side?: InputMaybe<Order_By>;
  id_type?: InputMaybe<Order_By>;
  insurance_funds_aggregate?: InputMaybe<Insurance_Funds_Aggregate_Order_By>;
  insurance_start_date?: InputMaybe<Order_By>;
  insurance_subsidy?: InputMaybe<Order_By>;
  isAdmin?: InputMaybe<Order_By>;
  is_tenant_manager?: InputMaybe<Order_By>;
  is_three_days_leave?: InputMaybe<Order_By>;
  job_title?: InputMaybe<Order_By>;
  last_day?: InputMaybe<Order_By>;
  manager_id?: InputMaybe<Order_By>;
  marital_status?: InputMaybe<Order_By>;
  medical_insurance?: InputMaybe<Order_By>;
  mobile?: InputMaybe<Order_By>;
  monthlysalaries_aggregate?: InputMaybe<Monthlysalary_Aggregate_Order_By>;
  name?: InputMaybe<Order_By>;
  native_region?: InputMaybe<Order_By>;
  notice_termination_agreement?: InputMaybe<Order_By>;
  open_id?: InputMaybe<Order_By>;
  overboard_note?: InputMaybe<Order_By>;
  overtime_pay?: InputMaybe<Order_By>;
  personal_email?: InputMaybe<Order_By>;
  position_pay?: InputMaybe<Order_By>;
  primary_emergency_contact?: InputMaybe<Order_By>;
  probation_months?: InputMaybe<Order_By>;
  provident_fund_account?: InputMaybe<Order_By>;
  resignation_handover?: InputMaybe<Order_By>;
  salaryType?: InputMaybe<Salary_Types_Order_By>;
  salary_account?: InputMaybe<Order_By>;
  salary_type?: InputMaybe<Order_By>;
  salary_type_id?: InputMaybe<Order_By>;
  screenshot?: InputMaybe<Order_By>;
  social_security_account?: InputMaybe<Order_By>;
  social_security_number?: InputMaybe<Order_By>;
  status?: InputMaybe<Order_By>;
  store_employees_aggregate?: InputMaybe<Store_Employee_Aggregate_Order_By>;
  updated_at?: InputMaybe<Order_By>;
  user_id?: InputMaybe<Order_By>;
  verification_code?: InputMaybe<Order_By>;
  work_age_type?: InputMaybe<Order_By>;
  work_location?: InputMaybe<Order_By>;
};

/** primary key columns input for table: employees */
export type Employees_Pk_Columns_Input = {
  id: Scalars['String'];
};

/** columns and relationships of "employees_roles" */
export type Employees_Roles = {
  __typename?: 'employees_roles';
  /** An object relationship */
  employee: Employees;
  employee_id: Scalars['String'];
  /** An object relationship */
  role: Roles;
  role_id: Scalars['String'];
};

/** aggregated selection of "employees_roles" */
export type Employees_Roles_Aggregate = {
  __typename?: 'employees_roles_aggregate';
  aggregate?: Maybe<Employees_Roles_Aggregate_Fields>;
  nodes: Array<Employees_Roles>;
};

export type Employees_Roles_Aggregate_Bool_Exp = {
  count?: InputMaybe<Employees_Roles_Aggregate_Bool_Exp_Count>;
};

export type Employees_Roles_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<Employees_Roles_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<Employees_Roles_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "employees_roles" */
export type Employees_Roles_Aggregate_Fields = {
  __typename?: 'employees_roles_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Employees_Roles_Max_Fields>;
  min?: Maybe<Employees_Roles_Min_Fields>;
};


/** aggregate fields of "employees_roles" */
export type Employees_Roles_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Employees_Roles_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "employees_roles" */
export type Employees_Roles_Aggregate_Order_By = {
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<Employees_Roles_Max_Order_By>;
  min?: InputMaybe<Employees_Roles_Min_Order_By>;
};

/** input type for inserting array relation for remote table "employees_roles" */
export type Employees_Roles_Arr_Rel_Insert_Input = {
  data: Array<Employees_Roles_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<Employees_Roles_On_Conflict>;
};

/** Boolean expression to filter rows from the table "employees_roles". All fields are combined with a logical 'AND'. */
export type Employees_Roles_Bool_Exp = {
  _and?: InputMaybe<Array<Employees_Roles_Bool_Exp>>;
  _not?: InputMaybe<Employees_Roles_Bool_Exp>;
  _or?: InputMaybe<Array<Employees_Roles_Bool_Exp>>;
  employee?: InputMaybe<Employees_Bool_Exp>;
  employee_id?: InputMaybe<String_Comparison_Exp>;
  role?: InputMaybe<Roles_Bool_Exp>;
  role_id?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "employees_roles" */
export enum Employees_Roles_Constraint {
  /** unique or primary key constraint on columns "role_id", "employee_id" */
  EmployeeRolesPrimary17 = 'employee_rolesPRIMARY17',
  /** unique or primary key constraint on columns "role_id", "employee_id" */
  UniqueCombinationIdx25 = 'unique_combination_idx25'
}

/** input type for inserting data into table "employees_roles" */
export type Employees_Roles_Insert_Input = {
  employee?: InputMaybe<Employees_Obj_Rel_Insert_Input>;
  employee_id?: InputMaybe<Scalars['String']>;
  role?: InputMaybe<Roles_Obj_Rel_Insert_Input>;
  role_id?: InputMaybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Employees_Roles_Max_Fields = {
  __typename?: 'employees_roles_max_fields';
  employee_id?: Maybe<Scalars['String']>;
  role_id?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "employees_roles" */
export type Employees_Roles_Max_Order_By = {
  employee_id?: InputMaybe<Order_By>;
  role_id?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type Employees_Roles_Min_Fields = {
  __typename?: 'employees_roles_min_fields';
  employee_id?: Maybe<Scalars['String']>;
  role_id?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "employees_roles" */
export type Employees_Roles_Min_Order_By = {
  employee_id?: InputMaybe<Order_By>;
  role_id?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "employees_roles" */
export type Employees_Roles_Mutation_Response = {
  __typename?: 'employees_roles_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Employees_Roles>;
};

/** on_conflict condition type for table "employees_roles" */
export type Employees_Roles_On_Conflict = {
  constraint: Employees_Roles_Constraint;
  update_columns?: Array<Employees_Roles_Update_Column>;
  where?: InputMaybe<Employees_Roles_Bool_Exp>;
};

/** Ordering options when selecting data from "employees_roles". */
export type Employees_Roles_Order_By = {
  employee?: InputMaybe<Employees_Order_By>;
  employee_id?: InputMaybe<Order_By>;
  role?: InputMaybe<Roles_Order_By>;
  role_id?: InputMaybe<Order_By>;
};

/** primary key columns input for table: employees_roles */
export type Employees_Roles_Pk_Columns_Input = {
  employee_id: Scalars['String'];
  role_id: Scalars['String'];
};

/** select columns of table "employees_roles" */
export enum Employees_Roles_Select_Column {
  /** column name */
  EmployeeId = 'employee_id',
  /** column name */
  RoleId = 'role_id'
}

/** input type for updating data in table "employees_roles" */
export type Employees_Roles_Set_Input = {
  employee_id?: InputMaybe<Scalars['String']>;
  role_id?: InputMaybe<Scalars['String']>;
};

/** Streaming cursor of the table "employees_roles" */
export type Employees_Roles_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Employees_Roles_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Employees_Roles_Stream_Cursor_Value_Input = {
  employee_id?: InputMaybe<Scalars['String']>;
  role_id?: InputMaybe<Scalars['String']>;
};

/** update columns of table "employees_roles" */
export enum Employees_Roles_Update_Column {
  /** column name */
  EmployeeId = 'employee_id',
  /** column name */
  RoleId = 'role_id'
}

export type Employees_Roles_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Employees_Roles_Set_Input>;
  /** filter the rows which have to be updated */
  where: Employees_Roles_Bool_Exp;
};

/** select columns of table "employees" */
export enum Employees_Select_Column {
  /** column name */
  ActualConversionTime = 'actual_conversion_time',
  /** column name */
  ActualOverboardTime = 'actual_overboard_time',
  /** column name */
  Application = 'application',
  /** column name */
  ApplicationStatus = 'application_status',
  /** column name */
  Avatar = 'avatar',
  /** column name */
  BankAccountNumber = 'bank_account_number',
  /** column name */
  BankName = 'bank_name',
  /** column name */
  BasicSalary = 'basic_salary',
  /** column name */
  BasicSalaryBase = 'basic_salary_base',
  /** column name */
  BasicSalaryMonthly = 'basic_salary_monthly',
  /** column name */
  Birthday = 'birthday',
  /** column name */
  CancelOnboardingNotes = 'cancel_onboarding_notes',
  /** column name */
  CancelOnboardingReason = 'cancel_onboarding_reason',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  DepartmentId = 'department_id',
  /** column name */
  DepartureNotes = 'departure_notes',
  /** column name */
  DepartureType = 'departure_type',
  /** column name */
  Email = 'email',
  /** column name */
  EmployeeFormStatus = 'employee_form_status',
  /** column name */
  EmployeeNo = 'employee_no',
  /** column name */
  EmployeeType = 'employee_type',
  /** column name */
  EnName = 'en_name',
  /** column name */
  EnteredWorkforceDate = 'entered_workforce_date',
  /** column name */
  Ethnicity = 'ethnicity',
  /** column name */
  FamilyAddress = 'family_address',
  /** column name */
  GenderId = 'gender_id',
  /** column name */
  HasInsurance = 'has_insurance',
  /** column name */
  HealthCardEnd = 'health_card_end',
  /** column name */
  HealthCardImage = 'health_card_image',
  /** column name */
  HealthCardNo = 'health_card_no',
  /** column name */
  HealthCardStart = 'health_card_start',
  /** column name */
  HireDate = 'hire_date',
  /** column name */
  HukouLocation = 'hukou_location',
  /** column name */
  HukouType = 'hukou_type',
  /** column name */
  Id = 'id',
  /** column name */
  IdNumber = 'id_number',
  /** column name */
  IdPhoto = 'id_photo',
  /** column name */
  IdPhotoEmSide = 'id_photo_em_side',
  /** column name */
  IdPhotoPoSide = 'id_photo_po_side',
  /** column name */
  IdType = 'id_type',
  /** column name */
  InsuranceStartDate = 'insurance_start_date',
  /** column name */
  InsuranceSubsidy = 'insurance_subsidy',
  /** column name */
  IsAdmin = 'isAdmin',
  /** column name */
  IsTenantManager = 'is_tenant_manager',
  /** column name */
  IsThreeDaysLeave = 'is_three_days_leave',
  /** column name */
  JobTitle = 'job_title',
  /** column name */
  LastDay = 'last_day',
  /** column name */
  ManagerId = 'manager_id',
  /** column name */
  MaritalStatus = 'marital_status',
  /** column name */
  MedicalInsurance = 'medical_insurance',
  /** column name */
  Mobile = 'mobile',
  /** column name */
  Name = 'name',
  /** column name */
  NativeRegion = 'native_region',
  /** column name */
  NoticeTerminationAgreement = 'notice_termination_agreement',
  /** column name */
  OpenId = 'open_id',
  /** column name */
  OverboardNote = 'overboard_note',
  /** column name */
  OvertimePay = 'overtime_pay',
  /** column name */
  PersonalEmail = 'personal_email',
  /** column name */
  PositionPay = 'position_pay',
  /** column name */
  PrimaryEmergencyContact = 'primary_emergency_contact',
  /** column name */
  ProbationMonths = 'probation_months',
  /** column name */
  ProvidentFundAccount = 'provident_fund_account',
  /** column name */
  ResignationHandover = 'resignation_handover',
  /** column name */
  SalaryAccount = 'salary_account',
  /** column name */
  SalaryType = 'salary_type',
  /** column name */
  SalaryTypeId = 'salary_type_id',
  /** column name */
  Screenshot = 'screenshot',
  /** column name */
  SocialSecurityAccount = 'social_security_account',
  /** column name */
  SocialSecurityNumber = 'social_security_number',
  /** column name */
  Status = 'status',
  /** column name */
  UpdatedAt = 'updated_at',
  /** column name */
  UserId = 'user_id',
  /** column name */
  VerificationCode = 'verification_code',
  /** column name */
  WorkAgeType = 'work_age_type',
  /** column name */
  WorkLocation = 'work_location'
}

/** select "employees_aggregate_bool_exp_bool_and_arguments_columns" columns of table "employees" */
export enum Employees_Select_Column_Employees_Aggregate_Bool_Exp_Bool_And_Arguments_Columns {
  /** column name */
  HasInsurance = 'has_insurance'
}

/** select "employees_aggregate_bool_exp_bool_or_arguments_columns" columns of table "employees" */
export enum Employees_Select_Column_Employees_Aggregate_Bool_Exp_Bool_Or_Arguments_Columns {
  /** column name */
  HasInsurance = 'has_insurance'
}

/** input type for updating data in table "employees" */
export type Employees_Set_Input = {
  actual_conversion_time?: InputMaybe<Scalars['date']>;
  actual_overboard_time?: InputMaybe<Scalars['date']>;
  application?: InputMaybe<Scalars['Int']>;
  application_status?: InputMaybe<Scalars['Int']>;
  avatar?: InputMaybe<Scalars['String']>;
  bank_account_number?: InputMaybe<Scalars['String']>;
  bank_name?: InputMaybe<Scalars['String']>;
  basic_salary?: InputMaybe<Scalars['numeric']>;
  basic_salary_base?: InputMaybe<Scalars['numeric']>;
  basic_salary_monthly?: InputMaybe<Scalars['numeric']>;
  birthday?: InputMaybe<Scalars['date']>;
  cancel_onboarding_notes?: InputMaybe<Scalars['String']>;
  cancel_onboarding_reason?: InputMaybe<Scalars['Int']>;
  created_at?: InputMaybe<Scalars['timestamptz']>;
  department_id?: InputMaybe<Scalars['String']>;
  departure_notes?: InputMaybe<Scalars['String']>;
  departure_type?: InputMaybe<Scalars['Int']>;
  email?: InputMaybe<Scalars['String']>;
  employee_form_status?: InputMaybe<Scalars['Int']>;
  employee_no?: InputMaybe<Scalars['String']>;
  employee_type?: InputMaybe<Scalars['smallint']>;
  en_name?: InputMaybe<Scalars['String']>;
  entered_workforce_date?: InputMaybe<Scalars['date']>;
  ethnicity?: InputMaybe<Scalars['Int']>;
  family_address?: InputMaybe<Scalars['String']>;
  gender_id?: InputMaybe<Scalars['smallint']>;
  has_insurance?: InputMaybe<Scalars['Boolean']>;
  health_card_end?: InputMaybe<Scalars['date']>;
  health_card_image?: InputMaybe<Scalars['String']>;
  health_card_no?: InputMaybe<Scalars['String']>;
  health_card_start?: InputMaybe<Scalars['date']>;
  hire_date?: InputMaybe<Scalars['date']>;
  hukou_location?: InputMaybe<Scalars['String']>;
  hukou_type?: InputMaybe<Scalars['Int']>;
  id?: InputMaybe<Scalars['String']>;
  id_number?: InputMaybe<Scalars['String']>;
  id_photo?: InputMaybe<Scalars['String']>;
  id_photo_em_side?: InputMaybe<Scalars['String']>;
  id_photo_po_side?: InputMaybe<Scalars['String']>;
  id_type?: InputMaybe<Scalars['Int']>;
  insurance_start_date?: InputMaybe<Scalars['date']>;
  insurance_subsidy?: InputMaybe<Scalars['numeric']>;
  isAdmin?: InputMaybe<Scalars['smallint']>;
  is_tenant_manager?: InputMaybe<Scalars['smallint']>;
  is_three_days_leave?: InputMaybe<Scalars['smallint']>;
  job_title?: InputMaybe<Scalars['String']>;
  last_day?: InputMaybe<Scalars['date']>;
  manager_id?: InputMaybe<Scalars['String']>;
  marital_status?: InputMaybe<Scalars['smallint']>;
  medical_insurance?: InputMaybe<Scalars['Int']>;
  mobile?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  native_region?: InputMaybe<Scalars['json']>;
  notice_termination_agreement?: InputMaybe<Scalars['String']>;
  open_id?: InputMaybe<Scalars['String']>;
  overboard_note?: InputMaybe<Scalars['String']>;
  overtime_pay?: InputMaybe<Scalars['numeric']>;
  personal_email?: InputMaybe<Scalars['String']>;
  position_pay?: InputMaybe<Scalars['numeric']>;
  primary_emergency_contact?: InputMaybe<Scalars['json']>;
  probation_months?: InputMaybe<Scalars['Int']>;
  provident_fund_account?: InputMaybe<Scalars['String']>;
  resignation_handover?: InputMaybe<Scalars['String']>;
  salary_account?: InputMaybe<Scalars['String']>;
  salary_type?: InputMaybe<Scalars['String']>;
  salary_type_id?: InputMaybe<Scalars['String']>;
  screenshot?: InputMaybe<Scalars['String']>;
  social_security_account?: InputMaybe<Scalars['String']>;
  social_security_number?: InputMaybe<Scalars['Int']>;
  status?: InputMaybe<Scalars['smallint']>;
  updated_at?: InputMaybe<Scalars['timestamptz']>;
  user_id?: InputMaybe<Scalars['String']>;
  verification_code?: InputMaybe<Scalars['String']>;
  work_age_type?: InputMaybe<Scalars['String']>;
  work_location?: InputMaybe<Scalars['json']>;
};

/** aggregate stddev on columns */
export type Employees_Stddev_Fields = {
  __typename?: 'employees_stddev_fields';
  application?: Maybe<Scalars['Float']>;
  application_status?: Maybe<Scalars['Float']>;
  basic_salary?: Maybe<Scalars['Float']>;
  basic_salary_base?: Maybe<Scalars['Float']>;
  basic_salary_monthly?: Maybe<Scalars['Float']>;
  cancel_onboarding_reason?: Maybe<Scalars['Float']>;
  departure_type?: Maybe<Scalars['Float']>;
  employee_form_status?: Maybe<Scalars['Float']>;
  employee_type?: Maybe<Scalars['Float']>;
  ethnicity?: Maybe<Scalars['Float']>;
  gender_id?: Maybe<Scalars['Float']>;
  hukou_type?: Maybe<Scalars['Float']>;
  id_type?: Maybe<Scalars['Float']>;
  insurance_subsidy?: Maybe<Scalars['Float']>;
  isAdmin?: Maybe<Scalars['Float']>;
  is_tenant_manager?: Maybe<Scalars['Float']>;
  is_three_days_leave?: Maybe<Scalars['Float']>;
  marital_status?: Maybe<Scalars['Float']>;
  medical_insurance?: Maybe<Scalars['Float']>;
  overtime_pay?: Maybe<Scalars['Float']>;
  position_pay?: Maybe<Scalars['Float']>;
  probation_months?: Maybe<Scalars['Float']>;
  social_security_number?: Maybe<Scalars['Float']>;
  status?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "employees" */
export type Employees_Stddev_Order_By = {
  application?: InputMaybe<Order_By>;
  application_status?: InputMaybe<Order_By>;
  basic_salary?: InputMaybe<Order_By>;
  basic_salary_base?: InputMaybe<Order_By>;
  basic_salary_monthly?: InputMaybe<Order_By>;
  cancel_onboarding_reason?: InputMaybe<Order_By>;
  departure_type?: InputMaybe<Order_By>;
  employee_form_status?: InputMaybe<Order_By>;
  employee_type?: InputMaybe<Order_By>;
  ethnicity?: InputMaybe<Order_By>;
  gender_id?: InputMaybe<Order_By>;
  hukou_type?: InputMaybe<Order_By>;
  id_type?: InputMaybe<Order_By>;
  insurance_subsidy?: InputMaybe<Order_By>;
  isAdmin?: InputMaybe<Order_By>;
  is_tenant_manager?: InputMaybe<Order_By>;
  is_three_days_leave?: InputMaybe<Order_By>;
  marital_status?: InputMaybe<Order_By>;
  medical_insurance?: InputMaybe<Order_By>;
  overtime_pay?: InputMaybe<Order_By>;
  position_pay?: InputMaybe<Order_By>;
  probation_months?: InputMaybe<Order_By>;
  social_security_number?: InputMaybe<Order_By>;
  status?: InputMaybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Employees_Stddev_Pop_Fields = {
  __typename?: 'employees_stddev_pop_fields';
  application?: Maybe<Scalars['Float']>;
  application_status?: Maybe<Scalars['Float']>;
  basic_salary?: Maybe<Scalars['Float']>;
  basic_salary_base?: Maybe<Scalars['Float']>;
  basic_salary_monthly?: Maybe<Scalars['Float']>;
  cancel_onboarding_reason?: Maybe<Scalars['Float']>;
  departure_type?: Maybe<Scalars['Float']>;
  employee_form_status?: Maybe<Scalars['Float']>;
  employee_type?: Maybe<Scalars['Float']>;
  ethnicity?: Maybe<Scalars['Float']>;
  gender_id?: Maybe<Scalars['Float']>;
  hukou_type?: Maybe<Scalars['Float']>;
  id_type?: Maybe<Scalars['Float']>;
  insurance_subsidy?: Maybe<Scalars['Float']>;
  isAdmin?: Maybe<Scalars['Float']>;
  is_tenant_manager?: Maybe<Scalars['Float']>;
  is_three_days_leave?: Maybe<Scalars['Float']>;
  marital_status?: Maybe<Scalars['Float']>;
  medical_insurance?: Maybe<Scalars['Float']>;
  overtime_pay?: Maybe<Scalars['Float']>;
  position_pay?: Maybe<Scalars['Float']>;
  probation_months?: Maybe<Scalars['Float']>;
  social_security_number?: Maybe<Scalars['Float']>;
  status?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "employees" */
export type Employees_Stddev_Pop_Order_By = {
  application?: InputMaybe<Order_By>;
  application_status?: InputMaybe<Order_By>;
  basic_salary?: InputMaybe<Order_By>;
  basic_salary_base?: InputMaybe<Order_By>;
  basic_salary_monthly?: InputMaybe<Order_By>;
  cancel_onboarding_reason?: InputMaybe<Order_By>;
  departure_type?: InputMaybe<Order_By>;
  employee_form_status?: InputMaybe<Order_By>;
  employee_type?: InputMaybe<Order_By>;
  ethnicity?: InputMaybe<Order_By>;
  gender_id?: InputMaybe<Order_By>;
  hukou_type?: InputMaybe<Order_By>;
  id_type?: InputMaybe<Order_By>;
  insurance_subsidy?: InputMaybe<Order_By>;
  isAdmin?: InputMaybe<Order_By>;
  is_tenant_manager?: InputMaybe<Order_By>;
  is_three_days_leave?: InputMaybe<Order_By>;
  marital_status?: InputMaybe<Order_By>;
  medical_insurance?: InputMaybe<Order_By>;
  overtime_pay?: InputMaybe<Order_By>;
  position_pay?: InputMaybe<Order_By>;
  probation_months?: InputMaybe<Order_By>;
  social_security_number?: InputMaybe<Order_By>;
  status?: InputMaybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Employees_Stddev_Samp_Fields = {
  __typename?: 'employees_stddev_samp_fields';
  application?: Maybe<Scalars['Float']>;
  application_status?: Maybe<Scalars['Float']>;
  basic_salary?: Maybe<Scalars['Float']>;
  basic_salary_base?: Maybe<Scalars['Float']>;
  basic_salary_monthly?: Maybe<Scalars['Float']>;
  cancel_onboarding_reason?: Maybe<Scalars['Float']>;
  departure_type?: Maybe<Scalars['Float']>;
  employee_form_status?: Maybe<Scalars['Float']>;
  employee_type?: Maybe<Scalars['Float']>;
  ethnicity?: Maybe<Scalars['Float']>;
  gender_id?: Maybe<Scalars['Float']>;
  hukou_type?: Maybe<Scalars['Float']>;
  id_type?: Maybe<Scalars['Float']>;
  insurance_subsidy?: Maybe<Scalars['Float']>;
  isAdmin?: Maybe<Scalars['Float']>;
  is_tenant_manager?: Maybe<Scalars['Float']>;
  is_three_days_leave?: Maybe<Scalars['Float']>;
  marital_status?: Maybe<Scalars['Float']>;
  medical_insurance?: Maybe<Scalars['Float']>;
  overtime_pay?: Maybe<Scalars['Float']>;
  position_pay?: Maybe<Scalars['Float']>;
  probation_months?: Maybe<Scalars['Float']>;
  social_security_number?: Maybe<Scalars['Float']>;
  status?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "employees" */
export type Employees_Stddev_Samp_Order_By = {
  application?: InputMaybe<Order_By>;
  application_status?: InputMaybe<Order_By>;
  basic_salary?: InputMaybe<Order_By>;
  basic_salary_base?: InputMaybe<Order_By>;
  basic_salary_monthly?: InputMaybe<Order_By>;
  cancel_onboarding_reason?: InputMaybe<Order_By>;
  departure_type?: InputMaybe<Order_By>;
  employee_form_status?: InputMaybe<Order_By>;
  employee_type?: InputMaybe<Order_By>;
  ethnicity?: InputMaybe<Order_By>;
  gender_id?: InputMaybe<Order_By>;
  hukou_type?: InputMaybe<Order_By>;
  id_type?: InputMaybe<Order_By>;
  insurance_subsidy?: InputMaybe<Order_By>;
  isAdmin?: InputMaybe<Order_By>;
  is_tenant_manager?: InputMaybe<Order_By>;
  is_three_days_leave?: InputMaybe<Order_By>;
  marital_status?: InputMaybe<Order_By>;
  medical_insurance?: InputMaybe<Order_By>;
  overtime_pay?: InputMaybe<Order_By>;
  position_pay?: InputMaybe<Order_By>;
  probation_months?: InputMaybe<Order_By>;
  social_security_number?: InputMaybe<Order_By>;
  status?: InputMaybe<Order_By>;
};

/** Streaming cursor of the table "employees" */
export type Employees_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Employees_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Employees_Stream_Cursor_Value_Input = {
  actual_conversion_time?: InputMaybe<Scalars['date']>;
  actual_overboard_time?: InputMaybe<Scalars['date']>;
  application?: InputMaybe<Scalars['Int']>;
  application_status?: InputMaybe<Scalars['Int']>;
  avatar?: InputMaybe<Scalars['String']>;
  bank_account_number?: InputMaybe<Scalars['String']>;
  bank_name?: InputMaybe<Scalars['String']>;
  basic_salary?: InputMaybe<Scalars['numeric']>;
  basic_salary_base?: InputMaybe<Scalars['numeric']>;
  basic_salary_monthly?: InputMaybe<Scalars['numeric']>;
  birthday?: InputMaybe<Scalars['date']>;
  cancel_onboarding_notes?: InputMaybe<Scalars['String']>;
  cancel_onboarding_reason?: InputMaybe<Scalars['Int']>;
  created_at?: InputMaybe<Scalars['timestamptz']>;
  department_id?: InputMaybe<Scalars['String']>;
  departure_notes?: InputMaybe<Scalars['String']>;
  departure_type?: InputMaybe<Scalars['Int']>;
  email?: InputMaybe<Scalars['String']>;
  employee_form_status?: InputMaybe<Scalars['Int']>;
  employee_no?: InputMaybe<Scalars['String']>;
  employee_type?: InputMaybe<Scalars['smallint']>;
  en_name?: InputMaybe<Scalars['String']>;
  entered_workforce_date?: InputMaybe<Scalars['date']>;
  ethnicity?: InputMaybe<Scalars['Int']>;
  family_address?: InputMaybe<Scalars['String']>;
  gender_id?: InputMaybe<Scalars['smallint']>;
  has_insurance?: InputMaybe<Scalars['Boolean']>;
  health_card_end?: InputMaybe<Scalars['date']>;
  health_card_image?: InputMaybe<Scalars['String']>;
  health_card_no?: InputMaybe<Scalars['String']>;
  health_card_start?: InputMaybe<Scalars['date']>;
  hire_date?: InputMaybe<Scalars['date']>;
  hukou_location?: InputMaybe<Scalars['String']>;
  hukou_type?: InputMaybe<Scalars['Int']>;
  id?: InputMaybe<Scalars['String']>;
  id_number?: InputMaybe<Scalars['String']>;
  id_photo?: InputMaybe<Scalars['String']>;
  id_photo_em_side?: InputMaybe<Scalars['String']>;
  id_photo_po_side?: InputMaybe<Scalars['String']>;
  id_type?: InputMaybe<Scalars['Int']>;
  insurance_start_date?: InputMaybe<Scalars['date']>;
  insurance_subsidy?: InputMaybe<Scalars['numeric']>;
  isAdmin?: InputMaybe<Scalars['smallint']>;
  is_tenant_manager?: InputMaybe<Scalars['smallint']>;
  is_three_days_leave?: InputMaybe<Scalars['smallint']>;
  job_title?: InputMaybe<Scalars['String']>;
  last_day?: InputMaybe<Scalars['date']>;
  manager_id?: InputMaybe<Scalars['String']>;
  marital_status?: InputMaybe<Scalars['smallint']>;
  medical_insurance?: InputMaybe<Scalars['Int']>;
  mobile?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  native_region?: InputMaybe<Scalars['json']>;
  notice_termination_agreement?: InputMaybe<Scalars['String']>;
  open_id?: InputMaybe<Scalars['String']>;
  overboard_note?: InputMaybe<Scalars['String']>;
  overtime_pay?: InputMaybe<Scalars['numeric']>;
  personal_email?: InputMaybe<Scalars['String']>;
  position_pay?: InputMaybe<Scalars['numeric']>;
  primary_emergency_contact?: InputMaybe<Scalars['json']>;
  probation_months?: InputMaybe<Scalars['Int']>;
  provident_fund_account?: InputMaybe<Scalars['String']>;
  resignation_handover?: InputMaybe<Scalars['String']>;
  salary_account?: InputMaybe<Scalars['String']>;
  salary_type?: InputMaybe<Scalars['String']>;
  salary_type_id?: InputMaybe<Scalars['String']>;
  screenshot?: InputMaybe<Scalars['String']>;
  social_security_account?: InputMaybe<Scalars['String']>;
  social_security_number?: InputMaybe<Scalars['Int']>;
  status?: InputMaybe<Scalars['smallint']>;
  updated_at?: InputMaybe<Scalars['timestamptz']>;
  user_id?: InputMaybe<Scalars['String']>;
  verification_code?: InputMaybe<Scalars['String']>;
  work_age_type?: InputMaybe<Scalars['String']>;
  work_location?: InputMaybe<Scalars['json']>;
};

/** aggregate sum on columns */
export type Employees_Sum_Fields = {
  __typename?: 'employees_sum_fields';
  application?: Maybe<Scalars['Int']>;
  application_status?: Maybe<Scalars['Int']>;
  basic_salary?: Maybe<Scalars['numeric']>;
  basic_salary_base?: Maybe<Scalars['numeric']>;
  basic_salary_monthly?: Maybe<Scalars['numeric']>;
  cancel_onboarding_reason?: Maybe<Scalars['Int']>;
  departure_type?: Maybe<Scalars['Int']>;
  employee_form_status?: Maybe<Scalars['Int']>;
  employee_type?: Maybe<Scalars['smallint']>;
  ethnicity?: Maybe<Scalars['Int']>;
  gender_id?: Maybe<Scalars['smallint']>;
  hukou_type?: Maybe<Scalars['Int']>;
  id_type?: Maybe<Scalars['Int']>;
  insurance_subsidy?: Maybe<Scalars['numeric']>;
  isAdmin?: Maybe<Scalars['smallint']>;
  is_tenant_manager?: Maybe<Scalars['smallint']>;
  is_three_days_leave?: Maybe<Scalars['smallint']>;
  marital_status?: Maybe<Scalars['smallint']>;
  medical_insurance?: Maybe<Scalars['Int']>;
  overtime_pay?: Maybe<Scalars['numeric']>;
  position_pay?: Maybe<Scalars['numeric']>;
  probation_months?: Maybe<Scalars['Int']>;
  social_security_number?: Maybe<Scalars['Int']>;
  status?: Maybe<Scalars['smallint']>;
};

/** order by sum() on columns of table "employees" */
export type Employees_Sum_Order_By = {
  application?: InputMaybe<Order_By>;
  application_status?: InputMaybe<Order_By>;
  basic_salary?: InputMaybe<Order_By>;
  basic_salary_base?: InputMaybe<Order_By>;
  basic_salary_monthly?: InputMaybe<Order_By>;
  cancel_onboarding_reason?: InputMaybe<Order_By>;
  departure_type?: InputMaybe<Order_By>;
  employee_form_status?: InputMaybe<Order_By>;
  employee_type?: InputMaybe<Order_By>;
  ethnicity?: InputMaybe<Order_By>;
  gender_id?: InputMaybe<Order_By>;
  hukou_type?: InputMaybe<Order_By>;
  id_type?: InputMaybe<Order_By>;
  insurance_subsidy?: InputMaybe<Order_By>;
  isAdmin?: InputMaybe<Order_By>;
  is_tenant_manager?: InputMaybe<Order_By>;
  is_three_days_leave?: InputMaybe<Order_By>;
  marital_status?: InputMaybe<Order_By>;
  medical_insurance?: InputMaybe<Order_By>;
  overtime_pay?: InputMaybe<Order_By>;
  position_pay?: InputMaybe<Order_By>;
  probation_months?: InputMaybe<Order_By>;
  social_security_number?: InputMaybe<Order_By>;
  status?: InputMaybe<Order_By>;
};

/** update columns of table "employees" */
export enum Employees_Update_Column {
  /** column name */
  ActualConversionTime = 'actual_conversion_time',
  /** column name */
  ActualOverboardTime = 'actual_overboard_time',
  /** column name */
  Application = 'application',
  /** column name */
  ApplicationStatus = 'application_status',
  /** column name */
  Avatar = 'avatar',
  /** column name */
  BankAccountNumber = 'bank_account_number',
  /** column name */
  BankName = 'bank_name',
  /** column name */
  BasicSalary = 'basic_salary',
  /** column name */
  BasicSalaryBase = 'basic_salary_base',
  /** column name */
  BasicSalaryMonthly = 'basic_salary_monthly',
  /** column name */
  Birthday = 'birthday',
  /** column name */
  CancelOnboardingNotes = 'cancel_onboarding_notes',
  /** column name */
  CancelOnboardingReason = 'cancel_onboarding_reason',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  DepartmentId = 'department_id',
  /** column name */
  DepartureNotes = 'departure_notes',
  /** column name */
  DepartureType = 'departure_type',
  /** column name */
  Email = 'email',
  /** column name */
  EmployeeFormStatus = 'employee_form_status',
  /** column name */
  EmployeeNo = 'employee_no',
  /** column name */
  EmployeeType = 'employee_type',
  /** column name */
  EnName = 'en_name',
  /** column name */
  EnteredWorkforceDate = 'entered_workforce_date',
  /** column name */
  Ethnicity = 'ethnicity',
  /** column name */
  FamilyAddress = 'family_address',
  /** column name */
  GenderId = 'gender_id',
  /** column name */
  HasInsurance = 'has_insurance',
  /** column name */
  HealthCardEnd = 'health_card_end',
  /** column name */
  HealthCardImage = 'health_card_image',
  /** column name */
  HealthCardNo = 'health_card_no',
  /** column name */
  HealthCardStart = 'health_card_start',
  /** column name */
  HireDate = 'hire_date',
  /** column name */
  HukouLocation = 'hukou_location',
  /** column name */
  HukouType = 'hukou_type',
  /** column name */
  Id = 'id',
  /** column name */
  IdNumber = 'id_number',
  /** column name */
  IdPhoto = 'id_photo',
  /** column name */
  IdPhotoEmSide = 'id_photo_em_side',
  /** column name */
  IdPhotoPoSide = 'id_photo_po_side',
  /** column name */
  IdType = 'id_type',
  /** column name */
  InsuranceStartDate = 'insurance_start_date',
  /** column name */
  InsuranceSubsidy = 'insurance_subsidy',
  /** column name */
  IsAdmin = 'isAdmin',
  /** column name */
  IsTenantManager = 'is_tenant_manager',
  /** column name */
  IsThreeDaysLeave = 'is_three_days_leave',
  /** column name */
  JobTitle = 'job_title',
  /** column name */
  LastDay = 'last_day',
  /** column name */
  ManagerId = 'manager_id',
  /** column name */
  MaritalStatus = 'marital_status',
  /** column name */
  MedicalInsurance = 'medical_insurance',
  /** column name */
  Mobile = 'mobile',
  /** column name */
  Name = 'name',
  /** column name */
  NativeRegion = 'native_region',
  /** column name */
  NoticeTerminationAgreement = 'notice_termination_agreement',
  /** column name */
  OpenId = 'open_id',
  /** column name */
  OverboardNote = 'overboard_note',
  /** column name */
  OvertimePay = 'overtime_pay',
  /** column name */
  PersonalEmail = 'personal_email',
  /** column name */
  PositionPay = 'position_pay',
  /** column name */
  PrimaryEmergencyContact = 'primary_emergency_contact',
  /** column name */
  ProbationMonths = 'probation_months',
  /** column name */
  ProvidentFundAccount = 'provident_fund_account',
  /** column name */
  ResignationHandover = 'resignation_handover',
  /** column name */
  SalaryAccount = 'salary_account',
  /** column name */
  SalaryType = 'salary_type',
  /** column name */
  SalaryTypeId = 'salary_type_id',
  /** column name */
  Screenshot = 'screenshot',
  /** column name */
  SocialSecurityAccount = 'social_security_account',
  /** column name */
  SocialSecurityNumber = 'social_security_number',
  /** column name */
  Status = 'status',
  /** column name */
  UpdatedAt = 'updated_at',
  /** column name */
  UserId = 'user_id',
  /** column name */
  VerificationCode = 'verification_code',
  /** column name */
  WorkAgeType = 'work_age_type',
  /** column name */
  WorkLocation = 'work_location'
}

export type Employees_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: InputMaybe<Employees_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Employees_Set_Input>;
  /** filter the rows which have to be updated */
  where: Employees_Bool_Exp;
};

/** aggregate var_pop on columns */
export type Employees_Var_Pop_Fields = {
  __typename?: 'employees_var_pop_fields';
  application?: Maybe<Scalars['Float']>;
  application_status?: Maybe<Scalars['Float']>;
  basic_salary?: Maybe<Scalars['Float']>;
  basic_salary_base?: Maybe<Scalars['Float']>;
  basic_salary_monthly?: Maybe<Scalars['Float']>;
  cancel_onboarding_reason?: Maybe<Scalars['Float']>;
  departure_type?: Maybe<Scalars['Float']>;
  employee_form_status?: Maybe<Scalars['Float']>;
  employee_type?: Maybe<Scalars['Float']>;
  ethnicity?: Maybe<Scalars['Float']>;
  gender_id?: Maybe<Scalars['Float']>;
  hukou_type?: Maybe<Scalars['Float']>;
  id_type?: Maybe<Scalars['Float']>;
  insurance_subsidy?: Maybe<Scalars['Float']>;
  isAdmin?: Maybe<Scalars['Float']>;
  is_tenant_manager?: Maybe<Scalars['Float']>;
  is_three_days_leave?: Maybe<Scalars['Float']>;
  marital_status?: Maybe<Scalars['Float']>;
  medical_insurance?: Maybe<Scalars['Float']>;
  overtime_pay?: Maybe<Scalars['Float']>;
  position_pay?: Maybe<Scalars['Float']>;
  probation_months?: Maybe<Scalars['Float']>;
  social_security_number?: Maybe<Scalars['Float']>;
  status?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "employees" */
export type Employees_Var_Pop_Order_By = {
  application?: InputMaybe<Order_By>;
  application_status?: InputMaybe<Order_By>;
  basic_salary?: InputMaybe<Order_By>;
  basic_salary_base?: InputMaybe<Order_By>;
  basic_salary_monthly?: InputMaybe<Order_By>;
  cancel_onboarding_reason?: InputMaybe<Order_By>;
  departure_type?: InputMaybe<Order_By>;
  employee_form_status?: InputMaybe<Order_By>;
  employee_type?: InputMaybe<Order_By>;
  ethnicity?: InputMaybe<Order_By>;
  gender_id?: InputMaybe<Order_By>;
  hukou_type?: InputMaybe<Order_By>;
  id_type?: InputMaybe<Order_By>;
  insurance_subsidy?: InputMaybe<Order_By>;
  isAdmin?: InputMaybe<Order_By>;
  is_tenant_manager?: InputMaybe<Order_By>;
  is_three_days_leave?: InputMaybe<Order_By>;
  marital_status?: InputMaybe<Order_By>;
  medical_insurance?: InputMaybe<Order_By>;
  overtime_pay?: InputMaybe<Order_By>;
  position_pay?: InputMaybe<Order_By>;
  probation_months?: InputMaybe<Order_By>;
  social_security_number?: InputMaybe<Order_By>;
  status?: InputMaybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Employees_Var_Samp_Fields = {
  __typename?: 'employees_var_samp_fields';
  application?: Maybe<Scalars['Float']>;
  application_status?: Maybe<Scalars['Float']>;
  basic_salary?: Maybe<Scalars['Float']>;
  basic_salary_base?: Maybe<Scalars['Float']>;
  basic_salary_monthly?: Maybe<Scalars['Float']>;
  cancel_onboarding_reason?: Maybe<Scalars['Float']>;
  departure_type?: Maybe<Scalars['Float']>;
  employee_form_status?: Maybe<Scalars['Float']>;
  employee_type?: Maybe<Scalars['Float']>;
  ethnicity?: Maybe<Scalars['Float']>;
  gender_id?: Maybe<Scalars['Float']>;
  hukou_type?: Maybe<Scalars['Float']>;
  id_type?: Maybe<Scalars['Float']>;
  insurance_subsidy?: Maybe<Scalars['Float']>;
  isAdmin?: Maybe<Scalars['Float']>;
  is_tenant_manager?: Maybe<Scalars['Float']>;
  is_three_days_leave?: Maybe<Scalars['Float']>;
  marital_status?: Maybe<Scalars['Float']>;
  medical_insurance?: Maybe<Scalars['Float']>;
  overtime_pay?: Maybe<Scalars['Float']>;
  position_pay?: Maybe<Scalars['Float']>;
  probation_months?: Maybe<Scalars['Float']>;
  social_security_number?: Maybe<Scalars['Float']>;
  status?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "employees" */
export type Employees_Var_Samp_Order_By = {
  application?: InputMaybe<Order_By>;
  application_status?: InputMaybe<Order_By>;
  basic_salary?: InputMaybe<Order_By>;
  basic_salary_base?: InputMaybe<Order_By>;
  basic_salary_monthly?: InputMaybe<Order_By>;
  cancel_onboarding_reason?: InputMaybe<Order_By>;
  departure_type?: InputMaybe<Order_By>;
  employee_form_status?: InputMaybe<Order_By>;
  employee_type?: InputMaybe<Order_By>;
  ethnicity?: InputMaybe<Order_By>;
  gender_id?: InputMaybe<Order_By>;
  hukou_type?: InputMaybe<Order_By>;
  id_type?: InputMaybe<Order_By>;
  insurance_subsidy?: InputMaybe<Order_By>;
  isAdmin?: InputMaybe<Order_By>;
  is_tenant_manager?: InputMaybe<Order_By>;
  is_three_days_leave?: InputMaybe<Order_By>;
  marital_status?: InputMaybe<Order_By>;
  medical_insurance?: InputMaybe<Order_By>;
  overtime_pay?: InputMaybe<Order_By>;
  position_pay?: InputMaybe<Order_By>;
  probation_months?: InputMaybe<Order_By>;
  social_security_number?: InputMaybe<Order_By>;
  status?: InputMaybe<Order_By>;
};

/** aggregate variance on columns */
export type Employees_Variance_Fields = {
  __typename?: 'employees_variance_fields';
  application?: Maybe<Scalars['Float']>;
  application_status?: Maybe<Scalars['Float']>;
  basic_salary?: Maybe<Scalars['Float']>;
  basic_salary_base?: Maybe<Scalars['Float']>;
  basic_salary_monthly?: Maybe<Scalars['Float']>;
  cancel_onboarding_reason?: Maybe<Scalars['Float']>;
  departure_type?: Maybe<Scalars['Float']>;
  employee_form_status?: Maybe<Scalars['Float']>;
  employee_type?: Maybe<Scalars['Float']>;
  ethnicity?: Maybe<Scalars['Float']>;
  gender_id?: Maybe<Scalars['Float']>;
  hukou_type?: Maybe<Scalars['Float']>;
  id_type?: Maybe<Scalars['Float']>;
  insurance_subsidy?: Maybe<Scalars['Float']>;
  isAdmin?: Maybe<Scalars['Float']>;
  is_tenant_manager?: Maybe<Scalars['Float']>;
  is_three_days_leave?: Maybe<Scalars['Float']>;
  marital_status?: Maybe<Scalars['Float']>;
  medical_insurance?: Maybe<Scalars['Float']>;
  overtime_pay?: Maybe<Scalars['Float']>;
  position_pay?: Maybe<Scalars['Float']>;
  probation_months?: Maybe<Scalars['Float']>;
  social_security_number?: Maybe<Scalars['Float']>;
  status?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "employees" */
export type Employees_Variance_Order_By = {
  application?: InputMaybe<Order_By>;
  application_status?: InputMaybe<Order_By>;
  basic_salary?: InputMaybe<Order_By>;
  basic_salary_base?: InputMaybe<Order_By>;
  basic_salary_monthly?: InputMaybe<Order_By>;
  cancel_onboarding_reason?: InputMaybe<Order_By>;
  departure_type?: InputMaybe<Order_By>;
  employee_form_status?: InputMaybe<Order_By>;
  employee_type?: InputMaybe<Order_By>;
  ethnicity?: InputMaybe<Order_By>;
  gender_id?: InputMaybe<Order_By>;
  hukou_type?: InputMaybe<Order_By>;
  id_type?: InputMaybe<Order_By>;
  insurance_subsidy?: InputMaybe<Order_By>;
  isAdmin?: InputMaybe<Order_By>;
  is_tenant_manager?: InputMaybe<Order_By>;
  is_three_days_leave?: InputMaybe<Order_By>;
  marital_status?: InputMaybe<Order_By>;
  medical_insurance?: InputMaybe<Order_By>;
  overtime_pay?: InputMaybe<Order_By>;
  position_pay?: InputMaybe<Order_By>;
  probation_months?: InputMaybe<Order_By>;
  social_security_number?: InputMaybe<Order_By>;
  status?: InputMaybe<Order_By>;
};

/** columns and relationships of "foodcategories" */
export type Foodcategories = {
  __typename?: 'foodcategories';
  brand_code?: Maybe<Scalars['String']>;
  brand_name?: Maybe<Scalars['String']>;
  center_code?: Maybe<Scalars['String']>;
  center_name?: Maybe<Scalars['String']>;
  class_code?: Maybe<Scalars['String']>;
  class_id: Scalars['bigint'];
  class_name?: Maybe<Scalars['String']>;
  create_shop_code?: Maybe<Scalars['String']>;
  create_shop_name?: Maybe<Scalars['String']>;
  create_time?: Maybe<Scalars['timestamp']>;
  deflag?: Maybe<Scalars['Int']>;
  /** An array relationship */
  fooditems: Array<Fooditems>;
  /** An aggregate relationship */
  fooditems_aggregate: Fooditems_Aggregate;
  is_create_temp_item?: Maybe<Scalars['smallint']>;
  level?: Maybe<Scalars['Int']>;
  modify_time?: Maybe<Scalars['timestamp']>;
  parent_id?: Maybe<Scalars['bigint']>;
};


/** columns and relationships of "foodcategories" */
export type FoodcategoriesFooditemsArgs = {
  distinct_on?: InputMaybe<Array<Fooditems_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Fooditems_Order_By>>;
  where?: InputMaybe<Fooditems_Bool_Exp>;
};


/** columns and relationships of "foodcategories" */
export type FoodcategoriesFooditems_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Fooditems_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Fooditems_Order_By>>;
  where?: InputMaybe<Fooditems_Bool_Exp>;
};

/** aggregated selection of "foodcategories" */
export type Foodcategories_Aggregate = {
  __typename?: 'foodcategories_aggregate';
  aggregate?: Maybe<Foodcategories_Aggregate_Fields>;
  nodes: Array<Foodcategories>;
};

/** aggregate fields of "foodcategories" */
export type Foodcategories_Aggregate_Fields = {
  __typename?: 'foodcategories_aggregate_fields';
  avg?: Maybe<Foodcategories_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Foodcategories_Max_Fields>;
  min?: Maybe<Foodcategories_Min_Fields>;
  stddev?: Maybe<Foodcategories_Stddev_Fields>;
  stddev_pop?: Maybe<Foodcategories_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Foodcategories_Stddev_Samp_Fields>;
  sum?: Maybe<Foodcategories_Sum_Fields>;
  var_pop?: Maybe<Foodcategories_Var_Pop_Fields>;
  var_samp?: Maybe<Foodcategories_Var_Samp_Fields>;
  variance?: Maybe<Foodcategories_Variance_Fields>;
};


/** aggregate fields of "foodcategories" */
export type Foodcategories_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Foodcategories_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** aggregate avg on columns */
export type Foodcategories_Avg_Fields = {
  __typename?: 'foodcategories_avg_fields';
  class_id?: Maybe<Scalars['Float']>;
  deflag?: Maybe<Scalars['Float']>;
  is_create_temp_item?: Maybe<Scalars['Float']>;
  level?: Maybe<Scalars['Float']>;
  parent_id?: Maybe<Scalars['Float']>;
};

/** Boolean expression to filter rows from the table "foodcategories". All fields are combined with a logical 'AND'. */
export type Foodcategories_Bool_Exp = {
  _and?: InputMaybe<Array<Foodcategories_Bool_Exp>>;
  _not?: InputMaybe<Foodcategories_Bool_Exp>;
  _or?: InputMaybe<Array<Foodcategories_Bool_Exp>>;
  brand_code?: InputMaybe<String_Comparison_Exp>;
  brand_name?: InputMaybe<String_Comparison_Exp>;
  center_code?: InputMaybe<String_Comparison_Exp>;
  center_name?: InputMaybe<String_Comparison_Exp>;
  class_code?: InputMaybe<String_Comparison_Exp>;
  class_id?: InputMaybe<Bigint_Comparison_Exp>;
  class_name?: InputMaybe<String_Comparison_Exp>;
  create_shop_code?: InputMaybe<String_Comparison_Exp>;
  create_shop_name?: InputMaybe<String_Comparison_Exp>;
  create_time?: InputMaybe<Timestamp_Comparison_Exp>;
  deflag?: InputMaybe<Int_Comparison_Exp>;
  fooditems?: InputMaybe<Fooditems_Bool_Exp>;
  fooditems_aggregate?: InputMaybe<Fooditems_Aggregate_Bool_Exp>;
  is_create_temp_item?: InputMaybe<Smallint_Comparison_Exp>;
  level?: InputMaybe<Int_Comparison_Exp>;
  modify_time?: InputMaybe<Timestamp_Comparison_Exp>;
  parent_id?: InputMaybe<Bigint_Comparison_Exp>;
};

/** unique or primary key constraints on table "foodcategories" */
export enum Foodcategories_Constraint {
  /** unique or primary key constraint on columns "class_id" */
  FoodcategoriesPrimary20 = 'foodcategoriesPRIMARY20'
}

/** input type for incrementing numeric columns in table "foodcategories" */
export type Foodcategories_Inc_Input = {
  class_id?: InputMaybe<Scalars['bigint']>;
  deflag?: InputMaybe<Scalars['Int']>;
  is_create_temp_item?: InputMaybe<Scalars['smallint']>;
  level?: InputMaybe<Scalars['Int']>;
  parent_id?: InputMaybe<Scalars['bigint']>;
};

/** input type for inserting data into table "foodcategories" */
export type Foodcategories_Insert_Input = {
  brand_code?: InputMaybe<Scalars['String']>;
  brand_name?: InputMaybe<Scalars['String']>;
  center_code?: InputMaybe<Scalars['String']>;
  center_name?: InputMaybe<Scalars['String']>;
  class_code?: InputMaybe<Scalars['String']>;
  class_id?: InputMaybe<Scalars['bigint']>;
  class_name?: InputMaybe<Scalars['String']>;
  create_shop_code?: InputMaybe<Scalars['String']>;
  create_shop_name?: InputMaybe<Scalars['String']>;
  create_time?: InputMaybe<Scalars['timestamp']>;
  deflag?: InputMaybe<Scalars['Int']>;
  fooditems?: InputMaybe<Fooditems_Arr_Rel_Insert_Input>;
  is_create_temp_item?: InputMaybe<Scalars['smallint']>;
  level?: InputMaybe<Scalars['Int']>;
  modify_time?: InputMaybe<Scalars['timestamp']>;
  parent_id?: InputMaybe<Scalars['bigint']>;
};

/** aggregate max on columns */
export type Foodcategories_Max_Fields = {
  __typename?: 'foodcategories_max_fields';
  brand_code?: Maybe<Scalars['String']>;
  brand_name?: Maybe<Scalars['String']>;
  center_code?: Maybe<Scalars['String']>;
  center_name?: Maybe<Scalars['String']>;
  class_code?: Maybe<Scalars['String']>;
  class_id?: Maybe<Scalars['bigint']>;
  class_name?: Maybe<Scalars['String']>;
  create_shop_code?: Maybe<Scalars['String']>;
  create_shop_name?: Maybe<Scalars['String']>;
  create_time?: Maybe<Scalars['timestamp']>;
  deflag?: Maybe<Scalars['Int']>;
  is_create_temp_item?: Maybe<Scalars['smallint']>;
  level?: Maybe<Scalars['Int']>;
  modify_time?: Maybe<Scalars['timestamp']>;
  parent_id?: Maybe<Scalars['bigint']>;
};

/** aggregate min on columns */
export type Foodcategories_Min_Fields = {
  __typename?: 'foodcategories_min_fields';
  brand_code?: Maybe<Scalars['String']>;
  brand_name?: Maybe<Scalars['String']>;
  center_code?: Maybe<Scalars['String']>;
  center_name?: Maybe<Scalars['String']>;
  class_code?: Maybe<Scalars['String']>;
  class_id?: Maybe<Scalars['bigint']>;
  class_name?: Maybe<Scalars['String']>;
  create_shop_code?: Maybe<Scalars['String']>;
  create_shop_name?: Maybe<Scalars['String']>;
  create_time?: Maybe<Scalars['timestamp']>;
  deflag?: Maybe<Scalars['Int']>;
  is_create_temp_item?: Maybe<Scalars['smallint']>;
  level?: Maybe<Scalars['Int']>;
  modify_time?: Maybe<Scalars['timestamp']>;
  parent_id?: Maybe<Scalars['bigint']>;
};

/** response of any mutation on the table "foodcategories" */
export type Foodcategories_Mutation_Response = {
  __typename?: 'foodcategories_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Foodcategories>;
};

/** input type for inserting object relation for remote table "foodcategories" */
export type Foodcategories_Obj_Rel_Insert_Input = {
  data: Foodcategories_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<Foodcategories_On_Conflict>;
};

/** on_conflict condition type for table "foodcategories" */
export type Foodcategories_On_Conflict = {
  constraint: Foodcategories_Constraint;
  update_columns?: Array<Foodcategories_Update_Column>;
  where?: InputMaybe<Foodcategories_Bool_Exp>;
};

/** Ordering options when selecting data from "foodcategories". */
export type Foodcategories_Order_By = {
  brand_code?: InputMaybe<Order_By>;
  brand_name?: InputMaybe<Order_By>;
  center_code?: InputMaybe<Order_By>;
  center_name?: InputMaybe<Order_By>;
  class_code?: InputMaybe<Order_By>;
  class_id?: InputMaybe<Order_By>;
  class_name?: InputMaybe<Order_By>;
  create_shop_code?: InputMaybe<Order_By>;
  create_shop_name?: InputMaybe<Order_By>;
  create_time?: InputMaybe<Order_By>;
  deflag?: InputMaybe<Order_By>;
  fooditems_aggregate?: InputMaybe<Fooditems_Aggregate_Order_By>;
  is_create_temp_item?: InputMaybe<Order_By>;
  level?: InputMaybe<Order_By>;
  modify_time?: InputMaybe<Order_By>;
  parent_id?: InputMaybe<Order_By>;
};

/** primary key columns input for table: foodcategories */
export type Foodcategories_Pk_Columns_Input = {
  class_id: Scalars['bigint'];
};

/** select columns of table "foodcategories" */
export enum Foodcategories_Select_Column {
  /** column name */
  BrandCode = 'brand_code',
  /** column name */
  BrandName = 'brand_name',
  /** column name */
  CenterCode = 'center_code',
  /** column name */
  CenterName = 'center_name',
  /** column name */
  ClassCode = 'class_code',
  /** column name */
  ClassId = 'class_id',
  /** column name */
  ClassName = 'class_name',
  /** column name */
  CreateShopCode = 'create_shop_code',
  /** column name */
  CreateShopName = 'create_shop_name',
  /** column name */
  CreateTime = 'create_time',
  /** column name */
  Deflag = 'deflag',
  /** column name */
  IsCreateTempItem = 'is_create_temp_item',
  /** column name */
  Level = 'level',
  /** column name */
  ModifyTime = 'modify_time',
  /** column name */
  ParentId = 'parent_id'
}

/** input type for updating data in table "foodcategories" */
export type Foodcategories_Set_Input = {
  brand_code?: InputMaybe<Scalars['String']>;
  brand_name?: InputMaybe<Scalars['String']>;
  center_code?: InputMaybe<Scalars['String']>;
  center_name?: InputMaybe<Scalars['String']>;
  class_code?: InputMaybe<Scalars['String']>;
  class_id?: InputMaybe<Scalars['bigint']>;
  class_name?: InputMaybe<Scalars['String']>;
  create_shop_code?: InputMaybe<Scalars['String']>;
  create_shop_name?: InputMaybe<Scalars['String']>;
  create_time?: InputMaybe<Scalars['timestamp']>;
  deflag?: InputMaybe<Scalars['Int']>;
  is_create_temp_item?: InputMaybe<Scalars['smallint']>;
  level?: InputMaybe<Scalars['Int']>;
  modify_time?: InputMaybe<Scalars['timestamp']>;
  parent_id?: InputMaybe<Scalars['bigint']>;
};

/** aggregate stddev on columns */
export type Foodcategories_Stddev_Fields = {
  __typename?: 'foodcategories_stddev_fields';
  class_id?: Maybe<Scalars['Float']>;
  deflag?: Maybe<Scalars['Float']>;
  is_create_temp_item?: Maybe<Scalars['Float']>;
  level?: Maybe<Scalars['Float']>;
  parent_id?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_pop on columns */
export type Foodcategories_Stddev_Pop_Fields = {
  __typename?: 'foodcategories_stddev_pop_fields';
  class_id?: Maybe<Scalars['Float']>;
  deflag?: Maybe<Scalars['Float']>;
  is_create_temp_item?: Maybe<Scalars['Float']>;
  level?: Maybe<Scalars['Float']>;
  parent_id?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_samp on columns */
export type Foodcategories_Stddev_Samp_Fields = {
  __typename?: 'foodcategories_stddev_samp_fields';
  class_id?: Maybe<Scalars['Float']>;
  deflag?: Maybe<Scalars['Float']>;
  is_create_temp_item?: Maybe<Scalars['Float']>;
  level?: Maybe<Scalars['Float']>;
  parent_id?: Maybe<Scalars['Float']>;
};

/** Streaming cursor of the table "foodcategories" */
export type Foodcategories_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Foodcategories_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Foodcategories_Stream_Cursor_Value_Input = {
  brand_code?: InputMaybe<Scalars['String']>;
  brand_name?: InputMaybe<Scalars['String']>;
  center_code?: InputMaybe<Scalars['String']>;
  center_name?: InputMaybe<Scalars['String']>;
  class_code?: InputMaybe<Scalars['String']>;
  class_id?: InputMaybe<Scalars['bigint']>;
  class_name?: InputMaybe<Scalars['String']>;
  create_shop_code?: InputMaybe<Scalars['String']>;
  create_shop_name?: InputMaybe<Scalars['String']>;
  create_time?: InputMaybe<Scalars['timestamp']>;
  deflag?: InputMaybe<Scalars['Int']>;
  is_create_temp_item?: InputMaybe<Scalars['smallint']>;
  level?: InputMaybe<Scalars['Int']>;
  modify_time?: InputMaybe<Scalars['timestamp']>;
  parent_id?: InputMaybe<Scalars['bigint']>;
};

/** aggregate sum on columns */
export type Foodcategories_Sum_Fields = {
  __typename?: 'foodcategories_sum_fields';
  class_id?: Maybe<Scalars['bigint']>;
  deflag?: Maybe<Scalars['Int']>;
  is_create_temp_item?: Maybe<Scalars['smallint']>;
  level?: Maybe<Scalars['Int']>;
  parent_id?: Maybe<Scalars['bigint']>;
};

/** update columns of table "foodcategories" */
export enum Foodcategories_Update_Column {
  /** column name */
  BrandCode = 'brand_code',
  /** column name */
  BrandName = 'brand_name',
  /** column name */
  CenterCode = 'center_code',
  /** column name */
  CenterName = 'center_name',
  /** column name */
  ClassCode = 'class_code',
  /** column name */
  ClassId = 'class_id',
  /** column name */
  ClassName = 'class_name',
  /** column name */
  CreateShopCode = 'create_shop_code',
  /** column name */
  CreateShopName = 'create_shop_name',
  /** column name */
  CreateTime = 'create_time',
  /** column name */
  Deflag = 'deflag',
  /** column name */
  IsCreateTempItem = 'is_create_temp_item',
  /** column name */
  Level = 'level',
  /** column name */
  ModifyTime = 'modify_time',
  /** column name */
  ParentId = 'parent_id'
}

export type Foodcategories_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: InputMaybe<Foodcategories_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Foodcategories_Set_Input>;
  /** filter the rows which have to be updated */
  where: Foodcategories_Bool_Exp;
};

/** aggregate var_pop on columns */
export type Foodcategories_Var_Pop_Fields = {
  __typename?: 'foodcategories_var_pop_fields';
  class_id?: Maybe<Scalars['Float']>;
  deflag?: Maybe<Scalars['Float']>;
  is_create_temp_item?: Maybe<Scalars['Float']>;
  level?: Maybe<Scalars['Float']>;
  parent_id?: Maybe<Scalars['Float']>;
};

/** aggregate var_samp on columns */
export type Foodcategories_Var_Samp_Fields = {
  __typename?: 'foodcategories_var_samp_fields';
  class_id?: Maybe<Scalars['Float']>;
  deflag?: Maybe<Scalars['Float']>;
  is_create_temp_item?: Maybe<Scalars['Float']>;
  level?: Maybe<Scalars['Float']>;
  parent_id?: Maybe<Scalars['Float']>;
};

/** aggregate variance on columns */
export type Foodcategories_Variance_Fields = {
  __typename?: 'foodcategories_variance_fields';
  class_id?: Maybe<Scalars['Float']>;
  deflag?: Maybe<Scalars['Float']>;
  is_create_temp_item?: Maybe<Scalars['Float']>;
  level?: Maybe<Scalars['Float']>;
  parent_id?: Maybe<Scalars['Float']>;
};

/** columns and relationships of "fooditems" */
export type Fooditems = {
  __typename?: 'fooditems';
  aid_code?: Maybe<Scalars['String']>;
  auxiliary_unit_id?: Maybe<Scalars['String']>;
  barcode?: Maybe<Scalars['String']>;
  big_class_id?: Maybe<Scalars['bigint']>;
  big_pic3_url?: Maybe<Scalars['String']>;
  big_pic_url?: Maybe<Scalars['String']>;
  /** An object relationship */
  brand?: Maybe<Brands>;
  brand_code?: Maybe<Scalars['String']>;
  brand_id?: Maybe<Scalars['String']>;
  brand_item_code?: Maybe<Scalars['String']>;
  brand_item_name?: Maybe<Scalars['String']>;
  brand_name?: Maybe<Scalars['String']>;
  center_code?: Maybe<Scalars['String']>;
  center_name?: Maybe<Scalars['String']>;
  create_time?: Maybe<Scalars['timestamp']>;
  deflg?: Maybe<Scalars['Int']>;
  enable_multi_size?: Maybe<Scalars['Boolean']>;
  english_name?: Maybe<Scalars['String']>;
  /** An object relationship */
  foodcategory?: Maybe<Foodcategories>;
  gif_pic_url?: Maybe<Scalars['String']>;
  /** An array relationship */
  ingredients: Array<Ingredients>;
  /** An aggregate relationship */
  ingredients_aggregate: Ingredients_Aggregate;
  intro?: Maybe<Scalars['String']>;
  is_enable?: Maybe<Scalars['Boolean']>;
  is_package?: Maybe<Scalars['Boolean']>;
  is_temp_item?: Maybe<Scalars['Boolean']>;
  item_code?: Maybe<Scalars['Int']>;
  item_id: Scalars['String'];
  item_name?: Maybe<Scalars['String']>;
  modify_time?: Maybe<Scalars['timestamp']>;
  pkg_type?: Maybe<Scalars['Int']>;
  pungencyDegree?: Maybe<Scalars['String']>;
  salesRevenueTypeId?: Maybe<Scalars['String']>;
  shop_code?: Maybe<Scalars['String']>;
  shop_name?: Maybe<Scalars['String']>;
  small_class_id?: Maybe<Scalars['bigint']>;
  small_pic_url?: Maybe<Scalars['String']>;
  /** An array relationship */
  solditems: Array<Solditems>;
  /** An aggregate relationship */
  solditems_aggregate: Solditems_Aggregate;
  std_price?: Maybe<Scalars['numeric']>;
  unit_id?: Maybe<Scalars['String']>;
  unit_name?: Maybe<Scalars['String']>;
  video_url?: Maybe<Scalars['String']>;
  zxjType?: Maybe<Scalars['String']>;
};


/** columns and relationships of "fooditems" */
export type FooditemsIngredientsArgs = {
  distinct_on?: InputMaybe<Array<Ingredients_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Ingredients_Order_By>>;
  where?: InputMaybe<Ingredients_Bool_Exp>;
};


/** columns and relationships of "fooditems" */
export type FooditemsIngredients_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Ingredients_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Ingredients_Order_By>>;
  where?: InputMaybe<Ingredients_Bool_Exp>;
};


/** columns and relationships of "fooditems" */
export type FooditemsSolditemsArgs = {
  distinct_on?: InputMaybe<Array<Solditems_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Solditems_Order_By>>;
  where?: InputMaybe<Solditems_Bool_Exp>;
};


/** columns and relationships of "fooditems" */
export type FooditemsSolditems_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Solditems_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Solditems_Order_By>>;
  where?: InputMaybe<Solditems_Bool_Exp>;
};

/** aggregated selection of "fooditems" */
export type Fooditems_Aggregate = {
  __typename?: 'fooditems_aggregate';
  aggregate?: Maybe<Fooditems_Aggregate_Fields>;
  nodes: Array<Fooditems>;
};

export type Fooditems_Aggregate_Bool_Exp = {
  bool_and?: InputMaybe<Fooditems_Aggregate_Bool_Exp_Bool_And>;
  bool_or?: InputMaybe<Fooditems_Aggregate_Bool_Exp_Bool_Or>;
  count?: InputMaybe<Fooditems_Aggregate_Bool_Exp_Count>;
};

export type Fooditems_Aggregate_Bool_Exp_Bool_And = {
  arguments: Fooditems_Select_Column_Fooditems_Aggregate_Bool_Exp_Bool_And_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<Fooditems_Bool_Exp>;
  predicate: Boolean_Comparison_Exp;
};

export type Fooditems_Aggregate_Bool_Exp_Bool_Or = {
  arguments: Fooditems_Select_Column_Fooditems_Aggregate_Bool_Exp_Bool_Or_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<Fooditems_Bool_Exp>;
  predicate: Boolean_Comparison_Exp;
};

export type Fooditems_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<Fooditems_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<Fooditems_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "fooditems" */
export type Fooditems_Aggregate_Fields = {
  __typename?: 'fooditems_aggregate_fields';
  avg?: Maybe<Fooditems_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Fooditems_Max_Fields>;
  min?: Maybe<Fooditems_Min_Fields>;
  stddev?: Maybe<Fooditems_Stddev_Fields>;
  stddev_pop?: Maybe<Fooditems_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Fooditems_Stddev_Samp_Fields>;
  sum?: Maybe<Fooditems_Sum_Fields>;
  var_pop?: Maybe<Fooditems_Var_Pop_Fields>;
  var_samp?: Maybe<Fooditems_Var_Samp_Fields>;
  variance?: Maybe<Fooditems_Variance_Fields>;
};


/** aggregate fields of "fooditems" */
export type Fooditems_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Fooditems_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "fooditems" */
export type Fooditems_Aggregate_Order_By = {
  avg?: InputMaybe<Fooditems_Avg_Order_By>;
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<Fooditems_Max_Order_By>;
  min?: InputMaybe<Fooditems_Min_Order_By>;
  stddev?: InputMaybe<Fooditems_Stddev_Order_By>;
  stddev_pop?: InputMaybe<Fooditems_Stddev_Pop_Order_By>;
  stddev_samp?: InputMaybe<Fooditems_Stddev_Samp_Order_By>;
  sum?: InputMaybe<Fooditems_Sum_Order_By>;
  var_pop?: InputMaybe<Fooditems_Var_Pop_Order_By>;
  var_samp?: InputMaybe<Fooditems_Var_Samp_Order_By>;
  variance?: InputMaybe<Fooditems_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "fooditems" */
export type Fooditems_Arr_Rel_Insert_Input = {
  data: Array<Fooditems_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<Fooditems_On_Conflict>;
};

/** aggregate avg on columns */
export type Fooditems_Avg_Fields = {
  __typename?: 'fooditems_avg_fields';
  big_class_id?: Maybe<Scalars['Float']>;
  deflg?: Maybe<Scalars['Float']>;
  item_code?: Maybe<Scalars['Float']>;
  pkg_type?: Maybe<Scalars['Float']>;
  small_class_id?: Maybe<Scalars['Float']>;
  std_price?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "fooditems" */
export type Fooditems_Avg_Order_By = {
  big_class_id?: InputMaybe<Order_By>;
  deflg?: InputMaybe<Order_By>;
  item_code?: InputMaybe<Order_By>;
  pkg_type?: InputMaybe<Order_By>;
  small_class_id?: InputMaybe<Order_By>;
  std_price?: InputMaybe<Order_By>;
};

/** Boolean expression to filter rows from the table "fooditems". All fields are combined with a logical 'AND'. */
export type Fooditems_Bool_Exp = {
  _and?: InputMaybe<Array<Fooditems_Bool_Exp>>;
  _not?: InputMaybe<Fooditems_Bool_Exp>;
  _or?: InputMaybe<Array<Fooditems_Bool_Exp>>;
  aid_code?: InputMaybe<String_Comparison_Exp>;
  auxiliary_unit_id?: InputMaybe<String_Comparison_Exp>;
  barcode?: InputMaybe<String_Comparison_Exp>;
  big_class_id?: InputMaybe<Bigint_Comparison_Exp>;
  big_pic3_url?: InputMaybe<String_Comparison_Exp>;
  big_pic_url?: InputMaybe<String_Comparison_Exp>;
  brand?: InputMaybe<Brands_Bool_Exp>;
  brand_code?: InputMaybe<String_Comparison_Exp>;
  brand_id?: InputMaybe<String_Comparison_Exp>;
  brand_item_code?: InputMaybe<String_Comparison_Exp>;
  brand_item_name?: InputMaybe<String_Comparison_Exp>;
  brand_name?: InputMaybe<String_Comparison_Exp>;
  center_code?: InputMaybe<String_Comparison_Exp>;
  center_name?: InputMaybe<String_Comparison_Exp>;
  create_time?: InputMaybe<Timestamp_Comparison_Exp>;
  deflg?: InputMaybe<Int_Comparison_Exp>;
  enable_multi_size?: InputMaybe<Boolean_Comparison_Exp>;
  english_name?: InputMaybe<String_Comparison_Exp>;
  foodcategory?: InputMaybe<Foodcategories_Bool_Exp>;
  gif_pic_url?: InputMaybe<String_Comparison_Exp>;
  ingredients?: InputMaybe<Ingredients_Bool_Exp>;
  ingredients_aggregate?: InputMaybe<Ingredients_Aggregate_Bool_Exp>;
  intro?: InputMaybe<String_Comparison_Exp>;
  is_enable?: InputMaybe<Boolean_Comparison_Exp>;
  is_package?: InputMaybe<Boolean_Comparison_Exp>;
  is_temp_item?: InputMaybe<Boolean_Comparison_Exp>;
  item_code?: InputMaybe<Int_Comparison_Exp>;
  item_id?: InputMaybe<String_Comparison_Exp>;
  item_name?: InputMaybe<String_Comparison_Exp>;
  modify_time?: InputMaybe<Timestamp_Comparison_Exp>;
  pkg_type?: InputMaybe<Int_Comparison_Exp>;
  pungencyDegree?: InputMaybe<String_Comparison_Exp>;
  salesRevenueTypeId?: InputMaybe<String_Comparison_Exp>;
  shop_code?: InputMaybe<String_Comparison_Exp>;
  shop_name?: InputMaybe<String_Comparison_Exp>;
  small_class_id?: InputMaybe<Bigint_Comparison_Exp>;
  small_pic_url?: InputMaybe<String_Comparison_Exp>;
  solditems?: InputMaybe<Solditems_Bool_Exp>;
  solditems_aggregate?: InputMaybe<Solditems_Aggregate_Bool_Exp>;
  std_price?: InputMaybe<Numeric_Comparison_Exp>;
  unit_id?: InputMaybe<String_Comparison_Exp>;
  unit_name?: InputMaybe<String_Comparison_Exp>;
  video_url?: InputMaybe<String_Comparison_Exp>;
  zxjType?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "fooditems" */
export enum Fooditems_Constraint {
  /** unique or primary key constraint on columns "item_id" */
  FooditemsPrimary21 = 'fooditemsPRIMARY21'
}

/** input type for incrementing numeric columns in table "fooditems" */
export type Fooditems_Inc_Input = {
  big_class_id?: InputMaybe<Scalars['bigint']>;
  deflg?: InputMaybe<Scalars['Int']>;
  item_code?: InputMaybe<Scalars['Int']>;
  pkg_type?: InputMaybe<Scalars['Int']>;
  small_class_id?: InputMaybe<Scalars['bigint']>;
  std_price?: InputMaybe<Scalars['numeric']>;
};

/** input type for inserting data into table "fooditems" */
export type Fooditems_Insert_Input = {
  aid_code?: InputMaybe<Scalars['String']>;
  auxiliary_unit_id?: InputMaybe<Scalars['String']>;
  barcode?: InputMaybe<Scalars['String']>;
  big_class_id?: InputMaybe<Scalars['bigint']>;
  big_pic3_url?: InputMaybe<Scalars['String']>;
  big_pic_url?: InputMaybe<Scalars['String']>;
  brand?: InputMaybe<Brands_Obj_Rel_Insert_Input>;
  brand_code?: InputMaybe<Scalars['String']>;
  brand_id?: InputMaybe<Scalars['String']>;
  brand_item_code?: InputMaybe<Scalars['String']>;
  brand_item_name?: InputMaybe<Scalars['String']>;
  brand_name?: InputMaybe<Scalars['String']>;
  center_code?: InputMaybe<Scalars['String']>;
  center_name?: InputMaybe<Scalars['String']>;
  create_time?: InputMaybe<Scalars['timestamp']>;
  deflg?: InputMaybe<Scalars['Int']>;
  enable_multi_size?: InputMaybe<Scalars['Boolean']>;
  english_name?: InputMaybe<Scalars['String']>;
  foodcategory?: InputMaybe<Foodcategories_Obj_Rel_Insert_Input>;
  gif_pic_url?: InputMaybe<Scalars['String']>;
  ingredients?: InputMaybe<Ingredients_Arr_Rel_Insert_Input>;
  intro?: InputMaybe<Scalars['String']>;
  is_enable?: InputMaybe<Scalars['Boolean']>;
  is_package?: InputMaybe<Scalars['Boolean']>;
  is_temp_item?: InputMaybe<Scalars['Boolean']>;
  item_code?: InputMaybe<Scalars['Int']>;
  item_id?: InputMaybe<Scalars['String']>;
  item_name?: InputMaybe<Scalars['String']>;
  modify_time?: InputMaybe<Scalars['timestamp']>;
  pkg_type?: InputMaybe<Scalars['Int']>;
  pungencyDegree?: InputMaybe<Scalars['String']>;
  salesRevenueTypeId?: InputMaybe<Scalars['String']>;
  shop_code?: InputMaybe<Scalars['String']>;
  shop_name?: InputMaybe<Scalars['String']>;
  small_class_id?: InputMaybe<Scalars['bigint']>;
  small_pic_url?: InputMaybe<Scalars['String']>;
  solditems?: InputMaybe<Solditems_Arr_Rel_Insert_Input>;
  std_price?: InputMaybe<Scalars['numeric']>;
  unit_id?: InputMaybe<Scalars['String']>;
  unit_name?: InputMaybe<Scalars['String']>;
  video_url?: InputMaybe<Scalars['String']>;
  zxjType?: InputMaybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Fooditems_Max_Fields = {
  __typename?: 'fooditems_max_fields';
  aid_code?: Maybe<Scalars['String']>;
  auxiliary_unit_id?: Maybe<Scalars['String']>;
  barcode?: Maybe<Scalars['String']>;
  big_class_id?: Maybe<Scalars['bigint']>;
  big_pic3_url?: Maybe<Scalars['String']>;
  big_pic_url?: Maybe<Scalars['String']>;
  brand_code?: Maybe<Scalars['String']>;
  brand_id?: Maybe<Scalars['String']>;
  brand_item_code?: Maybe<Scalars['String']>;
  brand_item_name?: Maybe<Scalars['String']>;
  brand_name?: Maybe<Scalars['String']>;
  center_code?: Maybe<Scalars['String']>;
  center_name?: Maybe<Scalars['String']>;
  create_time?: Maybe<Scalars['timestamp']>;
  deflg?: Maybe<Scalars['Int']>;
  english_name?: Maybe<Scalars['String']>;
  gif_pic_url?: Maybe<Scalars['String']>;
  intro?: Maybe<Scalars['String']>;
  item_code?: Maybe<Scalars['Int']>;
  item_id?: Maybe<Scalars['String']>;
  item_name?: Maybe<Scalars['String']>;
  modify_time?: Maybe<Scalars['timestamp']>;
  pkg_type?: Maybe<Scalars['Int']>;
  pungencyDegree?: Maybe<Scalars['String']>;
  salesRevenueTypeId?: Maybe<Scalars['String']>;
  shop_code?: Maybe<Scalars['String']>;
  shop_name?: Maybe<Scalars['String']>;
  small_class_id?: Maybe<Scalars['bigint']>;
  small_pic_url?: Maybe<Scalars['String']>;
  std_price?: Maybe<Scalars['numeric']>;
  unit_id?: Maybe<Scalars['String']>;
  unit_name?: Maybe<Scalars['String']>;
  video_url?: Maybe<Scalars['String']>;
  zxjType?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "fooditems" */
export type Fooditems_Max_Order_By = {
  aid_code?: InputMaybe<Order_By>;
  auxiliary_unit_id?: InputMaybe<Order_By>;
  barcode?: InputMaybe<Order_By>;
  big_class_id?: InputMaybe<Order_By>;
  big_pic3_url?: InputMaybe<Order_By>;
  big_pic_url?: InputMaybe<Order_By>;
  brand_code?: InputMaybe<Order_By>;
  brand_id?: InputMaybe<Order_By>;
  brand_item_code?: InputMaybe<Order_By>;
  brand_item_name?: InputMaybe<Order_By>;
  brand_name?: InputMaybe<Order_By>;
  center_code?: InputMaybe<Order_By>;
  center_name?: InputMaybe<Order_By>;
  create_time?: InputMaybe<Order_By>;
  deflg?: InputMaybe<Order_By>;
  english_name?: InputMaybe<Order_By>;
  gif_pic_url?: InputMaybe<Order_By>;
  intro?: InputMaybe<Order_By>;
  item_code?: InputMaybe<Order_By>;
  item_id?: InputMaybe<Order_By>;
  item_name?: InputMaybe<Order_By>;
  modify_time?: InputMaybe<Order_By>;
  pkg_type?: InputMaybe<Order_By>;
  pungencyDegree?: InputMaybe<Order_By>;
  salesRevenueTypeId?: InputMaybe<Order_By>;
  shop_code?: InputMaybe<Order_By>;
  shop_name?: InputMaybe<Order_By>;
  small_class_id?: InputMaybe<Order_By>;
  small_pic_url?: InputMaybe<Order_By>;
  std_price?: InputMaybe<Order_By>;
  unit_id?: InputMaybe<Order_By>;
  unit_name?: InputMaybe<Order_By>;
  video_url?: InputMaybe<Order_By>;
  zxjType?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type Fooditems_Min_Fields = {
  __typename?: 'fooditems_min_fields';
  aid_code?: Maybe<Scalars['String']>;
  auxiliary_unit_id?: Maybe<Scalars['String']>;
  barcode?: Maybe<Scalars['String']>;
  big_class_id?: Maybe<Scalars['bigint']>;
  big_pic3_url?: Maybe<Scalars['String']>;
  big_pic_url?: Maybe<Scalars['String']>;
  brand_code?: Maybe<Scalars['String']>;
  brand_id?: Maybe<Scalars['String']>;
  brand_item_code?: Maybe<Scalars['String']>;
  brand_item_name?: Maybe<Scalars['String']>;
  brand_name?: Maybe<Scalars['String']>;
  center_code?: Maybe<Scalars['String']>;
  center_name?: Maybe<Scalars['String']>;
  create_time?: Maybe<Scalars['timestamp']>;
  deflg?: Maybe<Scalars['Int']>;
  english_name?: Maybe<Scalars['String']>;
  gif_pic_url?: Maybe<Scalars['String']>;
  intro?: Maybe<Scalars['String']>;
  item_code?: Maybe<Scalars['Int']>;
  item_id?: Maybe<Scalars['String']>;
  item_name?: Maybe<Scalars['String']>;
  modify_time?: Maybe<Scalars['timestamp']>;
  pkg_type?: Maybe<Scalars['Int']>;
  pungencyDegree?: Maybe<Scalars['String']>;
  salesRevenueTypeId?: Maybe<Scalars['String']>;
  shop_code?: Maybe<Scalars['String']>;
  shop_name?: Maybe<Scalars['String']>;
  small_class_id?: Maybe<Scalars['bigint']>;
  small_pic_url?: Maybe<Scalars['String']>;
  std_price?: Maybe<Scalars['numeric']>;
  unit_id?: Maybe<Scalars['String']>;
  unit_name?: Maybe<Scalars['String']>;
  video_url?: Maybe<Scalars['String']>;
  zxjType?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "fooditems" */
export type Fooditems_Min_Order_By = {
  aid_code?: InputMaybe<Order_By>;
  auxiliary_unit_id?: InputMaybe<Order_By>;
  barcode?: InputMaybe<Order_By>;
  big_class_id?: InputMaybe<Order_By>;
  big_pic3_url?: InputMaybe<Order_By>;
  big_pic_url?: InputMaybe<Order_By>;
  brand_code?: InputMaybe<Order_By>;
  brand_id?: InputMaybe<Order_By>;
  brand_item_code?: InputMaybe<Order_By>;
  brand_item_name?: InputMaybe<Order_By>;
  brand_name?: InputMaybe<Order_By>;
  center_code?: InputMaybe<Order_By>;
  center_name?: InputMaybe<Order_By>;
  create_time?: InputMaybe<Order_By>;
  deflg?: InputMaybe<Order_By>;
  english_name?: InputMaybe<Order_By>;
  gif_pic_url?: InputMaybe<Order_By>;
  intro?: InputMaybe<Order_By>;
  item_code?: InputMaybe<Order_By>;
  item_id?: InputMaybe<Order_By>;
  item_name?: InputMaybe<Order_By>;
  modify_time?: InputMaybe<Order_By>;
  pkg_type?: InputMaybe<Order_By>;
  pungencyDegree?: InputMaybe<Order_By>;
  salesRevenueTypeId?: InputMaybe<Order_By>;
  shop_code?: InputMaybe<Order_By>;
  shop_name?: InputMaybe<Order_By>;
  small_class_id?: InputMaybe<Order_By>;
  small_pic_url?: InputMaybe<Order_By>;
  std_price?: InputMaybe<Order_By>;
  unit_id?: InputMaybe<Order_By>;
  unit_name?: InputMaybe<Order_By>;
  video_url?: InputMaybe<Order_By>;
  zxjType?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "fooditems" */
export type Fooditems_Mutation_Response = {
  __typename?: 'fooditems_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Fooditems>;
};

/** input type for inserting object relation for remote table "fooditems" */
export type Fooditems_Obj_Rel_Insert_Input = {
  data: Fooditems_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<Fooditems_On_Conflict>;
};

/** on_conflict condition type for table "fooditems" */
export type Fooditems_On_Conflict = {
  constraint: Fooditems_Constraint;
  update_columns?: Array<Fooditems_Update_Column>;
  where?: InputMaybe<Fooditems_Bool_Exp>;
};

/** Ordering options when selecting data from "fooditems". */
export type Fooditems_Order_By = {
  aid_code?: InputMaybe<Order_By>;
  auxiliary_unit_id?: InputMaybe<Order_By>;
  barcode?: InputMaybe<Order_By>;
  big_class_id?: InputMaybe<Order_By>;
  big_pic3_url?: InputMaybe<Order_By>;
  big_pic_url?: InputMaybe<Order_By>;
  brand?: InputMaybe<Brands_Order_By>;
  brand_code?: InputMaybe<Order_By>;
  brand_id?: InputMaybe<Order_By>;
  brand_item_code?: InputMaybe<Order_By>;
  brand_item_name?: InputMaybe<Order_By>;
  brand_name?: InputMaybe<Order_By>;
  center_code?: InputMaybe<Order_By>;
  center_name?: InputMaybe<Order_By>;
  create_time?: InputMaybe<Order_By>;
  deflg?: InputMaybe<Order_By>;
  enable_multi_size?: InputMaybe<Order_By>;
  english_name?: InputMaybe<Order_By>;
  foodcategory?: InputMaybe<Foodcategories_Order_By>;
  gif_pic_url?: InputMaybe<Order_By>;
  ingredients_aggregate?: InputMaybe<Ingredients_Aggregate_Order_By>;
  intro?: InputMaybe<Order_By>;
  is_enable?: InputMaybe<Order_By>;
  is_package?: InputMaybe<Order_By>;
  is_temp_item?: InputMaybe<Order_By>;
  item_code?: InputMaybe<Order_By>;
  item_id?: InputMaybe<Order_By>;
  item_name?: InputMaybe<Order_By>;
  modify_time?: InputMaybe<Order_By>;
  pkg_type?: InputMaybe<Order_By>;
  pungencyDegree?: InputMaybe<Order_By>;
  salesRevenueTypeId?: InputMaybe<Order_By>;
  shop_code?: InputMaybe<Order_By>;
  shop_name?: InputMaybe<Order_By>;
  small_class_id?: InputMaybe<Order_By>;
  small_pic_url?: InputMaybe<Order_By>;
  solditems_aggregate?: InputMaybe<Solditems_Aggregate_Order_By>;
  std_price?: InputMaybe<Order_By>;
  unit_id?: InputMaybe<Order_By>;
  unit_name?: InputMaybe<Order_By>;
  video_url?: InputMaybe<Order_By>;
  zxjType?: InputMaybe<Order_By>;
};

/** primary key columns input for table: fooditems */
export type Fooditems_Pk_Columns_Input = {
  item_id: Scalars['String'];
};

/** select columns of table "fooditems" */
export enum Fooditems_Select_Column {
  /** column name */
  AidCode = 'aid_code',
  /** column name */
  AuxiliaryUnitId = 'auxiliary_unit_id',
  /** column name */
  Barcode = 'barcode',
  /** column name */
  BigClassId = 'big_class_id',
  /** column name */
  BigPic3Url = 'big_pic3_url',
  /** column name */
  BigPicUrl = 'big_pic_url',
  /** column name */
  BrandCode = 'brand_code',
  /** column name */
  BrandId = 'brand_id',
  /** column name */
  BrandItemCode = 'brand_item_code',
  /** column name */
  BrandItemName = 'brand_item_name',
  /** column name */
  BrandName = 'brand_name',
  /** column name */
  CenterCode = 'center_code',
  /** column name */
  CenterName = 'center_name',
  /** column name */
  CreateTime = 'create_time',
  /** column name */
  Deflg = 'deflg',
  /** column name */
  EnableMultiSize = 'enable_multi_size',
  /** column name */
  EnglishName = 'english_name',
  /** column name */
  GifPicUrl = 'gif_pic_url',
  /** column name */
  Intro = 'intro',
  /** column name */
  IsEnable = 'is_enable',
  /** column name */
  IsPackage = 'is_package',
  /** column name */
  IsTempItem = 'is_temp_item',
  /** column name */
  ItemCode = 'item_code',
  /** column name */
  ItemId = 'item_id',
  /** column name */
  ItemName = 'item_name',
  /** column name */
  ModifyTime = 'modify_time',
  /** column name */
  PkgType = 'pkg_type',
  /** column name */
  PungencyDegree = 'pungencyDegree',
  /** column name */
  SalesRevenueTypeId = 'salesRevenueTypeId',
  /** column name */
  ShopCode = 'shop_code',
  /** column name */
  ShopName = 'shop_name',
  /** column name */
  SmallClassId = 'small_class_id',
  /** column name */
  SmallPicUrl = 'small_pic_url',
  /** column name */
  StdPrice = 'std_price',
  /** column name */
  UnitId = 'unit_id',
  /** column name */
  UnitName = 'unit_name',
  /** column name */
  VideoUrl = 'video_url',
  /** column name */
  ZxjType = 'zxjType'
}

/** select "fooditems_aggregate_bool_exp_bool_and_arguments_columns" columns of table "fooditems" */
export enum Fooditems_Select_Column_Fooditems_Aggregate_Bool_Exp_Bool_And_Arguments_Columns {
  /** column name */
  EnableMultiSize = 'enable_multi_size',
  /** column name */
  IsEnable = 'is_enable',
  /** column name */
  IsPackage = 'is_package',
  /** column name */
  IsTempItem = 'is_temp_item'
}

/** select "fooditems_aggregate_bool_exp_bool_or_arguments_columns" columns of table "fooditems" */
export enum Fooditems_Select_Column_Fooditems_Aggregate_Bool_Exp_Bool_Or_Arguments_Columns {
  /** column name */
  EnableMultiSize = 'enable_multi_size',
  /** column name */
  IsEnable = 'is_enable',
  /** column name */
  IsPackage = 'is_package',
  /** column name */
  IsTempItem = 'is_temp_item'
}

/** input type for updating data in table "fooditems" */
export type Fooditems_Set_Input = {
  aid_code?: InputMaybe<Scalars['String']>;
  auxiliary_unit_id?: InputMaybe<Scalars['String']>;
  barcode?: InputMaybe<Scalars['String']>;
  big_class_id?: InputMaybe<Scalars['bigint']>;
  big_pic3_url?: InputMaybe<Scalars['String']>;
  big_pic_url?: InputMaybe<Scalars['String']>;
  brand_code?: InputMaybe<Scalars['String']>;
  brand_id?: InputMaybe<Scalars['String']>;
  brand_item_code?: InputMaybe<Scalars['String']>;
  brand_item_name?: InputMaybe<Scalars['String']>;
  brand_name?: InputMaybe<Scalars['String']>;
  center_code?: InputMaybe<Scalars['String']>;
  center_name?: InputMaybe<Scalars['String']>;
  create_time?: InputMaybe<Scalars['timestamp']>;
  deflg?: InputMaybe<Scalars['Int']>;
  enable_multi_size?: InputMaybe<Scalars['Boolean']>;
  english_name?: InputMaybe<Scalars['String']>;
  gif_pic_url?: InputMaybe<Scalars['String']>;
  intro?: InputMaybe<Scalars['String']>;
  is_enable?: InputMaybe<Scalars['Boolean']>;
  is_package?: InputMaybe<Scalars['Boolean']>;
  is_temp_item?: InputMaybe<Scalars['Boolean']>;
  item_code?: InputMaybe<Scalars['Int']>;
  item_id?: InputMaybe<Scalars['String']>;
  item_name?: InputMaybe<Scalars['String']>;
  modify_time?: InputMaybe<Scalars['timestamp']>;
  pkg_type?: InputMaybe<Scalars['Int']>;
  pungencyDegree?: InputMaybe<Scalars['String']>;
  salesRevenueTypeId?: InputMaybe<Scalars['String']>;
  shop_code?: InputMaybe<Scalars['String']>;
  shop_name?: InputMaybe<Scalars['String']>;
  small_class_id?: InputMaybe<Scalars['bigint']>;
  small_pic_url?: InputMaybe<Scalars['String']>;
  std_price?: InputMaybe<Scalars['numeric']>;
  unit_id?: InputMaybe<Scalars['String']>;
  unit_name?: InputMaybe<Scalars['String']>;
  video_url?: InputMaybe<Scalars['String']>;
  zxjType?: InputMaybe<Scalars['String']>;
};

/** aggregate stddev on columns */
export type Fooditems_Stddev_Fields = {
  __typename?: 'fooditems_stddev_fields';
  big_class_id?: Maybe<Scalars['Float']>;
  deflg?: Maybe<Scalars['Float']>;
  item_code?: Maybe<Scalars['Float']>;
  pkg_type?: Maybe<Scalars['Float']>;
  small_class_id?: Maybe<Scalars['Float']>;
  std_price?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "fooditems" */
export type Fooditems_Stddev_Order_By = {
  big_class_id?: InputMaybe<Order_By>;
  deflg?: InputMaybe<Order_By>;
  item_code?: InputMaybe<Order_By>;
  pkg_type?: InputMaybe<Order_By>;
  small_class_id?: InputMaybe<Order_By>;
  std_price?: InputMaybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Fooditems_Stddev_Pop_Fields = {
  __typename?: 'fooditems_stddev_pop_fields';
  big_class_id?: Maybe<Scalars['Float']>;
  deflg?: Maybe<Scalars['Float']>;
  item_code?: Maybe<Scalars['Float']>;
  pkg_type?: Maybe<Scalars['Float']>;
  small_class_id?: Maybe<Scalars['Float']>;
  std_price?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "fooditems" */
export type Fooditems_Stddev_Pop_Order_By = {
  big_class_id?: InputMaybe<Order_By>;
  deflg?: InputMaybe<Order_By>;
  item_code?: InputMaybe<Order_By>;
  pkg_type?: InputMaybe<Order_By>;
  small_class_id?: InputMaybe<Order_By>;
  std_price?: InputMaybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Fooditems_Stddev_Samp_Fields = {
  __typename?: 'fooditems_stddev_samp_fields';
  big_class_id?: Maybe<Scalars['Float']>;
  deflg?: Maybe<Scalars['Float']>;
  item_code?: Maybe<Scalars['Float']>;
  pkg_type?: Maybe<Scalars['Float']>;
  small_class_id?: Maybe<Scalars['Float']>;
  std_price?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "fooditems" */
export type Fooditems_Stddev_Samp_Order_By = {
  big_class_id?: InputMaybe<Order_By>;
  deflg?: InputMaybe<Order_By>;
  item_code?: InputMaybe<Order_By>;
  pkg_type?: InputMaybe<Order_By>;
  small_class_id?: InputMaybe<Order_By>;
  std_price?: InputMaybe<Order_By>;
};

/** Streaming cursor of the table "fooditems" */
export type Fooditems_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Fooditems_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Fooditems_Stream_Cursor_Value_Input = {
  aid_code?: InputMaybe<Scalars['String']>;
  auxiliary_unit_id?: InputMaybe<Scalars['String']>;
  barcode?: InputMaybe<Scalars['String']>;
  big_class_id?: InputMaybe<Scalars['bigint']>;
  big_pic3_url?: InputMaybe<Scalars['String']>;
  big_pic_url?: InputMaybe<Scalars['String']>;
  brand_code?: InputMaybe<Scalars['String']>;
  brand_id?: InputMaybe<Scalars['String']>;
  brand_item_code?: InputMaybe<Scalars['String']>;
  brand_item_name?: InputMaybe<Scalars['String']>;
  brand_name?: InputMaybe<Scalars['String']>;
  center_code?: InputMaybe<Scalars['String']>;
  center_name?: InputMaybe<Scalars['String']>;
  create_time?: InputMaybe<Scalars['timestamp']>;
  deflg?: InputMaybe<Scalars['Int']>;
  enable_multi_size?: InputMaybe<Scalars['Boolean']>;
  english_name?: InputMaybe<Scalars['String']>;
  gif_pic_url?: InputMaybe<Scalars['String']>;
  intro?: InputMaybe<Scalars['String']>;
  is_enable?: InputMaybe<Scalars['Boolean']>;
  is_package?: InputMaybe<Scalars['Boolean']>;
  is_temp_item?: InputMaybe<Scalars['Boolean']>;
  item_code?: InputMaybe<Scalars['Int']>;
  item_id?: InputMaybe<Scalars['String']>;
  item_name?: InputMaybe<Scalars['String']>;
  modify_time?: InputMaybe<Scalars['timestamp']>;
  pkg_type?: InputMaybe<Scalars['Int']>;
  pungencyDegree?: InputMaybe<Scalars['String']>;
  salesRevenueTypeId?: InputMaybe<Scalars['String']>;
  shop_code?: InputMaybe<Scalars['String']>;
  shop_name?: InputMaybe<Scalars['String']>;
  small_class_id?: InputMaybe<Scalars['bigint']>;
  small_pic_url?: InputMaybe<Scalars['String']>;
  std_price?: InputMaybe<Scalars['numeric']>;
  unit_id?: InputMaybe<Scalars['String']>;
  unit_name?: InputMaybe<Scalars['String']>;
  video_url?: InputMaybe<Scalars['String']>;
  zxjType?: InputMaybe<Scalars['String']>;
};

/** aggregate sum on columns */
export type Fooditems_Sum_Fields = {
  __typename?: 'fooditems_sum_fields';
  big_class_id?: Maybe<Scalars['bigint']>;
  deflg?: Maybe<Scalars['Int']>;
  item_code?: Maybe<Scalars['Int']>;
  pkg_type?: Maybe<Scalars['Int']>;
  small_class_id?: Maybe<Scalars['bigint']>;
  std_price?: Maybe<Scalars['numeric']>;
};

/** order by sum() on columns of table "fooditems" */
export type Fooditems_Sum_Order_By = {
  big_class_id?: InputMaybe<Order_By>;
  deflg?: InputMaybe<Order_By>;
  item_code?: InputMaybe<Order_By>;
  pkg_type?: InputMaybe<Order_By>;
  small_class_id?: InputMaybe<Order_By>;
  std_price?: InputMaybe<Order_By>;
};

/** update columns of table "fooditems" */
export enum Fooditems_Update_Column {
  /** column name */
  AidCode = 'aid_code',
  /** column name */
  AuxiliaryUnitId = 'auxiliary_unit_id',
  /** column name */
  Barcode = 'barcode',
  /** column name */
  BigClassId = 'big_class_id',
  /** column name */
  BigPic3Url = 'big_pic3_url',
  /** column name */
  BigPicUrl = 'big_pic_url',
  /** column name */
  BrandCode = 'brand_code',
  /** column name */
  BrandId = 'brand_id',
  /** column name */
  BrandItemCode = 'brand_item_code',
  /** column name */
  BrandItemName = 'brand_item_name',
  /** column name */
  BrandName = 'brand_name',
  /** column name */
  CenterCode = 'center_code',
  /** column name */
  CenterName = 'center_name',
  /** column name */
  CreateTime = 'create_time',
  /** column name */
  Deflg = 'deflg',
  /** column name */
  EnableMultiSize = 'enable_multi_size',
  /** column name */
  EnglishName = 'english_name',
  /** column name */
  GifPicUrl = 'gif_pic_url',
  /** column name */
  Intro = 'intro',
  /** column name */
  IsEnable = 'is_enable',
  /** column name */
  IsPackage = 'is_package',
  /** column name */
  IsTempItem = 'is_temp_item',
  /** column name */
  ItemCode = 'item_code',
  /** column name */
  ItemId = 'item_id',
  /** column name */
  ItemName = 'item_name',
  /** column name */
  ModifyTime = 'modify_time',
  /** column name */
  PkgType = 'pkg_type',
  /** column name */
  PungencyDegree = 'pungencyDegree',
  /** column name */
  SalesRevenueTypeId = 'salesRevenueTypeId',
  /** column name */
  ShopCode = 'shop_code',
  /** column name */
  ShopName = 'shop_name',
  /** column name */
  SmallClassId = 'small_class_id',
  /** column name */
  SmallPicUrl = 'small_pic_url',
  /** column name */
  StdPrice = 'std_price',
  /** column name */
  UnitId = 'unit_id',
  /** column name */
  UnitName = 'unit_name',
  /** column name */
  VideoUrl = 'video_url',
  /** column name */
  ZxjType = 'zxjType'
}

export type Fooditems_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: InputMaybe<Fooditems_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Fooditems_Set_Input>;
  /** filter the rows which have to be updated */
  where: Fooditems_Bool_Exp;
};

/** aggregate var_pop on columns */
export type Fooditems_Var_Pop_Fields = {
  __typename?: 'fooditems_var_pop_fields';
  big_class_id?: Maybe<Scalars['Float']>;
  deflg?: Maybe<Scalars['Float']>;
  item_code?: Maybe<Scalars['Float']>;
  pkg_type?: Maybe<Scalars['Float']>;
  small_class_id?: Maybe<Scalars['Float']>;
  std_price?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "fooditems" */
export type Fooditems_Var_Pop_Order_By = {
  big_class_id?: InputMaybe<Order_By>;
  deflg?: InputMaybe<Order_By>;
  item_code?: InputMaybe<Order_By>;
  pkg_type?: InputMaybe<Order_By>;
  small_class_id?: InputMaybe<Order_By>;
  std_price?: InputMaybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Fooditems_Var_Samp_Fields = {
  __typename?: 'fooditems_var_samp_fields';
  big_class_id?: Maybe<Scalars['Float']>;
  deflg?: Maybe<Scalars['Float']>;
  item_code?: Maybe<Scalars['Float']>;
  pkg_type?: Maybe<Scalars['Float']>;
  small_class_id?: Maybe<Scalars['Float']>;
  std_price?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "fooditems" */
export type Fooditems_Var_Samp_Order_By = {
  big_class_id?: InputMaybe<Order_By>;
  deflg?: InputMaybe<Order_By>;
  item_code?: InputMaybe<Order_By>;
  pkg_type?: InputMaybe<Order_By>;
  small_class_id?: InputMaybe<Order_By>;
  std_price?: InputMaybe<Order_By>;
};

/** aggregate variance on columns */
export type Fooditems_Variance_Fields = {
  __typename?: 'fooditems_variance_fields';
  big_class_id?: Maybe<Scalars['Float']>;
  deflg?: Maybe<Scalars['Float']>;
  item_code?: Maybe<Scalars['Float']>;
  pkg_type?: Maybe<Scalars['Float']>;
  small_class_id?: Maybe<Scalars['Float']>;
  std_price?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "fooditems" */
export type Fooditems_Variance_Order_By = {
  big_class_id?: InputMaybe<Order_By>;
  deflg?: InputMaybe<Order_By>;
  item_code?: InputMaybe<Order_By>;
  pkg_type?: InputMaybe<Order_By>;
  small_class_id?: InputMaybe<Order_By>;
  std_price?: InputMaybe<Order_By>;
};

export type Func_Solditems_Summary_Args = {
  end_date?: InputMaybe<Scalars['date']>;
  shop_ids?: InputMaybe<Scalars['_text']>;
  start_date?: InputMaybe<Scalars['date']>;
};

/** columns and relationships of "ingredients" */
export type Ingredients = {
  __typename?: 'ingredients';
  /** An object relationship */
  fooditem?: Maybe<Fooditems>;
  fooditem_id?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
  qty?: Maybe<Scalars['numeric']>;
  /** An object relationship */
  supplyitem?: Maybe<Supplyitems>;
  supplyitem_id?: Maybe<Scalars['String']>;
};

/** aggregated selection of "ingredients" */
export type Ingredients_Aggregate = {
  __typename?: 'ingredients_aggregate';
  aggregate?: Maybe<Ingredients_Aggregate_Fields>;
  nodes: Array<Ingredients>;
};

export type Ingredients_Aggregate_Bool_Exp = {
  count?: InputMaybe<Ingredients_Aggregate_Bool_Exp_Count>;
};

export type Ingredients_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<Ingredients_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<Ingredients_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "ingredients" */
export type Ingredients_Aggregate_Fields = {
  __typename?: 'ingredients_aggregate_fields';
  avg?: Maybe<Ingredients_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Ingredients_Max_Fields>;
  min?: Maybe<Ingredients_Min_Fields>;
  stddev?: Maybe<Ingredients_Stddev_Fields>;
  stddev_pop?: Maybe<Ingredients_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Ingredients_Stddev_Samp_Fields>;
  sum?: Maybe<Ingredients_Sum_Fields>;
  var_pop?: Maybe<Ingredients_Var_Pop_Fields>;
  var_samp?: Maybe<Ingredients_Var_Samp_Fields>;
  variance?: Maybe<Ingredients_Variance_Fields>;
};


/** aggregate fields of "ingredients" */
export type Ingredients_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Ingredients_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "ingredients" */
export type Ingredients_Aggregate_Order_By = {
  avg?: InputMaybe<Ingredients_Avg_Order_By>;
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<Ingredients_Max_Order_By>;
  min?: InputMaybe<Ingredients_Min_Order_By>;
  stddev?: InputMaybe<Ingredients_Stddev_Order_By>;
  stddev_pop?: InputMaybe<Ingredients_Stddev_Pop_Order_By>;
  stddev_samp?: InputMaybe<Ingredients_Stddev_Samp_Order_By>;
  sum?: InputMaybe<Ingredients_Sum_Order_By>;
  var_pop?: InputMaybe<Ingredients_Var_Pop_Order_By>;
  var_samp?: InputMaybe<Ingredients_Var_Samp_Order_By>;
  variance?: InputMaybe<Ingredients_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "ingredients" */
export type Ingredients_Arr_Rel_Insert_Input = {
  data: Array<Ingredients_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<Ingredients_On_Conflict>;
};

/** aggregate avg on columns */
export type Ingredients_Avg_Fields = {
  __typename?: 'ingredients_avg_fields';
  id?: Maybe<Scalars['Float']>;
  qty?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "ingredients" */
export type Ingredients_Avg_Order_By = {
  id?: InputMaybe<Order_By>;
  qty?: InputMaybe<Order_By>;
};

/** Boolean expression to filter rows from the table "ingredients". All fields are combined with a logical 'AND'. */
export type Ingredients_Bool_Exp = {
  _and?: InputMaybe<Array<Ingredients_Bool_Exp>>;
  _not?: InputMaybe<Ingredients_Bool_Exp>;
  _or?: InputMaybe<Array<Ingredients_Bool_Exp>>;
  fooditem?: InputMaybe<Fooditems_Bool_Exp>;
  fooditem_id?: InputMaybe<String_Comparison_Exp>;
  id?: InputMaybe<Int_Comparison_Exp>;
  qty?: InputMaybe<Numeric_Comparison_Exp>;
  supplyitem?: InputMaybe<Supplyitems_Bool_Exp>;
  supplyitem_id?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "ingredients" */
export enum Ingredients_Constraint {
  /** unique or primary key constraint on columns "fooditem_id", "supplyitem_id" */
  FooditemId36 = 'fooditem_id36',
  /** unique or primary key constraint on columns "id" */
  IngredientsPrimary23 = 'ingredientsPRIMARY23'
}

/** input type for incrementing numeric columns in table "ingredients" */
export type Ingredients_Inc_Input = {
  id?: InputMaybe<Scalars['Int']>;
  qty?: InputMaybe<Scalars['numeric']>;
};

/** input type for inserting data into table "ingredients" */
export type Ingredients_Insert_Input = {
  fooditem?: InputMaybe<Fooditems_Obj_Rel_Insert_Input>;
  fooditem_id?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['Int']>;
  qty?: InputMaybe<Scalars['numeric']>;
  supplyitem?: InputMaybe<Supplyitems_Obj_Rel_Insert_Input>;
  supplyitem_id?: InputMaybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Ingredients_Max_Fields = {
  __typename?: 'ingredients_max_fields';
  fooditem_id?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['Int']>;
  qty?: Maybe<Scalars['numeric']>;
  supplyitem_id?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "ingredients" */
export type Ingredients_Max_Order_By = {
  fooditem_id?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  qty?: InputMaybe<Order_By>;
  supplyitem_id?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type Ingredients_Min_Fields = {
  __typename?: 'ingredients_min_fields';
  fooditem_id?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['Int']>;
  qty?: Maybe<Scalars['numeric']>;
  supplyitem_id?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "ingredients" */
export type Ingredients_Min_Order_By = {
  fooditem_id?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  qty?: InputMaybe<Order_By>;
  supplyitem_id?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "ingredients" */
export type Ingredients_Mutation_Response = {
  __typename?: 'ingredients_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Ingredients>;
};

/** on_conflict condition type for table "ingredients" */
export type Ingredients_On_Conflict = {
  constraint: Ingredients_Constraint;
  update_columns?: Array<Ingredients_Update_Column>;
  where?: InputMaybe<Ingredients_Bool_Exp>;
};

/** Ordering options when selecting data from "ingredients". */
export type Ingredients_Order_By = {
  fooditem?: InputMaybe<Fooditems_Order_By>;
  fooditem_id?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  qty?: InputMaybe<Order_By>;
  supplyitem?: InputMaybe<Supplyitems_Order_By>;
  supplyitem_id?: InputMaybe<Order_By>;
};

/** primary key columns input for table: ingredients */
export type Ingredients_Pk_Columns_Input = {
  id: Scalars['Int'];
};

/** select columns of table "ingredients" */
export enum Ingredients_Select_Column {
  /** column name */
  FooditemId = 'fooditem_id',
  /** column name */
  Id = 'id',
  /** column name */
  Qty = 'qty',
  /** column name */
  SupplyitemId = 'supplyitem_id'
}

/** input type for updating data in table "ingredients" */
export type Ingredients_Set_Input = {
  fooditem_id?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['Int']>;
  qty?: InputMaybe<Scalars['numeric']>;
  supplyitem_id?: InputMaybe<Scalars['String']>;
};

/** aggregate stddev on columns */
export type Ingredients_Stddev_Fields = {
  __typename?: 'ingredients_stddev_fields';
  id?: Maybe<Scalars['Float']>;
  qty?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "ingredients" */
export type Ingredients_Stddev_Order_By = {
  id?: InputMaybe<Order_By>;
  qty?: InputMaybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Ingredients_Stddev_Pop_Fields = {
  __typename?: 'ingredients_stddev_pop_fields';
  id?: Maybe<Scalars['Float']>;
  qty?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "ingredients" */
export type Ingredients_Stddev_Pop_Order_By = {
  id?: InputMaybe<Order_By>;
  qty?: InputMaybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Ingredients_Stddev_Samp_Fields = {
  __typename?: 'ingredients_stddev_samp_fields';
  id?: Maybe<Scalars['Float']>;
  qty?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "ingredients" */
export type Ingredients_Stddev_Samp_Order_By = {
  id?: InputMaybe<Order_By>;
  qty?: InputMaybe<Order_By>;
};

/** Streaming cursor of the table "ingredients" */
export type Ingredients_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Ingredients_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Ingredients_Stream_Cursor_Value_Input = {
  fooditem_id?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['Int']>;
  qty?: InputMaybe<Scalars['numeric']>;
  supplyitem_id?: InputMaybe<Scalars['String']>;
};

/** aggregate sum on columns */
export type Ingredients_Sum_Fields = {
  __typename?: 'ingredients_sum_fields';
  id?: Maybe<Scalars['Int']>;
  qty?: Maybe<Scalars['numeric']>;
};

/** order by sum() on columns of table "ingredients" */
export type Ingredients_Sum_Order_By = {
  id?: InputMaybe<Order_By>;
  qty?: InputMaybe<Order_By>;
};

/** update columns of table "ingredients" */
export enum Ingredients_Update_Column {
  /** column name */
  FooditemId = 'fooditem_id',
  /** column name */
  Id = 'id',
  /** column name */
  Qty = 'qty',
  /** column name */
  SupplyitemId = 'supplyitem_id'
}

export type Ingredients_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: InputMaybe<Ingredients_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Ingredients_Set_Input>;
  /** filter the rows which have to be updated */
  where: Ingredients_Bool_Exp;
};

/** aggregate var_pop on columns */
export type Ingredients_Var_Pop_Fields = {
  __typename?: 'ingredients_var_pop_fields';
  id?: Maybe<Scalars['Float']>;
  qty?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "ingredients" */
export type Ingredients_Var_Pop_Order_By = {
  id?: InputMaybe<Order_By>;
  qty?: InputMaybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Ingredients_Var_Samp_Fields = {
  __typename?: 'ingredients_var_samp_fields';
  id?: Maybe<Scalars['Float']>;
  qty?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "ingredients" */
export type Ingredients_Var_Samp_Order_By = {
  id?: InputMaybe<Order_By>;
  qty?: InputMaybe<Order_By>;
};

/** aggregate variance on columns */
export type Ingredients_Variance_Fields = {
  __typename?: 'ingredients_variance_fields';
  id?: Maybe<Scalars['Float']>;
  qty?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "ingredients" */
export type Ingredients_Variance_Order_By = {
  id?: InputMaybe<Order_By>;
  qty?: InputMaybe<Order_By>;
};

/** columns and relationships of "insurance_fund_types" */
export type Insurance_Fund_Types = {
  __typename?: 'insurance_fund_types';
  id: Scalars['String'];
  /** An array relationship */
  insurance_funds: Array<Insurance_Funds>;
  /** An aggregate relationship */
  insurance_funds_aggregate: Insurance_Funds_Aggregate;
  is_personal: Scalars['Boolean'];
  name: Scalars['String'];
};


/** columns and relationships of "insurance_fund_types" */
export type Insurance_Fund_TypesInsurance_FundsArgs = {
  distinct_on?: InputMaybe<Array<Insurance_Funds_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Insurance_Funds_Order_By>>;
  where?: InputMaybe<Insurance_Funds_Bool_Exp>;
};


/** columns and relationships of "insurance_fund_types" */
export type Insurance_Fund_TypesInsurance_Funds_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Insurance_Funds_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Insurance_Funds_Order_By>>;
  where?: InputMaybe<Insurance_Funds_Bool_Exp>;
};

/** aggregated selection of "insurance_fund_types" */
export type Insurance_Fund_Types_Aggregate = {
  __typename?: 'insurance_fund_types_aggregate';
  aggregate?: Maybe<Insurance_Fund_Types_Aggregate_Fields>;
  nodes: Array<Insurance_Fund_Types>;
};

/** aggregate fields of "insurance_fund_types" */
export type Insurance_Fund_Types_Aggregate_Fields = {
  __typename?: 'insurance_fund_types_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Insurance_Fund_Types_Max_Fields>;
  min?: Maybe<Insurance_Fund_Types_Min_Fields>;
};


/** aggregate fields of "insurance_fund_types" */
export type Insurance_Fund_Types_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Insurance_Fund_Types_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** Boolean expression to filter rows from the table "insurance_fund_types". All fields are combined with a logical 'AND'. */
export type Insurance_Fund_Types_Bool_Exp = {
  _and?: InputMaybe<Array<Insurance_Fund_Types_Bool_Exp>>;
  _not?: InputMaybe<Insurance_Fund_Types_Bool_Exp>;
  _or?: InputMaybe<Array<Insurance_Fund_Types_Bool_Exp>>;
  id?: InputMaybe<String_Comparison_Exp>;
  insurance_funds?: InputMaybe<Insurance_Funds_Bool_Exp>;
  insurance_funds_aggregate?: InputMaybe<Insurance_Funds_Aggregate_Bool_Exp>;
  is_personal?: InputMaybe<Boolean_Comparison_Exp>;
  name?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "insurance_fund_types" */
export enum Insurance_Fund_Types_Constraint {
  /** unique or primary key constraint on columns "name" */
  InsuranceFundTypesNameKey = 'insurance_fund_types_name_key',
  /** unique or primary key constraint on columns "id" */
  InsuranceFundTypesPkey = 'insurance_fund_types_pkey'
}

/** input type for inserting data into table "insurance_fund_types" */
export type Insurance_Fund_Types_Insert_Input = {
  id?: InputMaybe<Scalars['String']>;
  insurance_funds?: InputMaybe<Insurance_Funds_Arr_Rel_Insert_Input>;
  is_personal?: InputMaybe<Scalars['Boolean']>;
  name?: InputMaybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Insurance_Fund_Types_Max_Fields = {
  __typename?: 'insurance_fund_types_max_fields';
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};

/** aggregate min on columns */
export type Insurance_Fund_Types_Min_Fields = {
  __typename?: 'insurance_fund_types_min_fields';
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};

/** response of any mutation on the table "insurance_fund_types" */
export type Insurance_Fund_Types_Mutation_Response = {
  __typename?: 'insurance_fund_types_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Insurance_Fund_Types>;
};

/** input type for inserting object relation for remote table "insurance_fund_types" */
export type Insurance_Fund_Types_Obj_Rel_Insert_Input = {
  data: Insurance_Fund_Types_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<Insurance_Fund_Types_On_Conflict>;
};

/** on_conflict condition type for table "insurance_fund_types" */
export type Insurance_Fund_Types_On_Conflict = {
  constraint: Insurance_Fund_Types_Constraint;
  update_columns?: Array<Insurance_Fund_Types_Update_Column>;
  where?: InputMaybe<Insurance_Fund_Types_Bool_Exp>;
};

/** Ordering options when selecting data from "insurance_fund_types". */
export type Insurance_Fund_Types_Order_By = {
  id?: InputMaybe<Order_By>;
  insurance_funds_aggregate?: InputMaybe<Insurance_Funds_Aggregate_Order_By>;
  is_personal?: InputMaybe<Order_By>;
  name?: InputMaybe<Order_By>;
};

/** primary key columns input for table: insurance_fund_types */
export type Insurance_Fund_Types_Pk_Columns_Input = {
  id: Scalars['String'];
};

/** select columns of table "insurance_fund_types" */
export enum Insurance_Fund_Types_Select_Column {
  /** column name */
  Id = 'id',
  /** column name */
  IsPersonal = 'is_personal',
  /** column name */
  Name = 'name'
}

/** input type for updating data in table "insurance_fund_types" */
export type Insurance_Fund_Types_Set_Input = {
  id?: InputMaybe<Scalars['String']>;
  is_personal?: InputMaybe<Scalars['Boolean']>;
  name?: InputMaybe<Scalars['String']>;
};

/** Streaming cursor of the table "insurance_fund_types" */
export type Insurance_Fund_Types_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Insurance_Fund_Types_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Insurance_Fund_Types_Stream_Cursor_Value_Input = {
  id?: InputMaybe<Scalars['String']>;
  is_personal?: InputMaybe<Scalars['Boolean']>;
  name?: InputMaybe<Scalars['String']>;
};

/** update columns of table "insurance_fund_types" */
export enum Insurance_Fund_Types_Update_Column {
  /** column name */
  Id = 'id',
  /** column name */
  IsPersonal = 'is_personal',
  /** column name */
  Name = 'name'
}

export type Insurance_Fund_Types_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Insurance_Fund_Types_Set_Input>;
  /** filter the rows which have to be updated */
  where: Insurance_Fund_Types_Bool_Exp;
};

/** columns and relationships of "insurance_funds" */
export type Insurance_Funds = {
  __typename?: 'insurance_funds';
  amount: Scalars['numeric'];
  /** An object relationship */
  department: Departments;
  department_id: Scalars['String'];
  /** An object relationship */
  employee: Employees;
  employee_id: Scalars['String'];
  id: Scalars['String'];
  /** An object relationship */
  insurance_fund_type: Insurance_Fund_Types;
  insurance_fund_type_id: Scalars['String'];
  month: Scalars['String'];
};

/** aggregated selection of "insurance_funds" */
export type Insurance_Funds_Aggregate = {
  __typename?: 'insurance_funds_aggregate';
  aggregate?: Maybe<Insurance_Funds_Aggregate_Fields>;
  nodes: Array<Insurance_Funds>;
};

export type Insurance_Funds_Aggregate_Bool_Exp = {
  count?: InputMaybe<Insurance_Funds_Aggregate_Bool_Exp_Count>;
};

export type Insurance_Funds_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<Insurance_Funds_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<Insurance_Funds_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "insurance_funds" */
export type Insurance_Funds_Aggregate_Fields = {
  __typename?: 'insurance_funds_aggregate_fields';
  avg?: Maybe<Insurance_Funds_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Insurance_Funds_Max_Fields>;
  min?: Maybe<Insurance_Funds_Min_Fields>;
  stddev?: Maybe<Insurance_Funds_Stddev_Fields>;
  stddev_pop?: Maybe<Insurance_Funds_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Insurance_Funds_Stddev_Samp_Fields>;
  sum?: Maybe<Insurance_Funds_Sum_Fields>;
  var_pop?: Maybe<Insurance_Funds_Var_Pop_Fields>;
  var_samp?: Maybe<Insurance_Funds_Var_Samp_Fields>;
  variance?: Maybe<Insurance_Funds_Variance_Fields>;
};


/** aggregate fields of "insurance_funds" */
export type Insurance_Funds_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Insurance_Funds_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "insurance_funds" */
export type Insurance_Funds_Aggregate_Order_By = {
  avg?: InputMaybe<Insurance_Funds_Avg_Order_By>;
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<Insurance_Funds_Max_Order_By>;
  min?: InputMaybe<Insurance_Funds_Min_Order_By>;
  stddev?: InputMaybe<Insurance_Funds_Stddev_Order_By>;
  stddev_pop?: InputMaybe<Insurance_Funds_Stddev_Pop_Order_By>;
  stddev_samp?: InputMaybe<Insurance_Funds_Stddev_Samp_Order_By>;
  sum?: InputMaybe<Insurance_Funds_Sum_Order_By>;
  var_pop?: InputMaybe<Insurance_Funds_Var_Pop_Order_By>;
  var_samp?: InputMaybe<Insurance_Funds_Var_Samp_Order_By>;
  variance?: InputMaybe<Insurance_Funds_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "insurance_funds" */
export type Insurance_Funds_Arr_Rel_Insert_Input = {
  data: Array<Insurance_Funds_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<Insurance_Funds_On_Conflict>;
};

/** aggregate avg on columns */
export type Insurance_Funds_Avg_Fields = {
  __typename?: 'insurance_funds_avg_fields';
  amount?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "insurance_funds" */
export type Insurance_Funds_Avg_Order_By = {
  amount?: InputMaybe<Order_By>;
};

/** Boolean expression to filter rows from the table "insurance_funds". All fields are combined with a logical 'AND'. */
export type Insurance_Funds_Bool_Exp = {
  _and?: InputMaybe<Array<Insurance_Funds_Bool_Exp>>;
  _not?: InputMaybe<Insurance_Funds_Bool_Exp>;
  _or?: InputMaybe<Array<Insurance_Funds_Bool_Exp>>;
  amount?: InputMaybe<Numeric_Comparison_Exp>;
  department?: InputMaybe<Departments_Bool_Exp>;
  department_id?: InputMaybe<String_Comparison_Exp>;
  employee?: InputMaybe<Employees_Bool_Exp>;
  employee_id?: InputMaybe<String_Comparison_Exp>;
  id?: InputMaybe<String_Comparison_Exp>;
  insurance_fund_type?: InputMaybe<Insurance_Fund_Types_Bool_Exp>;
  insurance_fund_type_id?: InputMaybe<String_Comparison_Exp>;
  month?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "insurance_funds" */
export enum Insurance_Funds_Constraint {
  /** unique or primary key constraint on columns "id" */
  InsuranceFundsPkey = 'insurance_funds_pkey'
}

/** input type for incrementing numeric columns in table "insurance_funds" */
export type Insurance_Funds_Inc_Input = {
  amount?: InputMaybe<Scalars['numeric']>;
};

/** input type for inserting data into table "insurance_funds" */
export type Insurance_Funds_Insert_Input = {
  amount?: InputMaybe<Scalars['numeric']>;
  department?: InputMaybe<Departments_Obj_Rel_Insert_Input>;
  department_id?: InputMaybe<Scalars['String']>;
  employee?: InputMaybe<Employees_Obj_Rel_Insert_Input>;
  employee_id?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['String']>;
  insurance_fund_type?: InputMaybe<Insurance_Fund_Types_Obj_Rel_Insert_Input>;
  insurance_fund_type_id?: InputMaybe<Scalars['String']>;
  month?: InputMaybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Insurance_Funds_Max_Fields = {
  __typename?: 'insurance_funds_max_fields';
  amount?: Maybe<Scalars['numeric']>;
  department_id?: Maybe<Scalars['String']>;
  employee_id?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  insurance_fund_type_id?: Maybe<Scalars['String']>;
  month?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "insurance_funds" */
export type Insurance_Funds_Max_Order_By = {
  amount?: InputMaybe<Order_By>;
  department_id?: InputMaybe<Order_By>;
  employee_id?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  insurance_fund_type_id?: InputMaybe<Order_By>;
  month?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type Insurance_Funds_Min_Fields = {
  __typename?: 'insurance_funds_min_fields';
  amount?: Maybe<Scalars['numeric']>;
  department_id?: Maybe<Scalars['String']>;
  employee_id?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  insurance_fund_type_id?: Maybe<Scalars['String']>;
  month?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "insurance_funds" */
export type Insurance_Funds_Min_Order_By = {
  amount?: InputMaybe<Order_By>;
  department_id?: InputMaybe<Order_By>;
  employee_id?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  insurance_fund_type_id?: InputMaybe<Order_By>;
  month?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "insurance_funds" */
export type Insurance_Funds_Mutation_Response = {
  __typename?: 'insurance_funds_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Insurance_Funds>;
};

/** on_conflict condition type for table "insurance_funds" */
export type Insurance_Funds_On_Conflict = {
  constraint: Insurance_Funds_Constraint;
  update_columns?: Array<Insurance_Funds_Update_Column>;
  where?: InputMaybe<Insurance_Funds_Bool_Exp>;
};

/** Ordering options when selecting data from "insurance_funds". */
export type Insurance_Funds_Order_By = {
  amount?: InputMaybe<Order_By>;
  department?: InputMaybe<Departments_Order_By>;
  department_id?: InputMaybe<Order_By>;
  employee?: InputMaybe<Employees_Order_By>;
  employee_id?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  insurance_fund_type?: InputMaybe<Insurance_Fund_Types_Order_By>;
  insurance_fund_type_id?: InputMaybe<Order_By>;
  month?: InputMaybe<Order_By>;
};

/** primary key columns input for table: insurance_funds */
export type Insurance_Funds_Pk_Columns_Input = {
  id: Scalars['String'];
};

/** select columns of table "insurance_funds" */
export enum Insurance_Funds_Select_Column {
  /** column name */
  Amount = 'amount',
  /** column name */
  DepartmentId = 'department_id',
  /** column name */
  EmployeeId = 'employee_id',
  /** column name */
  Id = 'id',
  /** column name */
  InsuranceFundTypeId = 'insurance_fund_type_id',
  /** column name */
  Month = 'month'
}

/** input type for updating data in table "insurance_funds" */
export type Insurance_Funds_Set_Input = {
  amount?: InputMaybe<Scalars['numeric']>;
  department_id?: InputMaybe<Scalars['String']>;
  employee_id?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['String']>;
  insurance_fund_type_id?: InputMaybe<Scalars['String']>;
  month?: InputMaybe<Scalars['String']>;
};

/** aggregate stddev on columns */
export type Insurance_Funds_Stddev_Fields = {
  __typename?: 'insurance_funds_stddev_fields';
  amount?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "insurance_funds" */
export type Insurance_Funds_Stddev_Order_By = {
  amount?: InputMaybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Insurance_Funds_Stddev_Pop_Fields = {
  __typename?: 'insurance_funds_stddev_pop_fields';
  amount?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "insurance_funds" */
export type Insurance_Funds_Stddev_Pop_Order_By = {
  amount?: InputMaybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Insurance_Funds_Stddev_Samp_Fields = {
  __typename?: 'insurance_funds_stddev_samp_fields';
  amount?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "insurance_funds" */
export type Insurance_Funds_Stddev_Samp_Order_By = {
  amount?: InputMaybe<Order_By>;
};

/** Streaming cursor of the table "insurance_funds" */
export type Insurance_Funds_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Insurance_Funds_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Insurance_Funds_Stream_Cursor_Value_Input = {
  amount?: InputMaybe<Scalars['numeric']>;
  department_id?: InputMaybe<Scalars['String']>;
  employee_id?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['String']>;
  insurance_fund_type_id?: InputMaybe<Scalars['String']>;
  month?: InputMaybe<Scalars['String']>;
};

/** aggregate sum on columns */
export type Insurance_Funds_Sum_Fields = {
  __typename?: 'insurance_funds_sum_fields';
  amount?: Maybe<Scalars['numeric']>;
};

/** order by sum() on columns of table "insurance_funds" */
export type Insurance_Funds_Sum_Order_By = {
  amount?: InputMaybe<Order_By>;
};

/** update columns of table "insurance_funds" */
export enum Insurance_Funds_Update_Column {
  /** column name */
  Amount = 'amount',
  /** column name */
  DepartmentId = 'department_id',
  /** column name */
  EmployeeId = 'employee_id',
  /** column name */
  Id = 'id',
  /** column name */
  InsuranceFundTypeId = 'insurance_fund_type_id',
  /** column name */
  Month = 'month'
}

export type Insurance_Funds_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: InputMaybe<Insurance_Funds_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Insurance_Funds_Set_Input>;
  /** filter the rows which have to be updated */
  where: Insurance_Funds_Bool_Exp;
};

/** aggregate var_pop on columns */
export type Insurance_Funds_Var_Pop_Fields = {
  __typename?: 'insurance_funds_var_pop_fields';
  amount?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "insurance_funds" */
export type Insurance_Funds_Var_Pop_Order_By = {
  amount?: InputMaybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Insurance_Funds_Var_Samp_Fields = {
  __typename?: 'insurance_funds_var_samp_fields';
  amount?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "insurance_funds" */
export type Insurance_Funds_Var_Samp_Order_By = {
  amount?: InputMaybe<Order_By>;
};

/** aggregate variance on columns */
export type Insurance_Funds_Variance_Fields = {
  __typename?: 'insurance_funds_variance_fields';
  amount?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "insurance_funds" */
export type Insurance_Funds_Variance_Order_By = {
  amount?: InputMaybe<Order_By>;
};

/** Boolean expression to compare columns of type "json". All fields are combined with logical 'AND'. */
export type Json_Comparison_Exp = {
  _eq?: InputMaybe<Scalars['json']>;
  _gt?: InputMaybe<Scalars['json']>;
  _gte?: InputMaybe<Scalars['json']>;
  _in?: InputMaybe<Array<Scalars['json']>>;
  _is_null?: InputMaybe<Scalars['Boolean']>;
  _lt?: InputMaybe<Scalars['json']>;
  _lte?: InputMaybe<Scalars['json']>;
  _neq?: InputMaybe<Scalars['json']>;
  _nin?: InputMaybe<Array<Scalars['json']>>;
};

/** columns and relationships of "leave_types" */
export type Leave_Types = {
  __typename?: 'leave_types';
  /** An array relationship */
  employee_leaves: Array<Employee_Leaves>;
  /** An aggregate relationship */
  employee_leaves_aggregate: Employee_Leaves_Aggregate;
  id: Scalars['String'];
  name: Scalars['String'];
  /** An array relationship */
  service_entitlements: Array<Service_Entitlement>;
  /** An aggregate relationship */
  service_entitlements_aggregate: Service_Entitlement_Aggregate;
};


/** columns and relationships of "leave_types" */
export type Leave_TypesEmployee_LeavesArgs = {
  distinct_on?: InputMaybe<Array<Employee_Leaves_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Employee_Leaves_Order_By>>;
  where?: InputMaybe<Employee_Leaves_Bool_Exp>;
};


/** columns and relationships of "leave_types" */
export type Leave_TypesEmployee_Leaves_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Employee_Leaves_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Employee_Leaves_Order_By>>;
  where?: InputMaybe<Employee_Leaves_Bool_Exp>;
};


/** columns and relationships of "leave_types" */
export type Leave_TypesService_EntitlementsArgs = {
  distinct_on?: InputMaybe<Array<Service_Entitlement_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Service_Entitlement_Order_By>>;
  where?: InputMaybe<Service_Entitlement_Bool_Exp>;
};


/** columns and relationships of "leave_types" */
export type Leave_TypesService_Entitlements_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Service_Entitlement_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Service_Entitlement_Order_By>>;
  where?: InputMaybe<Service_Entitlement_Bool_Exp>;
};

/** aggregated selection of "leave_types" */
export type Leave_Types_Aggregate = {
  __typename?: 'leave_types_aggregate';
  aggregate?: Maybe<Leave_Types_Aggregate_Fields>;
  nodes: Array<Leave_Types>;
};

/** aggregate fields of "leave_types" */
export type Leave_Types_Aggregate_Fields = {
  __typename?: 'leave_types_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Leave_Types_Max_Fields>;
  min?: Maybe<Leave_Types_Min_Fields>;
};


/** aggregate fields of "leave_types" */
export type Leave_Types_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Leave_Types_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** Boolean expression to filter rows from the table "leave_types". All fields are combined with a logical 'AND'. */
export type Leave_Types_Bool_Exp = {
  _and?: InputMaybe<Array<Leave_Types_Bool_Exp>>;
  _not?: InputMaybe<Leave_Types_Bool_Exp>;
  _or?: InputMaybe<Array<Leave_Types_Bool_Exp>>;
  employee_leaves?: InputMaybe<Employee_Leaves_Bool_Exp>;
  employee_leaves_aggregate?: InputMaybe<Employee_Leaves_Aggregate_Bool_Exp>;
  id?: InputMaybe<String_Comparison_Exp>;
  name?: InputMaybe<String_Comparison_Exp>;
  service_entitlements?: InputMaybe<Service_Entitlement_Bool_Exp>;
  service_entitlements_aggregate?: InputMaybe<Service_Entitlement_Aggregate_Bool_Exp>;
};

/** unique or primary key constraints on table "leave_types" */
export enum Leave_Types_Constraint {
  /** unique or primary key constraint on columns "id" */
  LeaveTypesPkey = 'leave_types_pkey'
}

/** input type for inserting data into table "leave_types" */
export type Leave_Types_Insert_Input = {
  employee_leaves?: InputMaybe<Employee_Leaves_Arr_Rel_Insert_Input>;
  id?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  service_entitlements?: InputMaybe<Service_Entitlement_Arr_Rel_Insert_Input>;
};

/** aggregate max on columns */
export type Leave_Types_Max_Fields = {
  __typename?: 'leave_types_max_fields';
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};

/** aggregate min on columns */
export type Leave_Types_Min_Fields = {
  __typename?: 'leave_types_min_fields';
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};

/** response of any mutation on the table "leave_types" */
export type Leave_Types_Mutation_Response = {
  __typename?: 'leave_types_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Leave_Types>;
};

/** input type for inserting object relation for remote table "leave_types" */
export type Leave_Types_Obj_Rel_Insert_Input = {
  data: Leave_Types_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<Leave_Types_On_Conflict>;
};

/** on_conflict condition type for table "leave_types" */
export type Leave_Types_On_Conflict = {
  constraint: Leave_Types_Constraint;
  update_columns?: Array<Leave_Types_Update_Column>;
  where?: InputMaybe<Leave_Types_Bool_Exp>;
};

/** Ordering options when selecting data from "leave_types". */
export type Leave_Types_Order_By = {
  employee_leaves_aggregate?: InputMaybe<Employee_Leaves_Aggregate_Order_By>;
  id?: InputMaybe<Order_By>;
  name?: InputMaybe<Order_By>;
  service_entitlements_aggregate?: InputMaybe<Service_Entitlement_Aggregate_Order_By>;
};

/** primary key columns input for table: leave_types */
export type Leave_Types_Pk_Columns_Input = {
  id: Scalars['String'];
};

/** select columns of table "leave_types" */
export enum Leave_Types_Select_Column {
  /** column name */
  Id = 'id',
  /** column name */
  Name = 'name'
}

/** input type for updating data in table "leave_types" */
export type Leave_Types_Set_Input = {
  id?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
};

/** Streaming cursor of the table "leave_types" */
export type Leave_Types_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Leave_Types_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Leave_Types_Stream_Cursor_Value_Input = {
  id?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
};

/** update columns of table "leave_types" */
export enum Leave_Types_Update_Column {
  /** column name */
  Id = 'id',
  /** column name */
  Name = 'name'
}

export type Leave_Types_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Leave_Types_Set_Input>;
  /** filter the rows which have to be updated */
  where: Leave_Types_Bool_Exp;
};

/** columns and relationships of "monthlysalary" */
export type Monthlysalary = {
  __typename?: 'monthlysalary';
  /** An object relationship */
  attendance_department: Departments;
  attendance_department_id: Scalars['String'];
  basic_salary?: Maybe<Scalars['numeric']>;
  basic_salary_base?: Maybe<Scalars['numeric']>;
  basic_salary_monthly?: Maybe<Scalars['numeric']>;
  bonus_deduction?: Maybe<Scalars['numeric']>;
  corp_insurance_funds?: Maybe<Scalars['numeric']>;
  corp_salary_cost?: Maybe<Scalars['numeric']>;
  /** An object relationship */
  employee: Employees;
  employee_confirm: Scalars['Boolean'];
  /** An object relationship */
  employee_department?: Maybe<Departments>;
  employee_department_id?: Maybe<Scalars['String']>;
  employee_id: Scalars['String'];
  gross_salary?: Maybe<Scalars['numeric']>;
  hire_date?: Maybe<Scalars['date']>;
  insurance_subsidy?: Maybe<Scalars['numeric']>;
  month: Scalars['date'];
  net_salary?: Maybe<Scalars['numeric']>;
  overtime_pay?: Maybe<Scalars['numeric']>;
  personal_insurance_funds?: Maybe<Scalars['numeric']>;
  position_pay?: Maybe<Scalars['numeric']>;
  refuse_reason?: Maybe<Scalars['String']>;
  salary_type?: Maybe<Scalars['String']>;
  total_length_day?: Maybe<Scalars['Float']>;
  total_length_hour?: Maybe<Scalars['Float']>;
  work_age?: Maybe<Scalars['Int']>;
  work_age_bonus?: Maybe<Scalars['Float']>;
  work_age_type?: Maybe<Scalars['String']>;
};

/** aggregated selection of "monthlysalary" */
export type Monthlysalary_Aggregate = {
  __typename?: 'monthlysalary_aggregate';
  aggregate?: Maybe<Monthlysalary_Aggregate_Fields>;
  nodes: Array<Monthlysalary>;
};

export type Monthlysalary_Aggregate_Bool_Exp = {
  bool_and?: InputMaybe<Monthlysalary_Aggregate_Bool_Exp_Bool_And>;
  bool_or?: InputMaybe<Monthlysalary_Aggregate_Bool_Exp_Bool_Or>;
  count?: InputMaybe<Monthlysalary_Aggregate_Bool_Exp_Count>;
};

export type Monthlysalary_Aggregate_Bool_Exp_Bool_And = {
  arguments: Monthlysalary_Select_Column_Monthlysalary_Aggregate_Bool_Exp_Bool_And_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<Monthlysalary_Bool_Exp>;
  predicate: Boolean_Comparison_Exp;
};

export type Monthlysalary_Aggregate_Bool_Exp_Bool_Or = {
  arguments: Monthlysalary_Select_Column_Monthlysalary_Aggregate_Bool_Exp_Bool_Or_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<Monthlysalary_Bool_Exp>;
  predicate: Boolean_Comparison_Exp;
};

export type Monthlysalary_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<Monthlysalary_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<Monthlysalary_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "monthlysalary" */
export type Monthlysalary_Aggregate_Fields = {
  __typename?: 'monthlysalary_aggregate_fields';
  avg?: Maybe<Monthlysalary_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Monthlysalary_Max_Fields>;
  min?: Maybe<Monthlysalary_Min_Fields>;
  stddev?: Maybe<Monthlysalary_Stddev_Fields>;
  stddev_pop?: Maybe<Monthlysalary_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Monthlysalary_Stddev_Samp_Fields>;
  sum?: Maybe<Monthlysalary_Sum_Fields>;
  var_pop?: Maybe<Monthlysalary_Var_Pop_Fields>;
  var_samp?: Maybe<Monthlysalary_Var_Samp_Fields>;
  variance?: Maybe<Monthlysalary_Variance_Fields>;
};


/** aggregate fields of "monthlysalary" */
export type Monthlysalary_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Monthlysalary_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "monthlysalary" */
export type Monthlysalary_Aggregate_Order_By = {
  avg?: InputMaybe<Monthlysalary_Avg_Order_By>;
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<Monthlysalary_Max_Order_By>;
  min?: InputMaybe<Monthlysalary_Min_Order_By>;
  stddev?: InputMaybe<Monthlysalary_Stddev_Order_By>;
  stddev_pop?: InputMaybe<Monthlysalary_Stddev_Pop_Order_By>;
  stddev_samp?: InputMaybe<Monthlysalary_Stddev_Samp_Order_By>;
  sum?: InputMaybe<Monthlysalary_Sum_Order_By>;
  var_pop?: InputMaybe<Monthlysalary_Var_Pop_Order_By>;
  var_samp?: InputMaybe<Monthlysalary_Var_Samp_Order_By>;
  variance?: InputMaybe<Monthlysalary_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "monthlysalary" */
export type Monthlysalary_Arr_Rel_Insert_Input = {
  data: Array<Monthlysalary_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<Monthlysalary_On_Conflict>;
};

/** aggregate avg on columns */
export type Monthlysalary_Avg_Fields = {
  __typename?: 'monthlysalary_avg_fields';
  basic_salary?: Maybe<Scalars['Float']>;
  basic_salary_base?: Maybe<Scalars['Float']>;
  basic_salary_monthly?: Maybe<Scalars['Float']>;
  bonus_deduction?: Maybe<Scalars['Float']>;
  corp_insurance_funds?: Maybe<Scalars['Float']>;
  corp_salary_cost?: Maybe<Scalars['Float']>;
  gross_salary?: Maybe<Scalars['Float']>;
  insurance_subsidy?: Maybe<Scalars['Float']>;
  net_salary?: Maybe<Scalars['Float']>;
  overtime_pay?: Maybe<Scalars['Float']>;
  personal_insurance_funds?: Maybe<Scalars['Float']>;
  position_pay?: Maybe<Scalars['Float']>;
  total_length_day?: Maybe<Scalars['Float']>;
  total_length_hour?: Maybe<Scalars['Float']>;
  work_age?: Maybe<Scalars['Float']>;
  work_age_bonus?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "monthlysalary" */
export type Monthlysalary_Avg_Order_By = {
  basic_salary?: InputMaybe<Order_By>;
  basic_salary_base?: InputMaybe<Order_By>;
  basic_salary_monthly?: InputMaybe<Order_By>;
  bonus_deduction?: InputMaybe<Order_By>;
  corp_insurance_funds?: InputMaybe<Order_By>;
  corp_salary_cost?: InputMaybe<Order_By>;
  gross_salary?: InputMaybe<Order_By>;
  insurance_subsidy?: InputMaybe<Order_By>;
  net_salary?: InputMaybe<Order_By>;
  overtime_pay?: InputMaybe<Order_By>;
  personal_insurance_funds?: InputMaybe<Order_By>;
  position_pay?: InputMaybe<Order_By>;
  total_length_day?: InputMaybe<Order_By>;
  total_length_hour?: InputMaybe<Order_By>;
  work_age?: InputMaybe<Order_By>;
  work_age_bonus?: InputMaybe<Order_By>;
};

/** Boolean expression to filter rows from the table "monthlysalary". All fields are combined with a logical 'AND'. */
export type Monthlysalary_Bool_Exp = {
  _and?: InputMaybe<Array<Monthlysalary_Bool_Exp>>;
  _not?: InputMaybe<Monthlysalary_Bool_Exp>;
  _or?: InputMaybe<Array<Monthlysalary_Bool_Exp>>;
  attendance_department?: InputMaybe<Departments_Bool_Exp>;
  attendance_department_id?: InputMaybe<String_Comparison_Exp>;
  basic_salary?: InputMaybe<Numeric_Comparison_Exp>;
  basic_salary_base?: InputMaybe<Numeric_Comparison_Exp>;
  basic_salary_monthly?: InputMaybe<Numeric_Comparison_Exp>;
  bonus_deduction?: InputMaybe<Numeric_Comparison_Exp>;
  corp_insurance_funds?: InputMaybe<Numeric_Comparison_Exp>;
  corp_salary_cost?: InputMaybe<Numeric_Comparison_Exp>;
  employee?: InputMaybe<Employees_Bool_Exp>;
  employee_confirm?: InputMaybe<Boolean_Comparison_Exp>;
  employee_department?: InputMaybe<Departments_Bool_Exp>;
  employee_department_id?: InputMaybe<String_Comparison_Exp>;
  employee_id?: InputMaybe<String_Comparison_Exp>;
  gross_salary?: InputMaybe<Numeric_Comparison_Exp>;
  hire_date?: InputMaybe<Date_Comparison_Exp>;
  insurance_subsidy?: InputMaybe<Numeric_Comparison_Exp>;
  month?: InputMaybe<Date_Comparison_Exp>;
  net_salary?: InputMaybe<Numeric_Comparison_Exp>;
  overtime_pay?: InputMaybe<Numeric_Comparison_Exp>;
  personal_insurance_funds?: InputMaybe<Numeric_Comparison_Exp>;
  position_pay?: InputMaybe<Numeric_Comparison_Exp>;
  refuse_reason?: InputMaybe<String_Comparison_Exp>;
  salary_type?: InputMaybe<String_Comparison_Exp>;
  total_length_day?: InputMaybe<Float_Comparison_Exp>;
  total_length_hour?: InputMaybe<Float_Comparison_Exp>;
  work_age?: InputMaybe<Int_Comparison_Exp>;
  work_age_bonus?: InputMaybe<Float_Comparison_Exp>;
  work_age_type?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "monthlysalary" */
export enum Monthlysalary_Constraint {
  /** unique or primary key constraint on columns "employee_id", "attendance_department_id", "month" */
  MonthlysalaryPkey = 'monthlysalary_pkey'
}

/** input type for incrementing numeric columns in table "monthlysalary" */
export type Monthlysalary_Inc_Input = {
  basic_salary?: InputMaybe<Scalars['numeric']>;
  basic_salary_base?: InputMaybe<Scalars['numeric']>;
  basic_salary_monthly?: InputMaybe<Scalars['numeric']>;
  bonus_deduction?: InputMaybe<Scalars['numeric']>;
  corp_insurance_funds?: InputMaybe<Scalars['numeric']>;
  corp_salary_cost?: InputMaybe<Scalars['numeric']>;
  gross_salary?: InputMaybe<Scalars['numeric']>;
  insurance_subsidy?: InputMaybe<Scalars['numeric']>;
  net_salary?: InputMaybe<Scalars['numeric']>;
  overtime_pay?: InputMaybe<Scalars['numeric']>;
  personal_insurance_funds?: InputMaybe<Scalars['numeric']>;
  position_pay?: InputMaybe<Scalars['numeric']>;
  total_length_day?: InputMaybe<Scalars['Float']>;
  total_length_hour?: InputMaybe<Scalars['Float']>;
  work_age?: InputMaybe<Scalars['Int']>;
  work_age_bonus?: InputMaybe<Scalars['Float']>;
};

/** input type for inserting data into table "monthlysalary" */
export type Monthlysalary_Insert_Input = {
  attendance_department?: InputMaybe<Departments_Obj_Rel_Insert_Input>;
  attendance_department_id?: InputMaybe<Scalars['String']>;
  basic_salary?: InputMaybe<Scalars['numeric']>;
  basic_salary_base?: InputMaybe<Scalars['numeric']>;
  basic_salary_monthly?: InputMaybe<Scalars['numeric']>;
  bonus_deduction?: InputMaybe<Scalars['numeric']>;
  corp_insurance_funds?: InputMaybe<Scalars['numeric']>;
  corp_salary_cost?: InputMaybe<Scalars['numeric']>;
  employee?: InputMaybe<Employees_Obj_Rel_Insert_Input>;
  employee_confirm?: InputMaybe<Scalars['Boolean']>;
  employee_department?: InputMaybe<Departments_Obj_Rel_Insert_Input>;
  employee_department_id?: InputMaybe<Scalars['String']>;
  employee_id?: InputMaybe<Scalars['String']>;
  gross_salary?: InputMaybe<Scalars['numeric']>;
  hire_date?: InputMaybe<Scalars['date']>;
  insurance_subsidy?: InputMaybe<Scalars['numeric']>;
  month?: InputMaybe<Scalars['date']>;
  net_salary?: InputMaybe<Scalars['numeric']>;
  overtime_pay?: InputMaybe<Scalars['numeric']>;
  personal_insurance_funds?: InputMaybe<Scalars['numeric']>;
  position_pay?: InputMaybe<Scalars['numeric']>;
  refuse_reason?: InputMaybe<Scalars['String']>;
  salary_type?: InputMaybe<Scalars['String']>;
  total_length_day?: InputMaybe<Scalars['Float']>;
  total_length_hour?: InputMaybe<Scalars['Float']>;
  work_age?: InputMaybe<Scalars['Int']>;
  work_age_bonus?: InputMaybe<Scalars['Float']>;
  work_age_type?: InputMaybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Monthlysalary_Max_Fields = {
  __typename?: 'monthlysalary_max_fields';
  attendance_department_id?: Maybe<Scalars['String']>;
  basic_salary?: Maybe<Scalars['numeric']>;
  basic_salary_base?: Maybe<Scalars['numeric']>;
  basic_salary_monthly?: Maybe<Scalars['numeric']>;
  bonus_deduction?: Maybe<Scalars['numeric']>;
  corp_insurance_funds?: Maybe<Scalars['numeric']>;
  corp_salary_cost?: Maybe<Scalars['numeric']>;
  employee_department_id?: Maybe<Scalars['String']>;
  employee_id?: Maybe<Scalars['String']>;
  gross_salary?: Maybe<Scalars['numeric']>;
  hire_date?: Maybe<Scalars['date']>;
  insurance_subsidy?: Maybe<Scalars['numeric']>;
  month?: Maybe<Scalars['date']>;
  net_salary?: Maybe<Scalars['numeric']>;
  overtime_pay?: Maybe<Scalars['numeric']>;
  personal_insurance_funds?: Maybe<Scalars['numeric']>;
  position_pay?: Maybe<Scalars['numeric']>;
  refuse_reason?: Maybe<Scalars['String']>;
  salary_type?: Maybe<Scalars['String']>;
  total_length_day?: Maybe<Scalars['Float']>;
  total_length_hour?: Maybe<Scalars['Float']>;
  work_age?: Maybe<Scalars['Int']>;
  work_age_bonus?: Maybe<Scalars['Float']>;
  work_age_type?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "monthlysalary" */
export type Monthlysalary_Max_Order_By = {
  attendance_department_id?: InputMaybe<Order_By>;
  basic_salary?: InputMaybe<Order_By>;
  basic_salary_base?: InputMaybe<Order_By>;
  basic_salary_monthly?: InputMaybe<Order_By>;
  bonus_deduction?: InputMaybe<Order_By>;
  corp_insurance_funds?: InputMaybe<Order_By>;
  corp_salary_cost?: InputMaybe<Order_By>;
  employee_department_id?: InputMaybe<Order_By>;
  employee_id?: InputMaybe<Order_By>;
  gross_salary?: InputMaybe<Order_By>;
  hire_date?: InputMaybe<Order_By>;
  insurance_subsidy?: InputMaybe<Order_By>;
  month?: InputMaybe<Order_By>;
  net_salary?: InputMaybe<Order_By>;
  overtime_pay?: InputMaybe<Order_By>;
  personal_insurance_funds?: InputMaybe<Order_By>;
  position_pay?: InputMaybe<Order_By>;
  refuse_reason?: InputMaybe<Order_By>;
  salary_type?: InputMaybe<Order_By>;
  total_length_day?: InputMaybe<Order_By>;
  total_length_hour?: InputMaybe<Order_By>;
  work_age?: InputMaybe<Order_By>;
  work_age_bonus?: InputMaybe<Order_By>;
  work_age_type?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type Monthlysalary_Min_Fields = {
  __typename?: 'monthlysalary_min_fields';
  attendance_department_id?: Maybe<Scalars['String']>;
  basic_salary?: Maybe<Scalars['numeric']>;
  basic_salary_base?: Maybe<Scalars['numeric']>;
  basic_salary_monthly?: Maybe<Scalars['numeric']>;
  bonus_deduction?: Maybe<Scalars['numeric']>;
  corp_insurance_funds?: Maybe<Scalars['numeric']>;
  corp_salary_cost?: Maybe<Scalars['numeric']>;
  employee_department_id?: Maybe<Scalars['String']>;
  employee_id?: Maybe<Scalars['String']>;
  gross_salary?: Maybe<Scalars['numeric']>;
  hire_date?: Maybe<Scalars['date']>;
  insurance_subsidy?: Maybe<Scalars['numeric']>;
  month?: Maybe<Scalars['date']>;
  net_salary?: Maybe<Scalars['numeric']>;
  overtime_pay?: Maybe<Scalars['numeric']>;
  personal_insurance_funds?: Maybe<Scalars['numeric']>;
  position_pay?: Maybe<Scalars['numeric']>;
  refuse_reason?: Maybe<Scalars['String']>;
  salary_type?: Maybe<Scalars['String']>;
  total_length_day?: Maybe<Scalars['Float']>;
  total_length_hour?: Maybe<Scalars['Float']>;
  work_age?: Maybe<Scalars['Int']>;
  work_age_bonus?: Maybe<Scalars['Float']>;
  work_age_type?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "monthlysalary" */
export type Monthlysalary_Min_Order_By = {
  attendance_department_id?: InputMaybe<Order_By>;
  basic_salary?: InputMaybe<Order_By>;
  basic_salary_base?: InputMaybe<Order_By>;
  basic_salary_monthly?: InputMaybe<Order_By>;
  bonus_deduction?: InputMaybe<Order_By>;
  corp_insurance_funds?: InputMaybe<Order_By>;
  corp_salary_cost?: InputMaybe<Order_By>;
  employee_department_id?: InputMaybe<Order_By>;
  employee_id?: InputMaybe<Order_By>;
  gross_salary?: InputMaybe<Order_By>;
  hire_date?: InputMaybe<Order_By>;
  insurance_subsidy?: InputMaybe<Order_By>;
  month?: InputMaybe<Order_By>;
  net_salary?: InputMaybe<Order_By>;
  overtime_pay?: InputMaybe<Order_By>;
  personal_insurance_funds?: InputMaybe<Order_By>;
  position_pay?: InputMaybe<Order_By>;
  refuse_reason?: InputMaybe<Order_By>;
  salary_type?: InputMaybe<Order_By>;
  total_length_day?: InputMaybe<Order_By>;
  total_length_hour?: InputMaybe<Order_By>;
  work_age?: InputMaybe<Order_By>;
  work_age_bonus?: InputMaybe<Order_By>;
  work_age_type?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "monthlysalary" */
export type Monthlysalary_Mutation_Response = {
  __typename?: 'monthlysalary_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Monthlysalary>;
};

/** on_conflict condition type for table "monthlysalary" */
export type Monthlysalary_On_Conflict = {
  constraint: Monthlysalary_Constraint;
  update_columns?: Array<Monthlysalary_Update_Column>;
  where?: InputMaybe<Monthlysalary_Bool_Exp>;
};

/** Ordering options when selecting data from "monthlysalary". */
export type Monthlysalary_Order_By = {
  attendance_department?: InputMaybe<Departments_Order_By>;
  attendance_department_id?: InputMaybe<Order_By>;
  basic_salary?: InputMaybe<Order_By>;
  basic_salary_base?: InputMaybe<Order_By>;
  basic_salary_monthly?: InputMaybe<Order_By>;
  bonus_deduction?: InputMaybe<Order_By>;
  corp_insurance_funds?: InputMaybe<Order_By>;
  corp_salary_cost?: InputMaybe<Order_By>;
  employee?: InputMaybe<Employees_Order_By>;
  employee_confirm?: InputMaybe<Order_By>;
  employee_department?: InputMaybe<Departments_Order_By>;
  employee_department_id?: InputMaybe<Order_By>;
  employee_id?: InputMaybe<Order_By>;
  gross_salary?: InputMaybe<Order_By>;
  hire_date?: InputMaybe<Order_By>;
  insurance_subsidy?: InputMaybe<Order_By>;
  month?: InputMaybe<Order_By>;
  net_salary?: InputMaybe<Order_By>;
  overtime_pay?: InputMaybe<Order_By>;
  personal_insurance_funds?: InputMaybe<Order_By>;
  position_pay?: InputMaybe<Order_By>;
  refuse_reason?: InputMaybe<Order_By>;
  salary_type?: InputMaybe<Order_By>;
  total_length_day?: InputMaybe<Order_By>;
  total_length_hour?: InputMaybe<Order_By>;
  work_age?: InputMaybe<Order_By>;
  work_age_bonus?: InputMaybe<Order_By>;
  work_age_type?: InputMaybe<Order_By>;
};

/** primary key columns input for table: monthlysalary */
export type Monthlysalary_Pk_Columns_Input = {
  attendance_department_id: Scalars['String'];
  employee_id: Scalars['String'];
  month: Scalars['date'];
};

/** select columns of table "monthlysalary" */
export enum Monthlysalary_Select_Column {
  /** column name */
  AttendanceDepartmentId = 'attendance_department_id',
  /** column name */
  BasicSalary = 'basic_salary',
  /** column name */
  BasicSalaryBase = 'basic_salary_base',
  /** column name */
  BasicSalaryMonthly = 'basic_salary_monthly',
  /** column name */
  BonusDeduction = 'bonus_deduction',
  /** column name */
  CorpInsuranceFunds = 'corp_insurance_funds',
  /** column name */
  CorpSalaryCost = 'corp_salary_cost',
  /** column name */
  EmployeeConfirm = 'employee_confirm',
  /** column name */
  EmployeeDepartmentId = 'employee_department_id',
  /** column name */
  EmployeeId = 'employee_id',
  /** column name */
  GrossSalary = 'gross_salary',
  /** column name */
  HireDate = 'hire_date',
  /** column name */
  InsuranceSubsidy = 'insurance_subsidy',
  /** column name */
  Month = 'month',
  /** column name */
  NetSalary = 'net_salary',
  /** column name */
  OvertimePay = 'overtime_pay',
  /** column name */
  PersonalInsuranceFunds = 'personal_insurance_funds',
  /** column name */
  PositionPay = 'position_pay',
  /** column name */
  RefuseReason = 'refuse_reason',
  /** column name */
  SalaryType = 'salary_type',
  /** column name */
  TotalLengthDay = 'total_length_day',
  /** column name */
  TotalLengthHour = 'total_length_hour',
  /** column name */
  WorkAge = 'work_age',
  /** column name */
  WorkAgeBonus = 'work_age_bonus',
  /** column name */
  WorkAgeType = 'work_age_type'
}

/** select "monthlysalary_aggregate_bool_exp_bool_and_arguments_columns" columns of table "monthlysalary" */
export enum Monthlysalary_Select_Column_Monthlysalary_Aggregate_Bool_Exp_Bool_And_Arguments_Columns {
  /** column name */
  EmployeeConfirm = 'employee_confirm'
}

/** select "monthlysalary_aggregate_bool_exp_bool_or_arguments_columns" columns of table "monthlysalary" */
export enum Monthlysalary_Select_Column_Monthlysalary_Aggregate_Bool_Exp_Bool_Or_Arguments_Columns {
  /** column name */
  EmployeeConfirm = 'employee_confirm'
}

/** input type for updating data in table "monthlysalary" */
export type Monthlysalary_Set_Input = {
  attendance_department_id?: InputMaybe<Scalars['String']>;
  basic_salary?: InputMaybe<Scalars['numeric']>;
  basic_salary_base?: InputMaybe<Scalars['numeric']>;
  basic_salary_monthly?: InputMaybe<Scalars['numeric']>;
  bonus_deduction?: InputMaybe<Scalars['numeric']>;
  corp_insurance_funds?: InputMaybe<Scalars['numeric']>;
  corp_salary_cost?: InputMaybe<Scalars['numeric']>;
  employee_confirm?: InputMaybe<Scalars['Boolean']>;
  employee_department_id?: InputMaybe<Scalars['String']>;
  employee_id?: InputMaybe<Scalars['String']>;
  gross_salary?: InputMaybe<Scalars['numeric']>;
  hire_date?: InputMaybe<Scalars['date']>;
  insurance_subsidy?: InputMaybe<Scalars['numeric']>;
  month?: InputMaybe<Scalars['date']>;
  net_salary?: InputMaybe<Scalars['numeric']>;
  overtime_pay?: InputMaybe<Scalars['numeric']>;
  personal_insurance_funds?: InputMaybe<Scalars['numeric']>;
  position_pay?: InputMaybe<Scalars['numeric']>;
  refuse_reason?: InputMaybe<Scalars['String']>;
  salary_type?: InputMaybe<Scalars['String']>;
  total_length_day?: InputMaybe<Scalars['Float']>;
  total_length_hour?: InputMaybe<Scalars['Float']>;
  work_age?: InputMaybe<Scalars['Int']>;
  work_age_bonus?: InputMaybe<Scalars['Float']>;
  work_age_type?: InputMaybe<Scalars['String']>;
};

/** aggregate stddev on columns */
export type Monthlysalary_Stddev_Fields = {
  __typename?: 'monthlysalary_stddev_fields';
  basic_salary?: Maybe<Scalars['Float']>;
  basic_salary_base?: Maybe<Scalars['Float']>;
  basic_salary_monthly?: Maybe<Scalars['Float']>;
  bonus_deduction?: Maybe<Scalars['Float']>;
  corp_insurance_funds?: Maybe<Scalars['Float']>;
  corp_salary_cost?: Maybe<Scalars['Float']>;
  gross_salary?: Maybe<Scalars['Float']>;
  insurance_subsidy?: Maybe<Scalars['Float']>;
  net_salary?: Maybe<Scalars['Float']>;
  overtime_pay?: Maybe<Scalars['Float']>;
  personal_insurance_funds?: Maybe<Scalars['Float']>;
  position_pay?: Maybe<Scalars['Float']>;
  total_length_day?: Maybe<Scalars['Float']>;
  total_length_hour?: Maybe<Scalars['Float']>;
  work_age?: Maybe<Scalars['Float']>;
  work_age_bonus?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "monthlysalary" */
export type Monthlysalary_Stddev_Order_By = {
  basic_salary?: InputMaybe<Order_By>;
  basic_salary_base?: InputMaybe<Order_By>;
  basic_salary_monthly?: InputMaybe<Order_By>;
  bonus_deduction?: InputMaybe<Order_By>;
  corp_insurance_funds?: InputMaybe<Order_By>;
  corp_salary_cost?: InputMaybe<Order_By>;
  gross_salary?: InputMaybe<Order_By>;
  insurance_subsidy?: InputMaybe<Order_By>;
  net_salary?: InputMaybe<Order_By>;
  overtime_pay?: InputMaybe<Order_By>;
  personal_insurance_funds?: InputMaybe<Order_By>;
  position_pay?: InputMaybe<Order_By>;
  total_length_day?: InputMaybe<Order_By>;
  total_length_hour?: InputMaybe<Order_By>;
  work_age?: InputMaybe<Order_By>;
  work_age_bonus?: InputMaybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Monthlysalary_Stddev_Pop_Fields = {
  __typename?: 'monthlysalary_stddev_pop_fields';
  basic_salary?: Maybe<Scalars['Float']>;
  basic_salary_base?: Maybe<Scalars['Float']>;
  basic_salary_monthly?: Maybe<Scalars['Float']>;
  bonus_deduction?: Maybe<Scalars['Float']>;
  corp_insurance_funds?: Maybe<Scalars['Float']>;
  corp_salary_cost?: Maybe<Scalars['Float']>;
  gross_salary?: Maybe<Scalars['Float']>;
  insurance_subsidy?: Maybe<Scalars['Float']>;
  net_salary?: Maybe<Scalars['Float']>;
  overtime_pay?: Maybe<Scalars['Float']>;
  personal_insurance_funds?: Maybe<Scalars['Float']>;
  position_pay?: Maybe<Scalars['Float']>;
  total_length_day?: Maybe<Scalars['Float']>;
  total_length_hour?: Maybe<Scalars['Float']>;
  work_age?: Maybe<Scalars['Float']>;
  work_age_bonus?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "monthlysalary" */
export type Monthlysalary_Stddev_Pop_Order_By = {
  basic_salary?: InputMaybe<Order_By>;
  basic_salary_base?: InputMaybe<Order_By>;
  basic_salary_monthly?: InputMaybe<Order_By>;
  bonus_deduction?: InputMaybe<Order_By>;
  corp_insurance_funds?: InputMaybe<Order_By>;
  corp_salary_cost?: InputMaybe<Order_By>;
  gross_salary?: InputMaybe<Order_By>;
  insurance_subsidy?: InputMaybe<Order_By>;
  net_salary?: InputMaybe<Order_By>;
  overtime_pay?: InputMaybe<Order_By>;
  personal_insurance_funds?: InputMaybe<Order_By>;
  position_pay?: InputMaybe<Order_By>;
  total_length_day?: InputMaybe<Order_By>;
  total_length_hour?: InputMaybe<Order_By>;
  work_age?: InputMaybe<Order_By>;
  work_age_bonus?: InputMaybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Monthlysalary_Stddev_Samp_Fields = {
  __typename?: 'monthlysalary_stddev_samp_fields';
  basic_salary?: Maybe<Scalars['Float']>;
  basic_salary_base?: Maybe<Scalars['Float']>;
  basic_salary_monthly?: Maybe<Scalars['Float']>;
  bonus_deduction?: Maybe<Scalars['Float']>;
  corp_insurance_funds?: Maybe<Scalars['Float']>;
  corp_salary_cost?: Maybe<Scalars['Float']>;
  gross_salary?: Maybe<Scalars['Float']>;
  insurance_subsidy?: Maybe<Scalars['Float']>;
  net_salary?: Maybe<Scalars['Float']>;
  overtime_pay?: Maybe<Scalars['Float']>;
  personal_insurance_funds?: Maybe<Scalars['Float']>;
  position_pay?: Maybe<Scalars['Float']>;
  total_length_day?: Maybe<Scalars['Float']>;
  total_length_hour?: Maybe<Scalars['Float']>;
  work_age?: Maybe<Scalars['Float']>;
  work_age_bonus?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "monthlysalary" */
export type Monthlysalary_Stddev_Samp_Order_By = {
  basic_salary?: InputMaybe<Order_By>;
  basic_salary_base?: InputMaybe<Order_By>;
  basic_salary_monthly?: InputMaybe<Order_By>;
  bonus_deduction?: InputMaybe<Order_By>;
  corp_insurance_funds?: InputMaybe<Order_By>;
  corp_salary_cost?: InputMaybe<Order_By>;
  gross_salary?: InputMaybe<Order_By>;
  insurance_subsidy?: InputMaybe<Order_By>;
  net_salary?: InputMaybe<Order_By>;
  overtime_pay?: InputMaybe<Order_By>;
  personal_insurance_funds?: InputMaybe<Order_By>;
  position_pay?: InputMaybe<Order_By>;
  total_length_day?: InputMaybe<Order_By>;
  total_length_hour?: InputMaybe<Order_By>;
  work_age?: InputMaybe<Order_By>;
  work_age_bonus?: InputMaybe<Order_By>;
};

/** Streaming cursor of the table "monthlysalary" */
export type Monthlysalary_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Monthlysalary_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Monthlysalary_Stream_Cursor_Value_Input = {
  attendance_department_id?: InputMaybe<Scalars['String']>;
  basic_salary?: InputMaybe<Scalars['numeric']>;
  basic_salary_base?: InputMaybe<Scalars['numeric']>;
  basic_salary_monthly?: InputMaybe<Scalars['numeric']>;
  bonus_deduction?: InputMaybe<Scalars['numeric']>;
  corp_insurance_funds?: InputMaybe<Scalars['numeric']>;
  corp_salary_cost?: InputMaybe<Scalars['numeric']>;
  employee_confirm?: InputMaybe<Scalars['Boolean']>;
  employee_department_id?: InputMaybe<Scalars['String']>;
  employee_id?: InputMaybe<Scalars['String']>;
  gross_salary?: InputMaybe<Scalars['numeric']>;
  hire_date?: InputMaybe<Scalars['date']>;
  insurance_subsidy?: InputMaybe<Scalars['numeric']>;
  month?: InputMaybe<Scalars['date']>;
  net_salary?: InputMaybe<Scalars['numeric']>;
  overtime_pay?: InputMaybe<Scalars['numeric']>;
  personal_insurance_funds?: InputMaybe<Scalars['numeric']>;
  position_pay?: InputMaybe<Scalars['numeric']>;
  refuse_reason?: InputMaybe<Scalars['String']>;
  salary_type?: InputMaybe<Scalars['String']>;
  total_length_day?: InputMaybe<Scalars['Float']>;
  total_length_hour?: InputMaybe<Scalars['Float']>;
  work_age?: InputMaybe<Scalars['Int']>;
  work_age_bonus?: InputMaybe<Scalars['Float']>;
  work_age_type?: InputMaybe<Scalars['String']>;
};

/** aggregate sum on columns */
export type Monthlysalary_Sum_Fields = {
  __typename?: 'monthlysalary_sum_fields';
  basic_salary?: Maybe<Scalars['numeric']>;
  basic_salary_base?: Maybe<Scalars['numeric']>;
  basic_salary_monthly?: Maybe<Scalars['numeric']>;
  bonus_deduction?: Maybe<Scalars['numeric']>;
  corp_insurance_funds?: Maybe<Scalars['numeric']>;
  corp_salary_cost?: Maybe<Scalars['numeric']>;
  gross_salary?: Maybe<Scalars['numeric']>;
  insurance_subsidy?: Maybe<Scalars['numeric']>;
  net_salary?: Maybe<Scalars['numeric']>;
  overtime_pay?: Maybe<Scalars['numeric']>;
  personal_insurance_funds?: Maybe<Scalars['numeric']>;
  position_pay?: Maybe<Scalars['numeric']>;
  total_length_day?: Maybe<Scalars['Float']>;
  total_length_hour?: Maybe<Scalars['Float']>;
  work_age?: Maybe<Scalars['Int']>;
  work_age_bonus?: Maybe<Scalars['Float']>;
};

/** order by sum() on columns of table "monthlysalary" */
export type Monthlysalary_Sum_Order_By = {
  basic_salary?: InputMaybe<Order_By>;
  basic_salary_base?: InputMaybe<Order_By>;
  basic_salary_monthly?: InputMaybe<Order_By>;
  bonus_deduction?: InputMaybe<Order_By>;
  corp_insurance_funds?: InputMaybe<Order_By>;
  corp_salary_cost?: InputMaybe<Order_By>;
  gross_salary?: InputMaybe<Order_By>;
  insurance_subsidy?: InputMaybe<Order_By>;
  net_salary?: InputMaybe<Order_By>;
  overtime_pay?: InputMaybe<Order_By>;
  personal_insurance_funds?: InputMaybe<Order_By>;
  position_pay?: InputMaybe<Order_By>;
  total_length_day?: InputMaybe<Order_By>;
  total_length_hour?: InputMaybe<Order_By>;
  work_age?: InputMaybe<Order_By>;
  work_age_bonus?: InputMaybe<Order_By>;
};

/** update columns of table "monthlysalary" */
export enum Monthlysalary_Update_Column {
  /** column name */
  AttendanceDepartmentId = 'attendance_department_id',
  /** column name */
  BasicSalary = 'basic_salary',
  /** column name */
  BasicSalaryBase = 'basic_salary_base',
  /** column name */
  BasicSalaryMonthly = 'basic_salary_monthly',
  /** column name */
  BonusDeduction = 'bonus_deduction',
  /** column name */
  CorpInsuranceFunds = 'corp_insurance_funds',
  /** column name */
  CorpSalaryCost = 'corp_salary_cost',
  /** column name */
  EmployeeConfirm = 'employee_confirm',
  /** column name */
  EmployeeDepartmentId = 'employee_department_id',
  /** column name */
  EmployeeId = 'employee_id',
  /** column name */
  GrossSalary = 'gross_salary',
  /** column name */
  HireDate = 'hire_date',
  /** column name */
  InsuranceSubsidy = 'insurance_subsidy',
  /** column name */
  Month = 'month',
  /** column name */
  NetSalary = 'net_salary',
  /** column name */
  OvertimePay = 'overtime_pay',
  /** column name */
  PersonalInsuranceFunds = 'personal_insurance_funds',
  /** column name */
  PositionPay = 'position_pay',
  /** column name */
  RefuseReason = 'refuse_reason',
  /** column name */
  SalaryType = 'salary_type',
  /** column name */
  TotalLengthDay = 'total_length_day',
  /** column name */
  TotalLengthHour = 'total_length_hour',
  /** column name */
  WorkAge = 'work_age',
  /** column name */
  WorkAgeBonus = 'work_age_bonus',
  /** column name */
  WorkAgeType = 'work_age_type'
}

export type Monthlysalary_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: InputMaybe<Monthlysalary_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Monthlysalary_Set_Input>;
  /** filter the rows which have to be updated */
  where: Monthlysalary_Bool_Exp;
};

/** aggregate var_pop on columns */
export type Monthlysalary_Var_Pop_Fields = {
  __typename?: 'monthlysalary_var_pop_fields';
  basic_salary?: Maybe<Scalars['Float']>;
  basic_salary_base?: Maybe<Scalars['Float']>;
  basic_salary_monthly?: Maybe<Scalars['Float']>;
  bonus_deduction?: Maybe<Scalars['Float']>;
  corp_insurance_funds?: Maybe<Scalars['Float']>;
  corp_salary_cost?: Maybe<Scalars['Float']>;
  gross_salary?: Maybe<Scalars['Float']>;
  insurance_subsidy?: Maybe<Scalars['Float']>;
  net_salary?: Maybe<Scalars['Float']>;
  overtime_pay?: Maybe<Scalars['Float']>;
  personal_insurance_funds?: Maybe<Scalars['Float']>;
  position_pay?: Maybe<Scalars['Float']>;
  total_length_day?: Maybe<Scalars['Float']>;
  total_length_hour?: Maybe<Scalars['Float']>;
  work_age?: Maybe<Scalars['Float']>;
  work_age_bonus?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "monthlysalary" */
export type Monthlysalary_Var_Pop_Order_By = {
  basic_salary?: InputMaybe<Order_By>;
  basic_salary_base?: InputMaybe<Order_By>;
  basic_salary_monthly?: InputMaybe<Order_By>;
  bonus_deduction?: InputMaybe<Order_By>;
  corp_insurance_funds?: InputMaybe<Order_By>;
  corp_salary_cost?: InputMaybe<Order_By>;
  gross_salary?: InputMaybe<Order_By>;
  insurance_subsidy?: InputMaybe<Order_By>;
  net_salary?: InputMaybe<Order_By>;
  overtime_pay?: InputMaybe<Order_By>;
  personal_insurance_funds?: InputMaybe<Order_By>;
  position_pay?: InputMaybe<Order_By>;
  total_length_day?: InputMaybe<Order_By>;
  total_length_hour?: InputMaybe<Order_By>;
  work_age?: InputMaybe<Order_By>;
  work_age_bonus?: InputMaybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Monthlysalary_Var_Samp_Fields = {
  __typename?: 'monthlysalary_var_samp_fields';
  basic_salary?: Maybe<Scalars['Float']>;
  basic_salary_base?: Maybe<Scalars['Float']>;
  basic_salary_monthly?: Maybe<Scalars['Float']>;
  bonus_deduction?: Maybe<Scalars['Float']>;
  corp_insurance_funds?: Maybe<Scalars['Float']>;
  corp_salary_cost?: Maybe<Scalars['Float']>;
  gross_salary?: Maybe<Scalars['Float']>;
  insurance_subsidy?: Maybe<Scalars['Float']>;
  net_salary?: Maybe<Scalars['Float']>;
  overtime_pay?: Maybe<Scalars['Float']>;
  personal_insurance_funds?: Maybe<Scalars['Float']>;
  position_pay?: Maybe<Scalars['Float']>;
  total_length_day?: Maybe<Scalars['Float']>;
  total_length_hour?: Maybe<Scalars['Float']>;
  work_age?: Maybe<Scalars['Float']>;
  work_age_bonus?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "monthlysalary" */
export type Monthlysalary_Var_Samp_Order_By = {
  basic_salary?: InputMaybe<Order_By>;
  basic_salary_base?: InputMaybe<Order_By>;
  basic_salary_monthly?: InputMaybe<Order_By>;
  bonus_deduction?: InputMaybe<Order_By>;
  corp_insurance_funds?: InputMaybe<Order_By>;
  corp_salary_cost?: InputMaybe<Order_By>;
  gross_salary?: InputMaybe<Order_By>;
  insurance_subsidy?: InputMaybe<Order_By>;
  net_salary?: InputMaybe<Order_By>;
  overtime_pay?: InputMaybe<Order_By>;
  personal_insurance_funds?: InputMaybe<Order_By>;
  position_pay?: InputMaybe<Order_By>;
  total_length_day?: InputMaybe<Order_By>;
  total_length_hour?: InputMaybe<Order_By>;
  work_age?: InputMaybe<Order_By>;
  work_age_bonus?: InputMaybe<Order_By>;
};

/** aggregate variance on columns */
export type Monthlysalary_Variance_Fields = {
  __typename?: 'monthlysalary_variance_fields';
  basic_salary?: Maybe<Scalars['Float']>;
  basic_salary_base?: Maybe<Scalars['Float']>;
  basic_salary_monthly?: Maybe<Scalars['Float']>;
  bonus_deduction?: Maybe<Scalars['Float']>;
  corp_insurance_funds?: Maybe<Scalars['Float']>;
  corp_salary_cost?: Maybe<Scalars['Float']>;
  gross_salary?: Maybe<Scalars['Float']>;
  insurance_subsidy?: Maybe<Scalars['Float']>;
  net_salary?: Maybe<Scalars['Float']>;
  overtime_pay?: Maybe<Scalars['Float']>;
  personal_insurance_funds?: Maybe<Scalars['Float']>;
  position_pay?: Maybe<Scalars['Float']>;
  total_length_day?: Maybe<Scalars['Float']>;
  total_length_hour?: Maybe<Scalars['Float']>;
  work_age?: Maybe<Scalars['Float']>;
  work_age_bonus?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "monthlysalary" */
export type Monthlysalary_Variance_Order_By = {
  basic_salary?: InputMaybe<Order_By>;
  basic_salary_base?: InputMaybe<Order_By>;
  basic_salary_monthly?: InputMaybe<Order_By>;
  bonus_deduction?: InputMaybe<Order_By>;
  corp_insurance_funds?: InputMaybe<Order_By>;
  corp_salary_cost?: InputMaybe<Order_By>;
  gross_salary?: InputMaybe<Order_By>;
  insurance_subsidy?: InputMaybe<Order_By>;
  net_salary?: InputMaybe<Order_By>;
  overtime_pay?: InputMaybe<Order_By>;
  personal_insurance_funds?: InputMaybe<Order_By>;
  position_pay?: InputMaybe<Order_By>;
  total_length_day?: InputMaybe<Order_By>;
  total_length_hour?: InputMaybe<Order_By>;
  work_age?: InputMaybe<Order_By>;
  work_age_bonus?: InputMaybe<Order_By>;
};

/** mutation root */
export type Mutation_Root = {
  __typename?: 'mutation_root';
  /** delete data from the table: "attendance" */
  delete_attendance?: Maybe<Attendance_Mutation_Response>;
  /** delete single row from the table: "attendance" */
  delete_attendance_by_pk?: Maybe<Attendance>;
  /** delete data from the table: "attendance_group_leaders" */
  delete_attendance_group_leaders?: Maybe<Attendance_Group_Leaders_Mutation_Response>;
  /** delete single row from the table: "attendance_group_leaders" */
  delete_attendance_group_leaders_by_pk?: Maybe<Attendance_Group_Leaders>;
  /** delete data from the table: "attendance_group_shifts" */
  delete_attendance_group_shifts?: Maybe<Attendance_Group_Shifts_Mutation_Response>;
  /** delete single row from the table: "attendance_group_shifts" */
  delete_attendance_group_shifts_by_pk?: Maybe<Attendance_Group_Shifts>;
  /** delete data from the table: "attendance_group_subleaders" */
  delete_attendance_group_subleaders?: Maybe<Attendance_Group_Subleaders_Mutation_Response>;
  /** delete single row from the table: "attendance_group_subleaders" */
  delete_attendance_group_subleaders_by_pk?: Maybe<Attendance_Group_Subleaders>;
  /** delete data from the table: "attendance_groups" */
  delete_attendance_groups?: Maybe<Attendance_Groups_Mutation_Response>;
  /** delete single row from the table: "attendance_groups" */
  delete_attendance_groups_by_pk?: Maybe<Attendance_Groups>;
  /** delete data from the table: "attendance_locations" */
  delete_attendance_locations?: Maybe<Attendance_Locations_Mutation_Response>;
  /** delete single row from the table: "attendance_locations" */
  delete_attendance_locations_by_pk?: Maybe<Attendance_Locations>;
  /** delete data from the table: "bills" */
  delete_bills?: Maybe<Bills_Mutation_Response>;
  /** delete single row from the table: "bills" */
  delete_bills_by_pk?: Maybe<Bills>;
  /** delete data from the table: "bonusdeductions" */
  delete_bonusdeductions?: Maybe<Bonusdeductions_Mutation_Response>;
  /** delete single row from the table: "bonusdeductions" */
  delete_bonusdeductions_by_pk?: Maybe<Bonusdeductions>;
  /** delete data from the table: "bonusdeductiontypes" */
  delete_bonusdeductiontypes?: Maybe<Bonusdeductiontypes_Mutation_Response>;
  /** delete single row from the table: "bonusdeductiontypes" */
  delete_bonusdeductiontypes_by_pk?: Maybe<Bonusdeductiontypes>;
  /** delete data from the table: "brands" */
  delete_brands?: Maybe<Brands_Mutation_Response>;
  /** delete single row from the table: "brands" */
  delete_brands_by_pk?: Maybe<Brands>;
  /** delete data from the table: "brands_employees" */
  delete_brands_employees?: Maybe<Brands_Employees_Mutation_Response>;
  /** delete single row from the table: "brands_employees" */
  delete_brands_employees_by_pk?: Maybe<Brands_Employees>;
  /** delete data from the table: "departments" */
  delete_departments?: Maybe<Departments_Mutation_Response>;
  /** delete single row from the table: "departments" */
  delete_departments_by_pk?: Maybe<Departments>;
  /** delete data from the table: "departments_employees" */
  delete_departments_employees?: Maybe<Departments_Employees_Mutation_Response>;
  /** delete single row from the table: "departments_employees" */
  delete_departments_employees_by_pk?: Maybe<Departments_Employees>;
  /** delete data from the table: "departments_stores" */
  delete_departments_stores?: Maybe<Departments_Stores_Mutation_Response>;
  /** delete single row from the table: "departments_stores" */
  delete_departments_stores_by_pk?: Maybe<Departments_Stores>;
  /** delete data from the table: "dsstorebills" */
  delete_dsstorebills?: Maybe<Dsstorebills_Mutation_Response>;
  /** delete single row from the table: "dsstorebills" */
  delete_dsstorebills_by_pk?: Maybe<Dsstorebills>;
  /** delete data from the table: "employee_attachments" */
  delete_employee_attachments?: Maybe<Employee_Attachments_Mutation_Response>;
  /** delete single row from the table: "employee_attachments" */
  delete_employee_attachments_by_pk?: Maybe<Employee_Attachments>;
  /** delete data from the table: "employee_insurance" */
  delete_employee_insurance?: Maybe<Employee_Insurance_Mutation_Response>;
  /** delete single row from the table: "employee_insurance" */
  delete_employee_insurance_by_pk?: Maybe<Employee_Insurance>;
  /** delete data from the table: "employee_leaves" */
  delete_employee_leaves?: Maybe<Employee_Leaves_Mutation_Response>;
  /** delete single row from the table: "employee_leaves" */
  delete_employee_leaves_by_pk?: Maybe<Employee_Leaves>;
  /** delete data from the table: "employee_salary_department" */
  delete_employee_salary_department?: Maybe<Employee_Salary_Department_Mutation_Response>;
  /** delete single row from the table: "employee_salary_department" */
  delete_employee_salary_department_by_pk?: Maybe<Employee_Salary_Department>;
  /** delete data from the table: "employees" */
  delete_employees?: Maybe<Employees_Mutation_Response>;
  /** delete single row from the table: "employees" */
  delete_employees_by_pk?: Maybe<Employees>;
  /** delete data from the table: "employees_roles" */
  delete_employees_roles?: Maybe<Employees_Roles_Mutation_Response>;
  /** delete single row from the table: "employees_roles" */
  delete_employees_roles_by_pk?: Maybe<Employees_Roles>;
  /** delete data from the table: "foodcategories" */
  delete_foodcategories?: Maybe<Foodcategories_Mutation_Response>;
  /** delete single row from the table: "foodcategories" */
  delete_foodcategories_by_pk?: Maybe<Foodcategories>;
  /** delete data from the table: "fooditems" */
  delete_fooditems?: Maybe<Fooditems_Mutation_Response>;
  /** delete single row from the table: "fooditems" */
  delete_fooditems_by_pk?: Maybe<Fooditems>;
  /** delete data from the table: "ingredients" */
  delete_ingredients?: Maybe<Ingredients_Mutation_Response>;
  /** delete single row from the table: "ingredients" */
  delete_ingredients_by_pk?: Maybe<Ingredients>;
  /** delete data from the table: "insurance_fund_types" */
  delete_insurance_fund_types?: Maybe<Insurance_Fund_Types_Mutation_Response>;
  /** delete single row from the table: "insurance_fund_types" */
  delete_insurance_fund_types_by_pk?: Maybe<Insurance_Fund_Types>;
  /** delete data from the table: "insurance_funds" */
  delete_insurance_funds?: Maybe<Insurance_Funds_Mutation_Response>;
  /** delete single row from the table: "insurance_funds" */
  delete_insurance_funds_by_pk?: Maybe<Insurance_Funds>;
  /** delete data from the table: "leave_types" */
  delete_leave_types?: Maybe<Leave_Types_Mutation_Response>;
  /** delete single row from the table: "leave_types" */
  delete_leave_types_by_pk?: Maybe<Leave_Types>;
  /** delete data from the table: "monthlysalary" */
  delete_monthlysalary?: Maybe<Monthlysalary_Mutation_Response>;
  /** delete single row from the table: "monthlysalary" */
  delete_monthlysalary_by_pk?: Maybe<Monthlysalary>;
  /** delete data from the table: "nav_bg_categories" */
  delete_nav_bg_categories?: Maybe<Nav_Bg_Categories_Mutation_Response>;
  /** delete single row from the table: "nav_bg_categories" */
  delete_nav_bg_categories_by_pk?: Maybe<Nav_Bg_Categories>;
  /** delete data from the table: "nav_sm_categories" */
  delete_nav_sm_categories?: Maybe<Nav_Sm_Categories_Mutation_Response>;
  /** delete single row from the table: "nav_sm_categories" */
  delete_nav_sm_categories_by_pk?: Maybe<Nav_Sm_Categories>;
  /** delete data from the table: "nav_xl_categories" */
  delete_nav_xl_categories?: Maybe<Nav_Xl_Categories_Mutation_Response>;
  /** delete single row from the table: "nav_xl_categories" */
  delete_nav_xl_categories_by_pk?: Maybe<Nav_Xl_Categories>;
  /** delete data from the table: "organstores" */
  delete_organstores?: Maybe<Organstores_Mutation_Response>;
  /** delete single row from the table: "organstores" */
  delete_organstores_by_pk?: Maybe<Organstores>;
  /** delete data from the table: "role_nav_sm_categories" */
  delete_role_nav_sm_categories?: Maybe<Role_Nav_Sm_Categories_Mutation_Response>;
  /** delete single row from the table: "role_nav_sm_categories" */
  delete_role_nav_sm_categories_by_pk?: Maybe<Role_Nav_Sm_Categories>;
  /** delete data from the table: "role_scope" */
  delete_role_scope?: Maybe<Role_Scope_Mutation_Response>;
  /** delete single row from the table: "role_scope" */
  delete_role_scope_by_pk?: Maybe<Role_Scope>;
  /** delete data from the table: "roles" */
  delete_roles?: Maybe<Roles_Mutation_Response>;
  /** delete single row from the table: "roles" */
  delete_roles_by_pk?: Maybe<Roles>;
  /** delete data from the table: "salary_accounts" */
  delete_salary_accounts?: Maybe<Salary_Accounts_Mutation_Response>;
  /** delete single row from the table: "salary_accounts" */
  delete_salary_accounts_by_pk?: Maybe<Salary_Accounts>;
  /** delete data from the table: "salary_types" */
  delete_salary_types?: Maybe<Salary_Types_Mutation_Response>;
  /** delete single row from the table: "salary_types" */
  delete_salary_types_by_pk?: Maybe<Salary_Types>;
  /** delete data from the table: "salesitemsdata" */
  delete_salesitemsdata?: Maybe<Salesitemsdata_Mutation_Response>;
  /** delete single row from the table: "salesitemsdata" */
  delete_salesitemsdata_by_pk?: Maybe<Salesitemsdata>;
  /** delete data from the table: "scope_nav_sm_categories" */
  delete_scope_nav_sm_categories?: Maybe<Scope_Nav_Sm_Categories_Mutation_Response>;
  /** delete single row from the table: "scope_nav_sm_categories" */
  delete_scope_nav_sm_categories_by_pk?: Maybe<Scope_Nav_Sm_Categories>;
  /** delete data from the table: "scopes" */
  delete_scopes?: Maybe<Scopes_Mutation_Response>;
  /** delete single row from the table: "scopes" */
  delete_scopes_by_pk?: Maybe<Scopes>;
  /** delete data from the table: "service_entitlement" */
  delete_service_entitlement?: Maybe<Service_Entitlement_Mutation_Response>;
  /** delete single row from the table: "service_entitlement" */
  delete_service_entitlement_by_pk?: Maybe<Service_Entitlement>;
  /** delete data from the table: "settledetails" */
  delete_settledetails?: Maybe<Settledetails_Mutation_Response>;
  /** delete single row from the table: "settledetails" */
  delete_settledetails_by_pk?: Maybe<Settledetails>;
  /** delete data from the table: "shift_lists" */
  delete_shift_lists?: Maybe<Shift_Lists_Mutation_Response>;
  /** delete single row from the table: "shift_lists" */
  delete_shift_lists_by_pk?: Maybe<Shift_Lists>;
  /** delete data from the table: "solditems" */
  delete_solditems?: Maybe<Solditems_Mutation_Response>;
  /** delete single row from the table: "solditems" */
  delete_solditems_by_pk?: Maybe<Solditems>;
  /** delete data from the table: "solditems_summary" */
  delete_solditems_summary?: Maybe<Solditems_Summary_Mutation_Response>;
  /** delete data from the table: "store_employee" */
  delete_store_employee?: Maybe<Store_Employee_Mutation_Response>;
  /** delete single row from the table: "store_employee" */
  delete_store_employee_by_pk?: Maybe<Store_Employee>;
  /** delete data from the table: "stores" */
  delete_stores?: Maybe<Stores_Mutation_Response>;
  /** delete single row from the table: "stores" */
  delete_stores_by_pk?: Maybe<Stores>;
  /** delete data from the table: "suppliers" */
  delete_suppliers?: Maybe<Suppliers_Mutation_Response>;
  /** delete single row from the table: "suppliers" */
  delete_suppliers_by_pk?: Maybe<Suppliers>;
  /** delete data from the table: "supplyitems" */
  delete_supplyitems?: Maybe<Supplyitems_Mutation_Response>;
  /** delete single row from the table: "supplyitems" */
  delete_supplyitems_by_pk?: Maybe<Supplyitems>;
  /** delete data from the table: "supplyitemtypes" */
  delete_supplyitemtypes?: Maybe<Supplyitemtypes_Mutation_Response>;
  /** delete single row from the table: "supplyitemtypes" */
  delete_supplyitemtypes_by_pk?: Maybe<Supplyitemtypes>;
  /** delete data from the table: "supplyitemunits" */
  delete_supplyitemunits?: Maybe<Supplyitemunits_Mutation_Response>;
  /** delete single row from the table: "supplyitemunits" */
  delete_supplyitemunits_by_pk?: Maybe<Supplyitemunits>;
  /** delete data from the table: "supplyrdc" */
  delete_supplyrdc?: Maybe<Supplyrdc_Mutation_Response>;
  /** delete single row from the table: "supplyrdc" */
  delete_supplyrdc_by_pk?: Maybe<Supplyrdc>;
  /** insert data into the table: "attendance" */
  insert_attendance?: Maybe<Attendance_Mutation_Response>;
  /** insert data into the table: "attendance_group_leaders" */
  insert_attendance_group_leaders?: Maybe<Attendance_Group_Leaders_Mutation_Response>;
  /** insert a single row into the table: "attendance_group_leaders" */
  insert_attendance_group_leaders_one?: Maybe<Attendance_Group_Leaders>;
  /** insert data into the table: "attendance_group_shifts" */
  insert_attendance_group_shifts?: Maybe<Attendance_Group_Shifts_Mutation_Response>;
  /** insert a single row into the table: "attendance_group_shifts" */
  insert_attendance_group_shifts_one?: Maybe<Attendance_Group_Shifts>;
  /** insert data into the table: "attendance_group_subleaders" */
  insert_attendance_group_subleaders?: Maybe<Attendance_Group_Subleaders_Mutation_Response>;
  /** insert a single row into the table: "attendance_group_subleaders" */
  insert_attendance_group_subleaders_one?: Maybe<Attendance_Group_Subleaders>;
  /** insert data into the table: "attendance_groups" */
  insert_attendance_groups?: Maybe<Attendance_Groups_Mutation_Response>;
  /** insert a single row into the table: "attendance_groups" */
  insert_attendance_groups_one?: Maybe<Attendance_Groups>;
  /** insert data into the table: "attendance_locations" */
  insert_attendance_locations?: Maybe<Attendance_Locations_Mutation_Response>;
  /** insert a single row into the table: "attendance_locations" */
  insert_attendance_locations_one?: Maybe<Attendance_Locations>;
  /** insert a single row into the table: "attendance" */
  insert_attendance_one?: Maybe<Attendance>;
  /** insert data into the table: "bills" */
  insert_bills?: Maybe<Bills_Mutation_Response>;
  /** insert a single row into the table: "bills" */
  insert_bills_one?: Maybe<Bills>;
  /** insert data into the table: "bonusdeductions" */
  insert_bonusdeductions?: Maybe<Bonusdeductions_Mutation_Response>;
  /** insert a single row into the table: "bonusdeductions" */
  insert_bonusdeductions_one?: Maybe<Bonusdeductions>;
  /** insert data into the table: "bonusdeductiontypes" */
  insert_bonusdeductiontypes?: Maybe<Bonusdeductiontypes_Mutation_Response>;
  /** insert a single row into the table: "bonusdeductiontypes" */
  insert_bonusdeductiontypes_one?: Maybe<Bonusdeductiontypes>;
  /** insert data into the table: "brands" */
  insert_brands?: Maybe<Brands_Mutation_Response>;
  /** insert data into the table: "brands_employees" */
  insert_brands_employees?: Maybe<Brands_Employees_Mutation_Response>;
  /** insert a single row into the table: "brands_employees" */
  insert_brands_employees_one?: Maybe<Brands_Employees>;
  /** insert a single row into the table: "brands" */
  insert_brands_one?: Maybe<Brands>;
  /** insert data into the table: "departments" */
  insert_departments?: Maybe<Departments_Mutation_Response>;
  /** insert data into the table: "departments_employees" */
  insert_departments_employees?: Maybe<Departments_Employees_Mutation_Response>;
  /** insert a single row into the table: "departments_employees" */
  insert_departments_employees_one?: Maybe<Departments_Employees>;
  /** insert a single row into the table: "departments" */
  insert_departments_one?: Maybe<Departments>;
  /** insert data into the table: "departments_stores" */
  insert_departments_stores?: Maybe<Departments_Stores_Mutation_Response>;
  /** insert a single row into the table: "departments_stores" */
  insert_departments_stores_one?: Maybe<Departments_Stores>;
  /** insert data into the table: "dsstorebills" */
  insert_dsstorebills?: Maybe<Dsstorebills_Mutation_Response>;
  /** insert a single row into the table: "dsstorebills" */
  insert_dsstorebills_one?: Maybe<Dsstorebills>;
  /** insert data into the table: "employee_attachments" */
  insert_employee_attachments?: Maybe<Employee_Attachments_Mutation_Response>;
  /** insert a single row into the table: "employee_attachments" */
  insert_employee_attachments_one?: Maybe<Employee_Attachments>;
  /** insert data into the table: "employee_insurance" */
  insert_employee_insurance?: Maybe<Employee_Insurance_Mutation_Response>;
  /** insert a single row into the table: "employee_insurance" */
  insert_employee_insurance_one?: Maybe<Employee_Insurance>;
  /** insert data into the table: "employee_leaves" */
  insert_employee_leaves?: Maybe<Employee_Leaves_Mutation_Response>;
  /** insert a single row into the table: "employee_leaves" */
  insert_employee_leaves_one?: Maybe<Employee_Leaves>;
  /** insert data into the table: "employee_salary_department" */
  insert_employee_salary_department?: Maybe<Employee_Salary_Department_Mutation_Response>;
  /** insert a single row into the table: "employee_salary_department" */
  insert_employee_salary_department_one?: Maybe<Employee_Salary_Department>;
  /** insert data into the table: "employees" */
  insert_employees?: Maybe<Employees_Mutation_Response>;
  /** insert a single row into the table: "employees" */
  insert_employees_one?: Maybe<Employees>;
  /** insert data into the table: "employees_roles" */
  insert_employees_roles?: Maybe<Employees_Roles_Mutation_Response>;
  /** insert a single row into the table: "employees_roles" */
  insert_employees_roles_one?: Maybe<Employees_Roles>;
  /** insert data into the table: "foodcategories" */
  insert_foodcategories?: Maybe<Foodcategories_Mutation_Response>;
  /** insert a single row into the table: "foodcategories" */
  insert_foodcategories_one?: Maybe<Foodcategories>;
  /** insert data into the table: "fooditems" */
  insert_fooditems?: Maybe<Fooditems_Mutation_Response>;
  /** insert a single row into the table: "fooditems" */
  insert_fooditems_one?: Maybe<Fooditems>;
  /** insert data into the table: "ingredients" */
  insert_ingredients?: Maybe<Ingredients_Mutation_Response>;
  /** insert a single row into the table: "ingredients" */
  insert_ingredients_one?: Maybe<Ingredients>;
  /** insert data into the table: "insurance_fund_types" */
  insert_insurance_fund_types?: Maybe<Insurance_Fund_Types_Mutation_Response>;
  /** insert a single row into the table: "insurance_fund_types" */
  insert_insurance_fund_types_one?: Maybe<Insurance_Fund_Types>;
  /** insert data into the table: "insurance_funds" */
  insert_insurance_funds?: Maybe<Insurance_Funds_Mutation_Response>;
  /** insert a single row into the table: "insurance_funds" */
  insert_insurance_funds_one?: Maybe<Insurance_Funds>;
  /** insert data into the table: "leave_types" */
  insert_leave_types?: Maybe<Leave_Types_Mutation_Response>;
  /** insert a single row into the table: "leave_types" */
  insert_leave_types_one?: Maybe<Leave_Types>;
  /** insert data into the table: "monthlysalary" */
  insert_monthlysalary?: Maybe<Monthlysalary_Mutation_Response>;
  /** insert a single row into the table: "monthlysalary" */
  insert_monthlysalary_one?: Maybe<Monthlysalary>;
  /** insert data into the table: "nav_bg_categories" */
  insert_nav_bg_categories?: Maybe<Nav_Bg_Categories_Mutation_Response>;
  /** insert a single row into the table: "nav_bg_categories" */
  insert_nav_bg_categories_one?: Maybe<Nav_Bg_Categories>;
  /** insert data into the table: "nav_sm_categories" */
  insert_nav_sm_categories?: Maybe<Nav_Sm_Categories_Mutation_Response>;
  /** insert a single row into the table: "nav_sm_categories" */
  insert_nav_sm_categories_one?: Maybe<Nav_Sm_Categories>;
  /** insert data into the table: "nav_xl_categories" */
  insert_nav_xl_categories?: Maybe<Nav_Xl_Categories_Mutation_Response>;
  /** insert a single row into the table: "nav_xl_categories" */
  insert_nav_xl_categories_one?: Maybe<Nav_Xl_Categories>;
  /** insert data into the table: "organstores" */
  insert_organstores?: Maybe<Organstores_Mutation_Response>;
  /** insert a single row into the table: "organstores" */
  insert_organstores_one?: Maybe<Organstores>;
  /** insert data into the table: "role_nav_sm_categories" */
  insert_role_nav_sm_categories?: Maybe<Role_Nav_Sm_Categories_Mutation_Response>;
  /** insert a single row into the table: "role_nav_sm_categories" */
  insert_role_nav_sm_categories_one?: Maybe<Role_Nav_Sm_Categories>;
  /** insert data into the table: "role_scope" */
  insert_role_scope?: Maybe<Role_Scope_Mutation_Response>;
  /** insert a single row into the table: "role_scope" */
  insert_role_scope_one?: Maybe<Role_Scope>;
  /** insert data into the table: "roles" */
  insert_roles?: Maybe<Roles_Mutation_Response>;
  /** insert a single row into the table: "roles" */
  insert_roles_one?: Maybe<Roles>;
  /** insert data into the table: "salary_accounts" */
  insert_salary_accounts?: Maybe<Salary_Accounts_Mutation_Response>;
  /** insert a single row into the table: "salary_accounts" */
  insert_salary_accounts_one?: Maybe<Salary_Accounts>;
  /** insert data into the table: "salary_types" */
  insert_salary_types?: Maybe<Salary_Types_Mutation_Response>;
  /** insert a single row into the table: "salary_types" */
  insert_salary_types_one?: Maybe<Salary_Types>;
  /** insert data into the table: "salesitemsdata" */
  insert_salesitemsdata?: Maybe<Salesitemsdata_Mutation_Response>;
  /** insert a single row into the table: "salesitemsdata" */
  insert_salesitemsdata_one?: Maybe<Salesitemsdata>;
  /** insert data into the table: "scope_nav_sm_categories" */
  insert_scope_nav_sm_categories?: Maybe<Scope_Nav_Sm_Categories_Mutation_Response>;
  /** insert a single row into the table: "scope_nav_sm_categories" */
  insert_scope_nav_sm_categories_one?: Maybe<Scope_Nav_Sm_Categories>;
  /** insert data into the table: "scopes" */
  insert_scopes?: Maybe<Scopes_Mutation_Response>;
  /** insert a single row into the table: "scopes" */
  insert_scopes_one?: Maybe<Scopes>;
  /** insert data into the table: "service_entitlement" */
  insert_service_entitlement?: Maybe<Service_Entitlement_Mutation_Response>;
  /** insert a single row into the table: "service_entitlement" */
  insert_service_entitlement_one?: Maybe<Service_Entitlement>;
  /** insert data into the table: "settledetails" */
  insert_settledetails?: Maybe<Settledetails_Mutation_Response>;
  /** insert a single row into the table: "settledetails" */
  insert_settledetails_one?: Maybe<Settledetails>;
  /** insert data into the table: "shift_lists" */
  insert_shift_lists?: Maybe<Shift_Lists_Mutation_Response>;
  /** insert a single row into the table: "shift_lists" */
  insert_shift_lists_one?: Maybe<Shift_Lists>;
  /** insert data into the table: "solditems" */
  insert_solditems?: Maybe<Solditems_Mutation_Response>;
  /** insert a single row into the table: "solditems" */
  insert_solditems_one?: Maybe<Solditems>;
  /** insert data into the table: "solditems_summary" */
  insert_solditems_summary?: Maybe<Solditems_Summary_Mutation_Response>;
  /** insert a single row into the table: "solditems_summary" */
  insert_solditems_summary_one?: Maybe<Solditems_Summary>;
  /** insert data into the table: "store_employee" */
  insert_store_employee?: Maybe<Store_Employee_Mutation_Response>;
  /** insert a single row into the table: "store_employee" */
  insert_store_employee_one?: Maybe<Store_Employee>;
  /** insert data into the table: "stores" */
  insert_stores?: Maybe<Stores_Mutation_Response>;
  /** insert a single row into the table: "stores" */
  insert_stores_one?: Maybe<Stores>;
  /** insert data into the table: "suppliers" */
  insert_suppliers?: Maybe<Suppliers_Mutation_Response>;
  /** insert a single row into the table: "suppliers" */
  insert_suppliers_one?: Maybe<Suppliers>;
  /** insert data into the table: "supplyitems" */
  insert_supplyitems?: Maybe<Supplyitems_Mutation_Response>;
  /** insert a single row into the table: "supplyitems" */
  insert_supplyitems_one?: Maybe<Supplyitems>;
  /** insert data into the table: "supplyitemtypes" */
  insert_supplyitemtypes?: Maybe<Supplyitemtypes_Mutation_Response>;
  /** insert a single row into the table: "supplyitemtypes" */
  insert_supplyitemtypes_one?: Maybe<Supplyitemtypes>;
  /** insert data into the table: "supplyitemunits" */
  insert_supplyitemunits?: Maybe<Supplyitemunits_Mutation_Response>;
  /** insert a single row into the table: "supplyitemunits" */
  insert_supplyitemunits_one?: Maybe<Supplyitemunits>;
  /** insert data into the table: "supplyrdc" */
  insert_supplyrdc?: Maybe<Supplyrdc_Mutation_Response>;
  /** insert a single row into the table: "supplyrdc" */
  insert_supplyrdc_one?: Maybe<Supplyrdc>;
  /** update data of the table: "attendance" */
  update_attendance?: Maybe<Attendance_Mutation_Response>;
  /** update single row of the table: "attendance" */
  update_attendance_by_pk?: Maybe<Attendance>;
  /** update data of the table: "attendance_group_leaders" */
  update_attendance_group_leaders?: Maybe<Attendance_Group_Leaders_Mutation_Response>;
  /** update single row of the table: "attendance_group_leaders" */
  update_attendance_group_leaders_by_pk?: Maybe<Attendance_Group_Leaders>;
  /** update multiples rows of table: "attendance_group_leaders" */
  update_attendance_group_leaders_many?: Maybe<Array<Maybe<Attendance_Group_Leaders_Mutation_Response>>>;
  /** update data of the table: "attendance_group_shifts" */
  update_attendance_group_shifts?: Maybe<Attendance_Group_Shifts_Mutation_Response>;
  /** update single row of the table: "attendance_group_shifts" */
  update_attendance_group_shifts_by_pk?: Maybe<Attendance_Group_Shifts>;
  /** update multiples rows of table: "attendance_group_shifts" */
  update_attendance_group_shifts_many?: Maybe<Array<Maybe<Attendance_Group_Shifts_Mutation_Response>>>;
  /** update data of the table: "attendance_group_subleaders" */
  update_attendance_group_subleaders?: Maybe<Attendance_Group_Subleaders_Mutation_Response>;
  /** update single row of the table: "attendance_group_subleaders" */
  update_attendance_group_subleaders_by_pk?: Maybe<Attendance_Group_Subleaders>;
  /** update multiples rows of table: "attendance_group_subleaders" */
  update_attendance_group_subleaders_many?: Maybe<Array<Maybe<Attendance_Group_Subleaders_Mutation_Response>>>;
  /** update data of the table: "attendance_groups" */
  update_attendance_groups?: Maybe<Attendance_Groups_Mutation_Response>;
  /** update single row of the table: "attendance_groups" */
  update_attendance_groups_by_pk?: Maybe<Attendance_Groups>;
  /** update multiples rows of table: "attendance_groups" */
  update_attendance_groups_many?: Maybe<Array<Maybe<Attendance_Groups_Mutation_Response>>>;
  /** update data of the table: "attendance_locations" */
  update_attendance_locations?: Maybe<Attendance_Locations_Mutation_Response>;
  /** update single row of the table: "attendance_locations" */
  update_attendance_locations_by_pk?: Maybe<Attendance_Locations>;
  /** update multiples rows of table: "attendance_locations" */
  update_attendance_locations_many?: Maybe<Array<Maybe<Attendance_Locations_Mutation_Response>>>;
  /** update multiples rows of table: "attendance" */
  update_attendance_many?: Maybe<Array<Maybe<Attendance_Mutation_Response>>>;
  /** update data of the table: "bills" */
  update_bills?: Maybe<Bills_Mutation_Response>;
  /** update single row of the table: "bills" */
  update_bills_by_pk?: Maybe<Bills>;
  /** update multiples rows of table: "bills" */
  update_bills_many?: Maybe<Array<Maybe<Bills_Mutation_Response>>>;
  /** update data of the table: "bonusdeductions" */
  update_bonusdeductions?: Maybe<Bonusdeductions_Mutation_Response>;
  /** update single row of the table: "bonusdeductions" */
  update_bonusdeductions_by_pk?: Maybe<Bonusdeductions>;
  /** update multiples rows of table: "bonusdeductions" */
  update_bonusdeductions_many?: Maybe<Array<Maybe<Bonusdeductions_Mutation_Response>>>;
  /** update data of the table: "bonusdeductiontypes" */
  update_bonusdeductiontypes?: Maybe<Bonusdeductiontypes_Mutation_Response>;
  /** update single row of the table: "bonusdeductiontypes" */
  update_bonusdeductiontypes_by_pk?: Maybe<Bonusdeductiontypes>;
  /** update multiples rows of table: "bonusdeductiontypes" */
  update_bonusdeductiontypes_many?: Maybe<Array<Maybe<Bonusdeductiontypes_Mutation_Response>>>;
  /** update data of the table: "brands" */
  update_brands?: Maybe<Brands_Mutation_Response>;
  /** update single row of the table: "brands" */
  update_brands_by_pk?: Maybe<Brands>;
  /** update data of the table: "brands_employees" */
  update_brands_employees?: Maybe<Brands_Employees_Mutation_Response>;
  /** update single row of the table: "brands_employees" */
  update_brands_employees_by_pk?: Maybe<Brands_Employees>;
  /** update multiples rows of table: "brands_employees" */
  update_brands_employees_many?: Maybe<Array<Maybe<Brands_Employees_Mutation_Response>>>;
  /** update multiples rows of table: "brands" */
  update_brands_many?: Maybe<Array<Maybe<Brands_Mutation_Response>>>;
  /** update data of the table: "departments" */
  update_departments?: Maybe<Departments_Mutation_Response>;
  /** update single row of the table: "departments" */
  update_departments_by_pk?: Maybe<Departments>;
  /** update data of the table: "departments_employees" */
  update_departments_employees?: Maybe<Departments_Employees_Mutation_Response>;
  /** update single row of the table: "departments_employees" */
  update_departments_employees_by_pk?: Maybe<Departments_Employees>;
  /** update multiples rows of table: "departments_employees" */
  update_departments_employees_many?: Maybe<Array<Maybe<Departments_Employees_Mutation_Response>>>;
  /** update multiples rows of table: "departments" */
  update_departments_many?: Maybe<Array<Maybe<Departments_Mutation_Response>>>;
  /** update data of the table: "departments_stores" */
  update_departments_stores?: Maybe<Departments_Stores_Mutation_Response>;
  /** update single row of the table: "departments_stores" */
  update_departments_stores_by_pk?: Maybe<Departments_Stores>;
  /** update multiples rows of table: "departments_stores" */
  update_departments_stores_many?: Maybe<Array<Maybe<Departments_Stores_Mutation_Response>>>;
  /** update data of the table: "dsstorebills" */
  update_dsstorebills?: Maybe<Dsstorebills_Mutation_Response>;
  /** update single row of the table: "dsstorebills" */
  update_dsstorebills_by_pk?: Maybe<Dsstorebills>;
  /** update multiples rows of table: "dsstorebills" */
  update_dsstorebills_many?: Maybe<Array<Maybe<Dsstorebills_Mutation_Response>>>;
  /** update data of the table: "employee_attachments" */
  update_employee_attachments?: Maybe<Employee_Attachments_Mutation_Response>;
  /** update single row of the table: "employee_attachments" */
  update_employee_attachments_by_pk?: Maybe<Employee_Attachments>;
  /** update multiples rows of table: "employee_attachments" */
  update_employee_attachments_many?: Maybe<Array<Maybe<Employee_Attachments_Mutation_Response>>>;
  /** update data of the table: "employee_insurance" */
  update_employee_insurance?: Maybe<Employee_Insurance_Mutation_Response>;
  /** update single row of the table: "employee_insurance" */
  update_employee_insurance_by_pk?: Maybe<Employee_Insurance>;
  /** update multiples rows of table: "employee_insurance" */
  update_employee_insurance_many?: Maybe<Array<Maybe<Employee_Insurance_Mutation_Response>>>;
  /** update data of the table: "employee_leaves" */
  update_employee_leaves?: Maybe<Employee_Leaves_Mutation_Response>;
  /** update single row of the table: "employee_leaves" */
  update_employee_leaves_by_pk?: Maybe<Employee_Leaves>;
  /** update multiples rows of table: "employee_leaves" */
  update_employee_leaves_many?: Maybe<Array<Maybe<Employee_Leaves_Mutation_Response>>>;
  /** update data of the table: "employee_salary_department" */
  update_employee_salary_department?: Maybe<Employee_Salary_Department_Mutation_Response>;
  /** update single row of the table: "employee_salary_department" */
  update_employee_salary_department_by_pk?: Maybe<Employee_Salary_Department>;
  /** update multiples rows of table: "employee_salary_department" */
  update_employee_salary_department_many?: Maybe<Array<Maybe<Employee_Salary_Department_Mutation_Response>>>;
  /** update data of the table: "employees" */
  update_employees?: Maybe<Employees_Mutation_Response>;
  /** update single row of the table: "employees" */
  update_employees_by_pk?: Maybe<Employees>;
  /** update multiples rows of table: "employees" */
  update_employees_many?: Maybe<Array<Maybe<Employees_Mutation_Response>>>;
  /** update data of the table: "employees_roles" */
  update_employees_roles?: Maybe<Employees_Roles_Mutation_Response>;
  /** update single row of the table: "employees_roles" */
  update_employees_roles_by_pk?: Maybe<Employees_Roles>;
  /** update multiples rows of table: "employees_roles" */
  update_employees_roles_many?: Maybe<Array<Maybe<Employees_Roles_Mutation_Response>>>;
  /** update data of the table: "foodcategories" */
  update_foodcategories?: Maybe<Foodcategories_Mutation_Response>;
  /** update single row of the table: "foodcategories" */
  update_foodcategories_by_pk?: Maybe<Foodcategories>;
  /** update multiples rows of table: "foodcategories" */
  update_foodcategories_many?: Maybe<Array<Maybe<Foodcategories_Mutation_Response>>>;
  /** update data of the table: "fooditems" */
  update_fooditems?: Maybe<Fooditems_Mutation_Response>;
  /** update single row of the table: "fooditems" */
  update_fooditems_by_pk?: Maybe<Fooditems>;
  /** update multiples rows of table: "fooditems" */
  update_fooditems_many?: Maybe<Array<Maybe<Fooditems_Mutation_Response>>>;
  /** update data of the table: "ingredients" */
  update_ingredients?: Maybe<Ingredients_Mutation_Response>;
  /** update single row of the table: "ingredients" */
  update_ingredients_by_pk?: Maybe<Ingredients>;
  /** update multiples rows of table: "ingredients" */
  update_ingredients_many?: Maybe<Array<Maybe<Ingredients_Mutation_Response>>>;
  /** update data of the table: "insurance_fund_types" */
  update_insurance_fund_types?: Maybe<Insurance_Fund_Types_Mutation_Response>;
  /** update single row of the table: "insurance_fund_types" */
  update_insurance_fund_types_by_pk?: Maybe<Insurance_Fund_Types>;
  /** update multiples rows of table: "insurance_fund_types" */
  update_insurance_fund_types_many?: Maybe<Array<Maybe<Insurance_Fund_Types_Mutation_Response>>>;
  /** update data of the table: "insurance_funds" */
  update_insurance_funds?: Maybe<Insurance_Funds_Mutation_Response>;
  /** update single row of the table: "insurance_funds" */
  update_insurance_funds_by_pk?: Maybe<Insurance_Funds>;
  /** update multiples rows of table: "insurance_funds" */
  update_insurance_funds_many?: Maybe<Array<Maybe<Insurance_Funds_Mutation_Response>>>;
  /** update data of the table: "leave_types" */
  update_leave_types?: Maybe<Leave_Types_Mutation_Response>;
  /** update single row of the table: "leave_types" */
  update_leave_types_by_pk?: Maybe<Leave_Types>;
  /** update multiples rows of table: "leave_types" */
  update_leave_types_many?: Maybe<Array<Maybe<Leave_Types_Mutation_Response>>>;
  /** update data of the table: "monthlysalary" */
  update_monthlysalary?: Maybe<Monthlysalary_Mutation_Response>;
  /** update single row of the table: "monthlysalary" */
  update_monthlysalary_by_pk?: Maybe<Monthlysalary>;
  /** update multiples rows of table: "monthlysalary" */
  update_monthlysalary_many?: Maybe<Array<Maybe<Monthlysalary_Mutation_Response>>>;
  /** update data of the table: "nav_bg_categories" */
  update_nav_bg_categories?: Maybe<Nav_Bg_Categories_Mutation_Response>;
  /** update single row of the table: "nav_bg_categories" */
  update_nav_bg_categories_by_pk?: Maybe<Nav_Bg_Categories>;
  /** update multiples rows of table: "nav_bg_categories" */
  update_nav_bg_categories_many?: Maybe<Array<Maybe<Nav_Bg_Categories_Mutation_Response>>>;
  /** update data of the table: "nav_sm_categories" */
  update_nav_sm_categories?: Maybe<Nav_Sm_Categories_Mutation_Response>;
  /** update single row of the table: "nav_sm_categories" */
  update_nav_sm_categories_by_pk?: Maybe<Nav_Sm_Categories>;
  /** update multiples rows of table: "nav_sm_categories" */
  update_nav_sm_categories_many?: Maybe<Array<Maybe<Nav_Sm_Categories_Mutation_Response>>>;
  /** update data of the table: "nav_xl_categories" */
  update_nav_xl_categories?: Maybe<Nav_Xl_Categories_Mutation_Response>;
  /** update single row of the table: "nav_xl_categories" */
  update_nav_xl_categories_by_pk?: Maybe<Nav_Xl_Categories>;
  /** update multiples rows of table: "nav_xl_categories" */
  update_nav_xl_categories_many?: Maybe<Array<Maybe<Nav_Xl_Categories_Mutation_Response>>>;
  /** update data of the table: "organstores" */
  update_organstores?: Maybe<Organstores_Mutation_Response>;
  /** update single row of the table: "organstores" */
  update_organstores_by_pk?: Maybe<Organstores>;
  /** update multiples rows of table: "organstores" */
  update_organstores_many?: Maybe<Array<Maybe<Organstores_Mutation_Response>>>;
  /** update data of the table: "role_nav_sm_categories" */
  update_role_nav_sm_categories?: Maybe<Role_Nav_Sm_Categories_Mutation_Response>;
  /** update single row of the table: "role_nav_sm_categories" */
  update_role_nav_sm_categories_by_pk?: Maybe<Role_Nav_Sm_Categories>;
  /** update multiples rows of table: "role_nav_sm_categories" */
  update_role_nav_sm_categories_many?: Maybe<Array<Maybe<Role_Nav_Sm_Categories_Mutation_Response>>>;
  /** update data of the table: "role_scope" */
  update_role_scope?: Maybe<Role_Scope_Mutation_Response>;
  /** update single row of the table: "role_scope" */
  update_role_scope_by_pk?: Maybe<Role_Scope>;
  /** update multiples rows of table: "role_scope" */
  update_role_scope_many?: Maybe<Array<Maybe<Role_Scope_Mutation_Response>>>;
  /** update data of the table: "roles" */
  update_roles?: Maybe<Roles_Mutation_Response>;
  /** update single row of the table: "roles" */
  update_roles_by_pk?: Maybe<Roles>;
  /** update multiples rows of table: "roles" */
  update_roles_many?: Maybe<Array<Maybe<Roles_Mutation_Response>>>;
  /** update data of the table: "salary_accounts" */
  update_salary_accounts?: Maybe<Salary_Accounts_Mutation_Response>;
  /** update single row of the table: "salary_accounts" */
  update_salary_accounts_by_pk?: Maybe<Salary_Accounts>;
  /** update multiples rows of table: "salary_accounts" */
  update_salary_accounts_many?: Maybe<Array<Maybe<Salary_Accounts_Mutation_Response>>>;
  /** update data of the table: "salary_types" */
  update_salary_types?: Maybe<Salary_Types_Mutation_Response>;
  /** update single row of the table: "salary_types" */
  update_salary_types_by_pk?: Maybe<Salary_Types>;
  /** update multiples rows of table: "salary_types" */
  update_salary_types_many?: Maybe<Array<Maybe<Salary_Types_Mutation_Response>>>;
  /** update data of the table: "salesitemsdata" */
  update_salesitemsdata?: Maybe<Salesitemsdata_Mutation_Response>;
  /** update single row of the table: "salesitemsdata" */
  update_salesitemsdata_by_pk?: Maybe<Salesitemsdata>;
  /** update multiples rows of table: "salesitemsdata" */
  update_salesitemsdata_many?: Maybe<Array<Maybe<Salesitemsdata_Mutation_Response>>>;
  /** update data of the table: "scope_nav_sm_categories" */
  update_scope_nav_sm_categories?: Maybe<Scope_Nav_Sm_Categories_Mutation_Response>;
  /** update single row of the table: "scope_nav_sm_categories" */
  update_scope_nav_sm_categories_by_pk?: Maybe<Scope_Nav_Sm_Categories>;
  /** update multiples rows of table: "scope_nav_sm_categories" */
  update_scope_nav_sm_categories_many?: Maybe<Array<Maybe<Scope_Nav_Sm_Categories_Mutation_Response>>>;
  /** update data of the table: "scopes" */
  update_scopes?: Maybe<Scopes_Mutation_Response>;
  /** update single row of the table: "scopes" */
  update_scopes_by_pk?: Maybe<Scopes>;
  /** update multiples rows of table: "scopes" */
  update_scopes_many?: Maybe<Array<Maybe<Scopes_Mutation_Response>>>;
  /** update data of the table: "service_entitlement" */
  update_service_entitlement?: Maybe<Service_Entitlement_Mutation_Response>;
  /** update single row of the table: "service_entitlement" */
  update_service_entitlement_by_pk?: Maybe<Service_Entitlement>;
  /** update multiples rows of table: "service_entitlement" */
  update_service_entitlement_many?: Maybe<Array<Maybe<Service_Entitlement_Mutation_Response>>>;
  /** update data of the table: "settledetails" */
  update_settledetails?: Maybe<Settledetails_Mutation_Response>;
  /** update single row of the table: "settledetails" */
  update_settledetails_by_pk?: Maybe<Settledetails>;
  /** update multiples rows of table: "settledetails" */
  update_settledetails_many?: Maybe<Array<Maybe<Settledetails_Mutation_Response>>>;
  /** update data of the table: "shift_lists" */
  update_shift_lists?: Maybe<Shift_Lists_Mutation_Response>;
  /** update single row of the table: "shift_lists" */
  update_shift_lists_by_pk?: Maybe<Shift_Lists>;
  /** update multiples rows of table: "shift_lists" */
  update_shift_lists_many?: Maybe<Array<Maybe<Shift_Lists_Mutation_Response>>>;
  /** update data of the table: "solditems" */
  update_solditems?: Maybe<Solditems_Mutation_Response>;
  /** update single row of the table: "solditems" */
  update_solditems_by_pk?: Maybe<Solditems>;
  /** update multiples rows of table: "solditems" */
  update_solditems_many?: Maybe<Array<Maybe<Solditems_Mutation_Response>>>;
  /** update data of the table: "solditems_summary" */
  update_solditems_summary?: Maybe<Solditems_Summary_Mutation_Response>;
  /** update multiples rows of table: "solditems_summary" */
  update_solditems_summary_many?: Maybe<Array<Maybe<Solditems_Summary_Mutation_Response>>>;
  /** update data of the table: "store_employee" */
  update_store_employee?: Maybe<Store_Employee_Mutation_Response>;
  /** update single row of the table: "store_employee" */
  update_store_employee_by_pk?: Maybe<Store_Employee>;
  /** update multiples rows of table: "store_employee" */
  update_store_employee_many?: Maybe<Array<Maybe<Store_Employee_Mutation_Response>>>;
  /** update data of the table: "stores" */
  update_stores?: Maybe<Stores_Mutation_Response>;
  /** update single row of the table: "stores" */
  update_stores_by_pk?: Maybe<Stores>;
  /** update multiples rows of table: "stores" */
  update_stores_many?: Maybe<Array<Maybe<Stores_Mutation_Response>>>;
  /** update data of the table: "suppliers" */
  update_suppliers?: Maybe<Suppliers_Mutation_Response>;
  /** update single row of the table: "suppliers" */
  update_suppliers_by_pk?: Maybe<Suppliers>;
  /** update multiples rows of table: "suppliers" */
  update_suppliers_many?: Maybe<Array<Maybe<Suppliers_Mutation_Response>>>;
  /** update data of the table: "supplyitems" */
  update_supplyitems?: Maybe<Supplyitems_Mutation_Response>;
  /** update single row of the table: "supplyitems" */
  update_supplyitems_by_pk?: Maybe<Supplyitems>;
  /** update multiples rows of table: "supplyitems" */
  update_supplyitems_many?: Maybe<Array<Maybe<Supplyitems_Mutation_Response>>>;
  /** update data of the table: "supplyitemtypes" */
  update_supplyitemtypes?: Maybe<Supplyitemtypes_Mutation_Response>;
  /** update single row of the table: "supplyitemtypes" */
  update_supplyitemtypes_by_pk?: Maybe<Supplyitemtypes>;
  /** update multiples rows of table: "supplyitemtypes" */
  update_supplyitemtypes_many?: Maybe<Array<Maybe<Supplyitemtypes_Mutation_Response>>>;
  /** update data of the table: "supplyitemunits" */
  update_supplyitemunits?: Maybe<Supplyitemunits_Mutation_Response>;
  /** update single row of the table: "supplyitemunits" */
  update_supplyitemunits_by_pk?: Maybe<Supplyitemunits>;
  /** update multiples rows of table: "supplyitemunits" */
  update_supplyitemunits_many?: Maybe<Array<Maybe<Supplyitemunits_Mutation_Response>>>;
  /** update data of the table: "supplyrdc" */
  update_supplyrdc?: Maybe<Supplyrdc_Mutation_Response>;
  /** update single row of the table: "supplyrdc" */
  update_supplyrdc_by_pk?: Maybe<Supplyrdc>;
  /** update multiples rows of table: "supplyrdc" */
  update_supplyrdc_many?: Maybe<Array<Maybe<Supplyrdc_Mutation_Response>>>;
};


/** mutation root */
export type Mutation_RootDelete_AttendanceArgs = {
  where: Attendance_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Attendance_By_PkArgs = {
  id: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_Attendance_Group_LeadersArgs = {
  where: Attendance_Group_Leaders_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Attendance_Group_Leaders_By_PkArgs = {
  attendance_group_id: Scalars['String'];
  employee_id: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_Attendance_Group_ShiftsArgs = {
  where: Attendance_Group_Shifts_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Attendance_Group_Shifts_By_PkArgs = {
  attendance_group_id: Scalars['String'];
  shift_list_id: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_Attendance_Group_SubleadersArgs = {
  where: Attendance_Group_Subleaders_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Attendance_Group_Subleaders_By_PkArgs = {
  attendance_group_id: Scalars['String'];
  employee_id: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_Attendance_GroupsArgs = {
  where: Attendance_Groups_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Attendance_Groups_By_PkArgs = {
  id: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_Attendance_LocationsArgs = {
  where: Attendance_Locations_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Attendance_Locations_By_PkArgs = {
  id: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_BillsArgs = {
  where: Bills_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Bills_By_PkArgs = {
  bs_id: Scalars['bigint'];
};


/** mutation root */
export type Mutation_RootDelete_BonusdeductionsArgs = {
  where: Bonusdeductions_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Bonusdeductions_By_PkArgs = {
  id: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_BonusdeductiontypesArgs = {
  where: Bonusdeductiontypes_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Bonusdeductiontypes_By_PkArgs = {
  id: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_BrandsArgs = {
  where: Brands_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Brands_By_PkArgs = {
  id: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_Brands_EmployeesArgs = {
  where: Brands_Employees_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Brands_Employees_By_PkArgs = {
  brand_id: Scalars['String'];
  employee_id: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_DepartmentsArgs = {
  where: Departments_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Departments_By_PkArgs = {
  id: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_Departments_EmployeesArgs = {
  where: Departments_Employees_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Departments_Employees_By_PkArgs = {
  department_id: Scalars['String'];
  employee_id: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_Departments_StoresArgs = {
  where: Departments_Stores_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Departments_Stores_By_PkArgs = {
  department_id: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_DsstorebillsArgs = {
  where: Dsstorebills_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Dsstorebills_By_PkArgs = {
  StoreBillDTID: Scalars['String'];
  StoreCode: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_Employee_AttachmentsArgs = {
  where: Employee_Attachments_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Employee_Attachments_By_PkArgs = {
  id: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_Employee_InsuranceArgs = {
  where: Employee_Insurance_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Employee_Insurance_By_PkArgs = {
  id: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_Employee_LeavesArgs = {
  where: Employee_Leaves_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Employee_Leaves_By_PkArgs = {
  id: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_Employee_Salary_DepartmentArgs = {
  where: Employee_Salary_Department_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Employee_Salary_Department_By_PkArgs = {
  department_id: Scalars['String'];
  employee_id: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_EmployeesArgs = {
  where: Employees_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Employees_By_PkArgs = {
  id: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_Employees_RolesArgs = {
  where: Employees_Roles_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Employees_Roles_By_PkArgs = {
  employee_id: Scalars['String'];
  role_id: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_FoodcategoriesArgs = {
  where: Foodcategories_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Foodcategories_By_PkArgs = {
  class_id: Scalars['bigint'];
};


/** mutation root */
export type Mutation_RootDelete_FooditemsArgs = {
  where: Fooditems_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Fooditems_By_PkArgs = {
  item_id: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_IngredientsArgs = {
  where: Ingredients_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Ingredients_By_PkArgs = {
  id: Scalars['Int'];
};


/** mutation root */
export type Mutation_RootDelete_Insurance_Fund_TypesArgs = {
  where: Insurance_Fund_Types_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Insurance_Fund_Types_By_PkArgs = {
  id: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_Insurance_FundsArgs = {
  where: Insurance_Funds_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Insurance_Funds_By_PkArgs = {
  id: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_Leave_TypesArgs = {
  where: Leave_Types_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Leave_Types_By_PkArgs = {
  id: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_MonthlysalaryArgs = {
  where: Monthlysalary_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Monthlysalary_By_PkArgs = {
  attendance_department_id: Scalars['String'];
  employee_id: Scalars['String'];
  month: Scalars['date'];
};


/** mutation root */
export type Mutation_RootDelete_Nav_Bg_CategoriesArgs = {
  where: Nav_Bg_Categories_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Nav_Bg_Categories_By_PkArgs = {
  id: Scalars['Int'];
};


/** mutation root */
export type Mutation_RootDelete_Nav_Sm_CategoriesArgs = {
  where: Nav_Sm_Categories_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Nav_Sm_Categories_By_PkArgs = {
  id: Scalars['Int'];
};


/** mutation root */
export type Mutation_RootDelete_Nav_Xl_CategoriesArgs = {
  where: Nav_Xl_Categories_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Nav_Xl_Categories_By_PkArgs = {
  id: Scalars['Int'];
};


/** mutation root */
export type Mutation_RootDelete_OrganstoresArgs = {
  where: Organstores_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Organstores_By_PkArgs = {
  id: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_Role_Nav_Sm_CategoriesArgs = {
  where: Role_Nav_Sm_Categories_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Role_Nav_Sm_Categories_By_PkArgs = {
  nav_sm_category_id: Scalars['Int'];
  role_id: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_Role_ScopeArgs = {
  where: Role_Scope_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Role_Scope_By_PkArgs = {
  id: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_RolesArgs = {
  where: Roles_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Roles_By_PkArgs = {
  id: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_Salary_AccountsArgs = {
  where: Salary_Accounts_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Salary_Accounts_By_PkArgs = {
  id: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_Salary_TypesArgs = {
  where: Salary_Types_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Salary_Types_By_PkArgs = {
  id: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_SalesitemsdataArgs = {
  where: Salesitemsdata_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Salesitemsdata_By_PkArgs = {
  id: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_Scope_Nav_Sm_CategoriesArgs = {
  where: Scope_Nav_Sm_Categories_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Scope_Nav_Sm_Categories_By_PkArgs = {
  id: Scalars['Int'];
};


/** mutation root */
export type Mutation_RootDelete_ScopesArgs = {
  where: Scopes_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Scopes_By_PkArgs = {
  id: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_Service_EntitlementArgs = {
  where: Service_Entitlement_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Service_Entitlement_By_PkArgs = {
  id: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_SettledetailsArgs = {
  where: Settledetails_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Settledetails_By_PkArgs = {
  pw_id: Scalars['bigint'];
};


/** mutation root */
export type Mutation_RootDelete_Shift_ListsArgs = {
  where: Shift_Lists_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Shift_Lists_By_PkArgs = {
  id: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_SolditemsArgs = {
  where: Solditems_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Solditems_By_PkArgs = {
  sc_id: Scalars['bigint'];
};


/** mutation root */
export type Mutation_RootDelete_Solditems_SummaryArgs = {
  where: Solditems_Summary_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Store_EmployeeArgs = {
  where: Store_Employee_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Store_Employee_By_PkArgs = {
  employee_id: Scalars['String'];
  store_id: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_StoresArgs = {
  where: Stores_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Stores_By_PkArgs = {
  id: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_SuppliersArgs = {
  where: Suppliers_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Suppliers_By_PkArgs = {
  supplierId: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_SupplyitemsArgs = {
  where: Supplyitems_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Supplyitems_By_PkArgs = {
  itemId: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_SupplyitemtypesArgs = {
  where: Supplyitemtypes_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Supplyitemtypes_By_PkArgs = {
  itemTypeId: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_SupplyitemunitsArgs = {
  where: Supplyitemunits_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Supplyitemunits_By_PkArgs = {
  id: Scalars['bytea'];
};


/** mutation root */
export type Mutation_RootDelete_SupplyrdcArgs = {
  where: Supplyrdc_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Supplyrdc_By_PkArgs = {
  rdcId: Scalars['String'];
};


/** mutation root */
export type Mutation_RootInsert_AttendanceArgs = {
  objects: Array<Attendance_Insert_Input>;
  on_conflict?: InputMaybe<Attendance_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Attendance_Group_LeadersArgs = {
  objects: Array<Attendance_Group_Leaders_Insert_Input>;
  on_conflict?: InputMaybe<Attendance_Group_Leaders_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Attendance_Group_Leaders_OneArgs = {
  object: Attendance_Group_Leaders_Insert_Input;
  on_conflict?: InputMaybe<Attendance_Group_Leaders_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Attendance_Group_ShiftsArgs = {
  objects: Array<Attendance_Group_Shifts_Insert_Input>;
  on_conflict?: InputMaybe<Attendance_Group_Shifts_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Attendance_Group_Shifts_OneArgs = {
  object: Attendance_Group_Shifts_Insert_Input;
  on_conflict?: InputMaybe<Attendance_Group_Shifts_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Attendance_Group_SubleadersArgs = {
  objects: Array<Attendance_Group_Subleaders_Insert_Input>;
  on_conflict?: InputMaybe<Attendance_Group_Subleaders_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Attendance_Group_Subleaders_OneArgs = {
  object: Attendance_Group_Subleaders_Insert_Input;
  on_conflict?: InputMaybe<Attendance_Group_Subleaders_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Attendance_GroupsArgs = {
  objects: Array<Attendance_Groups_Insert_Input>;
  on_conflict?: InputMaybe<Attendance_Groups_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Attendance_Groups_OneArgs = {
  object: Attendance_Groups_Insert_Input;
  on_conflict?: InputMaybe<Attendance_Groups_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Attendance_LocationsArgs = {
  objects: Array<Attendance_Locations_Insert_Input>;
  on_conflict?: InputMaybe<Attendance_Locations_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Attendance_Locations_OneArgs = {
  object: Attendance_Locations_Insert_Input;
  on_conflict?: InputMaybe<Attendance_Locations_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Attendance_OneArgs = {
  object: Attendance_Insert_Input;
  on_conflict?: InputMaybe<Attendance_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_BillsArgs = {
  objects: Array<Bills_Insert_Input>;
  on_conflict?: InputMaybe<Bills_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Bills_OneArgs = {
  object: Bills_Insert_Input;
  on_conflict?: InputMaybe<Bills_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_BonusdeductionsArgs = {
  objects: Array<Bonusdeductions_Insert_Input>;
  on_conflict?: InputMaybe<Bonusdeductions_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Bonusdeductions_OneArgs = {
  object: Bonusdeductions_Insert_Input;
  on_conflict?: InputMaybe<Bonusdeductions_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_BonusdeductiontypesArgs = {
  objects: Array<Bonusdeductiontypes_Insert_Input>;
  on_conflict?: InputMaybe<Bonusdeductiontypes_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Bonusdeductiontypes_OneArgs = {
  object: Bonusdeductiontypes_Insert_Input;
  on_conflict?: InputMaybe<Bonusdeductiontypes_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_BrandsArgs = {
  objects: Array<Brands_Insert_Input>;
  on_conflict?: InputMaybe<Brands_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Brands_EmployeesArgs = {
  objects: Array<Brands_Employees_Insert_Input>;
  on_conflict?: InputMaybe<Brands_Employees_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Brands_Employees_OneArgs = {
  object: Brands_Employees_Insert_Input;
  on_conflict?: InputMaybe<Brands_Employees_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Brands_OneArgs = {
  object: Brands_Insert_Input;
  on_conflict?: InputMaybe<Brands_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_DepartmentsArgs = {
  objects: Array<Departments_Insert_Input>;
  on_conflict?: InputMaybe<Departments_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Departments_EmployeesArgs = {
  objects: Array<Departments_Employees_Insert_Input>;
  on_conflict?: InputMaybe<Departments_Employees_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Departments_Employees_OneArgs = {
  object: Departments_Employees_Insert_Input;
  on_conflict?: InputMaybe<Departments_Employees_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Departments_OneArgs = {
  object: Departments_Insert_Input;
  on_conflict?: InputMaybe<Departments_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Departments_StoresArgs = {
  objects: Array<Departments_Stores_Insert_Input>;
  on_conflict?: InputMaybe<Departments_Stores_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Departments_Stores_OneArgs = {
  object: Departments_Stores_Insert_Input;
  on_conflict?: InputMaybe<Departments_Stores_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_DsstorebillsArgs = {
  objects: Array<Dsstorebills_Insert_Input>;
  on_conflict?: InputMaybe<Dsstorebills_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Dsstorebills_OneArgs = {
  object: Dsstorebills_Insert_Input;
  on_conflict?: InputMaybe<Dsstorebills_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Employee_AttachmentsArgs = {
  objects: Array<Employee_Attachments_Insert_Input>;
  on_conflict?: InputMaybe<Employee_Attachments_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Employee_Attachments_OneArgs = {
  object: Employee_Attachments_Insert_Input;
  on_conflict?: InputMaybe<Employee_Attachments_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Employee_InsuranceArgs = {
  objects: Array<Employee_Insurance_Insert_Input>;
  on_conflict?: InputMaybe<Employee_Insurance_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Employee_Insurance_OneArgs = {
  object: Employee_Insurance_Insert_Input;
  on_conflict?: InputMaybe<Employee_Insurance_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Employee_LeavesArgs = {
  objects: Array<Employee_Leaves_Insert_Input>;
  on_conflict?: InputMaybe<Employee_Leaves_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Employee_Leaves_OneArgs = {
  object: Employee_Leaves_Insert_Input;
  on_conflict?: InputMaybe<Employee_Leaves_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Employee_Salary_DepartmentArgs = {
  objects: Array<Employee_Salary_Department_Insert_Input>;
  on_conflict?: InputMaybe<Employee_Salary_Department_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Employee_Salary_Department_OneArgs = {
  object: Employee_Salary_Department_Insert_Input;
  on_conflict?: InputMaybe<Employee_Salary_Department_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_EmployeesArgs = {
  objects: Array<Employees_Insert_Input>;
  on_conflict?: InputMaybe<Employees_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Employees_OneArgs = {
  object: Employees_Insert_Input;
  on_conflict?: InputMaybe<Employees_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Employees_RolesArgs = {
  objects: Array<Employees_Roles_Insert_Input>;
  on_conflict?: InputMaybe<Employees_Roles_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Employees_Roles_OneArgs = {
  object: Employees_Roles_Insert_Input;
  on_conflict?: InputMaybe<Employees_Roles_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_FoodcategoriesArgs = {
  objects: Array<Foodcategories_Insert_Input>;
  on_conflict?: InputMaybe<Foodcategories_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Foodcategories_OneArgs = {
  object: Foodcategories_Insert_Input;
  on_conflict?: InputMaybe<Foodcategories_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_FooditemsArgs = {
  objects: Array<Fooditems_Insert_Input>;
  on_conflict?: InputMaybe<Fooditems_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Fooditems_OneArgs = {
  object: Fooditems_Insert_Input;
  on_conflict?: InputMaybe<Fooditems_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_IngredientsArgs = {
  objects: Array<Ingredients_Insert_Input>;
  on_conflict?: InputMaybe<Ingredients_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Ingredients_OneArgs = {
  object: Ingredients_Insert_Input;
  on_conflict?: InputMaybe<Ingredients_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Insurance_Fund_TypesArgs = {
  objects: Array<Insurance_Fund_Types_Insert_Input>;
  on_conflict?: InputMaybe<Insurance_Fund_Types_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Insurance_Fund_Types_OneArgs = {
  object: Insurance_Fund_Types_Insert_Input;
  on_conflict?: InputMaybe<Insurance_Fund_Types_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Insurance_FundsArgs = {
  objects: Array<Insurance_Funds_Insert_Input>;
  on_conflict?: InputMaybe<Insurance_Funds_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Insurance_Funds_OneArgs = {
  object: Insurance_Funds_Insert_Input;
  on_conflict?: InputMaybe<Insurance_Funds_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Leave_TypesArgs = {
  objects: Array<Leave_Types_Insert_Input>;
  on_conflict?: InputMaybe<Leave_Types_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Leave_Types_OneArgs = {
  object: Leave_Types_Insert_Input;
  on_conflict?: InputMaybe<Leave_Types_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_MonthlysalaryArgs = {
  objects: Array<Monthlysalary_Insert_Input>;
  on_conflict?: InputMaybe<Monthlysalary_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Monthlysalary_OneArgs = {
  object: Monthlysalary_Insert_Input;
  on_conflict?: InputMaybe<Monthlysalary_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Nav_Bg_CategoriesArgs = {
  objects: Array<Nav_Bg_Categories_Insert_Input>;
  on_conflict?: InputMaybe<Nav_Bg_Categories_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Nav_Bg_Categories_OneArgs = {
  object: Nav_Bg_Categories_Insert_Input;
  on_conflict?: InputMaybe<Nav_Bg_Categories_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Nav_Sm_CategoriesArgs = {
  objects: Array<Nav_Sm_Categories_Insert_Input>;
  on_conflict?: InputMaybe<Nav_Sm_Categories_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Nav_Sm_Categories_OneArgs = {
  object: Nav_Sm_Categories_Insert_Input;
  on_conflict?: InputMaybe<Nav_Sm_Categories_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Nav_Xl_CategoriesArgs = {
  objects: Array<Nav_Xl_Categories_Insert_Input>;
  on_conflict?: InputMaybe<Nav_Xl_Categories_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Nav_Xl_Categories_OneArgs = {
  object: Nav_Xl_Categories_Insert_Input;
  on_conflict?: InputMaybe<Nav_Xl_Categories_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_OrganstoresArgs = {
  objects: Array<Organstores_Insert_Input>;
  on_conflict?: InputMaybe<Organstores_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Organstores_OneArgs = {
  object: Organstores_Insert_Input;
  on_conflict?: InputMaybe<Organstores_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Role_Nav_Sm_CategoriesArgs = {
  objects: Array<Role_Nav_Sm_Categories_Insert_Input>;
  on_conflict?: InputMaybe<Role_Nav_Sm_Categories_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Role_Nav_Sm_Categories_OneArgs = {
  object: Role_Nav_Sm_Categories_Insert_Input;
  on_conflict?: InputMaybe<Role_Nav_Sm_Categories_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Role_ScopeArgs = {
  objects: Array<Role_Scope_Insert_Input>;
  on_conflict?: InputMaybe<Role_Scope_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Role_Scope_OneArgs = {
  object: Role_Scope_Insert_Input;
  on_conflict?: InputMaybe<Role_Scope_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_RolesArgs = {
  objects: Array<Roles_Insert_Input>;
  on_conflict?: InputMaybe<Roles_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Roles_OneArgs = {
  object: Roles_Insert_Input;
  on_conflict?: InputMaybe<Roles_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Salary_AccountsArgs = {
  objects: Array<Salary_Accounts_Insert_Input>;
  on_conflict?: InputMaybe<Salary_Accounts_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Salary_Accounts_OneArgs = {
  object: Salary_Accounts_Insert_Input;
  on_conflict?: InputMaybe<Salary_Accounts_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Salary_TypesArgs = {
  objects: Array<Salary_Types_Insert_Input>;
  on_conflict?: InputMaybe<Salary_Types_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Salary_Types_OneArgs = {
  object: Salary_Types_Insert_Input;
  on_conflict?: InputMaybe<Salary_Types_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_SalesitemsdataArgs = {
  objects: Array<Salesitemsdata_Insert_Input>;
  on_conflict?: InputMaybe<Salesitemsdata_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Salesitemsdata_OneArgs = {
  object: Salesitemsdata_Insert_Input;
  on_conflict?: InputMaybe<Salesitemsdata_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Scope_Nav_Sm_CategoriesArgs = {
  objects: Array<Scope_Nav_Sm_Categories_Insert_Input>;
  on_conflict?: InputMaybe<Scope_Nav_Sm_Categories_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Scope_Nav_Sm_Categories_OneArgs = {
  object: Scope_Nav_Sm_Categories_Insert_Input;
  on_conflict?: InputMaybe<Scope_Nav_Sm_Categories_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_ScopesArgs = {
  objects: Array<Scopes_Insert_Input>;
  on_conflict?: InputMaybe<Scopes_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Scopes_OneArgs = {
  object: Scopes_Insert_Input;
  on_conflict?: InputMaybe<Scopes_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Service_EntitlementArgs = {
  objects: Array<Service_Entitlement_Insert_Input>;
  on_conflict?: InputMaybe<Service_Entitlement_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Service_Entitlement_OneArgs = {
  object: Service_Entitlement_Insert_Input;
  on_conflict?: InputMaybe<Service_Entitlement_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_SettledetailsArgs = {
  objects: Array<Settledetails_Insert_Input>;
  on_conflict?: InputMaybe<Settledetails_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Settledetails_OneArgs = {
  object: Settledetails_Insert_Input;
  on_conflict?: InputMaybe<Settledetails_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Shift_ListsArgs = {
  objects: Array<Shift_Lists_Insert_Input>;
  on_conflict?: InputMaybe<Shift_Lists_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Shift_Lists_OneArgs = {
  object: Shift_Lists_Insert_Input;
  on_conflict?: InputMaybe<Shift_Lists_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_SolditemsArgs = {
  objects: Array<Solditems_Insert_Input>;
  on_conflict?: InputMaybe<Solditems_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Solditems_OneArgs = {
  object: Solditems_Insert_Input;
  on_conflict?: InputMaybe<Solditems_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Solditems_SummaryArgs = {
  objects: Array<Solditems_Summary_Insert_Input>;
};


/** mutation root */
export type Mutation_RootInsert_Solditems_Summary_OneArgs = {
  object: Solditems_Summary_Insert_Input;
};


/** mutation root */
export type Mutation_RootInsert_Store_EmployeeArgs = {
  objects: Array<Store_Employee_Insert_Input>;
  on_conflict?: InputMaybe<Store_Employee_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Store_Employee_OneArgs = {
  object: Store_Employee_Insert_Input;
  on_conflict?: InputMaybe<Store_Employee_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_StoresArgs = {
  objects: Array<Stores_Insert_Input>;
  on_conflict?: InputMaybe<Stores_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Stores_OneArgs = {
  object: Stores_Insert_Input;
  on_conflict?: InputMaybe<Stores_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_SuppliersArgs = {
  objects: Array<Suppliers_Insert_Input>;
  on_conflict?: InputMaybe<Suppliers_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Suppliers_OneArgs = {
  object: Suppliers_Insert_Input;
  on_conflict?: InputMaybe<Suppliers_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_SupplyitemsArgs = {
  objects: Array<Supplyitems_Insert_Input>;
  on_conflict?: InputMaybe<Supplyitems_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Supplyitems_OneArgs = {
  object: Supplyitems_Insert_Input;
  on_conflict?: InputMaybe<Supplyitems_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_SupplyitemtypesArgs = {
  objects: Array<Supplyitemtypes_Insert_Input>;
  on_conflict?: InputMaybe<Supplyitemtypes_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Supplyitemtypes_OneArgs = {
  object: Supplyitemtypes_Insert_Input;
  on_conflict?: InputMaybe<Supplyitemtypes_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_SupplyitemunitsArgs = {
  objects: Array<Supplyitemunits_Insert_Input>;
  on_conflict?: InputMaybe<Supplyitemunits_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Supplyitemunits_OneArgs = {
  object: Supplyitemunits_Insert_Input;
  on_conflict?: InputMaybe<Supplyitemunits_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_SupplyrdcArgs = {
  objects: Array<Supplyrdc_Insert_Input>;
  on_conflict?: InputMaybe<Supplyrdc_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Supplyrdc_OneArgs = {
  object: Supplyrdc_Insert_Input;
  on_conflict?: InputMaybe<Supplyrdc_On_Conflict>;
};


/** mutation root */
export type Mutation_RootUpdate_AttendanceArgs = {
  _inc?: InputMaybe<Attendance_Inc_Input>;
  _set?: InputMaybe<Attendance_Set_Input>;
  where: Attendance_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Attendance_By_PkArgs = {
  _inc?: InputMaybe<Attendance_Inc_Input>;
  _set?: InputMaybe<Attendance_Set_Input>;
  pk_columns: Attendance_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Attendance_Group_LeadersArgs = {
  _set?: InputMaybe<Attendance_Group_Leaders_Set_Input>;
  where: Attendance_Group_Leaders_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Attendance_Group_Leaders_By_PkArgs = {
  _set?: InputMaybe<Attendance_Group_Leaders_Set_Input>;
  pk_columns: Attendance_Group_Leaders_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Attendance_Group_Leaders_ManyArgs = {
  updates: Array<Attendance_Group_Leaders_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_Attendance_Group_ShiftsArgs = {
  _set?: InputMaybe<Attendance_Group_Shifts_Set_Input>;
  where: Attendance_Group_Shifts_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Attendance_Group_Shifts_By_PkArgs = {
  _set?: InputMaybe<Attendance_Group_Shifts_Set_Input>;
  pk_columns: Attendance_Group_Shifts_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Attendance_Group_Shifts_ManyArgs = {
  updates: Array<Attendance_Group_Shifts_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_Attendance_Group_SubleadersArgs = {
  _set?: InputMaybe<Attendance_Group_Subleaders_Set_Input>;
  where: Attendance_Group_Subleaders_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Attendance_Group_Subleaders_By_PkArgs = {
  _set?: InputMaybe<Attendance_Group_Subleaders_Set_Input>;
  pk_columns: Attendance_Group_Subleaders_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Attendance_Group_Subleaders_ManyArgs = {
  updates: Array<Attendance_Group_Subleaders_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_Attendance_GroupsArgs = {
  _inc?: InputMaybe<Attendance_Groups_Inc_Input>;
  _set?: InputMaybe<Attendance_Groups_Set_Input>;
  where: Attendance_Groups_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Attendance_Groups_By_PkArgs = {
  _inc?: InputMaybe<Attendance_Groups_Inc_Input>;
  _set?: InputMaybe<Attendance_Groups_Set_Input>;
  pk_columns: Attendance_Groups_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Attendance_Groups_ManyArgs = {
  updates: Array<Attendance_Groups_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_Attendance_LocationsArgs = {
  _inc?: InputMaybe<Attendance_Locations_Inc_Input>;
  _set?: InputMaybe<Attendance_Locations_Set_Input>;
  where: Attendance_Locations_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Attendance_Locations_By_PkArgs = {
  _inc?: InputMaybe<Attendance_Locations_Inc_Input>;
  _set?: InputMaybe<Attendance_Locations_Set_Input>;
  pk_columns: Attendance_Locations_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Attendance_Locations_ManyArgs = {
  updates: Array<Attendance_Locations_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_Attendance_ManyArgs = {
  updates: Array<Attendance_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_BillsArgs = {
  _inc?: InputMaybe<Bills_Inc_Input>;
  _set?: InputMaybe<Bills_Set_Input>;
  where: Bills_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Bills_By_PkArgs = {
  _inc?: InputMaybe<Bills_Inc_Input>;
  _set?: InputMaybe<Bills_Set_Input>;
  pk_columns: Bills_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Bills_ManyArgs = {
  updates: Array<Bills_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_BonusdeductionsArgs = {
  _inc?: InputMaybe<Bonusdeductions_Inc_Input>;
  _set?: InputMaybe<Bonusdeductions_Set_Input>;
  where: Bonusdeductions_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Bonusdeductions_By_PkArgs = {
  _inc?: InputMaybe<Bonusdeductions_Inc_Input>;
  _set?: InputMaybe<Bonusdeductions_Set_Input>;
  pk_columns: Bonusdeductions_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Bonusdeductions_ManyArgs = {
  updates: Array<Bonusdeductions_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_BonusdeductiontypesArgs = {
  _set?: InputMaybe<Bonusdeductiontypes_Set_Input>;
  where: Bonusdeductiontypes_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Bonusdeductiontypes_By_PkArgs = {
  _set?: InputMaybe<Bonusdeductiontypes_Set_Input>;
  pk_columns: Bonusdeductiontypes_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Bonusdeductiontypes_ManyArgs = {
  updates: Array<Bonusdeductiontypes_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_BrandsArgs = {
  _inc?: InputMaybe<Brands_Inc_Input>;
  _set?: InputMaybe<Brands_Set_Input>;
  where: Brands_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Brands_By_PkArgs = {
  _inc?: InputMaybe<Brands_Inc_Input>;
  _set?: InputMaybe<Brands_Set_Input>;
  pk_columns: Brands_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Brands_EmployeesArgs = {
  _set?: InputMaybe<Brands_Employees_Set_Input>;
  where: Brands_Employees_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Brands_Employees_By_PkArgs = {
  _set?: InputMaybe<Brands_Employees_Set_Input>;
  pk_columns: Brands_Employees_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Brands_Employees_ManyArgs = {
  updates: Array<Brands_Employees_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_Brands_ManyArgs = {
  updates: Array<Brands_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_DepartmentsArgs = {
  _inc?: InputMaybe<Departments_Inc_Input>;
  _set?: InputMaybe<Departments_Set_Input>;
  where: Departments_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Departments_By_PkArgs = {
  _inc?: InputMaybe<Departments_Inc_Input>;
  _set?: InputMaybe<Departments_Set_Input>;
  pk_columns: Departments_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Departments_EmployeesArgs = {
  _set?: InputMaybe<Departments_Employees_Set_Input>;
  where: Departments_Employees_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Departments_Employees_By_PkArgs = {
  _set?: InputMaybe<Departments_Employees_Set_Input>;
  pk_columns: Departments_Employees_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Departments_Employees_ManyArgs = {
  updates: Array<Departments_Employees_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_Departments_ManyArgs = {
  updates: Array<Departments_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_Departments_StoresArgs = {
  _set?: InputMaybe<Departments_Stores_Set_Input>;
  where: Departments_Stores_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Departments_Stores_By_PkArgs = {
  _set?: InputMaybe<Departments_Stores_Set_Input>;
  pk_columns: Departments_Stores_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Departments_Stores_ManyArgs = {
  updates: Array<Departments_Stores_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_DsstorebillsArgs = {
  _inc?: InputMaybe<Dsstorebills_Inc_Input>;
  _set?: InputMaybe<Dsstorebills_Set_Input>;
  where: Dsstorebills_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Dsstorebills_By_PkArgs = {
  _inc?: InputMaybe<Dsstorebills_Inc_Input>;
  _set?: InputMaybe<Dsstorebills_Set_Input>;
  pk_columns: Dsstorebills_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Dsstorebills_ManyArgs = {
  updates: Array<Dsstorebills_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_Employee_AttachmentsArgs = {
  _set?: InputMaybe<Employee_Attachments_Set_Input>;
  where: Employee_Attachments_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Employee_Attachments_By_PkArgs = {
  _set?: InputMaybe<Employee_Attachments_Set_Input>;
  pk_columns: Employee_Attachments_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Employee_Attachments_ManyArgs = {
  updates: Array<Employee_Attachments_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_Employee_InsuranceArgs = {
  _inc?: InputMaybe<Employee_Insurance_Inc_Input>;
  _set?: InputMaybe<Employee_Insurance_Set_Input>;
  where: Employee_Insurance_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Employee_Insurance_By_PkArgs = {
  _inc?: InputMaybe<Employee_Insurance_Inc_Input>;
  _set?: InputMaybe<Employee_Insurance_Set_Input>;
  pk_columns: Employee_Insurance_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Employee_Insurance_ManyArgs = {
  updates: Array<Employee_Insurance_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_Employee_LeavesArgs = {
  _inc?: InputMaybe<Employee_Leaves_Inc_Input>;
  _set?: InputMaybe<Employee_Leaves_Set_Input>;
  where: Employee_Leaves_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Employee_Leaves_By_PkArgs = {
  _inc?: InputMaybe<Employee_Leaves_Inc_Input>;
  _set?: InputMaybe<Employee_Leaves_Set_Input>;
  pk_columns: Employee_Leaves_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Employee_Leaves_ManyArgs = {
  updates: Array<Employee_Leaves_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_Employee_Salary_DepartmentArgs = {
  _set?: InputMaybe<Employee_Salary_Department_Set_Input>;
  where: Employee_Salary_Department_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Employee_Salary_Department_By_PkArgs = {
  _set?: InputMaybe<Employee_Salary_Department_Set_Input>;
  pk_columns: Employee_Salary_Department_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Employee_Salary_Department_ManyArgs = {
  updates: Array<Employee_Salary_Department_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_EmployeesArgs = {
  _inc?: InputMaybe<Employees_Inc_Input>;
  _set?: InputMaybe<Employees_Set_Input>;
  where: Employees_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Employees_By_PkArgs = {
  _inc?: InputMaybe<Employees_Inc_Input>;
  _set?: InputMaybe<Employees_Set_Input>;
  pk_columns: Employees_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Employees_ManyArgs = {
  updates: Array<Employees_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_Employees_RolesArgs = {
  _set?: InputMaybe<Employees_Roles_Set_Input>;
  where: Employees_Roles_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Employees_Roles_By_PkArgs = {
  _set?: InputMaybe<Employees_Roles_Set_Input>;
  pk_columns: Employees_Roles_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Employees_Roles_ManyArgs = {
  updates: Array<Employees_Roles_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_FoodcategoriesArgs = {
  _inc?: InputMaybe<Foodcategories_Inc_Input>;
  _set?: InputMaybe<Foodcategories_Set_Input>;
  where: Foodcategories_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Foodcategories_By_PkArgs = {
  _inc?: InputMaybe<Foodcategories_Inc_Input>;
  _set?: InputMaybe<Foodcategories_Set_Input>;
  pk_columns: Foodcategories_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Foodcategories_ManyArgs = {
  updates: Array<Foodcategories_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_FooditemsArgs = {
  _inc?: InputMaybe<Fooditems_Inc_Input>;
  _set?: InputMaybe<Fooditems_Set_Input>;
  where: Fooditems_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Fooditems_By_PkArgs = {
  _inc?: InputMaybe<Fooditems_Inc_Input>;
  _set?: InputMaybe<Fooditems_Set_Input>;
  pk_columns: Fooditems_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Fooditems_ManyArgs = {
  updates: Array<Fooditems_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_IngredientsArgs = {
  _inc?: InputMaybe<Ingredients_Inc_Input>;
  _set?: InputMaybe<Ingredients_Set_Input>;
  where: Ingredients_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Ingredients_By_PkArgs = {
  _inc?: InputMaybe<Ingredients_Inc_Input>;
  _set?: InputMaybe<Ingredients_Set_Input>;
  pk_columns: Ingredients_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Ingredients_ManyArgs = {
  updates: Array<Ingredients_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_Insurance_Fund_TypesArgs = {
  _set?: InputMaybe<Insurance_Fund_Types_Set_Input>;
  where: Insurance_Fund_Types_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Insurance_Fund_Types_By_PkArgs = {
  _set?: InputMaybe<Insurance_Fund_Types_Set_Input>;
  pk_columns: Insurance_Fund_Types_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Insurance_Fund_Types_ManyArgs = {
  updates: Array<Insurance_Fund_Types_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_Insurance_FundsArgs = {
  _inc?: InputMaybe<Insurance_Funds_Inc_Input>;
  _set?: InputMaybe<Insurance_Funds_Set_Input>;
  where: Insurance_Funds_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Insurance_Funds_By_PkArgs = {
  _inc?: InputMaybe<Insurance_Funds_Inc_Input>;
  _set?: InputMaybe<Insurance_Funds_Set_Input>;
  pk_columns: Insurance_Funds_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Insurance_Funds_ManyArgs = {
  updates: Array<Insurance_Funds_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_Leave_TypesArgs = {
  _set?: InputMaybe<Leave_Types_Set_Input>;
  where: Leave_Types_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Leave_Types_By_PkArgs = {
  _set?: InputMaybe<Leave_Types_Set_Input>;
  pk_columns: Leave_Types_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Leave_Types_ManyArgs = {
  updates: Array<Leave_Types_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_MonthlysalaryArgs = {
  _inc?: InputMaybe<Monthlysalary_Inc_Input>;
  _set?: InputMaybe<Monthlysalary_Set_Input>;
  where: Monthlysalary_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Monthlysalary_By_PkArgs = {
  _inc?: InputMaybe<Monthlysalary_Inc_Input>;
  _set?: InputMaybe<Monthlysalary_Set_Input>;
  pk_columns: Monthlysalary_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Monthlysalary_ManyArgs = {
  updates: Array<Monthlysalary_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_Nav_Bg_CategoriesArgs = {
  _inc?: InputMaybe<Nav_Bg_Categories_Inc_Input>;
  _set?: InputMaybe<Nav_Bg_Categories_Set_Input>;
  where: Nav_Bg_Categories_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Nav_Bg_Categories_By_PkArgs = {
  _inc?: InputMaybe<Nav_Bg_Categories_Inc_Input>;
  _set?: InputMaybe<Nav_Bg_Categories_Set_Input>;
  pk_columns: Nav_Bg_Categories_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Nav_Bg_Categories_ManyArgs = {
  updates: Array<Nav_Bg_Categories_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_Nav_Sm_CategoriesArgs = {
  _inc?: InputMaybe<Nav_Sm_Categories_Inc_Input>;
  _set?: InputMaybe<Nav_Sm_Categories_Set_Input>;
  where: Nav_Sm_Categories_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Nav_Sm_Categories_By_PkArgs = {
  _inc?: InputMaybe<Nav_Sm_Categories_Inc_Input>;
  _set?: InputMaybe<Nav_Sm_Categories_Set_Input>;
  pk_columns: Nav_Sm_Categories_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Nav_Sm_Categories_ManyArgs = {
  updates: Array<Nav_Sm_Categories_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_Nav_Xl_CategoriesArgs = {
  _inc?: InputMaybe<Nav_Xl_Categories_Inc_Input>;
  _set?: InputMaybe<Nav_Xl_Categories_Set_Input>;
  where: Nav_Xl_Categories_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Nav_Xl_Categories_By_PkArgs = {
  _inc?: InputMaybe<Nav_Xl_Categories_Inc_Input>;
  _set?: InputMaybe<Nav_Xl_Categories_Set_Input>;
  pk_columns: Nav_Xl_Categories_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Nav_Xl_Categories_ManyArgs = {
  updates: Array<Nav_Xl_Categories_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_OrganstoresArgs = {
  _inc?: InputMaybe<Organstores_Inc_Input>;
  _set?: InputMaybe<Organstores_Set_Input>;
  where: Organstores_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Organstores_By_PkArgs = {
  _inc?: InputMaybe<Organstores_Inc_Input>;
  _set?: InputMaybe<Organstores_Set_Input>;
  pk_columns: Organstores_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Organstores_ManyArgs = {
  updates: Array<Organstores_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_Role_Nav_Sm_CategoriesArgs = {
  _inc?: InputMaybe<Role_Nav_Sm_Categories_Inc_Input>;
  _set?: InputMaybe<Role_Nav_Sm_Categories_Set_Input>;
  where: Role_Nav_Sm_Categories_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Role_Nav_Sm_Categories_By_PkArgs = {
  _inc?: InputMaybe<Role_Nav_Sm_Categories_Inc_Input>;
  _set?: InputMaybe<Role_Nav_Sm_Categories_Set_Input>;
  pk_columns: Role_Nav_Sm_Categories_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Role_Nav_Sm_Categories_ManyArgs = {
  updates: Array<Role_Nav_Sm_Categories_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_Role_ScopeArgs = {
  _set?: InputMaybe<Role_Scope_Set_Input>;
  where: Role_Scope_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Role_Scope_By_PkArgs = {
  _set?: InputMaybe<Role_Scope_Set_Input>;
  pk_columns: Role_Scope_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Role_Scope_ManyArgs = {
  updates: Array<Role_Scope_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_RolesArgs = {
  _inc?: InputMaybe<Roles_Inc_Input>;
  _set?: InputMaybe<Roles_Set_Input>;
  where: Roles_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Roles_By_PkArgs = {
  _inc?: InputMaybe<Roles_Inc_Input>;
  _set?: InputMaybe<Roles_Set_Input>;
  pk_columns: Roles_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Roles_ManyArgs = {
  updates: Array<Roles_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_Salary_AccountsArgs = {
  _set?: InputMaybe<Salary_Accounts_Set_Input>;
  where: Salary_Accounts_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Salary_Accounts_By_PkArgs = {
  _set?: InputMaybe<Salary_Accounts_Set_Input>;
  pk_columns: Salary_Accounts_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Salary_Accounts_ManyArgs = {
  updates: Array<Salary_Accounts_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_Salary_TypesArgs = {
  _set?: InputMaybe<Salary_Types_Set_Input>;
  where: Salary_Types_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Salary_Types_By_PkArgs = {
  _set?: InputMaybe<Salary_Types_Set_Input>;
  pk_columns: Salary_Types_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Salary_Types_ManyArgs = {
  updates: Array<Salary_Types_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_SalesitemsdataArgs = {
  _inc?: InputMaybe<Salesitemsdata_Inc_Input>;
  _set?: InputMaybe<Salesitemsdata_Set_Input>;
  where: Salesitemsdata_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Salesitemsdata_By_PkArgs = {
  _inc?: InputMaybe<Salesitemsdata_Inc_Input>;
  _set?: InputMaybe<Salesitemsdata_Set_Input>;
  pk_columns: Salesitemsdata_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Salesitemsdata_ManyArgs = {
  updates: Array<Salesitemsdata_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_Scope_Nav_Sm_CategoriesArgs = {
  _inc?: InputMaybe<Scope_Nav_Sm_Categories_Inc_Input>;
  _set?: InputMaybe<Scope_Nav_Sm_Categories_Set_Input>;
  where: Scope_Nav_Sm_Categories_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Scope_Nav_Sm_Categories_By_PkArgs = {
  _inc?: InputMaybe<Scope_Nav_Sm_Categories_Inc_Input>;
  _set?: InputMaybe<Scope_Nav_Sm_Categories_Set_Input>;
  pk_columns: Scope_Nav_Sm_Categories_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Scope_Nav_Sm_Categories_ManyArgs = {
  updates: Array<Scope_Nav_Sm_Categories_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_ScopesArgs = {
  _set?: InputMaybe<Scopes_Set_Input>;
  where: Scopes_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Scopes_By_PkArgs = {
  _set?: InputMaybe<Scopes_Set_Input>;
  pk_columns: Scopes_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Scopes_ManyArgs = {
  updates: Array<Scopes_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_Service_EntitlementArgs = {
  _inc?: InputMaybe<Service_Entitlement_Inc_Input>;
  _set?: InputMaybe<Service_Entitlement_Set_Input>;
  where: Service_Entitlement_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Service_Entitlement_By_PkArgs = {
  _inc?: InputMaybe<Service_Entitlement_Inc_Input>;
  _set?: InputMaybe<Service_Entitlement_Set_Input>;
  pk_columns: Service_Entitlement_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Service_Entitlement_ManyArgs = {
  updates: Array<Service_Entitlement_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_SettledetailsArgs = {
  _inc?: InputMaybe<Settledetails_Inc_Input>;
  _set?: InputMaybe<Settledetails_Set_Input>;
  where: Settledetails_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Settledetails_By_PkArgs = {
  _inc?: InputMaybe<Settledetails_Inc_Input>;
  _set?: InputMaybe<Settledetails_Set_Input>;
  pk_columns: Settledetails_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Settledetails_ManyArgs = {
  updates: Array<Settledetails_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_Shift_ListsArgs = {
  _inc?: InputMaybe<Shift_Lists_Inc_Input>;
  _set?: InputMaybe<Shift_Lists_Set_Input>;
  where: Shift_Lists_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Shift_Lists_By_PkArgs = {
  _inc?: InputMaybe<Shift_Lists_Inc_Input>;
  _set?: InputMaybe<Shift_Lists_Set_Input>;
  pk_columns: Shift_Lists_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Shift_Lists_ManyArgs = {
  updates: Array<Shift_Lists_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_SolditemsArgs = {
  _inc?: InputMaybe<Solditems_Inc_Input>;
  _set?: InputMaybe<Solditems_Set_Input>;
  where: Solditems_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Solditems_By_PkArgs = {
  _inc?: InputMaybe<Solditems_Inc_Input>;
  _set?: InputMaybe<Solditems_Set_Input>;
  pk_columns: Solditems_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Solditems_ManyArgs = {
  updates: Array<Solditems_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_Solditems_SummaryArgs = {
  _inc?: InputMaybe<Solditems_Summary_Inc_Input>;
  _set?: InputMaybe<Solditems_Summary_Set_Input>;
  where: Solditems_Summary_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Solditems_Summary_ManyArgs = {
  updates: Array<Solditems_Summary_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_Store_EmployeeArgs = {
  _set?: InputMaybe<Store_Employee_Set_Input>;
  where: Store_Employee_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Store_Employee_By_PkArgs = {
  _set?: InputMaybe<Store_Employee_Set_Input>;
  pk_columns: Store_Employee_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Store_Employee_ManyArgs = {
  updates: Array<Store_Employee_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_StoresArgs = {
  _inc?: InputMaybe<Stores_Inc_Input>;
  _set?: InputMaybe<Stores_Set_Input>;
  where: Stores_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Stores_By_PkArgs = {
  _inc?: InputMaybe<Stores_Inc_Input>;
  _set?: InputMaybe<Stores_Set_Input>;
  pk_columns: Stores_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Stores_ManyArgs = {
  updates: Array<Stores_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_SuppliersArgs = {
  _inc?: InputMaybe<Suppliers_Inc_Input>;
  _set?: InputMaybe<Suppliers_Set_Input>;
  where: Suppliers_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Suppliers_By_PkArgs = {
  _inc?: InputMaybe<Suppliers_Inc_Input>;
  _set?: InputMaybe<Suppliers_Set_Input>;
  pk_columns: Suppliers_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Suppliers_ManyArgs = {
  updates: Array<Suppliers_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_SupplyitemsArgs = {
  _inc?: InputMaybe<Supplyitems_Inc_Input>;
  _set?: InputMaybe<Supplyitems_Set_Input>;
  where: Supplyitems_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Supplyitems_By_PkArgs = {
  _inc?: InputMaybe<Supplyitems_Inc_Input>;
  _set?: InputMaybe<Supplyitems_Set_Input>;
  pk_columns: Supplyitems_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Supplyitems_ManyArgs = {
  updates: Array<Supplyitems_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_SupplyitemtypesArgs = {
  _set?: InputMaybe<Supplyitemtypes_Set_Input>;
  where: Supplyitemtypes_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Supplyitemtypes_By_PkArgs = {
  _set?: InputMaybe<Supplyitemtypes_Set_Input>;
  pk_columns: Supplyitemtypes_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Supplyitemtypes_ManyArgs = {
  updates: Array<Supplyitemtypes_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_SupplyitemunitsArgs = {
  _inc?: InputMaybe<Supplyitemunits_Inc_Input>;
  _set?: InputMaybe<Supplyitemunits_Set_Input>;
  where: Supplyitemunits_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Supplyitemunits_By_PkArgs = {
  _inc?: InputMaybe<Supplyitemunits_Inc_Input>;
  _set?: InputMaybe<Supplyitemunits_Set_Input>;
  pk_columns: Supplyitemunits_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Supplyitemunits_ManyArgs = {
  updates: Array<Supplyitemunits_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_SupplyrdcArgs = {
  _inc?: InputMaybe<Supplyrdc_Inc_Input>;
  _set?: InputMaybe<Supplyrdc_Set_Input>;
  where: Supplyrdc_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Supplyrdc_By_PkArgs = {
  _inc?: InputMaybe<Supplyrdc_Inc_Input>;
  _set?: InputMaybe<Supplyrdc_Set_Input>;
  pk_columns: Supplyrdc_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Supplyrdc_ManyArgs = {
  updates: Array<Supplyrdc_Updates>;
};

/** columns and relationships of "nav_bg_categories" */
export type Nav_Bg_Categories = {
  __typename?: 'nav_bg_categories';
  id: Scalars['Int'];
  name?: Maybe<Scalars['String']>;
  /** An array relationship */
  nav_sm_categories: Array<Nav_Sm_Categories>;
  /** An aggregate relationship */
  nav_sm_categories_aggregate: Nav_Sm_Categories_Aggregate;
  nav_xl_categories_id?: Maybe<Scalars['Int']>;
  /** An object relationship */
  nav_xl_category?: Maybe<Nav_Xl_Categories>;
};


/** columns and relationships of "nav_bg_categories" */
export type Nav_Bg_CategoriesNav_Sm_CategoriesArgs = {
  distinct_on?: InputMaybe<Array<Nav_Sm_Categories_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Nav_Sm_Categories_Order_By>>;
  where?: InputMaybe<Nav_Sm_Categories_Bool_Exp>;
};


/** columns and relationships of "nav_bg_categories" */
export type Nav_Bg_CategoriesNav_Sm_Categories_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Nav_Sm_Categories_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Nav_Sm_Categories_Order_By>>;
  where?: InputMaybe<Nav_Sm_Categories_Bool_Exp>;
};

/** aggregated selection of "nav_bg_categories" */
export type Nav_Bg_Categories_Aggregate = {
  __typename?: 'nav_bg_categories_aggregate';
  aggregate?: Maybe<Nav_Bg_Categories_Aggregate_Fields>;
  nodes: Array<Nav_Bg_Categories>;
};

export type Nav_Bg_Categories_Aggregate_Bool_Exp = {
  count?: InputMaybe<Nav_Bg_Categories_Aggregate_Bool_Exp_Count>;
};

export type Nav_Bg_Categories_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<Nav_Bg_Categories_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<Nav_Bg_Categories_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "nav_bg_categories" */
export type Nav_Bg_Categories_Aggregate_Fields = {
  __typename?: 'nav_bg_categories_aggregate_fields';
  avg?: Maybe<Nav_Bg_Categories_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Nav_Bg_Categories_Max_Fields>;
  min?: Maybe<Nav_Bg_Categories_Min_Fields>;
  stddev?: Maybe<Nav_Bg_Categories_Stddev_Fields>;
  stddev_pop?: Maybe<Nav_Bg_Categories_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Nav_Bg_Categories_Stddev_Samp_Fields>;
  sum?: Maybe<Nav_Bg_Categories_Sum_Fields>;
  var_pop?: Maybe<Nav_Bg_Categories_Var_Pop_Fields>;
  var_samp?: Maybe<Nav_Bg_Categories_Var_Samp_Fields>;
  variance?: Maybe<Nav_Bg_Categories_Variance_Fields>;
};


/** aggregate fields of "nav_bg_categories" */
export type Nav_Bg_Categories_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Nav_Bg_Categories_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "nav_bg_categories" */
export type Nav_Bg_Categories_Aggregate_Order_By = {
  avg?: InputMaybe<Nav_Bg_Categories_Avg_Order_By>;
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<Nav_Bg_Categories_Max_Order_By>;
  min?: InputMaybe<Nav_Bg_Categories_Min_Order_By>;
  stddev?: InputMaybe<Nav_Bg_Categories_Stddev_Order_By>;
  stddev_pop?: InputMaybe<Nav_Bg_Categories_Stddev_Pop_Order_By>;
  stddev_samp?: InputMaybe<Nav_Bg_Categories_Stddev_Samp_Order_By>;
  sum?: InputMaybe<Nav_Bg_Categories_Sum_Order_By>;
  var_pop?: InputMaybe<Nav_Bg_Categories_Var_Pop_Order_By>;
  var_samp?: InputMaybe<Nav_Bg_Categories_Var_Samp_Order_By>;
  variance?: InputMaybe<Nav_Bg_Categories_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "nav_bg_categories" */
export type Nav_Bg_Categories_Arr_Rel_Insert_Input = {
  data: Array<Nav_Bg_Categories_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<Nav_Bg_Categories_On_Conflict>;
};

/** aggregate avg on columns */
export type Nav_Bg_Categories_Avg_Fields = {
  __typename?: 'nav_bg_categories_avg_fields';
  id?: Maybe<Scalars['Float']>;
  nav_xl_categories_id?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "nav_bg_categories" */
export type Nav_Bg_Categories_Avg_Order_By = {
  id?: InputMaybe<Order_By>;
  nav_xl_categories_id?: InputMaybe<Order_By>;
};

/** Boolean expression to filter rows from the table "nav_bg_categories". All fields are combined with a logical 'AND'. */
export type Nav_Bg_Categories_Bool_Exp = {
  _and?: InputMaybe<Array<Nav_Bg_Categories_Bool_Exp>>;
  _not?: InputMaybe<Nav_Bg_Categories_Bool_Exp>;
  _or?: InputMaybe<Array<Nav_Bg_Categories_Bool_Exp>>;
  id?: InputMaybe<Int_Comparison_Exp>;
  name?: InputMaybe<String_Comparison_Exp>;
  nav_sm_categories?: InputMaybe<Nav_Sm_Categories_Bool_Exp>;
  nav_sm_categories_aggregate?: InputMaybe<Nav_Sm_Categories_Aggregate_Bool_Exp>;
  nav_xl_categories_id?: InputMaybe<Int_Comparison_Exp>;
  nav_xl_category?: InputMaybe<Nav_Xl_Categories_Bool_Exp>;
};

/** unique or primary key constraints on table "nav_bg_categories" */
export enum Nav_Bg_Categories_Constraint {
  /** unique or primary key constraint on columns "id" */
  NavBgCategoriesPrimary28 = 'nav_bg_categoriesPRIMARY28'
}

/** input type for incrementing numeric columns in table "nav_bg_categories" */
export type Nav_Bg_Categories_Inc_Input = {
  id?: InputMaybe<Scalars['Int']>;
  nav_xl_categories_id?: InputMaybe<Scalars['Int']>;
};

/** input type for inserting data into table "nav_bg_categories" */
export type Nav_Bg_Categories_Insert_Input = {
  id?: InputMaybe<Scalars['Int']>;
  name?: InputMaybe<Scalars['String']>;
  nav_sm_categories?: InputMaybe<Nav_Sm_Categories_Arr_Rel_Insert_Input>;
  nav_xl_categories_id?: InputMaybe<Scalars['Int']>;
  nav_xl_category?: InputMaybe<Nav_Xl_Categories_Obj_Rel_Insert_Input>;
};

/** aggregate max on columns */
export type Nav_Bg_Categories_Max_Fields = {
  __typename?: 'nav_bg_categories_max_fields';
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  nav_xl_categories_id?: Maybe<Scalars['Int']>;
};

/** order by max() on columns of table "nav_bg_categories" */
export type Nav_Bg_Categories_Max_Order_By = {
  id?: InputMaybe<Order_By>;
  name?: InputMaybe<Order_By>;
  nav_xl_categories_id?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type Nav_Bg_Categories_Min_Fields = {
  __typename?: 'nav_bg_categories_min_fields';
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  nav_xl_categories_id?: Maybe<Scalars['Int']>;
};

/** order by min() on columns of table "nav_bg_categories" */
export type Nav_Bg_Categories_Min_Order_By = {
  id?: InputMaybe<Order_By>;
  name?: InputMaybe<Order_By>;
  nav_xl_categories_id?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "nav_bg_categories" */
export type Nav_Bg_Categories_Mutation_Response = {
  __typename?: 'nav_bg_categories_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Nav_Bg_Categories>;
};

/** input type for inserting object relation for remote table "nav_bg_categories" */
export type Nav_Bg_Categories_Obj_Rel_Insert_Input = {
  data: Nav_Bg_Categories_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<Nav_Bg_Categories_On_Conflict>;
};

/** on_conflict condition type for table "nav_bg_categories" */
export type Nav_Bg_Categories_On_Conflict = {
  constraint: Nav_Bg_Categories_Constraint;
  update_columns?: Array<Nav_Bg_Categories_Update_Column>;
  where?: InputMaybe<Nav_Bg_Categories_Bool_Exp>;
};

/** Ordering options when selecting data from "nav_bg_categories". */
export type Nav_Bg_Categories_Order_By = {
  id?: InputMaybe<Order_By>;
  name?: InputMaybe<Order_By>;
  nav_sm_categories_aggregate?: InputMaybe<Nav_Sm_Categories_Aggregate_Order_By>;
  nav_xl_categories_id?: InputMaybe<Order_By>;
  nav_xl_category?: InputMaybe<Nav_Xl_Categories_Order_By>;
};

/** primary key columns input for table: nav_bg_categories */
export type Nav_Bg_Categories_Pk_Columns_Input = {
  id: Scalars['Int'];
};

/** select columns of table "nav_bg_categories" */
export enum Nav_Bg_Categories_Select_Column {
  /** column name */
  Id = 'id',
  /** column name */
  Name = 'name',
  /** column name */
  NavXlCategoriesId = 'nav_xl_categories_id'
}

/** input type for updating data in table "nav_bg_categories" */
export type Nav_Bg_Categories_Set_Input = {
  id?: InputMaybe<Scalars['Int']>;
  name?: InputMaybe<Scalars['String']>;
  nav_xl_categories_id?: InputMaybe<Scalars['Int']>;
};

/** aggregate stddev on columns */
export type Nav_Bg_Categories_Stddev_Fields = {
  __typename?: 'nav_bg_categories_stddev_fields';
  id?: Maybe<Scalars['Float']>;
  nav_xl_categories_id?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "nav_bg_categories" */
export type Nav_Bg_Categories_Stddev_Order_By = {
  id?: InputMaybe<Order_By>;
  nav_xl_categories_id?: InputMaybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Nav_Bg_Categories_Stddev_Pop_Fields = {
  __typename?: 'nav_bg_categories_stddev_pop_fields';
  id?: Maybe<Scalars['Float']>;
  nav_xl_categories_id?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "nav_bg_categories" */
export type Nav_Bg_Categories_Stddev_Pop_Order_By = {
  id?: InputMaybe<Order_By>;
  nav_xl_categories_id?: InputMaybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Nav_Bg_Categories_Stddev_Samp_Fields = {
  __typename?: 'nav_bg_categories_stddev_samp_fields';
  id?: Maybe<Scalars['Float']>;
  nav_xl_categories_id?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "nav_bg_categories" */
export type Nav_Bg_Categories_Stddev_Samp_Order_By = {
  id?: InputMaybe<Order_By>;
  nav_xl_categories_id?: InputMaybe<Order_By>;
};

/** Streaming cursor of the table "nav_bg_categories" */
export type Nav_Bg_Categories_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Nav_Bg_Categories_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Nav_Bg_Categories_Stream_Cursor_Value_Input = {
  id?: InputMaybe<Scalars['Int']>;
  name?: InputMaybe<Scalars['String']>;
  nav_xl_categories_id?: InputMaybe<Scalars['Int']>;
};

/** aggregate sum on columns */
export type Nav_Bg_Categories_Sum_Fields = {
  __typename?: 'nav_bg_categories_sum_fields';
  id?: Maybe<Scalars['Int']>;
  nav_xl_categories_id?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "nav_bg_categories" */
export type Nav_Bg_Categories_Sum_Order_By = {
  id?: InputMaybe<Order_By>;
  nav_xl_categories_id?: InputMaybe<Order_By>;
};

/** update columns of table "nav_bg_categories" */
export enum Nav_Bg_Categories_Update_Column {
  /** column name */
  Id = 'id',
  /** column name */
  Name = 'name',
  /** column name */
  NavXlCategoriesId = 'nav_xl_categories_id'
}

export type Nav_Bg_Categories_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: InputMaybe<Nav_Bg_Categories_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Nav_Bg_Categories_Set_Input>;
  /** filter the rows which have to be updated */
  where: Nav_Bg_Categories_Bool_Exp;
};

/** aggregate var_pop on columns */
export type Nav_Bg_Categories_Var_Pop_Fields = {
  __typename?: 'nav_bg_categories_var_pop_fields';
  id?: Maybe<Scalars['Float']>;
  nav_xl_categories_id?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "nav_bg_categories" */
export type Nav_Bg_Categories_Var_Pop_Order_By = {
  id?: InputMaybe<Order_By>;
  nav_xl_categories_id?: InputMaybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Nav_Bg_Categories_Var_Samp_Fields = {
  __typename?: 'nav_bg_categories_var_samp_fields';
  id?: Maybe<Scalars['Float']>;
  nav_xl_categories_id?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "nav_bg_categories" */
export type Nav_Bg_Categories_Var_Samp_Order_By = {
  id?: InputMaybe<Order_By>;
  nav_xl_categories_id?: InputMaybe<Order_By>;
};

/** aggregate variance on columns */
export type Nav_Bg_Categories_Variance_Fields = {
  __typename?: 'nav_bg_categories_variance_fields';
  id?: Maybe<Scalars['Float']>;
  nav_xl_categories_id?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "nav_bg_categories" */
export type Nav_Bg_Categories_Variance_Order_By = {
  id?: InputMaybe<Order_By>;
  nav_xl_categories_id?: InputMaybe<Order_By>;
};

/** columns and relationships of "nav_sm_categories" */
export type Nav_Sm_Categories = {
  __typename?: 'nav_sm_categories';
  id: Scalars['Int'];
  name?: Maybe<Scalars['String']>;
  nav_bg_categories_id?: Maybe<Scalars['Int']>;
  /** An object relationship */
  nav_bg_category?: Maybe<Nav_Bg_Categories>;
  /** An array relationship */
  role_nav_sm_categories: Array<Role_Nav_Sm_Categories>;
  /** An aggregate relationship */
  role_nav_sm_categories_aggregate: Role_Nav_Sm_Categories_Aggregate;
  side_nav_visible?: Maybe<Scalars['smallint']>;
  url?: Maybe<Scalars['String']>;
};


/** columns and relationships of "nav_sm_categories" */
export type Nav_Sm_CategoriesRole_Nav_Sm_CategoriesArgs = {
  distinct_on?: InputMaybe<Array<Role_Nav_Sm_Categories_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Role_Nav_Sm_Categories_Order_By>>;
  where?: InputMaybe<Role_Nav_Sm_Categories_Bool_Exp>;
};


/** columns and relationships of "nav_sm_categories" */
export type Nav_Sm_CategoriesRole_Nav_Sm_Categories_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Role_Nav_Sm_Categories_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Role_Nav_Sm_Categories_Order_By>>;
  where?: InputMaybe<Role_Nav_Sm_Categories_Bool_Exp>;
};

/** aggregated selection of "nav_sm_categories" */
export type Nav_Sm_Categories_Aggregate = {
  __typename?: 'nav_sm_categories_aggregate';
  aggregate?: Maybe<Nav_Sm_Categories_Aggregate_Fields>;
  nodes: Array<Nav_Sm_Categories>;
};

export type Nav_Sm_Categories_Aggregate_Bool_Exp = {
  count?: InputMaybe<Nav_Sm_Categories_Aggregate_Bool_Exp_Count>;
};

export type Nav_Sm_Categories_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<Nav_Sm_Categories_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<Nav_Sm_Categories_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "nav_sm_categories" */
export type Nav_Sm_Categories_Aggregate_Fields = {
  __typename?: 'nav_sm_categories_aggregate_fields';
  avg?: Maybe<Nav_Sm_Categories_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Nav_Sm_Categories_Max_Fields>;
  min?: Maybe<Nav_Sm_Categories_Min_Fields>;
  stddev?: Maybe<Nav_Sm_Categories_Stddev_Fields>;
  stddev_pop?: Maybe<Nav_Sm_Categories_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Nav_Sm_Categories_Stddev_Samp_Fields>;
  sum?: Maybe<Nav_Sm_Categories_Sum_Fields>;
  var_pop?: Maybe<Nav_Sm_Categories_Var_Pop_Fields>;
  var_samp?: Maybe<Nav_Sm_Categories_Var_Samp_Fields>;
  variance?: Maybe<Nav_Sm_Categories_Variance_Fields>;
};


/** aggregate fields of "nav_sm_categories" */
export type Nav_Sm_Categories_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Nav_Sm_Categories_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "nav_sm_categories" */
export type Nav_Sm_Categories_Aggregate_Order_By = {
  avg?: InputMaybe<Nav_Sm_Categories_Avg_Order_By>;
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<Nav_Sm_Categories_Max_Order_By>;
  min?: InputMaybe<Nav_Sm_Categories_Min_Order_By>;
  stddev?: InputMaybe<Nav_Sm_Categories_Stddev_Order_By>;
  stddev_pop?: InputMaybe<Nav_Sm_Categories_Stddev_Pop_Order_By>;
  stddev_samp?: InputMaybe<Nav_Sm_Categories_Stddev_Samp_Order_By>;
  sum?: InputMaybe<Nav_Sm_Categories_Sum_Order_By>;
  var_pop?: InputMaybe<Nav_Sm_Categories_Var_Pop_Order_By>;
  var_samp?: InputMaybe<Nav_Sm_Categories_Var_Samp_Order_By>;
  variance?: InputMaybe<Nav_Sm_Categories_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "nav_sm_categories" */
export type Nav_Sm_Categories_Arr_Rel_Insert_Input = {
  data: Array<Nav_Sm_Categories_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<Nav_Sm_Categories_On_Conflict>;
};

/** aggregate avg on columns */
export type Nav_Sm_Categories_Avg_Fields = {
  __typename?: 'nav_sm_categories_avg_fields';
  id?: Maybe<Scalars['Float']>;
  nav_bg_categories_id?: Maybe<Scalars['Float']>;
  side_nav_visible?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "nav_sm_categories" */
export type Nav_Sm_Categories_Avg_Order_By = {
  id?: InputMaybe<Order_By>;
  nav_bg_categories_id?: InputMaybe<Order_By>;
  side_nav_visible?: InputMaybe<Order_By>;
};

/** Boolean expression to filter rows from the table "nav_sm_categories". All fields are combined with a logical 'AND'. */
export type Nav_Sm_Categories_Bool_Exp = {
  _and?: InputMaybe<Array<Nav_Sm_Categories_Bool_Exp>>;
  _not?: InputMaybe<Nav_Sm_Categories_Bool_Exp>;
  _or?: InputMaybe<Array<Nav_Sm_Categories_Bool_Exp>>;
  id?: InputMaybe<Int_Comparison_Exp>;
  name?: InputMaybe<String_Comparison_Exp>;
  nav_bg_categories_id?: InputMaybe<Int_Comparison_Exp>;
  nav_bg_category?: InputMaybe<Nav_Bg_Categories_Bool_Exp>;
  role_nav_sm_categories?: InputMaybe<Role_Nav_Sm_Categories_Bool_Exp>;
  role_nav_sm_categories_aggregate?: InputMaybe<Role_Nav_Sm_Categories_Aggregate_Bool_Exp>;
  side_nav_visible?: InputMaybe<Smallint_Comparison_Exp>;
  url?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "nav_sm_categories" */
export enum Nav_Sm_Categories_Constraint {
  /** unique or primary key constraint on columns "id" */
  NavSmCategoriesPrimary29 = 'nav_sm_categoriesPRIMARY29'
}

/** input type for incrementing numeric columns in table "nav_sm_categories" */
export type Nav_Sm_Categories_Inc_Input = {
  id?: InputMaybe<Scalars['Int']>;
  nav_bg_categories_id?: InputMaybe<Scalars['Int']>;
  side_nav_visible?: InputMaybe<Scalars['smallint']>;
};

/** input type for inserting data into table "nav_sm_categories" */
export type Nav_Sm_Categories_Insert_Input = {
  id?: InputMaybe<Scalars['Int']>;
  name?: InputMaybe<Scalars['String']>;
  nav_bg_categories_id?: InputMaybe<Scalars['Int']>;
  nav_bg_category?: InputMaybe<Nav_Bg_Categories_Obj_Rel_Insert_Input>;
  role_nav_sm_categories?: InputMaybe<Role_Nav_Sm_Categories_Arr_Rel_Insert_Input>;
  side_nav_visible?: InputMaybe<Scalars['smallint']>;
  url?: InputMaybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Nav_Sm_Categories_Max_Fields = {
  __typename?: 'nav_sm_categories_max_fields';
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  nav_bg_categories_id?: Maybe<Scalars['Int']>;
  side_nav_visible?: Maybe<Scalars['smallint']>;
  url?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "nav_sm_categories" */
export type Nav_Sm_Categories_Max_Order_By = {
  id?: InputMaybe<Order_By>;
  name?: InputMaybe<Order_By>;
  nav_bg_categories_id?: InputMaybe<Order_By>;
  side_nav_visible?: InputMaybe<Order_By>;
  url?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type Nav_Sm_Categories_Min_Fields = {
  __typename?: 'nav_sm_categories_min_fields';
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  nav_bg_categories_id?: Maybe<Scalars['Int']>;
  side_nav_visible?: Maybe<Scalars['smallint']>;
  url?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "nav_sm_categories" */
export type Nav_Sm_Categories_Min_Order_By = {
  id?: InputMaybe<Order_By>;
  name?: InputMaybe<Order_By>;
  nav_bg_categories_id?: InputMaybe<Order_By>;
  side_nav_visible?: InputMaybe<Order_By>;
  url?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "nav_sm_categories" */
export type Nav_Sm_Categories_Mutation_Response = {
  __typename?: 'nav_sm_categories_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Nav_Sm_Categories>;
};

/** input type for inserting object relation for remote table "nav_sm_categories" */
export type Nav_Sm_Categories_Obj_Rel_Insert_Input = {
  data: Nav_Sm_Categories_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<Nav_Sm_Categories_On_Conflict>;
};

/** on_conflict condition type for table "nav_sm_categories" */
export type Nav_Sm_Categories_On_Conflict = {
  constraint: Nav_Sm_Categories_Constraint;
  update_columns?: Array<Nav_Sm_Categories_Update_Column>;
  where?: InputMaybe<Nav_Sm_Categories_Bool_Exp>;
};

/** Ordering options when selecting data from "nav_sm_categories". */
export type Nav_Sm_Categories_Order_By = {
  id?: InputMaybe<Order_By>;
  name?: InputMaybe<Order_By>;
  nav_bg_categories_id?: InputMaybe<Order_By>;
  nav_bg_category?: InputMaybe<Nav_Bg_Categories_Order_By>;
  role_nav_sm_categories_aggregate?: InputMaybe<Role_Nav_Sm_Categories_Aggregate_Order_By>;
  side_nav_visible?: InputMaybe<Order_By>;
  url?: InputMaybe<Order_By>;
};

/** primary key columns input for table: nav_sm_categories */
export type Nav_Sm_Categories_Pk_Columns_Input = {
  id: Scalars['Int'];
};

/** select columns of table "nav_sm_categories" */
export enum Nav_Sm_Categories_Select_Column {
  /** column name */
  Id = 'id',
  /** column name */
  Name = 'name',
  /** column name */
  NavBgCategoriesId = 'nav_bg_categories_id',
  /** column name */
  SideNavVisible = 'side_nav_visible',
  /** column name */
  Url = 'url'
}

/** input type for updating data in table "nav_sm_categories" */
export type Nav_Sm_Categories_Set_Input = {
  id?: InputMaybe<Scalars['Int']>;
  name?: InputMaybe<Scalars['String']>;
  nav_bg_categories_id?: InputMaybe<Scalars['Int']>;
  side_nav_visible?: InputMaybe<Scalars['smallint']>;
  url?: InputMaybe<Scalars['String']>;
};

/** aggregate stddev on columns */
export type Nav_Sm_Categories_Stddev_Fields = {
  __typename?: 'nav_sm_categories_stddev_fields';
  id?: Maybe<Scalars['Float']>;
  nav_bg_categories_id?: Maybe<Scalars['Float']>;
  side_nav_visible?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "nav_sm_categories" */
export type Nav_Sm_Categories_Stddev_Order_By = {
  id?: InputMaybe<Order_By>;
  nav_bg_categories_id?: InputMaybe<Order_By>;
  side_nav_visible?: InputMaybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Nav_Sm_Categories_Stddev_Pop_Fields = {
  __typename?: 'nav_sm_categories_stddev_pop_fields';
  id?: Maybe<Scalars['Float']>;
  nav_bg_categories_id?: Maybe<Scalars['Float']>;
  side_nav_visible?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "nav_sm_categories" */
export type Nav_Sm_Categories_Stddev_Pop_Order_By = {
  id?: InputMaybe<Order_By>;
  nav_bg_categories_id?: InputMaybe<Order_By>;
  side_nav_visible?: InputMaybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Nav_Sm_Categories_Stddev_Samp_Fields = {
  __typename?: 'nav_sm_categories_stddev_samp_fields';
  id?: Maybe<Scalars['Float']>;
  nav_bg_categories_id?: Maybe<Scalars['Float']>;
  side_nav_visible?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "nav_sm_categories" */
export type Nav_Sm_Categories_Stddev_Samp_Order_By = {
  id?: InputMaybe<Order_By>;
  nav_bg_categories_id?: InputMaybe<Order_By>;
  side_nav_visible?: InputMaybe<Order_By>;
};

/** Streaming cursor of the table "nav_sm_categories" */
export type Nav_Sm_Categories_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Nav_Sm_Categories_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Nav_Sm_Categories_Stream_Cursor_Value_Input = {
  id?: InputMaybe<Scalars['Int']>;
  name?: InputMaybe<Scalars['String']>;
  nav_bg_categories_id?: InputMaybe<Scalars['Int']>;
  side_nav_visible?: InputMaybe<Scalars['smallint']>;
  url?: InputMaybe<Scalars['String']>;
};

/** aggregate sum on columns */
export type Nav_Sm_Categories_Sum_Fields = {
  __typename?: 'nav_sm_categories_sum_fields';
  id?: Maybe<Scalars['Int']>;
  nav_bg_categories_id?: Maybe<Scalars['Int']>;
  side_nav_visible?: Maybe<Scalars['smallint']>;
};

/** order by sum() on columns of table "nav_sm_categories" */
export type Nav_Sm_Categories_Sum_Order_By = {
  id?: InputMaybe<Order_By>;
  nav_bg_categories_id?: InputMaybe<Order_By>;
  side_nav_visible?: InputMaybe<Order_By>;
};

/** update columns of table "nav_sm_categories" */
export enum Nav_Sm_Categories_Update_Column {
  /** column name */
  Id = 'id',
  /** column name */
  Name = 'name',
  /** column name */
  NavBgCategoriesId = 'nav_bg_categories_id',
  /** column name */
  SideNavVisible = 'side_nav_visible',
  /** column name */
  Url = 'url'
}

export type Nav_Sm_Categories_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: InputMaybe<Nav_Sm_Categories_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Nav_Sm_Categories_Set_Input>;
  /** filter the rows which have to be updated */
  where: Nav_Sm_Categories_Bool_Exp;
};

/** aggregate var_pop on columns */
export type Nav_Sm_Categories_Var_Pop_Fields = {
  __typename?: 'nav_sm_categories_var_pop_fields';
  id?: Maybe<Scalars['Float']>;
  nav_bg_categories_id?: Maybe<Scalars['Float']>;
  side_nav_visible?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "nav_sm_categories" */
export type Nav_Sm_Categories_Var_Pop_Order_By = {
  id?: InputMaybe<Order_By>;
  nav_bg_categories_id?: InputMaybe<Order_By>;
  side_nav_visible?: InputMaybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Nav_Sm_Categories_Var_Samp_Fields = {
  __typename?: 'nav_sm_categories_var_samp_fields';
  id?: Maybe<Scalars['Float']>;
  nav_bg_categories_id?: Maybe<Scalars['Float']>;
  side_nav_visible?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "nav_sm_categories" */
export type Nav_Sm_Categories_Var_Samp_Order_By = {
  id?: InputMaybe<Order_By>;
  nav_bg_categories_id?: InputMaybe<Order_By>;
  side_nav_visible?: InputMaybe<Order_By>;
};

/** aggregate variance on columns */
export type Nav_Sm_Categories_Variance_Fields = {
  __typename?: 'nav_sm_categories_variance_fields';
  id?: Maybe<Scalars['Float']>;
  nav_bg_categories_id?: Maybe<Scalars['Float']>;
  side_nav_visible?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "nav_sm_categories" */
export type Nav_Sm_Categories_Variance_Order_By = {
  id?: InputMaybe<Order_By>;
  nav_bg_categories_id?: InputMaybe<Order_By>;
  side_nav_visible?: InputMaybe<Order_By>;
};

/** columns and relationships of "nav_xl_categories" */
export type Nav_Xl_Categories = {
  __typename?: 'nav_xl_categories';
  id: Scalars['Int'];
  name?: Maybe<Scalars['String']>;
  /** An array relationship */
  nav_bg_categories: Array<Nav_Bg_Categories>;
  /** An aggregate relationship */
  nav_bg_categories_aggregate: Nav_Bg_Categories_Aggregate;
  url?: Maybe<Scalars['String']>;
};


/** columns and relationships of "nav_xl_categories" */
export type Nav_Xl_CategoriesNav_Bg_CategoriesArgs = {
  distinct_on?: InputMaybe<Array<Nav_Bg_Categories_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Nav_Bg_Categories_Order_By>>;
  where?: InputMaybe<Nav_Bg_Categories_Bool_Exp>;
};


/** columns and relationships of "nav_xl_categories" */
export type Nav_Xl_CategoriesNav_Bg_Categories_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Nav_Bg_Categories_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Nav_Bg_Categories_Order_By>>;
  where?: InputMaybe<Nav_Bg_Categories_Bool_Exp>;
};

/** aggregated selection of "nav_xl_categories" */
export type Nav_Xl_Categories_Aggregate = {
  __typename?: 'nav_xl_categories_aggregate';
  aggregate?: Maybe<Nav_Xl_Categories_Aggregate_Fields>;
  nodes: Array<Nav_Xl_Categories>;
};

/** aggregate fields of "nav_xl_categories" */
export type Nav_Xl_Categories_Aggregate_Fields = {
  __typename?: 'nav_xl_categories_aggregate_fields';
  avg?: Maybe<Nav_Xl_Categories_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Nav_Xl_Categories_Max_Fields>;
  min?: Maybe<Nav_Xl_Categories_Min_Fields>;
  stddev?: Maybe<Nav_Xl_Categories_Stddev_Fields>;
  stddev_pop?: Maybe<Nav_Xl_Categories_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Nav_Xl_Categories_Stddev_Samp_Fields>;
  sum?: Maybe<Nav_Xl_Categories_Sum_Fields>;
  var_pop?: Maybe<Nav_Xl_Categories_Var_Pop_Fields>;
  var_samp?: Maybe<Nav_Xl_Categories_Var_Samp_Fields>;
  variance?: Maybe<Nav_Xl_Categories_Variance_Fields>;
};


/** aggregate fields of "nav_xl_categories" */
export type Nav_Xl_Categories_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Nav_Xl_Categories_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** aggregate avg on columns */
export type Nav_Xl_Categories_Avg_Fields = {
  __typename?: 'nav_xl_categories_avg_fields';
  id?: Maybe<Scalars['Float']>;
};

/** Boolean expression to filter rows from the table "nav_xl_categories". All fields are combined with a logical 'AND'. */
export type Nav_Xl_Categories_Bool_Exp = {
  _and?: InputMaybe<Array<Nav_Xl_Categories_Bool_Exp>>;
  _not?: InputMaybe<Nav_Xl_Categories_Bool_Exp>;
  _or?: InputMaybe<Array<Nav_Xl_Categories_Bool_Exp>>;
  id?: InputMaybe<Int_Comparison_Exp>;
  name?: InputMaybe<String_Comparison_Exp>;
  nav_bg_categories?: InputMaybe<Nav_Bg_Categories_Bool_Exp>;
  nav_bg_categories_aggregate?: InputMaybe<Nav_Bg_Categories_Aggregate_Bool_Exp>;
  url?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "nav_xl_categories" */
export enum Nav_Xl_Categories_Constraint {
  /** unique or primary key constraint on columns "id" */
  NavXlCategoriesPrimary30 = 'nav_xl_categoriesPRIMARY30'
}

/** input type for incrementing numeric columns in table "nav_xl_categories" */
export type Nav_Xl_Categories_Inc_Input = {
  id?: InputMaybe<Scalars['Int']>;
};

/** input type for inserting data into table "nav_xl_categories" */
export type Nav_Xl_Categories_Insert_Input = {
  id?: InputMaybe<Scalars['Int']>;
  name?: InputMaybe<Scalars['String']>;
  nav_bg_categories?: InputMaybe<Nav_Bg_Categories_Arr_Rel_Insert_Input>;
  url?: InputMaybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Nav_Xl_Categories_Max_Fields = {
  __typename?: 'nav_xl_categories_max_fields';
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
};

/** aggregate min on columns */
export type Nav_Xl_Categories_Min_Fields = {
  __typename?: 'nav_xl_categories_min_fields';
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
};

/** response of any mutation on the table "nav_xl_categories" */
export type Nav_Xl_Categories_Mutation_Response = {
  __typename?: 'nav_xl_categories_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Nav_Xl_Categories>;
};

/** input type for inserting object relation for remote table "nav_xl_categories" */
export type Nav_Xl_Categories_Obj_Rel_Insert_Input = {
  data: Nav_Xl_Categories_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<Nav_Xl_Categories_On_Conflict>;
};

/** on_conflict condition type for table "nav_xl_categories" */
export type Nav_Xl_Categories_On_Conflict = {
  constraint: Nav_Xl_Categories_Constraint;
  update_columns?: Array<Nav_Xl_Categories_Update_Column>;
  where?: InputMaybe<Nav_Xl_Categories_Bool_Exp>;
};

/** Ordering options when selecting data from "nav_xl_categories". */
export type Nav_Xl_Categories_Order_By = {
  id?: InputMaybe<Order_By>;
  name?: InputMaybe<Order_By>;
  nav_bg_categories_aggregate?: InputMaybe<Nav_Bg_Categories_Aggregate_Order_By>;
  url?: InputMaybe<Order_By>;
};

/** primary key columns input for table: nav_xl_categories */
export type Nav_Xl_Categories_Pk_Columns_Input = {
  id: Scalars['Int'];
};

/** select columns of table "nav_xl_categories" */
export enum Nav_Xl_Categories_Select_Column {
  /** column name */
  Id = 'id',
  /** column name */
  Name = 'name',
  /** column name */
  Url = 'url'
}

/** input type for updating data in table "nav_xl_categories" */
export type Nav_Xl_Categories_Set_Input = {
  id?: InputMaybe<Scalars['Int']>;
  name?: InputMaybe<Scalars['String']>;
  url?: InputMaybe<Scalars['String']>;
};

/** aggregate stddev on columns */
export type Nav_Xl_Categories_Stddev_Fields = {
  __typename?: 'nav_xl_categories_stddev_fields';
  id?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_pop on columns */
export type Nav_Xl_Categories_Stddev_Pop_Fields = {
  __typename?: 'nav_xl_categories_stddev_pop_fields';
  id?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_samp on columns */
export type Nav_Xl_Categories_Stddev_Samp_Fields = {
  __typename?: 'nav_xl_categories_stddev_samp_fields';
  id?: Maybe<Scalars['Float']>;
};

/** Streaming cursor of the table "nav_xl_categories" */
export type Nav_Xl_Categories_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Nav_Xl_Categories_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Nav_Xl_Categories_Stream_Cursor_Value_Input = {
  id?: InputMaybe<Scalars['Int']>;
  name?: InputMaybe<Scalars['String']>;
  url?: InputMaybe<Scalars['String']>;
};

/** aggregate sum on columns */
export type Nav_Xl_Categories_Sum_Fields = {
  __typename?: 'nav_xl_categories_sum_fields';
  id?: Maybe<Scalars['Int']>;
};

/** update columns of table "nav_xl_categories" */
export enum Nav_Xl_Categories_Update_Column {
  /** column name */
  Id = 'id',
  /** column name */
  Name = 'name',
  /** column name */
  Url = 'url'
}

export type Nav_Xl_Categories_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: InputMaybe<Nav_Xl_Categories_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Nav_Xl_Categories_Set_Input>;
  /** filter the rows which have to be updated */
  where: Nav_Xl_Categories_Bool_Exp;
};

/** aggregate var_pop on columns */
export type Nav_Xl_Categories_Var_Pop_Fields = {
  __typename?: 'nav_xl_categories_var_pop_fields';
  id?: Maybe<Scalars['Float']>;
};

/** aggregate var_samp on columns */
export type Nav_Xl_Categories_Var_Samp_Fields = {
  __typename?: 'nav_xl_categories_var_samp_fields';
  id?: Maybe<Scalars['Float']>;
};

/** aggregate variance on columns */
export type Nav_Xl_Categories_Variance_Fields = {
  __typename?: 'nav_xl_categories_variance_fields';
  id?: Maybe<Scalars['Float']>;
};

/** Boolean expression to compare columns of type "numeric". All fields are combined with logical 'AND'. */
export type Numeric_Comparison_Exp = {
  _eq?: InputMaybe<Scalars['numeric']>;
  _gt?: InputMaybe<Scalars['numeric']>;
  _gte?: InputMaybe<Scalars['numeric']>;
  _in?: InputMaybe<Array<Scalars['numeric']>>;
  _is_null?: InputMaybe<Scalars['Boolean']>;
  _lt?: InputMaybe<Scalars['numeric']>;
  _lte?: InputMaybe<Scalars['numeric']>;
  _neq?: InputMaybe<Scalars['numeric']>;
  _nin?: InputMaybe<Array<Scalars['numeric']>>;
};

/** column ordering options */
export enum Order_By {
  /** in ascending order, nulls last */
  Asc = 'asc',
  /** in ascending order, nulls first */
  AscNullsFirst = 'asc_nulls_first',
  /** in ascending order, nulls last */
  AscNullsLast = 'asc_nulls_last',
  /** in descending order, nulls first */
  Desc = 'desc',
  /** in descending order, nulls first */
  DescNullsFirst = 'desc_nulls_first',
  /** in descending order, nulls last */
  DescNullsLast = 'desc_nulls_last'
}

/** columns and relationships of "organstores" */
export type Organstores = {
  __typename?: 'organstores';
  enableFlag?: Maybe<Scalars['Int']>;
  fkc?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  modifyDate?: Maybe<Scalars['timestamp']>;
  parentId?: Maybe<Scalars['String']>;
  storeCode?: Maybe<Scalars['String']>;
  storeId?: Maybe<Scalars['String']>;
  storeMode?: Maybe<Scalars['String']>;
  storeName?: Maybe<Scalars['String']>;
};

/** aggregated selection of "organstores" */
export type Organstores_Aggregate = {
  __typename?: 'organstores_aggregate';
  aggregate?: Maybe<Organstores_Aggregate_Fields>;
  nodes: Array<Organstores>;
};

/** aggregate fields of "organstores" */
export type Organstores_Aggregate_Fields = {
  __typename?: 'organstores_aggregate_fields';
  avg?: Maybe<Organstores_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Organstores_Max_Fields>;
  min?: Maybe<Organstores_Min_Fields>;
  stddev?: Maybe<Organstores_Stddev_Fields>;
  stddev_pop?: Maybe<Organstores_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Organstores_Stddev_Samp_Fields>;
  sum?: Maybe<Organstores_Sum_Fields>;
  var_pop?: Maybe<Organstores_Var_Pop_Fields>;
  var_samp?: Maybe<Organstores_Var_Samp_Fields>;
  variance?: Maybe<Organstores_Variance_Fields>;
};


/** aggregate fields of "organstores" */
export type Organstores_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Organstores_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** aggregate avg on columns */
export type Organstores_Avg_Fields = {
  __typename?: 'organstores_avg_fields';
  enableFlag?: Maybe<Scalars['Float']>;
};

/** Boolean expression to filter rows from the table "organstores". All fields are combined with a logical 'AND'. */
export type Organstores_Bool_Exp = {
  _and?: InputMaybe<Array<Organstores_Bool_Exp>>;
  _not?: InputMaybe<Organstores_Bool_Exp>;
  _or?: InputMaybe<Array<Organstores_Bool_Exp>>;
  enableFlag?: InputMaybe<Int_Comparison_Exp>;
  fkc?: InputMaybe<String_Comparison_Exp>;
  id?: InputMaybe<String_Comparison_Exp>;
  modifyDate?: InputMaybe<Timestamp_Comparison_Exp>;
  parentId?: InputMaybe<String_Comparison_Exp>;
  storeCode?: InputMaybe<String_Comparison_Exp>;
  storeId?: InputMaybe<String_Comparison_Exp>;
  storeMode?: InputMaybe<String_Comparison_Exp>;
  storeName?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "organstores" */
export enum Organstores_Constraint {
  /** unique or primary key constraint on columns "id" */
  OrganstoresPrimary32 = 'organstoresPRIMARY32'
}

/** input type for incrementing numeric columns in table "organstores" */
export type Organstores_Inc_Input = {
  enableFlag?: InputMaybe<Scalars['Int']>;
};

/** input type for inserting data into table "organstores" */
export type Organstores_Insert_Input = {
  enableFlag?: InputMaybe<Scalars['Int']>;
  fkc?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['String']>;
  modifyDate?: InputMaybe<Scalars['timestamp']>;
  parentId?: InputMaybe<Scalars['String']>;
  storeCode?: InputMaybe<Scalars['String']>;
  storeId?: InputMaybe<Scalars['String']>;
  storeMode?: InputMaybe<Scalars['String']>;
  storeName?: InputMaybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Organstores_Max_Fields = {
  __typename?: 'organstores_max_fields';
  enableFlag?: Maybe<Scalars['Int']>;
  fkc?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  modifyDate?: Maybe<Scalars['timestamp']>;
  parentId?: Maybe<Scalars['String']>;
  storeCode?: Maybe<Scalars['String']>;
  storeId?: Maybe<Scalars['String']>;
  storeMode?: Maybe<Scalars['String']>;
  storeName?: Maybe<Scalars['String']>;
};

/** aggregate min on columns */
export type Organstores_Min_Fields = {
  __typename?: 'organstores_min_fields';
  enableFlag?: Maybe<Scalars['Int']>;
  fkc?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  modifyDate?: Maybe<Scalars['timestamp']>;
  parentId?: Maybe<Scalars['String']>;
  storeCode?: Maybe<Scalars['String']>;
  storeId?: Maybe<Scalars['String']>;
  storeMode?: Maybe<Scalars['String']>;
  storeName?: Maybe<Scalars['String']>;
};

/** response of any mutation on the table "organstores" */
export type Organstores_Mutation_Response = {
  __typename?: 'organstores_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Organstores>;
};

/** on_conflict condition type for table "organstores" */
export type Organstores_On_Conflict = {
  constraint: Organstores_Constraint;
  update_columns?: Array<Organstores_Update_Column>;
  where?: InputMaybe<Organstores_Bool_Exp>;
};

/** Ordering options when selecting data from "organstores". */
export type Organstores_Order_By = {
  enableFlag?: InputMaybe<Order_By>;
  fkc?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  modifyDate?: InputMaybe<Order_By>;
  parentId?: InputMaybe<Order_By>;
  storeCode?: InputMaybe<Order_By>;
  storeId?: InputMaybe<Order_By>;
  storeMode?: InputMaybe<Order_By>;
  storeName?: InputMaybe<Order_By>;
};

/** primary key columns input for table: organstores */
export type Organstores_Pk_Columns_Input = {
  id: Scalars['String'];
};

/** select columns of table "organstores" */
export enum Organstores_Select_Column {
  /** column name */
  EnableFlag = 'enableFlag',
  /** column name */
  Fkc = 'fkc',
  /** column name */
  Id = 'id',
  /** column name */
  ModifyDate = 'modifyDate',
  /** column name */
  ParentId = 'parentId',
  /** column name */
  StoreCode = 'storeCode',
  /** column name */
  StoreId = 'storeId',
  /** column name */
  StoreMode = 'storeMode',
  /** column name */
  StoreName = 'storeName'
}

/** input type for updating data in table "organstores" */
export type Organstores_Set_Input = {
  enableFlag?: InputMaybe<Scalars['Int']>;
  fkc?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['String']>;
  modifyDate?: InputMaybe<Scalars['timestamp']>;
  parentId?: InputMaybe<Scalars['String']>;
  storeCode?: InputMaybe<Scalars['String']>;
  storeId?: InputMaybe<Scalars['String']>;
  storeMode?: InputMaybe<Scalars['String']>;
  storeName?: InputMaybe<Scalars['String']>;
};

/** aggregate stddev on columns */
export type Organstores_Stddev_Fields = {
  __typename?: 'organstores_stddev_fields';
  enableFlag?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_pop on columns */
export type Organstores_Stddev_Pop_Fields = {
  __typename?: 'organstores_stddev_pop_fields';
  enableFlag?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_samp on columns */
export type Organstores_Stddev_Samp_Fields = {
  __typename?: 'organstores_stddev_samp_fields';
  enableFlag?: Maybe<Scalars['Float']>;
};

/** Streaming cursor of the table "organstores" */
export type Organstores_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Organstores_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Organstores_Stream_Cursor_Value_Input = {
  enableFlag?: InputMaybe<Scalars['Int']>;
  fkc?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['String']>;
  modifyDate?: InputMaybe<Scalars['timestamp']>;
  parentId?: InputMaybe<Scalars['String']>;
  storeCode?: InputMaybe<Scalars['String']>;
  storeId?: InputMaybe<Scalars['String']>;
  storeMode?: InputMaybe<Scalars['String']>;
  storeName?: InputMaybe<Scalars['String']>;
};

/** aggregate sum on columns */
export type Organstores_Sum_Fields = {
  __typename?: 'organstores_sum_fields';
  enableFlag?: Maybe<Scalars['Int']>;
};

/** update columns of table "organstores" */
export enum Organstores_Update_Column {
  /** column name */
  EnableFlag = 'enableFlag',
  /** column name */
  Fkc = 'fkc',
  /** column name */
  Id = 'id',
  /** column name */
  ModifyDate = 'modifyDate',
  /** column name */
  ParentId = 'parentId',
  /** column name */
  StoreCode = 'storeCode',
  /** column name */
  StoreId = 'storeId',
  /** column name */
  StoreMode = 'storeMode',
  /** column name */
  StoreName = 'storeName'
}

export type Organstores_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: InputMaybe<Organstores_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Organstores_Set_Input>;
  /** filter the rows which have to be updated */
  where: Organstores_Bool_Exp;
};

/** aggregate var_pop on columns */
export type Organstores_Var_Pop_Fields = {
  __typename?: 'organstores_var_pop_fields';
  enableFlag?: Maybe<Scalars['Float']>;
};

/** aggregate var_samp on columns */
export type Organstores_Var_Samp_Fields = {
  __typename?: 'organstores_var_samp_fields';
  enableFlag?: Maybe<Scalars['Float']>;
};

/** aggregate variance on columns */
export type Organstores_Variance_Fields = {
  __typename?: 'organstores_variance_fields';
  enableFlag?: Maybe<Scalars['Float']>;
};

export type Query_Root = {
  __typename?: 'query_root';
  /** fetch data from the table: "attendance" */
  attendance: Array<Attendance>;
  /** fetch aggregated fields from the table: "attendance" */
  attendance_aggregate: Attendance_Aggregate;
  /** fetch data from the table: "attendance" using primary key columns */
  attendance_by_pk?: Maybe<Attendance>;
  /** An array relationship */
  attendance_group_leaders: Array<Attendance_Group_Leaders>;
  /** An aggregate relationship */
  attendance_group_leaders_aggregate: Attendance_Group_Leaders_Aggregate;
  /** fetch data from the table: "attendance_group_leaders" using primary key columns */
  attendance_group_leaders_by_pk?: Maybe<Attendance_Group_Leaders>;
  /** An array relationship */
  attendance_group_shifts: Array<Attendance_Group_Shifts>;
  /** An aggregate relationship */
  attendance_group_shifts_aggregate: Attendance_Group_Shifts_Aggregate;
  /** fetch data from the table: "attendance_group_shifts" using primary key columns */
  attendance_group_shifts_by_pk?: Maybe<Attendance_Group_Shifts>;
  /** An array relationship */
  attendance_group_subleaders: Array<Attendance_Group_Subleaders>;
  /** An aggregate relationship */
  attendance_group_subleaders_aggregate: Attendance_Group_Subleaders_Aggregate;
  /** fetch data from the table: "attendance_group_subleaders" using primary key columns */
  attendance_group_subleaders_by_pk?: Maybe<Attendance_Group_Subleaders>;
  /** An array relationship */
  attendance_groups: Array<Attendance_Groups>;
  /** An aggregate relationship */
  attendance_groups_aggregate: Attendance_Groups_Aggregate;
  /** fetch data from the table: "attendance_groups" using primary key columns */
  attendance_groups_by_pk?: Maybe<Attendance_Groups>;
  /** An array relationship */
  attendance_locations: Array<Attendance_Locations>;
  /** An aggregate relationship */
  attendance_locations_aggregate: Attendance_Locations_Aggregate;
  /** fetch data from the table: "attendance_locations" using primary key columns */
  attendance_locations_by_pk?: Maybe<Attendance_Locations>;
  /** An array relationship */
  bills: Array<Bills>;
  /** An aggregate relationship */
  bills_aggregate: Bills_Aggregate;
  /** fetch data from the table: "bills" using primary key columns */
  bills_by_pk?: Maybe<Bills>;
  /** An array relationship */
  bonusdeductions: Array<Bonusdeductions>;
  /** An aggregate relationship */
  bonusdeductions_aggregate: Bonusdeductions_Aggregate;
  /** fetch data from the table: "bonusdeductions" using primary key columns */
  bonusdeductions_by_pk?: Maybe<Bonusdeductions>;
  /** fetch data from the table: "bonusdeductiontypes" */
  bonusdeductiontypes: Array<Bonusdeductiontypes>;
  /** fetch aggregated fields from the table: "bonusdeductiontypes" */
  bonusdeductiontypes_aggregate: Bonusdeductiontypes_Aggregate;
  /** fetch data from the table: "bonusdeductiontypes" using primary key columns */
  bonusdeductiontypes_by_pk?: Maybe<Bonusdeductiontypes>;
  /** An array relationship */
  brands: Array<Brands>;
  /** An aggregate relationship */
  brands_aggregate: Brands_Aggregate;
  /** fetch data from the table: "brands" using primary key columns */
  brands_by_pk?: Maybe<Brands>;
  /** An array relationship */
  brands_employees: Array<Brands_Employees>;
  /** An aggregate relationship */
  brands_employees_aggregate: Brands_Employees_Aggregate;
  /** fetch data from the table: "brands_employees" using primary key columns */
  brands_employees_by_pk?: Maybe<Brands_Employees>;
  /** An array relationship */
  departments: Array<Departments>;
  /** An aggregate relationship */
  departments_aggregate: Departments_Aggregate;
  /** fetch data from the table: "departments" using primary key columns */
  departments_by_pk?: Maybe<Departments>;
  /** An array relationship */
  departments_employees: Array<Departments_Employees>;
  /** An aggregate relationship */
  departments_employees_aggregate: Departments_Employees_Aggregate;
  /** fetch data from the table: "departments_employees" using primary key columns */
  departments_employees_by_pk?: Maybe<Departments_Employees>;
  /** fetch data from the table: "departments_stores" */
  departments_stores: Array<Departments_Stores>;
  /** fetch aggregated fields from the table: "departments_stores" */
  departments_stores_aggregate: Departments_Stores_Aggregate;
  /** fetch data from the table: "departments_stores" using primary key columns */
  departments_stores_by_pk?: Maybe<Departments_Stores>;
  /** An array relationship */
  dsstorebills: Array<Dsstorebills>;
  /** An aggregate relationship */
  dsstorebills_aggregate: Dsstorebills_Aggregate;
  /** fetch data from the table: "dsstorebills" using primary key columns */
  dsstorebills_by_pk?: Maybe<Dsstorebills>;
  /** An array relationship */
  employee_attachments: Array<Employee_Attachments>;
  /** An aggregate relationship */
  employee_attachments_aggregate: Employee_Attachments_Aggregate;
  /** fetch data from the table: "employee_attachments" using primary key columns */
  employee_attachments_by_pk?: Maybe<Employee_Attachments>;
  /** fetch data from the table: "employee_insurance" */
  employee_insurance: Array<Employee_Insurance>;
  /** fetch aggregated fields from the table: "employee_insurance" */
  employee_insurance_aggregate: Employee_Insurance_Aggregate;
  /** fetch data from the table: "employee_insurance" using primary key columns */
  employee_insurance_by_pk?: Maybe<Employee_Insurance>;
  /** An array relationship */
  employee_leaves: Array<Employee_Leaves>;
  /** An aggregate relationship */
  employee_leaves_aggregate: Employee_Leaves_Aggregate;
  /** fetch data from the table: "employee_leaves" using primary key columns */
  employee_leaves_by_pk?: Maybe<Employee_Leaves>;
  /** fetch data from the table: "employee_salary_department" */
  employee_salary_department: Array<Employee_Salary_Department>;
  /** fetch aggregated fields from the table: "employee_salary_department" */
  employee_salary_department_aggregate: Employee_Salary_Department_Aggregate;
  /** fetch data from the table: "employee_salary_department" using primary key columns */
  employee_salary_department_by_pk?: Maybe<Employee_Salary_Department>;
  /** An array relationship */
  employees: Array<Employees>;
  /** An aggregate relationship */
  employees_aggregate: Employees_Aggregate;
  /** fetch data from the table: "employees" using primary key columns */
  employees_by_pk?: Maybe<Employees>;
  /** An array relationship */
  employees_roles: Array<Employees_Roles>;
  /** An aggregate relationship */
  employees_roles_aggregate: Employees_Roles_Aggregate;
  /** fetch data from the table: "employees_roles" using primary key columns */
  employees_roles_by_pk?: Maybe<Employees_Roles>;
  /** fetch data from the table: "foodcategories" */
  foodcategories: Array<Foodcategories>;
  /** fetch aggregated fields from the table: "foodcategories" */
  foodcategories_aggregate: Foodcategories_Aggregate;
  /** fetch data from the table: "foodcategories" using primary key columns */
  foodcategories_by_pk?: Maybe<Foodcategories>;
  /** An array relationship */
  fooditems: Array<Fooditems>;
  /** An aggregate relationship */
  fooditems_aggregate: Fooditems_Aggregate;
  /** fetch data from the table: "fooditems" using primary key columns */
  fooditems_by_pk?: Maybe<Fooditems>;
  /** execute function "func_solditems_summary" which returns "solditems_summary" */
  func_solditems_summary: Array<Solditems_Summary>;
  /** execute function "func_solditems_summary" and query aggregates on result of table type "solditems_summary" */
  func_solditems_summary_aggregate: Solditems_Summary_Aggregate;
  /** An array relationship */
  ingredients: Array<Ingredients>;
  /** An aggregate relationship */
  ingredients_aggregate: Ingredients_Aggregate;
  /** fetch data from the table: "ingredients" using primary key columns */
  ingredients_by_pk?: Maybe<Ingredients>;
  /** fetch data from the table: "insurance_fund_types" */
  insurance_fund_types: Array<Insurance_Fund_Types>;
  /** fetch aggregated fields from the table: "insurance_fund_types" */
  insurance_fund_types_aggregate: Insurance_Fund_Types_Aggregate;
  /** fetch data from the table: "insurance_fund_types" using primary key columns */
  insurance_fund_types_by_pk?: Maybe<Insurance_Fund_Types>;
  /** An array relationship */
  insurance_funds: Array<Insurance_Funds>;
  /** An aggregate relationship */
  insurance_funds_aggregate: Insurance_Funds_Aggregate;
  /** fetch data from the table: "insurance_funds" using primary key columns */
  insurance_funds_by_pk?: Maybe<Insurance_Funds>;
  /** fetch data from the table: "leave_types" */
  leave_types: Array<Leave_Types>;
  /** fetch aggregated fields from the table: "leave_types" */
  leave_types_aggregate: Leave_Types_Aggregate;
  /** fetch data from the table: "leave_types" using primary key columns */
  leave_types_by_pk?: Maybe<Leave_Types>;
  /** fetch data from the table: "monthlysalary" */
  monthlysalary: Array<Monthlysalary>;
  /** fetch aggregated fields from the table: "monthlysalary" */
  monthlysalary_aggregate: Monthlysalary_Aggregate;
  /** fetch data from the table: "monthlysalary" using primary key columns */
  monthlysalary_by_pk?: Maybe<Monthlysalary>;
  /** An array relationship */
  nav_bg_categories: Array<Nav_Bg_Categories>;
  /** An aggregate relationship */
  nav_bg_categories_aggregate: Nav_Bg_Categories_Aggregate;
  /** fetch data from the table: "nav_bg_categories" using primary key columns */
  nav_bg_categories_by_pk?: Maybe<Nav_Bg_Categories>;
  /** An array relationship */
  nav_sm_categories: Array<Nav_Sm_Categories>;
  /** An aggregate relationship */
  nav_sm_categories_aggregate: Nav_Sm_Categories_Aggregate;
  /** fetch data from the table: "nav_sm_categories" using primary key columns */
  nav_sm_categories_by_pk?: Maybe<Nav_Sm_Categories>;
  /** fetch data from the table: "nav_xl_categories" */
  nav_xl_categories: Array<Nav_Xl_Categories>;
  /** fetch aggregated fields from the table: "nav_xl_categories" */
  nav_xl_categories_aggregate: Nav_Xl_Categories_Aggregate;
  /** fetch data from the table: "nav_xl_categories" using primary key columns */
  nav_xl_categories_by_pk?: Maybe<Nav_Xl_Categories>;
  /** fetch data from the table: "organstores" */
  organstores: Array<Organstores>;
  /** fetch aggregated fields from the table: "organstores" */
  organstores_aggregate: Organstores_Aggregate;
  /** fetch data from the table: "organstores" using primary key columns */
  organstores_by_pk?: Maybe<Organstores>;
  /** An array relationship */
  role_nav_sm_categories: Array<Role_Nav_Sm_Categories>;
  /** An aggregate relationship */
  role_nav_sm_categories_aggregate: Role_Nav_Sm_Categories_Aggregate;
  /** fetch data from the table: "role_nav_sm_categories" using primary key columns */
  role_nav_sm_categories_by_pk?: Maybe<Role_Nav_Sm_Categories>;
  /** fetch data from the table: "role_scope" */
  role_scope: Array<Role_Scope>;
  /** fetch aggregated fields from the table: "role_scope" */
  role_scope_aggregate: Role_Scope_Aggregate;
  /** fetch data from the table: "role_scope" using primary key columns */
  role_scope_by_pk?: Maybe<Role_Scope>;
  /** fetch data from the table: "roles" */
  roles: Array<Roles>;
  /** fetch aggregated fields from the table: "roles" */
  roles_aggregate: Roles_Aggregate;
  /** fetch data from the table: "roles" using primary key columns */
  roles_by_pk?: Maybe<Roles>;
  /** fetch data from the table: "salary_accounts" */
  salary_accounts: Array<Salary_Accounts>;
  /** fetch aggregated fields from the table: "salary_accounts" */
  salary_accounts_aggregate: Salary_Accounts_Aggregate;
  /** fetch data from the table: "salary_accounts" using primary key columns */
  salary_accounts_by_pk?: Maybe<Salary_Accounts>;
  /** fetch data from the table: "salary_types" */
  salary_types: Array<Salary_Types>;
  /** fetch aggregated fields from the table: "salary_types" */
  salary_types_aggregate: Salary_Types_Aggregate;
  /** fetch data from the table: "salary_types" using primary key columns */
  salary_types_by_pk?: Maybe<Salary_Types>;
  /** fetch data from the table: "salesitemsdata" */
  salesitemsdata: Array<Salesitemsdata>;
  /** fetch aggregated fields from the table: "salesitemsdata" */
  salesitemsdata_aggregate: Salesitemsdata_Aggregate;
  /** fetch data from the table: "salesitemsdata" using primary key columns */
  salesitemsdata_by_pk?: Maybe<Salesitemsdata>;
  /** fetch data from the table: "scope_nav_sm_categories" */
  scope_nav_sm_categories: Array<Scope_Nav_Sm_Categories>;
  /** fetch aggregated fields from the table: "scope_nav_sm_categories" */
  scope_nav_sm_categories_aggregate: Scope_Nav_Sm_Categories_Aggregate;
  /** fetch data from the table: "scope_nav_sm_categories" using primary key columns */
  scope_nav_sm_categories_by_pk?: Maybe<Scope_Nav_Sm_Categories>;
  /** fetch data from the table: "scopes" */
  scopes: Array<Scopes>;
  /** fetch aggregated fields from the table: "scopes" */
  scopes_aggregate: Scopes_Aggregate;
  /** fetch data from the table: "scopes" using primary key columns */
  scopes_by_pk?: Maybe<Scopes>;
  /** fetch data from the table: "service_entitlement" */
  service_entitlement: Array<Service_Entitlement>;
  /** fetch aggregated fields from the table: "service_entitlement" */
  service_entitlement_aggregate: Service_Entitlement_Aggregate;
  /** fetch data from the table: "service_entitlement" using primary key columns */
  service_entitlement_by_pk?: Maybe<Service_Entitlement>;
  /** An array relationship */
  settledetails: Array<Settledetails>;
  /** An aggregate relationship */
  settledetails_aggregate: Settledetails_Aggregate;
  /** fetch data from the table: "settledetails" using primary key columns */
  settledetails_by_pk?: Maybe<Settledetails>;
  /** fetch data from the table: "shift_lists" */
  shift_lists: Array<Shift_Lists>;
  /** fetch aggregated fields from the table: "shift_lists" */
  shift_lists_aggregate: Shift_Lists_Aggregate;
  /** fetch data from the table: "shift_lists" using primary key columns */
  shift_lists_by_pk?: Maybe<Shift_Lists>;
  /** An array relationship */
  solditems: Array<Solditems>;
  /** An aggregate relationship */
  solditems_aggregate: Solditems_Aggregate;
  /** fetch data from the table: "solditems" using primary key columns */
  solditems_by_pk?: Maybe<Solditems>;
  /** fetch data from the table: "solditems_summary" */
  solditems_summary: Array<Solditems_Summary>;
  /** fetch aggregated fields from the table: "solditems_summary" */
  solditems_summary_aggregate: Solditems_Summary_Aggregate;
  storeDepartments?: Maybe<Array<Maybe<StoreDepartments>>>;
  /** fetch data from the table: "store_employee" */
  store_employee: Array<Store_Employee>;
  /** fetch aggregated fields from the table: "store_employee" */
  store_employee_aggregate: Store_Employee_Aggregate;
  /** fetch data from the table: "store_employee" using primary key columns */
  store_employee_by_pk?: Maybe<Store_Employee>;
  /** An array relationship */
  stores: Array<Stores>;
  /** An aggregate relationship */
  stores_aggregate: Stores_Aggregate;
  /** fetch data from the table: "stores" using primary key columns */
  stores_by_pk?: Maybe<Stores>;
  /** fetch data from the table: "suppliers" */
  suppliers: Array<Suppliers>;
  /** fetch aggregated fields from the table: "suppliers" */
  suppliers_aggregate: Suppliers_Aggregate;
  /** fetch data from the table: "suppliers" using primary key columns */
  suppliers_by_pk?: Maybe<Suppliers>;
  /** An array relationship */
  supplyitems: Array<Supplyitems>;
  /** An aggregate relationship */
  supplyitems_aggregate: Supplyitems_Aggregate;
  /** fetch data from the table: "supplyitems" using primary key columns */
  supplyitems_by_pk?: Maybe<Supplyitems>;
  /** fetch data from the table: "supplyitemtypes" */
  supplyitemtypes: Array<Supplyitemtypes>;
  /** fetch aggregated fields from the table: "supplyitemtypes" */
  supplyitemtypes_aggregate: Supplyitemtypes_Aggregate;
  /** fetch data from the table: "supplyitemtypes" using primary key columns */
  supplyitemtypes_by_pk?: Maybe<Supplyitemtypes>;
  /** fetch data from the table: "supplyitemunits" */
  supplyitemunits: Array<Supplyitemunits>;
  /** fetch aggregated fields from the table: "supplyitemunits" */
  supplyitemunits_aggregate: Supplyitemunits_Aggregate;
  /** fetch data from the table: "supplyitemunits" using primary key columns */
  supplyitemunits_by_pk?: Maybe<Supplyitemunits>;
  /** fetch data from the table: "supplyrdc" */
  supplyrdc: Array<Supplyrdc>;
  /** fetch aggregated fields from the table: "supplyrdc" */
  supplyrdc_aggregate: Supplyrdc_Aggregate;
  /** fetch data from the table: "supplyrdc" using primary key columns */
  supplyrdc_by_pk?: Maybe<Supplyrdc>;
  verifyEmployeeFields?: Maybe<Array<Maybe<Employees_ActionType>>>;
  /** fetch data from the table: "view_daily_items_sold" */
  view_daily_items_sold: Array<View_Daily_Items_Sold>;
  /** fetch aggregated fields from the table: "view_daily_items_sold" */
  view_daily_items_sold_aggregate: View_Daily_Items_Sold_Aggregate;
  /** fetch data from the table: "view_monthly_salary" */
  view_monthly_salary: Array<View_Monthly_Salary>;
  /** fetch data from the table: "view_monthly_salary_2" */
  view_monthly_salary_2: Array<View_Monthly_Salary_2>;
  /** fetch aggregated fields from the table: "view_monthly_salary_2" */
  view_monthly_salary_2_aggregate: View_Monthly_Salary_2_Aggregate;
  /** fetch aggregated fields from the table: "view_monthly_salary" */
  view_monthly_salary_aggregate: View_Monthly_Salary_Aggregate;
  /** fetch data from the table: "view_solditems" */
  view_solditems: Array<View_Solditems>;
  /** fetch aggregated fields from the table: "view_solditems" */
  view_solditems_aggregate: View_Solditems_Aggregate;
};


export type Query_RootAttendanceArgs = {
  distinct_on?: InputMaybe<Array<Attendance_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Attendance_Order_By>>;
  where?: InputMaybe<Attendance_Bool_Exp>;
};


export type Query_RootAttendance_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Attendance_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Attendance_Order_By>>;
  where?: InputMaybe<Attendance_Bool_Exp>;
};


export type Query_RootAttendance_By_PkArgs = {
  id: Scalars['String'];
};


export type Query_RootAttendance_Group_LeadersArgs = {
  distinct_on?: InputMaybe<Array<Attendance_Group_Leaders_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Attendance_Group_Leaders_Order_By>>;
  where?: InputMaybe<Attendance_Group_Leaders_Bool_Exp>;
};


export type Query_RootAttendance_Group_Leaders_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Attendance_Group_Leaders_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Attendance_Group_Leaders_Order_By>>;
  where?: InputMaybe<Attendance_Group_Leaders_Bool_Exp>;
};


export type Query_RootAttendance_Group_Leaders_By_PkArgs = {
  attendance_group_id: Scalars['String'];
  employee_id: Scalars['String'];
};


export type Query_RootAttendance_Group_ShiftsArgs = {
  distinct_on?: InputMaybe<Array<Attendance_Group_Shifts_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Attendance_Group_Shifts_Order_By>>;
  where?: InputMaybe<Attendance_Group_Shifts_Bool_Exp>;
};


export type Query_RootAttendance_Group_Shifts_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Attendance_Group_Shifts_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Attendance_Group_Shifts_Order_By>>;
  where?: InputMaybe<Attendance_Group_Shifts_Bool_Exp>;
};


export type Query_RootAttendance_Group_Shifts_By_PkArgs = {
  attendance_group_id: Scalars['String'];
  shift_list_id: Scalars['String'];
};


export type Query_RootAttendance_Group_SubleadersArgs = {
  distinct_on?: InputMaybe<Array<Attendance_Group_Subleaders_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Attendance_Group_Subleaders_Order_By>>;
  where?: InputMaybe<Attendance_Group_Subleaders_Bool_Exp>;
};


export type Query_RootAttendance_Group_Subleaders_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Attendance_Group_Subleaders_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Attendance_Group_Subleaders_Order_By>>;
  where?: InputMaybe<Attendance_Group_Subleaders_Bool_Exp>;
};


export type Query_RootAttendance_Group_Subleaders_By_PkArgs = {
  attendance_group_id: Scalars['String'];
  employee_id: Scalars['String'];
};


export type Query_RootAttendance_GroupsArgs = {
  distinct_on?: InputMaybe<Array<Attendance_Groups_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Attendance_Groups_Order_By>>;
  where?: InputMaybe<Attendance_Groups_Bool_Exp>;
};


export type Query_RootAttendance_Groups_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Attendance_Groups_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Attendance_Groups_Order_By>>;
  where?: InputMaybe<Attendance_Groups_Bool_Exp>;
};


export type Query_RootAttendance_Groups_By_PkArgs = {
  id: Scalars['String'];
};


export type Query_RootAttendance_LocationsArgs = {
  distinct_on?: InputMaybe<Array<Attendance_Locations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Attendance_Locations_Order_By>>;
  where?: InputMaybe<Attendance_Locations_Bool_Exp>;
};


export type Query_RootAttendance_Locations_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Attendance_Locations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Attendance_Locations_Order_By>>;
  where?: InputMaybe<Attendance_Locations_Bool_Exp>;
};


export type Query_RootAttendance_Locations_By_PkArgs = {
  id: Scalars['String'];
};


export type Query_RootBillsArgs = {
  distinct_on?: InputMaybe<Array<Bills_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Bills_Order_By>>;
  where?: InputMaybe<Bills_Bool_Exp>;
};


export type Query_RootBills_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Bills_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Bills_Order_By>>;
  where?: InputMaybe<Bills_Bool_Exp>;
};


export type Query_RootBills_By_PkArgs = {
  bs_id: Scalars['bigint'];
};


export type Query_RootBonusdeductionsArgs = {
  distinct_on?: InputMaybe<Array<Bonusdeductions_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Bonusdeductions_Order_By>>;
  where?: InputMaybe<Bonusdeductions_Bool_Exp>;
};


export type Query_RootBonusdeductions_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Bonusdeductions_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Bonusdeductions_Order_By>>;
  where?: InputMaybe<Bonusdeductions_Bool_Exp>;
};


export type Query_RootBonusdeductions_By_PkArgs = {
  id: Scalars['String'];
};


export type Query_RootBonusdeductiontypesArgs = {
  distinct_on?: InputMaybe<Array<Bonusdeductiontypes_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Bonusdeductiontypes_Order_By>>;
  where?: InputMaybe<Bonusdeductiontypes_Bool_Exp>;
};


export type Query_RootBonusdeductiontypes_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Bonusdeductiontypes_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Bonusdeductiontypes_Order_By>>;
  where?: InputMaybe<Bonusdeductiontypes_Bool_Exp>;
};


export type Query_RootBonusdeductiontypes_By_PkArgs = {
  id: Scalars['String'];
};


export type Query_RootBrandsArgs = {
  distinct_on?: InputMaybe<Array<Brands_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Brands_Order_By>>;
  where?: InputMaybe<Brands_Bool_Exp>;
};


export type Query_RootBrands_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Brands_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Brands_Order_By>>;
  where?: InputMaybe<Brands_Bool_Exp>;
};


export type Query_RootBrands_By_PkArgs = {
  id: Scalars['String'];
};


export type Query_RootBrands_EmployeesArgs = {
  distinct_on?: InputMaybe<Array<Brands_Employees_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Brands_Employees_Order_By>>;
  where?: InputMaybe<Brands_Employees_Bool_Exp>;
};


export type Query_RootBrands_Employees_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Brands_Employees_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Brands_Employees_Order_By>>;
  where?: InputMaybe<Brands_Employees_Bool_Exp>;
};


export type Query_RootBrands_Employees_By_PkArgs = {
  brand_id: Scalars['String'];
  employee_id: Scalars['String'];
};


export type Query_RootDepartmentsArgs = {
  distinct_on?: InputMaybe<Array<Departments_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Departments_Order_By>>;
  where?: InputMaybe<Departments_Bool_Exp>;
};


export type Query_RootDepartments_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Departments_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Departments_Order_By>>;
  where?: InputMaybe<Departments_Bool_Exp>;
};


export type Query_RootDepartments_By_PkArgs = {
  id: Scalars['String'];
};


export type Query_RootDepartments_EmployeesArgs = {
  distinct_on?: InputMaybe<Array<Departments_Employees_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Departments_Employees_Order_By>>;
  where?: InputMaybe<Departments_Employees_Bool_Exp>;
};


export type Query_RootDepartments_Employees_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Departments_Employees_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Departments_Employees_Order_By>>;
  where?: InputMaybe<Departments_Employees_Bool_Exp>;
};


export type Query_RootDepartments_Employees_By_PkArgs = {
  department_id: Scalars['String'];
  employee_id: Scalars['String'];
};


export type Query_RootDepartments_StoresArgs = {
  distinct_on?: InputMaybe<Array<Departments_Stores_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Departments_Stores_Order_By>>;
  where?: InputMaybe<Departments_Stores_Bool_Exp>;
};


export type Query_RootDepartments_Stores_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Departments_Stores_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Departments_Stores_Order_By>>;
  where?: InputMaybe<Departments_Stores_Bool_Exp>;
};


export type Query_RootDepartments_Stores_By_PkArgs = {
  department_id: Scalars['String'];
};


export type Query_RootDsstorebillsArgs = {
  distinct_on?: InputMaybe<Array<Dsstorebills_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Dsstorebills_Order_By>>;
  where?: InputMaybe<Dsstorebills_Bool_Exp>;
};


export type Query_RootDsstorebills_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Dsstorebills_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Dsstorebills_Order_By>>;
  where?: InputMaybe<Dsstorebills_Bool_Exp>;
};


export type Query_RootDsstorebills_By_PkArgs = {
  StoreBillDTID: Scalars['String'];
  StoreCode: Scalars['String'];
};


export type Query_RootEmployee_AttachmentsArgs = {
  distinct_on?: InputMaybe<Array<Employee_Attachments_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Employee_Attachments_Order_By>>;
  where?: InputMaybe<Employee_Attachments_Bool_Exp>;
};


export type Query_RootEmployee_Attachments_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Employee_Attachments_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Employee_Attachments_Order_By>>;
  where?: InputMaybe<Employee_Attachments_Bool_Exp>;
};


export type Query_RootEmployee_Attachments_By_PkArgs = {
  id: Scalars['String'];
};


export type Query_RootEmployee_InsuranceArgs = {
  distinct_on?: InputMaybe<Array<Employee_Insurance_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Employee_Insurance_Order_By>>;
  where?: InputMaybe<Employee_Insurance_Bool_Exp>;
};


export type Query_RootEmployee_Insurance_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Employee_Insurance_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Employee_Insurance_Order_By>>;
  where?: InputMaybe<Employee_Insurance_Bool_Exp>;
};


export type Query_RootEmployee_Insurance_By_PkArgs = {
  id: Scalars['String'];
};


export type Query_RootEmployee_LeavesArgs = {
  distinct_on?: InputMaybe<Array<Employee_Leaves_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Employee_Leaves_Order_By>>;
  where?: InputMaybe<Employee_Leaves_Bool_Exp>;
};


export type Query_RootEmployee_Leaves_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Employee_Leaves_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Employee_Leaves_Order_By>>;
  where?: InputMaybe<Employee_Leaves_Bool_Exp>;
};


export type Query_RootEmployee_Leaves_By_PkArgs = {
  id: Scalars['String'];
};


export type Query_RootEmployee_Salary_DepartmentArgs = {
  distinct_on?: InputMaybe<Array<Employee_Salary_Department_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Employee_Salary_Department_Order_By>>;
  where?: InputMaybe<Employee_Salary_Department_Bool_Exp>;
};


export type Query_RootEmployee_Salary_Department_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Employee_Salary_Department_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Employee_Salary_Department_Order_By>>;
  where?: InputMaybe<Employee_Salary_Department_Bool_Exp>;
};


export type Query_RootEmployee_Salary_Department_By_PkArgs = {
  department_id: Scalars['String'];
  employee_id: Scalars['String'];
};


export type Query_RootEmployeesArgs = {
  distinct_on?: InputMaybe<Array<Employees_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Employees_Order_By>>;
  where?: InputMaybe<Employees_Bool_Exp>;
};


export type Query_RootEmployees_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Employees_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Employees_Order_By>>;
  where?: InputMaybe<Employees_Bool_Exp>;
};


export type Query_RootEmployees_By_PkArgs = {
  id: Scalars['String'];
};


export type Query_RootEmployees_RolesArgs = {
  distinct_on?: InputMaybe<Array<Employees_Roles_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Employees_Roles_Order_By>>;
  where?: InputMaybe<Employees_Roles_Bool_Exp>;
};


export type Query_RootEmployees_Roles_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Employees_Roles_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Employees_Roles_Order_By>>;
  where?: InputMaybe<Employees_Roles_Bool_Exp>;
};


export type Query_RootEmployees_Roles_By_PkArgs = {
  employee_id: Scalars['String'];
  role_id: Scalars['String'];
};


export type Query_RootFoodcategoriesArgs = {
  distinct_on?: InputMaybe<Array<Foodcategories_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Foodcategories_Order_By>>;
  where?: InputMaybe<Foodcategories_Bool_Exp>;
};


export type Query_RootFoodcategories_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Foodcategories_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Foodcategories_Order_By>>;
  where?: InputMaybe<Foodcategories_Bool_Exp>;
};


export type Query_RootFoodcategories_By_PkArgs = {
  class_id: Scalars['bigint'];
};


export type Query_RootFooditemsArgs = {
  distinct_on?: InputMaybe<Array<Fooditems_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Fooditems_Order_By>>;
  where?: InputMaybe<Fooditems_Bool_Exp>;
};


export type Query_RootFooditems_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Fooditems_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Fooditems_Order_By>>;
  where?: InputMaybe<Fooditems_Bool_Exp>;
};


export type Query_RootFooditems_By_PkArgs = {
  item_id: Scalars['String'];
};


export type Query_RootFunc_Solditems_SummaryArgs = {
  args: Func_Solditems_Summary_Args;
  distinct_on?: InputMaybe<Array<Solditems_Summary_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Solditems_Summary_Order_By>>;
  where?: InputMaybe<Solditems_Summary_Bool_Exp>;
};


export type Query_RootFunc_Solditems_Summary_AggregateArgs = {
  args: Func_Solditems_Summary_Args;
  distinct_on?: InputMaybe<Array<Solditems_Summary_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Solditems_Summary_Order_By>>;
  where?: InputMaybe<Solditems_Summary_Bool_Exp>;
};


export type Query_RootIngredientsArgs = {
  distinct_on?: InputMaybe<Array<Ingredients_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Ingredients_Order_By>>;
  where?: InputMaybe<Ingredients_Bool_Exp>;
};


export type Query_RootIngredients_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Ingredients_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Ingredients_Order_By>>;
  where?: InputMaybe<Ingredients_Bool_Exp>;
};


export type Query_RootIngredients_By_PkArgs = {
  id: Scalars['Int'];
};


export type Query_RootInsurance_Fund_TypesArgs = {
  distinct_on?: InputMaybe<Array<Insurance_Fund_Types_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Insurance_Fund_Types_Order_By>>;
  where?: InputMaybe<Insurance_Fund_Types_Bool_Exp>;
};


export type Query_RootInsurance_Fund_Types_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Insurance_Fund_Types_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Insurance_Fund_Types_Order_By>>;
  where?: InputMaybe<Insurance_Fund_Types_Bool_Exp>;
};


export type Query_RootInsurance_Fund_Types_By_PkArgs = {
  id: Scalars['String'];
};


export type Query_RootInsurance_FundsArgs = {
  distinct_on?: InputMaybe<Array<Insurance_Funds_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Insurance_Funds_Order_By>>;
  where?: InputMaybe<Insurance_Funds_Bool_Exp>;
};


export type Query_RootInsurance_Funds_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Insurance_Funds_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Insurance_Funds_Order_By>>;
  where?: InputMaybe<Insurance_Funds_Bool_Exp>;
};


export type Query_RootInsurance_Funds_By_PkArgs = {
  id: Scalars['String'];
};


export type Query_RootLeave_TypesArgs = {
  distinct_on?: InputMaybe<Array<Leave_Types_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Leave_Types_Order_By>>;
  where?: InputMaybe<Leave_Types_Bool_Exp>;
};


export type Query_RootLeave_Types_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Leave_Types_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Leave_Types_Order_By>>;
  where?: InputMaybe<Leave_Types_Bool_Exp>;
};


export type Query_RootLeave_Types_By_PkArgs = {
  id: Scalars['String'];
};


export type Query_RootMonthlysalaryArgs = {
  distinct_on?: InputMaybe<Array<Monthlysalary_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Monthlysalary_Order_By>>;
  where?: InputMaybe<Monthlysalary_Bool_Exp>;
};


export type Query_RootMonthlysalary_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Monthlysalary_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Monthlysalary_Order_By>>;
  where?: InputMaybe<Monthlysalary_Bool_Exp>;
};


export type Query_RootMonthlysalary_By_PkArgs = {
  attendance_department_id: Scalars['String'];
  employee_id: Scalars['String'];
  month: Scalars['date'];
};


export type Query_RootNav_Bg_CategoriesArgs = {
  distinct_on?: InputMaybe<Array<Nav_Bg_Categories_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Nav_Bg_Categories_Order_By>>;
  where?: InputMaybe<Nav_Bg_Categories_Bool_Exp>;
};


export type Query_RootNav_Bg_Categories_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Nav_Bg_Categories_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Nav_Bg_Categories_Order_By>>;
  where?: InputMaybe<Nav_Bg_Categories_Bool_Exp>;
};


export type Query_RootNav_Bg_Categories_By_PkArgs = {
  id: Scalars['Int'];
};


export type Query_RootNav_Sm_CategoriesArgs = {
  distinct_on?: InputMaybe<Array<Nav_Sm_Categories_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Nav_Sm_Categories_Order_By>>;
  where?: InputMaybe<Nav_Sm_Categories_Bool_Exp>;
};


export type Query_RootNav_Sm_Categories_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Nav_Sm_Categories_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Nav_Sm_Categories_Order_By>>;
  where?: InputMaybe<Nav_Sm_Categories_Bool_Exp>;
};


export type Query_RootNav_Sm_Categories_By_PkArgs = {
  id: Scalars['Int'];
};


export type Query_RootNav_Xl_CategoriesArgs = {
  distinct_on?: InputMaybe<Array<Nav_Xl_Categories_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Nav_Xl_Categories_Order_By>>;
  where?: InputMaybe<Nav_Xl_Categories_Bool_Exp>;
};


export type Query_RootNav_Xl_Categories_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Nav_Xl_Categories_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Nav_Xl_Categories_Order_By>>;
  where?: InputMaybe<Nav_Xl_Categories_Bool_Exp>;
};


export type Query_RootNav_Xl_Categories_By_PkArgs = {
  id: Scalars['Int'];
};


export type Query_RootOrganstoresArgs = {
  distinct_on?: InputMaybe<Array<Organstores_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Organstores_Order_By>>;
  where?: InputMaybe<Organstores_Bool_Exp>;
};


export type Query_RootOrganstores_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Organstores_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Organstores_Order_By>>;
  where?: InputMaybe<Organstores_Bool_Exp>;
};


export type Query_RootOrganstores_By_PkArgs = {
  id: Scalars['String'];
};


export type Query_RootRole_Nav_Sm_CategoriesArgs = {
  distinct_on?: InputMaybe<Array<Role_Nav_Sm_Categories_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Role_Nav_Sm_Categories_Order_By>>;
  where?: InputMaybe<Role_Nav_Sm_Categories_Bool_Exp>;
};


export type Query_RootRole_Nav_Sm_Categories_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Role_Nav_Sm_Categories_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Role_Nav_Sm_Categories_Order_By>>;
  where?: InputMaybe<Role_Nav_Sm_Categories_Bool_Exp>;
};


export type Query_RootRole_Nav_Sm_Categories_By_PkArgs = {
  nav_sm_category_id: Scalars['Int'];
  role_id: Scalars['String'];
};


export type Query_RootRole_ScopeArgs = {
  distinct_on?: InputMaybe<Array<Role_Scope_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Role_Scope_Order_By>>;
  where?: InputMaybe<Role_Scope_Bool_Exp>;
};


export type Query_RootRole_Scope_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Role_Scope_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Role_Scope_Order_By>>;
  where?: InputMaybe<Role_Scope_Bool_Exp>;
};


export type Query_RootRole_Scope_By_PkArgs = {
  id: Scalars['String'];
};


export type Query_RootRolesArgs = {
  distinct_on?: InputMaybe<Array<Roles_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Roles_Order_By>>;
  where?: InputMaybe<Roles_Bool_Exp>;
};


export type Query_RootRoles_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Roles_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Roles_Order_By>>;
  where?: InputMaybe<Roles_Bool_Exp>;
};


export type Query_RootRoles_By_PkArgs = {
  id: Scalars['String'];
};


export type Query_RootSalary_AccountsArgs = {
  distinct_on?: InputMaybe<Array<Salary_Accounts_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Salary_Accounts_Order_By>>;
  where?: InputMaybe<Salary_Accounts_Bool_Exp>;
};


export type Query_RootSalary_Accounts_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Salary_Accounts_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Salary_Accounts_Order_By>>;
  where?: InputMaybe<Salary_Accounts_Bool_Exp>;
};


export type Query_RootSalary_Accounts_By_PkArgs = {
  id: Scalars['String'];
};


export type Query_RootSalary_TypesArgs = {
  distinct_on?: InputMaybe<Array<Salary_Types_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Salary_Types_Order_By>>;
  where?: InputMaybe<Salary_Types_Bool_Exp>;
};


export type Query_RootSalary_Types_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Salary_Types_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Salary_Types_Order_By>>;
  where?: InputMaybe<Salary_Types_Bool_Exp>;
};


export type Query_RootSalary_Types_By_PkArgs = {
  id: Scalars['String'];
};


export type Query_RootSalesitemsdataArgs = {
  distinct_on?: InputMaybe<Array<Salesitemsdata_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Salesitemsdata_Order_By>>;
  where?: InputMaybe<Salesitemsdata_Bool_Exp>;
};


export type Query_RootSalesitemsdata_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Salesitemsdata_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Salesitemsdata_Order_By>>;
  where?: InputMaybe<Salesitemsdata_Bool_Exp>;
};


export type Query_RootSalesitemsdata_By_PkArgs = {
  id: Scalars['String'];
};


export type Query_RootScope_Nav_Sm_CategoriesArgs = {
  distinct_on?: InputMaybe<Array<Scope_Nav_Sm_Categories_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Scope_Nav_Sm_Categories_Order_By>>;
  where?: InputMaybe<Scope_Nav_Sm_Categories_Bool_Exp>;
};


export type Query_RootScope_Nav_Sm_Categories_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Scope_Nav_Sm_Categories_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Scope_Nav_Sm_Categories_Order_By>>;
  where?: InputMaybe<Scope_Nav_Sm_Categories_Bool_Exp>;
};


export type Query_RootScope_Nav_Sm_Categories_By_PkArgs = {
  id: Scalars['Int'];
};


export type Query_RootScopesArgs = {
  distinct_on?: InputMaybe<Array<Scopes_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Scopes_Order_By>>;
  where?: InputMaybe<Scopes_Bool_Exp>;
};


export type Query_RootScopes_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Scopes_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Scopes_Order_By>>;
  where?: InputMaybe<Scopes_Bool_Exp>;
};


export type Query_RootScopes_By_PkArgs = {
  id: Scalars['String'];
};


export type Query_RootService_EntitlementArgs = {
  distinct_on?: InputMaybe<Array<Service_Entitlement_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Service_Entitlement_Order_By>>;
  where?: InputMaybe<Service_Entitlement_Bool_Exp>;
};


export type Query_RootService_Entitlement_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Service_Entitlement_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Service_Entitlement_Order_By>>;
  where?: InputMaybe<Service_Entitlement_Bool_Exp>;
};


export type Query_RootService_Entitlement_By_PkArgs = {
  id: Scalars['String'];
};


export type Query_RootSettledetailsArgs = {
  distinct_on?: InputMaybe<Array<Settledetails_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Settledetails_Order_By>>;
  where?: InputMaybe<Settledetails_Bool_Exp>;
};


export type Query_RootSettledetails_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Settledetails_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Settledetails_Order_By>>;
  where?: InputMaybe<Settledetails_Bool_Exp>;
};


export type Query_RootSettledetails_By_PkArgs = {
  pw_id: Scalars['bigint'];
};


export type Query_RootShift_ListsArgs = {
  distinct_on?: InputMaybe<Array<Shift_Lists_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Shift_Lists_Order_By>>;
  where?: InputMaybe<Shift_Lists_Bool_Exp>;
};


export type Query_RootShift_Lists_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Shift_Lists_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Shift_Lists_Order_By>>;
  where?: InputMaybe<Shift_Lists_Bool_Exp>;
};


export type Query_RootShift_Lists_By_PkArgs = {
  id: Scalars['String'];
};


export type Query_RootSolditemsArgs = {
  distinct_on?: InputMaybe<Array<Solditems_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Solditems_Order_By>>;
  where?: InputMaybe<Solditems_Bool_Exp>;
};


export type Query_RootSolditems_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Solditems_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Solditems_Order_By>>;
  where?: InputMaybe<Solditems_Bool_Exp>;
};


export type Query_RootSolditems_By_PkArgs = {
  sc_id: Scalars['bigint'];
};


export type Query_RootSolditems_SummaryArgs = {
  distinct_on?: InputMaybe<Array<Solditems_Summary_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Solditems_Summary_Order_By>>;
  where?: InputMaybe<Solditems_Summary_Bool_Exp>;
};


export type Query_RootSolditems_Summary_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Solditems_Summary_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Solditems_Summary_Order_By>>;
  where?: InputMaybe<Solditems_Summary_Bool_Exp>;
};


export type Query_RootStore_EmployeeArgs = {
  distinct_on?: InputMaybe<Array<Store_Employee_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Store_Employee_Order_By>>;
  where?: InputMaybe<Store_Employee_Bool_Exp>;
};


export type Query_RootStore_Employee_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Store_Employee_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Store_Employee_Order_By>>;
  where?: InputMaybe<Store_Employee_Bool_Exp>;
};


export type Query_RootStore_Employee_By_PkArgs = {
  employee_id: Scalars['String'];
  store_id: Scalars['String'];
};


export type Query_RootStoresArgs = {
  distinct_on?: InputMaybe<Array<Stores_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Stores_Order_By>>;
  where?: InputMaybe<Stores_Bool_Exp>;
};


export type Query_RootStores_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Stores_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Stores_Order_By>>;
  where?: InputMaybe<Stores_Bool_Exp>;
};


export type Query_RootStores_By_PkArgs = {
  id: Scalars['String'];
};


export type Query_RootSuppliersArgs = {
  distinct_on?: InputMaybe<Array<Suppliers_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Suppliers_Order_By>>;
  where?: InputMaybe<Suppliers_Bool_Exp>;
};


export type Query_RootSuppliers_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Suppliers_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Suppliers_Order_By>>;
  where?: InputMaybe<Suppliers_Bool_Exp>;
};


export type Query_RootSuppliers_By_PkArgs = {
  supplierId: Scalars['String'];
};


export type Query_RootSupplyitemsArgs = {
  distinct_on?: InputMaybe<Array<Supplyitems_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Supplyitems_Order_By>>;
  where?: InputMaybe<Supplyitems_Bool_Exp>;
};


export type Query_RootSupplyitems_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Supplyitems_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Supplyitems_Order_By>>;
  where?: InputMaybe<Supplyitems_Bool_Exp>;
};


export type Query_RootSupplyitems_By_PkArgs = {
  itemId: Scalars['String'];
};


export type Query_RootSupplyitemtypesArgs = {
  distinct_on?: InputMaybe<Array<Supplyitemtypes_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Supplyitemtypes_Order_By>>;
  where?: InputMaybe<Supplyitemtypes_Bool_Exp>;
};


export type Query_RootSupplyitemtypes_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Supplyitemtypes_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Supplyitemtypes_Order_By>>;
  where?: InputMaybe<Supplyitemtypes_Bool_Exp>;
};


export type Query_RootSupplyitemtypes_By_PkArgs = {
  itemTypeId: Scalars['String'];
};


export type Query_RootSupplyitemunitsArgs = {
  distinct_on?: InputMaybe<Array<Supplyitemunits_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Supplyitemunits_Order_By>>;
  where?: InputMaybe<Supplyitemunits_Bool_Exp>;
};


export type Query_RootSupplyitemunits_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Supplyitemunits_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Supplyitemunits_Order_By>>;
  where?: InputMaybe<Supplyitemunits_Bool_Exp>;
};


export type Query_RootSupplyitemunits_By_PkArgs = {
  id: Scalars['bytea'];
};


export type Query_RootSupplyrdcArgs = {
  distinct_on?: InputMaybe<Array<Supplyrdc_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Supplyrdc_Order_By>>;
  where?: InputMaybe<Supplyrdc_Bool_Exp>;
};


export type Query_RootSupplyrdc_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Supplyrdc_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Supplyrdc_Order_By>>;
  where?: InputMaybe<Supplyrdc_Bool_Exp>;
};


export type Query_RootSupplyrdc_By_PkArgs = {
  rdcId: Scalars['String'];
};


export type Query_RootVerifyEmployeeFieldsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
};


export type Query_RootView_Daily_Items_SoldArgs = {
  distinct_on?: InputMaybe<Array<View_Daily_Items_Sold_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<View_Daily_Items_Sold_Order_By>>;
  where?: InputMaybe<View_Daily_Items_Sold_Bool_Exp>;
};


export type Query_RootView_Daily_Items_Sold_AggregateArgs = {
  distinct_on?: InputMaybe<Array<View_Daily_Items_Sold_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<View_Daily_Items_Sold_Order_By>>;
  where?: InputMaybe<View_Daily_Items_Sold_Bool_Exp>;
};


export type Query_RootView_Monthly_SalaryArgs = {
  distinct_on?: InputMaybe<Array<View_Monthly_Salary_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<View_Monthly_Salary_Order_By>>;
  where?: InputMaybe<View_Monthly_Salary_Bool_Exp>;
};


export type Query_RootView_Monthly_Salary_2Args = {
  distinct_on?: InputMaybe<Array<View_Monthly_Salary_2_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<View_Monthly_Salary_2_Order_By>>;
  where?: InputMaybe<View_Monthly_Salary_2_Bool_Exp>;
};


export type Query_RootView_Monthly_Salary_2_AggregateArgs = {
  distinct_on?: InputMaybe<Array<View_Monthly_Salary_2_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<View_Monthly_Salary_2_Order_By>>;
  where?: InputMaybe<View_Monthly_Salary_2_Bool_Exp>;
};


export type Query_RootView_Monthly_Salary_AggregateArgs = {
  distinct_on?: InputMaybe<Array<View_Monthly_Salary_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<View_Monthly_Salary_Order_By>>;
  where?: InputMaybe<View_Monthly_Salary_Bool_Exp>;
};


export type Query_RootView_SolditemsArgs = {
  distinct_on?: InputMaybe<Array<View_Solditems_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<View_Solditems_Order_By>>;
  where?: InputMaybe<View_Solditems_Bool_Exp>;
};


export type Query_RootView_Solditems_AggregateArgs = {
  distinct_on?: InputMaybe<Array<View_Solditems_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<View_Solditems_Order_By>>;
  where?: InputMaybe<View_Solditems_Bool_Exp>;
};

/** columns and relationships of "role_nav_sm_categories" */
export type Role_Nav_Sm_Categories = {
  __typename?: 'role_nav_sm_categories';
  /** An object relationship */
  nav_sm_category: Nav_Sm_Categories;
  nav_sm_category_id: Scalars['Int'];
  /** An object relationship */
  role: Roles;
  role_id: Scalars['String'];
};

/** aggregated selection of "role_nav_sm_categories" */
export type Role_Nav_Sm_Categories_Aggregate = {
  __typename?: 'role_nav_sm_categories_aggregate';
  aggregate?: Maybe<Role_Nav_Sm_Categories_Aggregate_Fields>;
  nodes: Array<Role_Nav_Sm_Categories>;
};

export type Role_Nav_Sm_Categories_Aggregate_Bool_Exp = {
  count?: InputMaybe<Role_Nav_Sm_Categories_Aggregate_Bool_Exp_Count>;
};

export type Role_Nav_Sm_Categories_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<Role_Nav_Sm_Categories_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<Role_Nav_Sm_Categories_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "role_nav_sm_categories" */
export type Role_Nav_Sm_Categories_Aggregate_Fields = {
  __typename?: 'role_nav_sm_categories_aggregate_fields';
  avg?: Maybe<Role_Nav_Sm_Categories_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Role_Nav_Sm_Categories_Max_Fields>;
  min?: Maybe<Role_Nav_Sm_Categories_Min_Fields>;
  stddev?: Maybe<Role_Nav_Sm_Categories_Stddev_Fields>;
  stddev_pop?: Maybe<Role_Nav_Sm_Categories_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Role_Nav_Sm_Categories_Stddev_Samp_Fields>;
  sum?: Maybe<Role_Nav_Sm_Categories_Sum_Fields>;
  var_pop?: Maybe<Role_Nav_Sm_Categories_Var_Pop_Fields>;
  var_samp?: Maybe<Role_Nav_Sm_Categories_Var_Samp_Fields>;
  variance?: Maybe<Role_Nav_Sm_Categories_Variance_Fields>;
};


/** aggregate fields of "role_nav_sm_categories" */
export type Role_Nav_Sm_Categories_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Role_Nav_Sm_Categories_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "role_nav_sm_categories" */
export type Role_Nav_Sm_Categories_Aggregate_Order_By = {
  avg?: InputMaybe<Role_Nav_Sm_Categories_Avg_Order_By>;
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<Role_Nav_Sm_Categories_Max_Order_By>;
  min?: InputMaybe<Role_Nav_Sm_Categories_Min_Order_By>;
  stddev?: InputMaybe<Role_Nav_Sm_Categories_Stddev_Order_By>;
  stddev_pop?: InputMaybe<Role_Nav_Sm_Categories_Stddev_Pop_Order_By>;
  stddev_samp?: InputMaybe<Role_Nav_Sm_Categories_Stddev_Samp_Order_By>;
  sum?: InputMaybe<Role_Nav_Sm_Categories_Sum_Order_By>;
  var_pop?: InputMaybe<Role_Nav_Sm_Categories_Var_Pop_Order_By>;
  var_samp?: InputMaybe<Role_Nav_Sm_Categories_Var_Samp_Order_By>;
  variance?: InputMaybe<Role_Nav_Sm_Categories_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "role_nav_sm_categories" */
export type Role_Nav_Sm_Categories_Arr_Rel_Insert_Input = {
  data: Array<Role_Nav_Sm_Categories_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<Role_Nav_Sm_Categories_On_Conflict>;
};

/** aggregate avg on columns */
export type Role_Nav_Sm_Categories_Avg_Fields = {
  __typename?: 'role_nav_sm_categories_avg_fields';
  nav_sm_category_id?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "role_nav_sm_categories" */
export type Role_Nav_Sm_Categories_Avg_Order_By = {
  nav_sm_category_id?: InputMaybe<Order_By>;
};

/** Boolean expression to filter rows from the table "role_nav_sm_categories". All fields are combined with a logical 'AND'. */
export type Role_Nav_Sm_Categories_Bool_Exp = {
  _and?: InputMaybe<Array<Role_Nav_Sm_Categories_Bool_Exp>>;
  _not?: InputMaybe<Role_Nav_Sm_Categories_Bool_Exp>;
  _or?: InputMaybe<Array<Role_Nav_Sm_Categories_Bool_Exp>>;
  nav_sm_category?: InputMaybe<Nav_Sm_Categories_Bool_Exp>;
  nav_sm_category_id?: InputMaybe<Int_Comparison_Exp>;
  role?: InputMaybe<Roles_Bool_Exp>;
  role_id?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "role_nav_sm_categories" */
export enum Role_Nav_Sm_Categories_Constraint {
  /** unique or primary key constraint on columns "role_id", "nav_sm_category_id" */
  RoleNavSmCategoriesPrimary34 = 'role_nav_sm_categoriesPRIMARY34'
}

/** input type for incrementing numeric columns in table "role_nav_sm_categories" */
export type Role_Nav_Sm_Categories_Inc_Input = {
  nav_sm_category_id?: InputMaybe<Scalars['Int']>;
};

/** input type for inserting data into table "role_nav_sm_categories" */
export type Role_Nav_Sm_Categories_Insert_Input = {
  nav_sm_category?: InputMaybe<Nav_Sm_Categories_Obj_Rel_Insert_Input>;
  nav_sm_category_id?: InputMaybe<Scalars['Int']>;
  role?: InputMaybe<Roles_Obj_Rel_Insert_Input>;
  role_id?: InputMaybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Role_Nav_Sm_Categories_Max_Fields = {
  __typename?: 'role_nav_sm_categories_max_fields';
  nav_sm_category_id?: Maybe<Scalars['Int']>;
  role_id?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "role_nav_sm_categories" */
export type Role_Nav_Sm_Categories_Max_Order_By = {
  nav_sm_category_id?: InputMaybe<Order_By>;
  role_id?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type Role_Nav_Sm_Categories_Min_Fields = {
  __typename?: 'role_nav_sm_categories_min_fields';
  nav_sm_category_id?: Maybe<Scalars['Int']>;
  role_id?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "role_nav_sm_categories" */
export type Role_Nav_Sm_Categories_Min_Order_By = {
  nav_sm_category_id?: InputMaybe<Order_By>;
  role_id?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "role_nav_sm_categories" */
export type Role_Nav_Sm_Categories_Mutation_Response = {
  __typename?: 'role_nav_sm_categories_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Role_Nav_Sm_Categories>;
};

/** on_conflict condition type for table "role_nav_sm_categories" */
export type Role_Nav_Sm_Categories_On_Conflict = {
  constraint: Role_Nav_Sm_Categories_Constraint;
  update_columns?: Array<Role_Nav_Sm_Categories_Update_Column>;
  where?: InputMaybe<Role_Nav_Sm_Categories_Bool_Exp>;
};

/** Ordering options when selecting data from "role_nav_sm_categories". */
export type Role_Nav_Sm_Categories_Order_By = {
  nav_sm_category?: InputMaybe<Nav_Sm_Categories_Order_By>;
  nav_sm_category_id?: InputMaybe<Order_By>;
  role?: InputMaybe<Roles_Order_By>;
  role_id?: InputMaybe<Order_By>;
};

/** primary key columns input for table: role_nav_sm_categories */
export type Role_Nav_Sm_Categories_Pk_Columns_Input = {
  nav_sm_category_id: Scalars['Int'];
  role_id: Scalars['String'];
};

/** select columns of table "role_nav_sm_categories" */
export enum Role_Nav_Sm_Categories_Select_Column {
  /** column name */
  NavSmCategoryId = 'nav_sm_category_id',
  /** column name */
  RoleId = 'role_id'
}

/** input type for updating data in table "role_nav_sm_categories" */
export type Role_Nav_Sm_Categories_Set_Input = {
  nav_sm_category_id?: InputMaybe<Scalars['Int']>;
  role_id?: InputMaybe<Scalars['String']>;
};

/** aggregate stddev on columns */
export type Role_Nav_Sm_Categories_Stddev_Fields = {
  __typename?: 'role_nav_sm_categories_stddev_fields';
  nav_sm_category_id?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "role_nav_sm_categories" */
export type Role_Nav_Sm_Categories_Stddev_Order_By = {
  nav_sm_category_id?: InputMaybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Role_Nav_Sm_Categories_Stddev_Pop_Fields = {
  __typename?: 'role_nav_sm_categories_stddev_pop_fields';
  nav_sm_category_id?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "role_nav_sm_categories" */
export type Role_Nav_Sm_Categories_Stddev_Pop_Order_By = {
  nav_sm_category_id?: InputMaybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Role_Nav_Sm_Categories_Stddev_Samp_Fields = {
  __typename?: 'role_nav_sm_categories_stddev_samp_fields';
  nav_sm_category_id?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "role_nav_sm_categories" */
export type Role_Nav_Sm_Categories_Stddev_Samp_Order_By = {
  nav_sm_category_id?: InputMaybe<Order_By>;
};

/** Streaming cursor of the table "role_nav_sm_categories" */
export type Role_Nav_Sm_Categories_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Role_Nav_Sm_Categories_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Role_Nav_Sm_Categories_Stream_Cursor_Value_Input = {
  nav_sm_category_id?: InputMaybe<Scalars['Int']>;
  role_id?: InputMaybe<Scalars['String']>;
};

/** aggregate sum on columns */
export type Role_Nav_Sm_Categories_Sum_Fields = {
  __typename?: 'role_nav_sm_categories_sum_fields';
  nav_sm_category_id?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "role_nav_sm_categories" */
export type Role_Nav_Sm_Categories_Sum_Order_By = {
  nav_sm_category_id?: InputMaybe<Order_By>;
};

/** update columns of table "role_nav_sm_categories" */
export enum Role_Nav_Sm_Categories_Update_Column {
  /** column name */
  NavSmCategoryId = 'nav_sm_category_id',
  /** column name */
  RoleId = 'role_id'
}

export type Role_Nav_Sm_Categories_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: InputMaybe<Role_Nav_Sm_Categories_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Role_Nav_Sm_Categories_Set_Input>;
  /** filter the rows which have to be updated */
  where: Role_Nav_Sm_Categories_Bool_Exp;
};

/** aggregate var_pop on columns */
export type Role_Nav_Sm_Categories_Var_Pop_Fields = {
  __typename?: 'role_nav_sm_categories_var_pop_fields';
  nav_sm_category_id?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "role_nav_sm_categories" */
export type Role_Nav_Sm_Categories_Var_Pop_Order_By = {
  nav_sm_category_id?: InputMaybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Role_Nav_Sm_Categories_Var_Samp_Fields = {
  __typename?: 'role_nav_sm_categories_var_samp_fields';
  nav_sm_category_id?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "role_nav_sm_categories" */
export type Role_Nav_Sm_Categories_Var_Samp_Order_By = {
  nav_sm_category_id?: InputMaybe<Order_By>;
};

/** aggregate variance on columns */
export type Role_Nav_Sm_Categories_Variance_Fields = {
  __typename?: 'role_nav_sm_categories_variance_fields';
  nav_sm_category_id?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "role_nav_sm_categories" */
export type Role_Nav_Sm_Categories_Variance_Order_By = {
  nav_sm_category_id?: InputMaybe<Order_By>;
};

/** columns and relationships of "role_scope" */
export type Role_Scope = {
  __typename?: 'role_scope';
  id: Scalars['String'];
  /** An object relationship */
  role?: Maybe<Roles>;
  role_id?: Maybe<Scalars['String']>;
  /** An object relationship */
  scope?: Maybe<Scopes>;
  scope_id?: Maybe<Scalars['String']>;
};

/** aggregated selection of "role_scope" */
export type Role_Scope_Aggregate = {
  __typename?: 'role_scope_aggregate';
  aggregate?: Maybe<Role_Scope_Aggregate_Fields>;
  nodes: Array<Role_Scope>;
};

export type Role_Scope_Aggregate_Bool_Exp = {
  count?: InputMaybe<Role_Scope_Aggregate_Bool_Exp_Count>;
};

export type Role_Scope_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<Role_Scope_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<Role_Scope_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "role_scope" */
export type Role_Scope_Aggregate_Fields = {
  __typename?: 'role_scope_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Role_Scope_Max_Fields>;
  min?: Maybe<Role_Scope_Min_Fields>;
};


/** aggregate fields of "role_scope" */
export type Role_Scope_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Role_Scope_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "role_scope" */
export type Role_Scope_Aggregate_Order_By = {
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<Role_Scope_Max_Order_By>;
  min?: InputMaybe<Role_Scope_Min_Order_By>;
};

/** input type for inserting array relation for remote table "role_scope" */
export type Role_Scope_Arr_Rel_Insert_Input = {
  data: Array<Role_Scope_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<Role_Scope_On_Conflict>;
};

/** Boolean expression to filter rows from the table "role_scope". All fields are combined with a logical 'AND'. */
export type Role_Scope_Bool_Exp = {
  _and?: InputMaybe<Array<Role_Scope_Bool_Exp>>;
  _not?: InputMaybe<Role_Scope_Bool_Exp>;
  _or?: InputMaybe<Array<Role_Scope_Bool_Exp>>;
  id?: InputMaybe<String_Comparison_Exp>;
  role?: InputMaybe<Roles_Bool_Exp>;
  role_id?: InputMaybe<String_Comparison_Exp>;
  scope?: InputMaybe<Scopes_Bool_Exp>;
  scope_id?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "role_scope" */
export enum Role_Scope_Constraint {
  /** unique or primary key constraint on columns "id" */
  RoleScopePrimary35 = 'role_scopePRIMARY35',
  /** unique or primary key constraint on columns "role_id", "scope_id" */
  UniqueCombinationIdx48 = 'unique_combination_idx48'
}

/** input type for inserting data into table "role_scope" */
export type Role_Scope_Insert_Input = {
  id?: InputMaybe<Scalars['String']>;
  role?: InputMaybe<Roles_Obj_Rel_Insert_Input>;
  role_id?: InputMaybe<Scalars['String']>;
  scope?: InputMaybe<Scopes_Obj_Rel_Insert_Input>;
  scope_id?: InputMaybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Role_Scope_Max_Fields = {
  __typename?: 'role_scope_max_fields';
  id?: Maybe<Scalars['String']>;
  role_id?: Maybe<Scalars['String']>;
  scope_id?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "role_scope" */
export type Role_Scope_Max_Order_By = {
  id?: InputMaybe<Order_By>;
  role_id?: InputMaybe<Order_By>;
  scope_id?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type Role_Scope_Min_Fields = {
  __typename?: 'role_scope_min_fields';
  id?: Maybe<Scalars['String']>;
  role_id?: Maybe<Scalars['String']>;
  scope_id?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "role_scope" */
export type Role_Scope_Min_Order_By = {
  id?: InputMaybe<Order_By>;
  role_id?: InputMaybe<Order_By>;
  scope_id?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "role_scope" */
export type Role_Scope_Mutation_Response = {
  __typename?: 'role_scope_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Role_Scope>;
};

/** on_conflict condition type for table "role_scope" */
export type Role_Scope_On_Conflict = {
  constraint: Role_Scope_Constraint;
  update_columns?: Array<Role_Scope_Update_Column>;
  where?: InputMaybe<Role_Scope_Bool_Exp>;
};

/** Ordering options when selecting data from "role_scope". */
export type Role_Scope_Order_By = {
  id?: InputMaybe<Order_By>;
  role?: InputMaybe<Roles_Order_By>;
  role_id?: InputMaybe<Order_By>;
  scope?: InputMaybe<Scopes_Order_By>;
  scope_id?: InputMaybe<Order_By>;
};

/** primary key columns input for table: role_scope */
export type Role_Scope_Pk_Columns_Input = {
  id: Scalars['String'];
};

/** select columns of table "role_scope" */
export enum Role_Scope_Select_Column {
  /** column name */
  Id = 'id',
  /** column name */
  RoleId = 'role_id',
  /** column name */
  ScopeId = 'scope_id'
}

/** input type for updating data in table "role_scope" */
export type Role_Scope_Set_Input = {
  id?: InputMaybe<Scalars['String']>;
  role_id?: InputMaybe<Scalars['String']>;
  scope_id?: InputMaybe<Scalars['String']>;
};

/** Streaming cursor of the table "role_scope" */
export type Role_Scope_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Role_Scope_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Role_Scope_Stream_Cursor_Value_Input = {
  id?: InputMaybe<Scalars['String']>;
  role_id?: InputMaybe<Scalars['String']>;
  scope_id?: InputMaybe<Scalars['String']>;
};

/** update columns of table "role_scope" */
export enum Role_Scope_Update_Column {
  /** column name */
  Id = 'id',
  /** column name */
  RoleId = 'role_id',
  /** column name */
  ScopeId = 'scope_id'
}

export type Role_Scope_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Role_Scope_Set_Input>;
  /** filter the rows which have to be updated */
  where: Role_Scope_Bool_Exp;
};

/** columns and relationships of "roles" */
export type Roles = {
  __typename?: 'roles';
  /** An array relationship */
  employees_roles: Array<Employees_Roles>;
  /** An aggregate relationship */
  employees_roles_aggregate: Employees_Roles_Aggregate;
  id: Scalars['String'];
  label?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  ranking?: Maybe<Scalars['Int']>;
  /** An array relationship */
  role_nav_sm_categories: Array<Role_Nav_Sm_Categories>;
  /** An aggregate relationship */
  role_nav_sm_categories_aggregate: Role_Nav_Sm_Categories_Aggregate;
  /** An array relationship */
  role_scopes: Array<Role_Scope>;
  /** An aggregate relationship */
  role_scopes_aggregate: Role_Scope_Aggregate;
};


/** columns and relationships of "roles" */
export type RolesEmployees_RolesArgs = {
  distinct_on?: InputMaybe<Array<Employees_Roles_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Employees_Roles_Order_By>>;
  where?: InputMaybe<Employees_Roles_Bool_Exp>;
};


/** columns and relationships of "roles" */
export type RolesEmployees_Roles_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Employees_Roles_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Employees_Roles_Order_By>>;
  where?: InputMaybe<Employees_Roles_Bool_Exp>;
};


/** columns and relationships of "roles" */
export type RolesRole_Nav_Sm_CategoriesArgs = {
  distinct_on?: InputMaybe<Array<Role_Nav_Sm_Categories_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Role_Nav_Sm_Categories_Order_By>>;
  where?: InputMaybe<Role_Nav_Sm_Categories_Bool_Exp>;
};


/** columns and relationships of "roles" */
export type RolesRole_Nav_Sm_Categories_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Role_Nav_Sm_Categories_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Role_Nav_Sm_Categories_Order_By>>;
  where?: InputMaybe<Role_Nav_Sm_Categories_Bool_Exp>;
};


/** columns and relationships of "roles" */
export type RolesRole_ScopesArgs = {
  distinct_on?: InputMaybe<Array<Role_Scope_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Role_Scope_Order_By>>;
  where?: InputMaybe<Role_Scope_Bool_Exp>;
};


/** columns and relationships of "roles" */
export type RolesRole_Scopes_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Role_Scope_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Role_Scope_Order_By>>;
  where?: InputMaybe<Role_Scope_Bool_Exp>;
};

/** aggregated selection of "roles" */
export type Roles_Aggregate = {
  __typename?: 'roles_aggregate';
  aggregate?: Maybe<Roles_Aggregate_Fields>;
  nodes: Array<Roles>;
};

/** aggregate fields of "roles" */
export type Roles_Aggregate_Fields = {
  __typename?: 'roles_aggregate_fields';
  avg?: Maybe<Roles_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Roles_Max_Fields>;
  min?: Maybe<Roles_Min_Fields>;
  stddev?: Maybe<Roles_Stddev_Fields>;
  stddev_pop?: Maybe<Roles_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Roles_Stddev_Samp_Fields>;
  sum?: Maybe<Roles_Sum_Fields>;
  var_pop?: Maybe<Roles_Var_Pop_Fields>;
  var_samp?: Maybe<Roles_Var_Samp_Fields>;
  variance?: Maybe<Roles_Variance_Fields>;
};


/** aggregate fields of "roles" */
export type Roles_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Roles_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** aggregate avg on columns */
export type Roles_Avg_Fields = {
  __typename?: 'roles_avg_fields';
  ranking?: Maybe<Scalars['Float']>;
};

/** Boolean expression to filter rows from the table "roles". All fields are combined with a logical 'AND'. */
export type Roles_Bool_Exp = {
  _and?: InputMaybe<Array<Roles_Bool_Exp>>;
  _not?: InputMaybe<Roles_Bool_Exp>;
  _or?: InputMaybe<Array<Roles_Bool_Exp>>;
  employees_roles?: InputMaybe<Employees_Roles_Bool_Exp>;
  employees_roles_aggregate?: InputMaybe<Employees_Roles_Aggregate_Bool_Exp>;
  id?: InputMaybe<String_Comparison_Exp>;
  label?: InputMaybe<String_Comparison_Exp>;
  name?: InputMaybe<String_Comparison_Exp>;
  ranking?: InputMaybe<Int_Comparison_Exp>;
  role_nav_sm_categories?: InputMaybe<Role_Nav_Sm_Categories_Bool_Exp>;
  role_nav_sm_categories_aggregate?: InputMaybe<Role_Nav_Sm_Categories_Aggregate_Bool_Exp>;
  role_scopes?: InputMaybe<Role_Scope_Bool_Exp>;
  role_scopes_aggregate?: InputMaybe<Role_Scope_Aggregate_Bool_Exp>;
};

/** unique or primary key constraints on table "roles" */
export enum Roles_Constraint {
  /** unique or primary key constraint on columns "id" */
  RolesPrimary36 = 'rolesPRIMARY36'
}

/** input type for incrementing numeric columns in table "roles" */
export type Roles_Inc_Input = {
  ranking?: InputMaybe<Scalars['Int']>;
};

/** input type for inserting data into table "roles" */
export type Roles_Insert_Input = {
  employees_roles?: InputMaybe<Employees_Roles_Arr_Rel_Insert_Input>;
  id?: InputMaybe<Scalars['String']>;
  label?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  ranking?: InputMaybe<Scalars['Int']>;
  role_nav_sm_categories?: InputMaybe<Role_Nav_Sm_Categories_Arr_Rel_Insert_Input>;
  role_scopes?: InputMaybe<Role_Scope_Arr_Rel_Insert_Input>;
};

/** aggregate max on columns */
export type Roles_Max_Fields = {
  __typename?: 'roles_max_fields';
  id?: Maybe<Scalars['String']>;
  label?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  ranking?: Maybe<Scalars['Int']>;
};

/** aggregate min on columns */
export type Roles_Min_Fields = {
  __typename?: 'roles_min_fields';
  id?: Maybe<Scalars['String']>;
  label?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  ranking?: Maybe<Scalars['Int']>;
};

/** response of any mutation on the table "roles" */
export type Roles_Mutation_Response = {
  __typename?: 'roles_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Roles>;
};

/** input type for inserting object relation for remote table "roles" */
export type Roles_Obj_Rel_Insert_Input = {
  data: Roles_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<Roles_On_Conflict>;
};

/** on_conflict condition type for table "roles" */
export type Roles_On_Conflict = {
  constraint: Roles_Constraint;
  update_columns?: Array<Roles_Update_Column>;
  where?: InputMaybe<Roles_Bool_Exp>;
};

/** Ordering options when selecting data from "roles". */
export type Roles_Order_By = {
  employees_roles_aggregate?: InputMaybe<Employees_Roles_Aggregate_Order_By>;
  id?: InputMaybe<Order_By>;
  label?: InputMaybe<Order_By>;
  name?: InputMaybe<Order_By>;
  ranking?: InputMaybe<Order_By>;
  role_nav_sm_categories_aggregate?: InputMaybe<Role_Nav_Sm_Categories_Aggregate_Order_By>;
  role_scopes_aggregate?: InputMaybe<Role_Scope_Aggregate_Order_By>;
};

/** primary key columns input for table: roles */
export type Roles_Pk_Columns_Input = {
  id: Scalars['String'];
};

/** select columns of table "roles" */
export enum Roles_Select_Column {
  /** column name */
  Id = 'id',
  /** column name */
  Label = 'label',
  /** column name */
  Name = 'name',
  /** column name */
  Ranking = 'ranking'
}

/** input type for updating data in table "roles" */
export type Roles_Set_Input = {
  id?: InputMaybe<Scalars['String']>;
  label?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  ranking?: InputMaybe<Scalars['Int']>;
};

/** aggregate stddev on columns */
export type Roles_Stddev_Fields = {
  __typename?: 'roles_stddev_fields';
  ranking?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_pop on columns */
export type Roles_Stddev_Pop_Fields = {
  __typename?: 'roles_stddev_pop_fields';
  ranking?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_samp on columns */
export type Roles_Stddev_Samp_Fields = {
  __typename?: 'roles_stddev_samp_fields';
  ranking?: Maybe<Scalars['Float']>;
};

/** Streaming cursor of the table "roles" */
export type Roles_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Roles_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Roles_Stream_Cursor_Value_Input = {
  id?: InputMaybe<Scalars['String']>;
  label?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  ranking?: InputMaybe<Scalars['Int']>;
};

/** aggregate sum on columns */
export type Roles_Sum_Fields = {
  __typename?: 'roles_sum_fields';
  ranking?: Maybe<Scalars['Int']>;
};

/** update columns of table "roles" */
export enum Roles_Update_Column {
  /** column name */
  Id = 'id',
  /** column name */
  Label = 'label',
  /** column name */
  Name = 'name',
  /** column name */
  Ranking = 'ranking'
}

export type Roles_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: InputMaybe<Roles_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Roles_Set_Input>;
  /** filter the rows which have to be updated */
  where: Roles_Bool_Exp;
};

/** aggregate var_pop on columns */
export type Roles_Var_Pop_Fields = {
  __typename?: 'roles_var_pop_fields';
  ranking?: Maybe<Scalars['Float']>;
};

/** aggregate var_samp on columns */
export type Roles_Var_Samp_Fields = {
  __typename?: 'roles_var_samp_fields';
  ranking?: Maybe<Scalars['Float']>;
};

/** aggregate variance on columns */
export type Roles_Variance_Fields = {
  __typename?: 'roles_variance_fields';
  ranking?: Maybe<Scalars['Float']>;
};

/** columns and relationships of "salary_accounts" */
export type Salary_Accounts = {
  __typename?: 'salary_accounts';
  /** An array relationship */
  departments: Array<Departments>;
  /** An array relationship */
  departmentsByOwnSalaryAccountId: Array<Departments>;
  /** An aggregate relationship */
  departmentsByOwnSalaryAccountId_aggregate: Departments_Aggregate;
  /** An aggregate relationship */
  departments_aggregate: Departments_Aggregate;
  id: Scalars['String'];
  name: Scalars['String'];
};


/** columns and relationships of "salary_accounts" */
export type Salary_AccountsDepartmentsArgs = {
  distinct_on?: InputMaybe<Array<Departments_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Departments_Order_By>>;
  where?: InputMaybe<Departments_Bool_Exp>;
};


/** columns and relationships of "salary_accounts" */
export type Salary_AccountsDepartmentsByOwnSalaryAccountIdArgs = {
  distinct_on?: InputMaybe<Array<Departments_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Departments_Order_By>>;
  where?: InputMaybe<Departments_Bool_Exp>;
};


/** columns and relationships of "salary_accounts" */
export type Salary_AccountsDepartmentsByOwnSalaryAccountId_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Departments_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Departments_Order_By>>;
  where?: InputMaybe<Departments_Bool_Exp>;
};


/** columns and relationships of "salary_accounts" */
export type Salary_AccountsDepartments_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Departments_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Departments_Order_By>>;
  where?: InputMaybe<Departments_Bool_Exp>;
};

/** aggregated selection of "salary_accounts" */
export type Salary_Accounts_Aggregate = {
  __typename?: 'salary_accounts_aggregate';
  aggregate?: Maybe<Salary_Accounts_Aggregate_Fields>;
  nodes: Array<Salary_Accounts>;
};

/** aggregate fields of "salary_accounts" */
export type Salary_Accounts_Aggregate_Fields = {
  __typename?: 'salary_accounts_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Salary_Accounts_Max_Fields>;
  min?: Maybe<Salary_Accounts_Min_Fields>;
};


/** aggregate fields of "salary_accounts" */
export type Salary_Accounts_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Salary_Accounts_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** Boolean expression to filter rows from the table "salary_accounts". All fields are combined with a logical 'AND'. */
export type Salary_Accounts_Bool_Exp = {
  _and?: InputMaybe<Array<Salary_Accounts_Bool_Exp>>;
  _not?: InputMaybe<Salary_Accounts_Bool_Exp>;
  _or?: InputMaybe<Array<Salary_Accounts_Bool_Exp>>;
  departments?: InputMaybe<Departments_Bool_Exp>;
  departmentsByOwnSalaryAccountId?: InputMaybe<Departments_Bool_Exp>;
  departmentsByOwnSalaryAccountId_aggregate?: InputMaybe<Departments_Aggregate_Bool_Exp>;
  departments_aggregate?: InputMaybe<Departments_Aggregate_Bool_Exp>;
  id?: InputMaybe<String_Comparison_Exp>;
  name?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "salary_accounts" */
export enum Salary_Accounts_Constraint {
  /** unique or primary key constraint on columns "name" */
  SalaryAccountsNameKey = 'salary_accounts_name_key',
  /** unique or primary key constraint on columns "id" */
  SalaryAccountsPkey = 'salary_accounts_pkey'
}

/** input type for inserting data into table "salary_accounts" */
export type Salary_Accounts_Insert_Input = {
  departments?: InputMaybe<Departments_Arr_Rel_Insert_Input>;
  departmentsByOwnSalaryAccountId?: InputMaybe<Departments_Arr_Rel_Insert_Input>;
  id?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Salary_Accounts_Max_Fields = {
  __typename?: 'salary_accounts_max_fields';
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};

/** aggregate min on columns */
export type Salary_Accounts_Min_Fields = {
  __typename?: 'salary_accounts_min_fields';
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};

/** response of any mutation on the table "salary_accounts" */
export type Salary_Accounts_Mutation_Response = {
  __typename?: 'salary_accounts_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Salary_Accounts>;
};

/** input type for inserting object relation for remote table "salary_accounts" */
export type Salary_Accounts_Obj_Rel_Insert_Input = {
  data: Salary_Accounts_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<Salary_Accounts_On_Conflict>;
};

/** on_conflict condition type for table "salary_accounts" */
export type Salary_Accounts_On_Conflict = {
  constraint: Salary_Accounts_Constraint;
  update_columns?: Array<Salary_Accounts_Update_Column>;
  where?: InputMaybe<Salary_Accounts_Bool_Exp>;
};

/** Ordering options when selecting data from "salary_accounts". */
export type Salary_Accounts_Order_By = {
  departmentsByOwnSalaryAccountId_aggregate?: InputMaybe<Departments_Aggregate_Order_By>;
  departments_aggregate?: InputMaybe<Departments_Aggregate_Order_By>;
  id?: InputMaybe<Order_By>;
  name?: InputMaybe<Order_By>;
};

/** primary key columns input for table: salary_accounts */
export type Salary_Accounts_Pk_Columns_Input = {
  id: Scalars['String'];
};

/** select columns of table "salary_accounts" */
export enum Salary_Accounts_Select_Column {
  /** column name */
  Id = 'id',
  /** column name */
  Name = 'name'
}

/** input type for updating data in table "salary_accounts" */
export type Salary_Accounts_Set_Input = {
  id?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
};

/** Streaming cursor of the table "salary_accounts" */
export type Salary_Accounts_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Salary_Accounts_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Salary_Accounts_Stream_Cursor_Value_Input = {
  id?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
};

/** update columns of table "salary_accounts" */
export enum Salary_Accounts_Update_Column {
  /** column name */
  Id = 'id',
  /** column name */
  Name = 'name'
}

export type Salary_Accounts_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Salary_Accounts_Set_Input>;
  /** filter the rows which have to be updated */
  where: Salary_Accounts_Bool_Exp;
};

/** columns and relationships of "salary_types" */
export type Salary_Types = {
  __typename?: 'salary_types';
  /** An array relationship */
  employees: Array<Employees>;
  /** An aggregate relationship */
  employees_aggregate: Employees_Aggregate;
  id: Scalars['String'];
  name: Scalars['String'];
  /** An array relationship */
  service_entitlements: Array<Service_Entitlement>;
  /** An aggregate relationship */
  service_entitlements_aggregate: Service_Entitlement_Aggregate;
};


/** columns and relationships of "salary_types" */
export type Salary_TypesEmployeesArgs = {
  distinct_on?: InputMaybe<Array<Employees_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Employees_Order_By>>;
  where?: InputMaybe<Employees_Bool_Exp>;
};


/** columns and relationships of "salary_types" */
export type Salary_TypesEmployees_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Employees_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Employees_Order_By>>;
  where?: InputMaybe<Employees_Bool_Exp>;
};


/** columns and relationships of "salary_types" */
export type Salary_TypesService_EntitlementsArgs = {
  distinct_on?: InputMaybe<Array<Service_Entitlement_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Service_Entitlement_Order_By>>;
  where?: InputMaybe<Service_Entitlement_Bool_Exp>;
};


/** columns and relationships of "salary_types" */
export type Salary_TypesService_Entitlements_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Service_Entitlement_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Service_Entitlement_Order_By>>;
  where?: InputMaybe<Service_Entitlement_Bool_Exp>;
};

/** aggregated selection of "salary_types" */
export type Salary_Types_Aggregate = {
  __typename?: 'salary_types_aggregate';
  aggregate?: Maybe<Salary_Types_Aggregate_Fields>;
  nodes: Array<Salary_Types>;
};

/** aggregate fields of "salary_types" */
export type Salary_Types_Aggregate_Fields = {
  __typename?: 'salary_types_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Salary_Types_Max_Fields>;
  min?: Maybe<Salary_Types_Min_Fields>;
};


/** aggregate fields of "salary_types" */
export type Salary_Types_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Salary_Types_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** Boolean expression to filter rows from the table "salary_types". All fields are combined with a logical 'AND'. */
export type Salary_Types_Bool_Exp = {
  _and?: InputMaybe<Array<Salary_Types_Bool_Exp>>;
  _not?: InputMaybe<Salary_Types_Bool_Exp>;
  _or?: InputMaybe<Array<Salary_Types_Bool_Exp>>;
  employees?: InputMaybe<Employees_Bool_Exp>;
  employees_aggregate?: InputMaybe<Employees_Aggregate_Bool_Exp>;
  id?: InputMaybe<String_Comparison_Exp>;
  name?: InputMaybe<String_Comparison_Exp>;
  service_entitlements?: InputMaybe<Service_Entitlement_Bool_Exp>;
  service_entitlements_aggregate?: InputMaybe<Service_Entitlement_Aggregate_Bool_Exp>;
};

/** unique or primary key constraints on table "salary_types" */
export enum Salary_Types_Constraint {
  /** unique or primary key constraint on columns "id" */
  SalaryTypesPkey = 'salary_types_pkey'
}

/** input type for inserting data into table "salary_types" */
export type Salary_Types_Insert_Input = {
  employees?: InputMaybe<Employees_Arr_Rel_Insert_Input>;
  id?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  service_entitlements?: InputMaybe<Service_Entitlement_Arr_Rel_Insert_Input>;
};

/** aggregate max on columns */
export type Salary_Types_Max_Fields = {
  __typename?: 'salary_types_max_fields';
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};

/** aggregate min on columns */
export type Salary_Types_Min_Fields = {
  __typename?: 'salary_types_min_fields';
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};

/** response of any mutation on the table "salary_types" */
export type Salary_Types_Mutation_Response = {
  __typename?: 'salary_types_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Salary_Types>;
};

/** input type for inserting object relation for remote table "salary_types" */
export type Salary_Types_Obj_Rel_Insert_Input = {
  data: Salary_Types_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<Salary_Types_On_Conflict>;
};

/** on_conflict condition type for table "salary_types" */
export type Salary_Types_On_Conflict = {
  constraint: Salary_Types_Constraint;
  update_columns?: Array<Salary_Types_Update_Column>;
  where?: InputMaybe<Salary_Types_Bool_Exp>;
};

/** Ordering options when selecting data from "salary_types". */
export type Salary_Types_Order_By = {
  employees_aggregate?: InputMaybe<Employees_Aggregate_Order_By>;
  id?: InputMaybe<Order_By>;
  name?: InputMaybe<Order_By>;
  service_entitlements_aggregate?: InputMaybe<Service_Entitlement_Aggregate_Order_By>;
};

/** primary key columns input for table: salary_types */
export type Salary_Types_Pk_Columns_Input = {
  id: Scalars['String'];
};

/** select columns of table "salary_types" */
export enum Salary_Types_Select_Column {
  /** column name */
  Id = 'id',
  /** column name */
  Name = 'name'
}

/** input type for updating data in table "salary_types" */
export type Salary_Types_Set_Input = {
  id?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
};

/** Streaming cursor of the table "salary_types" */
export type Salary_Types_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Salary_Types_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Salary_Types_Stream_Cursor_Value_Input = {
  id?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
};

/** update columns of table "salary_types" */
export enum Salary_Types_Update_Column {
  /** column name */
  Id = 'id',
  /** column name */
  Name = 'name'
}

export type Salary_Types_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Salary_Types_Set_Input>;
  /** filter the rows which have to be updated */
  where: Salary_Types_Bool_Exp;
};

/** columns and relationships of "salesitemsdata" */
export type Salesitemsdata = {
  __typename?: 'salesitemsdata';
  brand: Scalars['String'];
  bs_id?: Maybe<Scalars['numeric']>;
  date: Scalars['date'];
  de_from?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  income_money?: Maybe<Scalars['numeric']>;
  item_id?: Maybe<Scalars['numeric']>;
  item_name: Scalars['String'];
  last_qty?: Maybe<Scalars['Int']>;
  last_total?: Maybe<Scalars['numeric']>;
  small_class_id?: Maybe<Scalars['numeric']>;
  small_class_name?: Maybe<Scalars['String']>;
  store: Scalars['String'];
};

/** aggregated selection of "salesitemsdata" */
export type Salesitemsdata_Aggregate = {
  __typename?: 'salesitemsdata_aggregate';
  aggregate?: Maybe<Salesitemsdata_Aggregate_Fields>;
  nodes: Array<Salesitemsdata>;
};

/** aggregate fields of "salesitemsdata" */
export type Salesitemsdata_Aggregate_Fields = {
  __typename?: 'salesitemsdata_aggregate_fields';
  avg?: Maybe<Salesitemsdata_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Salesitemsdata_Max_Fields>;
  min?: Maybe<Salesitemsdata_Min_Fields>;
  stddev?: Maybe<Salesitemsdata_Stddev_Fields>;
  stddev_pop?: Maybe<Salesitemsdata_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Salesitemsdata_Stddev_Samp_Fields>;
  sum?: Maybe<Salesitemsdata_Sum_Fields>;
  var_pop?: Maybe<Salesitemsdata_Var_Pop_Fields>;
  var_samp?: Maybe<Salesitemsdata_Var_Samp_Fields>;
  variance?: Maybe<Salesitemsdata_Variance_Fields>;
};


/** aggregate fields of "salesitemsdata" */
export type Salesitemsdata_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Salesitemsdata_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** aggregate avg on columns */
export type Salesitemsdata_Avg_Fields = {
  __typename?: 'salesitemsdata_avg_fields';
  bs_id?: Maybe<Scalars['Float']>;
  income_money?: Maybe<Scalars['Float']>;
  item_id?: Maybe<Scalars['Float']>;
  last_qty?: Maybe<Scalars['Float']>;
  last_total?: Maybe<Scalars['Float']>;
  small_class_id?: Maybe<Scalars['Float']>;
};

/** Boolean expression to filter rows from the table "salesitemsdata". All fields are combined with a logical 'AND'. */
export type Salesitemsdata_Bool_Exp = {
  _and?: InputMaybe<Array<Salesitemsdata_Bool_Exp>>;
  _not?: InputMaybe<Salesitemsdata_Bool_Exp>;
  _or?: InputMaybe<Array<Salesitemsdata_Bool_Exp>>;
  brand?: InputMaybe<String_Comparison_Exp>;
  bs_id?: InputMaybe<Numeric_Comparison_Exp>;
  date?: InputMaybe<Date_Comparison_Exp>;
  de_from?: InputMaybe<String_Comparison_Exp>;
  id?: InputMaybe<String_Comparison_Exp>;
  income_money?: InputMaybe<Numeric_Comparison_Exp>;
  item_id?: InputMaybe<Numeric_Comparison_Exp>;
  item_name?: InputMaybe<String_Comparison_Exp>;
  last_qty?: InputMaybe<Int_Comparison_Exp>;
  last_total?: InputMaybe<Numeric_Comparison_Exp>;
  small_class_id?: InputMaybe<Numeric_Comparison_Exp>;
  small_class_name?: InputMaybe<String_Comparison_Exp>;
  store?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "salesitemsdata" */
export enum Salesitemsdata_Constraint {
  /** unique or primary key constraint on columns "id" */
  SalesitemsdataPrimary37 = 'salesitemsdataPRIMARY37'
}

/** input type for incrementing numeric columns in table "salesitemsdata" */
export type Salesitemsdata_Inc_Input = {
  bs_id?: InputMaybe<Scalars['numeric']>;
  income_money?: InputMaybe<Scalars['numeric']>;
  item_id?: InputMaybe<Scalars['numeric']>;
  last_qty?: InputMaybe<Scalars['Int']>;
  last_total?: InputMaybe<Scalars['numeric']>;
  small_class_id?: InputMaybe<Scalars['numeric']>;
};

/** input type for inserting data into table "salesitemsdata" */
export type Salesitemsdata_Insert_Input = {
  brand?: InputMaybe<Scalars['String']>;
  bs_id?: InputMaybe<Scalars['numeric']>;
  date?: InputMaybe<Scalars['date']>;
  de_from?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['String']>;
  income_money?: InputMaybe<Scalars['numeric']>;
  item_id?: InputMaybe<Scalars['numeric']>;
  item_name?: InputMaybe<Scalars['String']>;
  last_qty?: InputMaybe<Scalars['Int']>;
  last_total?: InputMaybe<Scalars['numeric']>;
  small_class_id?: InputMaybe<Scalars['numeric']>;
  small_class_name?: InputMaybe<Scalars['String']>;
  store?: InputMaybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Salesitemsdata_Max_Fields = {
  __typename?: 'salesitemsdata_max_fields';
  brand?: Maybe<Scalars['String']>;
  bs_id?: Maybe<Scalars['numeric']>;
  date?: Maybe<Scalars['date']>;
  de_from?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  income_money?: Maybe<Scalars['numeric']>;
  item_id?: Maybe<Scalars['numeric']>;
  item_name?: Maybe<Scalars['String']>;
  last_qty?: Maybe<Scalars['Int']>;
  last_total?: Maybe<Scalars['numeric']>;
  small_class_id?: Maybe<Scalars['numeric']>;
  small_class_name?: Maybe<Scalars['String']>;
  store?: Maybe<Scalars['String']>;
};

/** aggregate min on columns */
export type Salesitemsdata_Min_Fields = {
  __typename?: 'salesitemsdata_min_fields';
  brand?: Maybe<Scalars['String']>;
  bs_id?: Maybe<Scalars['numeric']>;
  date?: Maybe<Scalars['date']>;
  de_from?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  income_money?: Maybe<Scalars['numeric']>;
  item_id?: Maybe<Scalars['numeric']>;
  item_name?: Maybe<Scalars['String']>;
  last_qty?: Maybe<Scalars['Int']>;
  last_total?: Maybe<Scalars['numeric']>;
  small_class_id?: Maybe<Scalars['numeric']>;
  small_class_name?: Maybe<Scalars['String']>;
  store?: Maybe<Scalars['String']>;
};

/** response of any mutation on the table "salesitemsdata" */
export type Salesitemsdata_Mutation_Response = {
  __typename?: 'salesitemsdata_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Salesitemsdata>;
};

/** on_conflict condition type for table "salesitemsdata" */
export type Salesitemsdata_On_Conflict = {
  constraint: Salesitemsdata_Constraint;
  update_columns?: Array<Salesitemsdata_Update_Column>;
  where?: InputMaybe<Salesitemsdata_Bool_Exp>;
};

/** Ordering options when selecting data from "salesitemsdata". */
export type Salesitemsdata_Order_By = {
  brand?: InputMaybe<Order_By>;
  bs_id?: InputMaybe<Order_By>;
  date?: InputMaybe<Order_By>;
  de_from?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  income_money?: InputMaybe<Order_By>;
  item_id?: InputMaybe<Order_By>;
  item_name?: InputMaybe<Order_By>;
  last_qty?: InputMaybe<Order_By>;
  last_total?: InputMaybe<Order_By>;
  small_class_id?: InputMaybe<Order_By>;
  small_class_name?: InputMaybe<Order_By>;
  store?: InputMaybe<Order_By>;
};

/** primary key columns input for table: salesitemsdata */
export type Salesitemsdata_Pk_Columns_Input = {
  id: Scalars['String'];
};

/** select columns of table "salesitemsdata" */
export enum Salesitemsdata_Select_Column {
  /** column name */
  Brand = 'brand',
  /** column name */
  BsId = 'bs_id',
  /** column name */
  Date = 'date',
  /** column name */
  DeFrom = 'de_from',
  /** column name */
  Id = 'id',
  /** column name */
  IncomeMoney = 'income_money',
  /** column name */
  ItemId = 'item_id',
  /** column name */
  ItemName = 'item_name',
  /** column name */
  LastQty = 'last_qty',
  /** column name */
  LastTotal = 'last_total',
  /** column name */
  SmallClassId = 'small_class_id',
  /** column name */
  SmallClassName = 'small_class_name',
  /** column name */
  Store = 'store'
}

/** input type for updating data in table "salesitemsdata" */
export type Salesitemsdata_Set_Input = {
  brand?: InputMaybe<Scalars['String']>;
  bs_id?: InputMaybe<Scalars['numeric']>;
  date?: InputMaybe<Scalars['date']>;
  de_from?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['String']>;
  income_money?: InputMaybe<Scalars['numeric']>;
  item_id?: InputMaybe<Scalars['numeric']>;
  item_name?: InputMaybe<Scalars['String']>;
  last_qty?: InputMaybe<Scalars['Int']>;
  last_total?: InputMaybe<Scalars['numeric']>;
  small_class_id?: InputMaybe<Scalars['numeric']>;
  small_class_name?: InputMaybe<Scalars['String']>;
  store?: InputMaybe<Scalars['String']>;
};

/** aggregate stddev on columns */
export type Salesitemsdata_Stddev_Fields = {
  __typename?: 'salesitemsdata_stddev_fields';
  bs_id?: Maybe<Scalars['Float']>;
  income_money?: Maybe<Scalars['Float']>;
  item_id?: Maybe<Scalars['Float']>;
  last_qty?: Maybe<Scalars['Float']>;
  last_total?: Maybe<Scalars['Float']>;
  small_class_id?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_pop on columns */
export type Salesitemsdata_Stddev_Pop_Fields = {
  __typename?: 'salesitemsdata_stddev_pop_fields';
  bs_id?: Maybe<Scalars['Float']>;
  income_money?: Maybe<Scalars['Float']>;
  item_id?: Maybe<Scalars['Float']>;
  last_qty?: Maybe<Scalars['Float']>;
  last_total?: Maybe<Scalars['Float']>;
  small_class_id?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_samp on columns */
export type Salesitemsdata_Stddev_Samp_Fields = {
  __typename?: 'salesitemsdata_stddev_samp_fields';
  bs_id?: Maybe<Scalars['Float']>;
  income_money?: Maybe<Scalars['Float']>;
  item_id?: Maybe<Scalars['Float']>;
  last_qty?: Maybe<Scalars['Float']>;
  last_total?: Maybe<Scalars['Float']>;
  small_class_id?: Maybe<Scalars['Float']>;
};

/** Streaming cursor of the table "salesitemsdata" */
export type Salesitemsdata_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Salesitemsdata_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Salesitemsdata_Stream_Cursor_Value_Input = {
  brand?: InputMaybe<Scalars['String']>;
  bs_id?: InputMaybe<Scalars['numeric']>;
  date?: InputMaybe<Scalars['date']>;
  de_from?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['String']>;
  income_money?: InputMaybe<Scalars['numeric']>;
  item_id?: InputMaybe<Scalars['numeric']>;
  item_name?: InputMaybe<Scalars['String']>;
  last_qty?: InputMaybe<Scalars['Int']>;
  last_total?: InputMaybe<Scalars['numeric']>;
  small_class_id?: InputMaybe<Scalars['numeric']>;
  small_class_name?: InputMaybe<Scalars['String']>;
  store?: InputMaybe<Scalars['String']>;
};

/** aggregate sum on columns */
export type Salesitemsdata_Sum_Fields = {
  __typename?: 'salesitemsdata_sum_fields';
  bs_id?: Maybe<Scalars['numeric']>;
  income_money?: Maybe<Scalars['numeric']>;
  item_id?: Maybe<Scalars['numeric']>;
  last_qty?: Maybe<Scalars['Int']>;
  last_total?: Maybe<Scalars['numeric']>;
  small_class_id?: Maybe<Scalars['numeric']>;
};

/** update columns of table "salesitemsdata" */
export enum Salesitemsdata_Update_Column {
  /** column name */
  Brand = 'brand',
  /** column name */
  BsId = 'bs_id',
  /** column name */
  Date = 'date',
  /** column name */
  DeFrom = 'de_from',
  /** column name */
  Id = 'id',
  /** column name */
  IncomeMoney = 'income_money',
  /** column name */
  ItemId = 'item_id',
  /** column name */
  ItemName = 'item_name',
  /** column name */
  LastQty = 'last_qty',
  /** column name */
  LastTotal = 'last_total',
  /** column name */
  SmallClassId = 'small_class_id',
  /** column name */
  SmallClassName = 'small_class_name',
  /** column name */
  Store = 'store'
}

export type Salesitemsdata_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: InputMaybe<Salesitemsdata_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Salesitemsdata_Set_Input>;
  /** filter the rows which have to be updated */
  where: Salesitemsdata_Bool_Exp;
};

/** aggregate var_pop on columns */
export type Salesitemsdata_Var_Pop_Fields = {
  __typename?: 'salesitemsdata_var_pop_fields';
  bs_id?: Maybe<Scalars['Float']>;
  income_money?: Maybe<Scalars['Float']>;
  item_id?: Maybe<Scalars['Float']>;
  last_qty?: Maybe<Scalars['Float']>;
  last_total?: Maybe<Scalars['Float']>;
  small_class_id?: Maybe<Scalars['Float']>;
};

/** aggregate var_samp on columns */
export type Salesitemsdata_Var_Samp_Fields = {
  __typename?: 'salesitemsdata_var_samp_fields';
  bs_id?: Maybe<Scalars['Float']>;
  income_money?: Maybe<Scalars['Float']>;
  item_id?: Maybe<Scalars['Float']>;
  last_qty?: Maybe<Scalars['Float']>;
  last_total?: Maybe<Scalars['Float']>;
  small_class_id?: Maybe<Scalars['Float']>;
};

/** aggregate variance on columns */
export type Salesitemsdata_Variance_Fields = {
  __typename?: 'salesitemsdata_variance_fields';
  bs_id?: Maybe<Scalars['Float']>;
  income_money?: Maybe<Scalars['Float']>;
  item_id?: Maybe<Scalars['Float']>;
  last_qty?: Maybe<Scalars['Float']>;
  last_total?: Maybe<Scalars['Float']>;
  small_class_id?: Maybe<Scalars['Float']>;
};

/** columns and relationships of "scope_nav_sm_categories" */
export type Scope_Nav_Sm_Categories = {
  __typename?: 'scope_nav_sm_categories';
  id: Scalars['Int'];
  nav_sm_category_id?: Maybe<Scalars['Int']>;
  scope_id?: Maybe<Scalars['String']>;
};

/** aggregated selection of "scope_nav_sm_categories" */
export type Scope_Nav_Sm_Categories_Aggregate = {
  __typename?: 'scope_nav_sm_categories_aggregate';
  aggregate?: Maybe<Scope_Nav_Sm_Categories_Aggregate_Fields>;
  nodes: Array<Scope_Nav_Sm_Categories>;
};

/** aggregate fields of "scope_nav_sm_categories" */
export type Scope_Nav_Sm_Categories_Aggregate_Fields = {
  __typename?: 'scope_nav_sm_categories_aggregate_fields';
  avg?: Maybe<Scope_Nav_Sm_Categories_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Scope_Nav_Sm_Categories_Max_Fields>;
  min?: Maybe<Scope_Nav_Sm_Categories_Min_Fields>;
  stddev?: Maybe<Scope_Nav_Sm_Categories_Stddev_Fields>;
  stddev_pop?: Maybe<Scope_Nav_Sm_Categories_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Scope_Nav_Sm_Categories_Stddev_Samp_Fields>;
  sum?: Maybe<Scope_Nav_Sm_Categories_Sum_Fields>;
  var_pop?: Maybe<Scope_Nav_Sm_Categories_Var_Pop_Fields>;
  var_samp?: Maybe<Scope_Nav_Sm_Categories_Var_Samp_Fields>;
  variance?: Maybe<Scope_Nav_Sm_Categories_Variance_Fields>;
};


/** aggregate fields of "scope_nav_sm_categories" */
export type Scope_Nav_Sm_Categories_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Scope_Nav_Sm_Categories_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** aggregate avg on columns */
export type Scope_Nav_Sm_Categories_Avg_Fields = {
  __typename?: 'scope_nav_sm_categories_avg_fields';
  id?: Maybe<Scalars['Float']>;
  nav_sm_category_id?: Maybe<Scalars['Float']>;
};

/** Boolean expression to filter rows from the table "scope_nav_sm_categories". All fields are combined with a logical 'AND'. */
export type Scope_Nav_Sm_Categories_Bool_Exp = {
  _and?: InputMaybe<Array<Scope_Nav_Sm_Categories_Bool_Exp>>;
  _not?: InputMaybe<Scope_Nav_Sm_Categories_Bool_Exp>;
  _or?: InputMaybe<Array<Scope_Nav_Sm_Categories_Bool_Exp>>;
  id?: InputMaybe<Int_Comparison_Exp>;
  nav_sm_category_id?: InputMaybe<Int_Comparison_Exp>;
  scope_id?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "scope_nav_sm_categories" */
export enum Scope_Nav_Sm_Categories_Constraint {
  /** unique or primary key constraint on columns "id" */
  ScopeNavSmCategoriesPrimary38 = 'scope_nav_sm_categoriesPRIMARY38'
}

/** input type for incrementing numeric columns in table "scope_nav_sm_categories" */
export type Scope_Nav_Sm_Categories_Inc_Input = {
  id?: InputMaybe<Scalars['Int']>;
  nav_sm_category_id?: InputMaybe<Scalars['Int']>;
};

/** input type for inserting data into table "scope_nav_sm_categories" */
export type Scope_Nav_Sm_Categories_Insert_Input = {
  id?: InputMaybe<Scalars['Int']>;
  nav_sm_category_id?: InputMaybe<Scalars['Int']>;
  scope_id?: InputMaybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Scope_Nav_Sm_Categories_Max_Fields = {
  __typename?: 'scope_nav_sm_categories_max_fields';
  id?: Maybe<Scalars['Int']>;
  nav_sm_category_id?: Maybe<Scalars['Int']>;
  scope_id?: Maybe<Scalars['String']>;
};

/** aggregate min on columns */
export type Scope_Nav_Sm_Categories_Min_Fields = {
  __typename?: 'scope_nav_sm_categories_min_fields';
  id?: Maybe<Scalars['Int']>;
  nav_sm_category_id?: Maybe<Scalars['Int']>;
  scope_id?: Maybe<Scalars['String']>;
};

/** response of any mutation on the table "scope_nav_sm_categories" */
export type Scope_Nav_Sm_Categories_Mutation_Response = {
  __typename?: 'scope_nav_sm_categories_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Scope_Nav_Sm_Categories>;
};

/** on_conflict condition type for table "scope_nav_sm_categories" */
export type Scope_Nav_Sm_Categories_On_Conflict = {
  constraint: Scope_Nav_Sm_Categories_Constraint;
  update_columns?: Array<Scope_Nav_Sm_Categories_Update_Column>;
  where?: InputMaybe<Scope_Nav_Sm_Categories_Bool_Exp>;
};

/** Ordering options when selecting data from "scope_nav_sm_categories". */
export type Scope_Nav_Sm_Categories_Order_By = {
  id?: InputMaybe<Order_By>;
  nav_sm_category_id?: InputMaybe<Order_By>;
  scope_id?: InputMaybe<Order_By>;
};

/** primary key columns input for table: scope_nav_sm_categories */
export type Scope_Nav_Sm_Categories_Pk_Columns_Input = {
  id: Scalars['Int'];
};

/** select columns of table "scope_nav_sm_categories" */
export enum Scope_Nav_Sm_Categories_Select_Column {
  /** column name */
  Id = 'id',
  /** column name */
  NavSmCategoryId = 'nav_sm_category_id',
  /** column name */
  ScopeId = 'scope_id'
}

/** input type for updating data in table "scope_nav_sm_categories" */
export type Scope_Nav_Sm_Categories_Set_Input = {
  id?: InputMaybe<Scalars['Int']>;
  nav_sm_category_id?: InputMaybe<Scalars['Int']>;
  scope_id?: InputMaybe<Scalars['String']>;
};

/** aggregate stddev on columns */
export type Scope_Nav_Sm_Categories_Stddev_Fields = {
  __typename?: 'scope_nav_sm_categories_stddev_fields';
  id?: Maybe<Scalars['Float']>;
  nav_sm_category_id?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_pop on columns */
export type Scope_Nav_Sm_Categories_Stddev_Pop_Fields = {
  __typename?: 'scope_nav_sm_categories_stddev_pop_fields';
  id?: Maybe<Scalars['Float']>;
  nav_sm_category_id?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_samp on columns */
export type Scope_Nav_Sm_Categories_Stddev_Samp_Fields = {
  __typename?: 'scope_nav_sm_categories_stddev_samp_fields';
  id?: Maybe<Scalars['Float']>;
  nav_sm_category_id?: Maybe<Scalars['Float']>;
};

/** Streaming cursor of the table "scope_nav_sm_categories" */
export type Scope_Nav_Sm_Categories_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Scope_Nav_Sm_Categories_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Scope_Nav_Sm_Categories_Stream_Cursor_Value_Input = {
  id?: InputMaybe<Scalars['Int']>;
  nav_sm_category_id?: InputMaybe<Scalars['Int']>;
  scope_id?: InputMaybe<Scalars['String']>;
};

/** aggregate sum on columns */
export type Scope_Nav_Sm_Categories_Sum_Fields = {
  __typename?: 'scope_nav_sm_categories_sum_fields';
  id?: Maybe<Scalars['Int']>;
  nav_sm_category_id?: Maybe<Scalars['Int']>;
};

/** update columns of table "scope_nav_sm_categories" */
export enum Scope_Nav_Sm_Categories_Update_Column {
  /** column name */
  Id = 'id',
  /** column name */
  NavSmCategoryId = 'nav_sm_category_id',
  /** column name */
  ScopeId = 'scope_id'
}

export type Scope_Nav_Sm_Categories_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: InputMaybe<Scope_Nav_Sm_Categories_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Scope_Nav_Sm_Categories_Set_Input>;
  /** filter the rows which have to be updated */
  where: Scope_Nav_Sm_Categories_Bool_Exp;
};

/** aggregate var_pop on columns */
export type Scope_Nav_Sm_Categories_Var_Pop_Fields = {
  __typename?: 'scope_nav_sm_categories_var_pop_fields';
  id?: Maybe<Scalars['Float']>;
  nav_sm_category_id?: Maybe<Scalars['Float']>;
};

/** aggregate var_samp on columns */
export type Scope_Nav_Sm_Categories_Var_Samp_Fields = {
  __typename?: 'scope_nav_sm_categories_var_samp_fields';
  id?: Maybe<Scalars['Float']>;
  nav_sm_category_id?: Maybe<Scalars['Float']>;
};

/** aggregate variance on columns */
export type Scope_Nav_Sm_Categories_Variance_Fields = {
  __typename?: 'scope_nav_sm_categories_variance_fields';
  id?: Maybe<Scalars['Float']>;
  nav_sm_category_id?: Maybe<Scalars['Float']>;
};

/** columns and relationships of "scopes" */
export type Scopes = {
  __typename?: 'scopes';
  id: Scalars['String'];
  name?: Maybe<Scalars['String']>;
  parent_scope_id?: Maybe<Scalars['String']>;
  /** An array relationship */
  role_scopes: Array<Role_Scope>;
  /** An aggregate relationship */
  role_scopes_aggregate: Role_Scope_Aggregate;
};


/** columns and relationships of "scopes" */
export type ScopesRole_ScopesArgs = {
  distinct_on?: InputMaybe<Array<Role_Scope_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Role_Scope_Order_By>>;
  where?: InputMaybe<Role_Scope_Bool_Exp>;
};


/** columns and relationships of "scopes" */
export type ScopesRole_Scopes_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Role_Scope_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Role_Scope_Order_By>>;
  where?: InputMaybe<Role_Scope_Bool_Exp>;
};

/** aggregated selection of "scopes" */
export type Scopes_Aggregate = {
  __typename?: 'scopes_aggregate';
  aggregate?: Maybe<Scopes_Aggregate_Fields>;
  nodes: Array<Scopes>;
};

/** aggregate fields of "scopes" */
export type Scopes_Aggregate_Fields = {
  __typename?: 'scopes_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Scopes_Max_Fields>;
  min?: Maybe<Scopes_Min_Fields>;
};


/** aggregate fields of "scopes" */
export type Scopes_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Scopes_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** Boolean expression to filter rows from the table "scopes". All fields are combined with a logical 'AND'. */
export type Scopes_Bool_Exp = {
  _and?: InputMaybe<Array<Scopes_Bool_Exp>>;
  _not?: InputMaybe<Scopes_Bool_Exp>;
  _or?: InputMaybe<Array<Scopes_Bool_Exp>>;
  id?: InputMaybe<String_Comparison_Exp>;
  name?: InputMaybe<String_Comparison_Exp>;
  parent_scope_id?: InputMaybe<String_Comparison_Exp>;
  role_scopes?: InputMaybe<Role_Scope_Bool_Exp>;
  role_scopes_aggregate?: InputMaybe<Role_Scope_Aggregate_Bool_Exp>;
};

/** unique or primary key constraints on table "scopes" */
export enum Scopes_Constraint {
  /** unique or primary key constraint on columns "id" */
  ScopesPrimary39 = 'scopesPRIMARY39'
}

/** input type for inserting data into table "scopes" */
export type Scopes_Insert_Input = {
  id?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  parent_scope_id?: InputMaybe<Scalars['String']>;
  role_scopes?: InputMaybe<Role_Scope_Arr_Rel_Insert_Input>;
};

/** aggregate max on columns */
export type Scopes_Max_Fields = {
  __typename?: 'scopes_max_fields';
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  parent_scope_id?: Maybe<Scalars['String']>;
};

/** aggregate min on columns */
export type Scopes_Min_Fields = {
  __typename?: 'scopes_min_fields';
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  parent_scope_id?: Maybe<Scalars['String']>;
};

/** response of any mutation on the table "scopes" */
export type Scopes_Mutation_Response = {
  __typename?: 'scopes_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Scopes>;
};

/** input type for inserting object relation for remote table "scopes" */
export type Scopes_Obj_Rel_Insert_Input = {
  data: Scopes_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<Scopes_On_Conflict>;
};

/** on_conflict condition type for table "scopes" */
export type Scopes_On_Conflict = {
  constraint: Scopes_Constraint;
  update_columns?: Array<Scopes_Update_Column>;
  where?: InputMaybe<Scopes_Bool_Exp>;
};

/** Ordering options when selecting data from "scopes". */
export type Scopes_Order_By = {
  id?: InputMaybe<Order_By>;
  name?: InputMaybe<Order_By>;
  parent_scope_id?: InputMaybe<Order_By>;
  role_scopes_aggregate?: InputMaybe<Role_Scope_Aggregate_Order_By>;
};

/** primary key columns input for table: scopes */
export type Scopes_Pk_Columns_Input = {
  id: Scalars['String'];
};

/** select columns of table "scopes" */
export enum Scopes_Select_Column {
  /** column name */
  Id = 'id',
  /** column name */
  Name = 'name',
  /** column name */
  ParentScopeId = 'parent_scope_id'
}

/** input type for updating data in table "scopes" */
export type Scopes_Set_Input = {
  id?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  parent_scope_id?: InputMaybe<Scalars['String']>;
};

/** Streaming cursor of the table "scopes" */
export type Scopes_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Scopes_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Scopes_Stream_Cursor_Value_Input = {
  id?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  parent_scope_id?: InputMaybe<Scalars['String']>;
};

/** update columns of table "scopes" */
export enum Scopes_Update_Column {
  /** column name */
  Id = 'id',
  /** column name */
  Name = 'name',
  /** column name */
  ParentScopeId = 'parent_scope_id'
}

export type Scopes_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Scopes_Set_Input>;
  /** filter the rows which have to be updated */
  where: Scopes_Bool_Exp;
};

/** columns and relationships of "service_entitlement" */
export type Service_Entitlement = {
  __typename?: 'service_entitlement';
  id: Scalars['String'];
  /** An object relationship */
  leave_type: Leave_Types;
  leave_type_id: Scalars['String'];
  max_days: Scalars['numeric'];
  /** An object relationship */
  salary_type?: Maybe<Salary_Types>;
  salary_type_id?: Maybe<Scalars['String']>;
  years_of_service: Scalars['Int'];
};

/** aggregated selection of "service_entitlement" */
export type Service_Entitlement_Aggregate = {
  __typename?: 'service_entitlement_aggregate';
  aggregate?: Maybe<Service_Entitlement_Aggregate_Fields>;
  nodes: Array<Service_Entitlement>;
};

export type Service_Entitlement_Aggregate_Bool_Exp = {
  count?: InputMaybe<Service_Entitlement_Aggregate_Bool_Exp_Count>;
};

export type Service_Entitlement_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<Service_Entitlement_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<Service_Entitlement_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "service_entitlement" */
export type Service_Entitlement_Aggregate_Fields = {
  __typename?: 'service_entitlement_aggregate_fields';
  avg?: Maybe<Service_Entitlement_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Service_Entitlement_Max_Fields>;
  min?: Maybe<Service_Entitlement_Min_Fields>;
  stddev?: Maybe<Service_Entitlement_Stddev_Fields>;
  stddev_pop?: Maybe<Service_Entitlement_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Service_Entitlement_Stddev_Samp_Fields>;
  sum?: Maybe<Service_Entitlement_Sum_Fields>;
  var_pop?: Maybe<Service_Entitlement_Var_Pop_Fields>;
  var_samp?: Maybe<Service_Entitlement_Var_Samp_Fields>;
  variance?: Maybe<Service_Entitlement_Variance_Fields>;
};


/** aggregate fields of "service_entitlement" */
export type Service_Entitlement_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Service_Entitlement_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "service_entitlement" */
export type Service_Entitlement_Aggregate_Order_By = {
  avg?: InputMaybe<Service_Entitlement_Avg_Order_By>;
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<Service_Entitlement_Max_Order_By>;
  min?: InputMaybe<Service_Entitlement_Min_Order_By>;
  stddev?: InputMaybe<Service_Entitlement_Stddev_Order_By>;
  stddev_pop?: InputMaybe<Service_Entitlement_Stddev_Pop_Order_By>;
  stddev_samp?: InputMaybe<Service_Entitlement_Stddev_Samp_Order_By>;
  sum?: InputMaybe<Service_Entitlement_Sum_Order_By>;
  var_pop?: InputMaybe<Service_Entitlement_Var_Pop_Order_By>;
  var_samp?: InputMaybe<Service_Entitlement_Var_Samp_Order_By>;
  variance?: InputMaybe<Service_Entitlement_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "service_entitlement" */
export type Service_Entitlement_Arr_Rel_Insert_Input = {
  data: Array<Service_Entitlement_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<Service_Entitlement_On_Conflict>;
};

/** aggregate avg on columns */
export type Service_Entitlement_Avg_Fields = {
  __typename?: 'service_entitlement_avg_fields';
  max_days?: Maybe<Scalars['Float']>;
  years_of_service?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "service_entitlement" */
export type Service_Entitlement_Avg_Order_By = {
  max_days?: InputMaybe<Order_By>;
  years_of_service?: InputMaybe<Order_By>;
};

/** Boolean expression to filter rows from the table "service_entitlement". All fields are combined with a logical 'AND'. */
export type Service_Entitlement_Bool_Exp = {
  _and?: InputMaybe<Array<Service_Entitlement_Bool_Exp>>;
  _not?: InputMaybe<Service_Entitlement_Bool_Exp>;
  _or?: InputMaybe<Array<Service_Entitlement_Bool_Exp>>;
  id?: InputMaybe<String_Comparison_Exp>;
  leave_type?: InputMaybe<Leave_Types_Bool_Exp>;
  leave_type_id?: InputMaybe<String_Comparison_Exp>;
  max_days?: InputMaybe<Numeric_Comparison_Exp>;
  salary_type?: InputMaybe<Salary_Types_Bool_Exp>;
  salary_type_id?: InputMaybe<String_Comparison_Exp>;
  years_of_service?: InputMaybe<Int_Comparison_Exp>;
};

/** unique or primary key constraints on table "service_entitlement" */
export enum Service_Entitlement_Constraint {
  /** unique or primary key constraint on columns "id" */
  ServiceEntitlementPkey = 'service_entitlement_pkey'
}

/** input type for incrementing numeric columns in table "service_entitlement" */
export type Service_Entitlement_Inc_Input = {
  max_days?: InputMaybe<Scalars['numeric']>;
  years_of_service?: InputMaybe<Scalars['Int']>;
};

/** input type for inserting data into table "service_entitlement" */
export type Service_Entitlement_Insert_Input = {
  id?: InputMaybe<Scalars['String']>;
  leave_type?: InputMaybe<Leave_Types_Obj_Rel_Insert_Input>;
  leave_type_id?: InputMaybe<Scalars['String']>;
  max_days?: InputMaybe<Scalars['numeric']>;
  salary_type?: InputMaybe<Salary_Types_Obj_Rel_Insert_Input>;
  salary_type_id?: InputMaybe<Scalars['String']>;
  years_of_service?: InputMaybe<Scalars['Int']>;
};

/** aggregate max on columns */
export type Service_Entitlement_Max_Fields = {
  __typename?: 'service_entitlement_max_fields';
  id?: Maybe<Scalars['String']>;
  leave_type_id?: Maybe<Scalars['String']>;
  max_days?: Maybe<Scalars['numeric']>;
  salary_type_id?: Maybe<Scalars['String']>;
  years_of_service?: Maybe<Scalars['Int']>;
};

/** order by max() on columns of table "service_entitlement" */
export type Service_Entitlement_Max_Order_By = {
  id?: InputMaybe<Order_By>;
  leave_type_id?: InputMaybe<Order_By>;
  max_days?: InputMaybe<Order_By>;
  salary_type_id?: InputMaybe<Order_By>;
  years_of_service?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type Service_Entitlement_Min_Fields = {
  __typename?: 'service_entitlement_min_fields';
  id?: Maybe<Scalars['String']>;
  leave_type_id?: Maybe<Scalars['String']>;
  max_days?: Maybe<Scalars['numeric']>;
  salary_type_id?: Maybe<Scalars['String']>;
  years_of_service?: Maybe<Scalars['Int']>;
};

/** order by min() on columns of table "service_entitlement" */
export type Service_Entitlement_Min_Order_By = {
  id?: InputMaybe<Order_By>;
  leave_type_id?: InputMaybe<Order_By>;
  max_days?: InputMaybe<Order_By>;
  salary_type_id?: InputMaybe<Order_By>;
  years_of_service?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "service_entitlement" */
export type Service_Entitlement_Mutation_Response = {
  __typename?: 'service_entitlement_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Service_Entitlement>;
};

/** on_conflict condition type for table "service_entitlement" */
export type Service_Entitlement_On_Conflict = {
  constraint: Service_Entitlement_Constraint;
  update_columns?: Array<Service_Entitlement_Update_Column>;
  where?: InputMaybe<Service_Entitlement_Bool_Exp>;
};

/** Ordering options when selecting data from "service_entitlement". */
export type Service_Entitlement_Order_By = {
  id?: InputMaybe<Order_By>;
  leave_type?: InputMaybe<Leave_Types_Order_By>;
  leave_type_id?: InputMaybe<Order_By>;
  max_days?: InputMaybe<Order_By>;
  salary_type?: InputMaybe<Salary_Types_Order_By>;
  salary_type_id?: InputMaybe<Order_By>;
  years_of_service?: InputMaybe<Order_By>;
};

/** primary key columns input for table: service_entitlement */
export type Service_Entitlement_Pk_Columns_Input = {
  id: Scalars['String'];
};

/** select columns of table "service_entitlement" */
export enum Service_Entitlement_Select_Column {
  /** column name */
  Id = 'id',
  /** column name */
  LeaveTypeId = 'leave_type_id',
  /** column name */
  MaxDays = 'max_days',
  /** column name */
  SalaryTypeId = 'salary_type_id',
  /** column name */
  YearsOfService = 'years_of_service'
}

/** input type for updating data in table "service_entitlement" */
export type Service_Entitlement_Set_Input = {
  id?: InputMaybe<Scalars['String']>;
  leave_type_id?: InputMaybe<Scalars['String']>;
  max_days?: InputMaybe<Scalars['numeric']>;
  salary_type_id?: InputMaybe<Scalars['String']>;
  years_of_service?: InputMaybe<Scalars['Int']>;
};

/** aggregate stddev on columns */
export type Service_Entitlement_Stddev_Fields = {
  __typename?: 'service_entitlement_stddev_fields';
  max_days?: Maybe<Scalars['Float']>;
  years_of_service?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "service_entitlement" */
export type Service_Entitlement_Stddev_Order_By = {
  max_days?: InputMaybe<Order_By>;
  years_of_service?: InputMaybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Service_Entitlement_Stddev_Pop_Fields = {
  __typename?: 'service_entitlement_stddev_pop_fields';
  max_days?: Maybe<Scalars['Float']>;
  years_of_service?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "service_entitlement" */
export type Service_Entitlement_Stddev_Pop_Order_By = {
  max_days?: InputMaybe<Order_By>;
  years_of_service?: InputMaybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Service_Entitlement_Stddev_Samp_Fields = {
  __typename?: 'service_entitlement_stddev_samp_fields';
  max_days?: Maybe<Scalars['Float']>;
  years_of_service?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "service_entitlement" */
export type Service_Entitlement_Stddev_Samp_Order_By = {
  max_days?: InputMaybe<Order_By>;
  years_of_service?: InputMaybe<Order_By>;
};

/** Streaming cursor of the table "service_entitlement" */
export type Service_Entitlement_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Service_Entitlement_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Service_Entitlement_Stream_Cursor_Value_Input = {
  id?: InputMaybe<Scalars['String']>;
  leave_type_id?: InputMaybe<Scalars['String']>;
  max_days?: InputMaybe<Scalars['numeric']>;
  salary_type_id?: InputMaybe<Scalars['String']>;
  years_of_service?: InputMaybe<Scalars['Int']>;
};

/** aggregate sum on columns */
export type Service_Entitlement_Sum_Fields = {
  __typename?: 'service_entitlement_sum_fields';
  max_days?: Maybe<Scalars['numeric']>;
  years_of_service?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "service_entitlement" */
export type Service_Entitlement_Sum_Order_By = {
  max_days?: InputMaybe<Order_By>;
  years_of_service?: InputMaybe<Order_By>;
};

/** update columns of table "service_entitlement" */
export enum Service_Entitlement_Update_Column {
  /** column name */
  Id = 'id',
  /** column name */
  LeaveTypeId = 'leave_type_id',
  /** column name */
  MaxDays = 'max_days',
  /** column name */
  SalaryTypeId = 'salary_type_id',
  /** column name */
  YearsOfService = 'years_of_service'
}

export type Service_Entitlement_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: InputMaybe<Service_Entitlement_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Service_Entitlement_Set_Input>;
  /** filter the rows which have to be updated */
  where: Service_Entitlement_Bool_Exp;
};

/** aggregate var_pop on columns */
export type Service_Entitlement_Var_Pop_Fields = {
  __typename?: 'service_entitlement_var_pop_fields';
  max_days?: Maybe<Scalars['Float']>;
  years_of_service?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "service_entitlement" */
export type Service_Entitlement_Var_Pop_Order_By = {
  max_days?: InputMaybe<Order_By>;
  years_of_service?: InputMaybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Service_Entitlement_Var_Samp_Fields = {
  __typename?: 'service_entitlement_var_samp_fields';
  max_days?: Maybe<Scalars['Float']>;
  years_of_service?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "service_entitlement" */
export type Service_Entitlement_Var_Samp_Order_By = {
  max_days?: InputMaybe<Order_By>;
  years_of_service?: InputMaybe<Order_By>;
};

/** aggregate variance on columns */
export type Service_Entitlement_Variance_Fields = {
  __typename?: 'service_entitlement_variance_fields';
  max_days?: Maybe<Scalars['Float']>;
  years_of_service?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "service_entitlement" */
export type Service_Entitlement_Variance_Order_By = {
  max_days?: InputMaybe<Order_By>;
  years_of_service?: InputMaybe<Order_By>;
};

/** columns and relationships of "settledetails" */
export type Settledetails = {
  __typename?: 'settledetails';
  /** An object relationship */
  bill?: Maybe<Bills>;
  bs_id?: Maybe<Scalars['bigint']>;
  card_no?: Maybe<Scalars['String']>;
  consumer_code?: Maybe<Scalars['String']>;
  consumer_name?: Maybe<Scalars['String']>;
  crm_mobile?: Maybe<Scalars['String']>;
  delflg?: Maybe<Scalars['Int']>;
  income_money?: Maybe<Scalars['numeric']>;
  modify_time?: Maybe<Scalars['bigint']>;
  not_income_money?: Maybe<Scalars['numeric']>;
  pay_money?: Maybe<Scalars['numeric']>;
  payway_code?: Maybe<Scalars['String']>;
  payway_id?: Maybe<Scalars['bigint']>;
  payway_name?: Maybe<Scalars['String']>;
  payway_out_code?: Maybe<Scalars['String']>;
  pw_id: Scalars['bigint'];
  settle_state?: Maybe<Scalars['Int']>;
  ts_id?: Maybe<Scalars['bigint']>;
};

/** aggregated selection of "settledetails" */
export type Settledetails_Aggregate = {
  __typename?: 'settledetails_aggregate';
  aggregate?: Maybe<Settledetails_Aggregate_Fields>;
  nodes: Array<Settledetails>;
};

export type Settledetails_Aggregate_Bool_Exp = {
  count?: InputMaybe<Settledetails_Aggregate_Bool_Exp_Count>;
};

export type Settledetails_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<Settledetails_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<Settledetails_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "settledetails" */
export type Settledetails_Aggregate_Fields = {
  __typename?: 'settledetails_aggregate_fields';
  avg?: Maybe<Settledetails_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Settledetails_Max_Fields>;
  min?: Maybe<Settledetails_Min_Fields>;
  stddev?: Maybe<Settledetails_Stddev_Fields>;
  stddev_pop?: Maybe<Settledetails_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Settledetails_Stddev_Samp_Fields>;
  sum?: Maybe<Settledetails_Sum_Fields>;
  var_pop?: Maybe<Settledetails_Var_Pop_Fields>;
  var_samp?: Maybe<Settledetails_Var_Samp_Fields>;
  variance?: Maybe<Settledetails_Variance_Fields>;
};


/** aggregate fields of "settledetails" */
export type Settledetails_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Settledetails_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "settledetails" */
export type Settledetails_Aggregate_Order_By = {
  avg?: InputMaybe<Settledetails_Avg_Order_By>;
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<Settledetails_Max_Order_By>;
  min?: InputMaybe<Settledetails_Min_Order_By>;
  stddev?: InputMaybe<Settledetails_Stddev_Order_By>;
  stddev_pop?: InputMaybe<Settledetails_Stddev_Pop_Order_By>;
  stddev_samp?: InputMaybe<Settledetails_Stddev_Samp_Order_By>;
  sum?: InputMaybe<Settledetails_Sum_Order_By>;
  var_pop?: InputMaybe<Settledetails_Var_Pop_Order_By>;
  var_samp?: InputMaybe<Settledetails_Var_Samp_Order_By>;
  variance?: InputMaybe<Settledetails_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "settledetails" */
export type Settledetails_Arr_Rel_Insert_Input = {
  data: Array<Settledetails_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<Settledetails_On_Conflict>;
};

/** aggregate avg on columns */
export type Settledetails_Avg_Fields = {
  __typename?: 'settledetails_avg_fields';
  bs_id?: Maybe<Scalars['Float']>;
  delflg?: Maybe<Scalars['Float']>;
  income_money?: Maybe<Scalars['Float']>;
  modify_time?: Maybe<Scalars['Float']>;
  not_income_money?: Maybe<Scalars['Float']>;
  pay_money?: Maybe<Scalars['Float']>;
  payway_id?: Maybe<Scalars['Float']>;
  pw_id?: Maybe<Scalars['Float']>;
  settle_state?: Maybe<Scalars['Float']>;
  ts_id?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "settledetails" */
export type Settledetails_Avg_Order_By = {
  bs_id?: InputMaybe<Order_By>;
  delflg?: InputMaybe<Order_By>;
  income_money?: InputMaybe<Order_By>;
  modify_time?: InputMaybe<Order_By>;
  not_income_money?: InputMaybe<Order_By>;
  pay_money?: InputMaybe<Order_By>;
  payway_id?: InputMaybe<Order_By>;
  pw_id?: InputMaybe<Order_By>;
  settle_state?: InputMaybe<Order_By>;
  ts_id?: InputMaybe<Order_By>;
};

/** Boolean expression to filter rows from the table "settledetails". All fields are combined with a logical 'AND'. */
export type Settledetails_Bool_Exp = {
  _and?: InputMaybe<Array<Settledetails_Bool_Exp>>;
  _not?: InputMaybe<Settledetails_Bool_Exp>;
  _or?: InputMaybe<Array<Settledetails_Bool_Exp>>;
  bill?: InputMaybe<Bills_Bool_Exp>;
  bs_id?: InputMaybe<Bigint_Comparison_Exp>;
  card_no?: InputMaybe<String_Comparison_Exp>;
  consumer_code?: InputMaybe<String_Comparison_Exp>;
  consumer_name?: InputMaybe<String_Comparison_Exp>;
  crm_mobile?: InputMaybe<String_Comparison_Exp>;
  delflg?: InputMaybe<Int_Comparison_Exp>;
  income_money?: InputMaybe<Numeric_Comparison_Exp>;
  modify_time?: InputMaybe<Bigint_Comparison_Exp>;
  not_income_money?: InputMaybe<Numeric_Comparison_Exp>;
  pay_money?: InputMaybe<Numeric_Comparison_Exp>;
  payway_code?: InputMaybe<String_Comparison_Exp>;
  payway_id?: InputMaybe<Bigint_Comparison_Exp>;
  payway_name?: InputMaybe<String_Comparison_Exp>;
  payway_out_code?: InputMaybe<String_Comparison_Exp>;
  pw_id?: InputMaybe<Bigint_Comparison_Exp>;
  settle_state?: InputMaybe<Int_Comparison_Exp>;
  ts_id?: InputMaybe<Bigint_Comparison_Exp>;
};

/** unique or primary key constraints on table "settledetails" */
export enum Settledetails_Constraint {
  /** unique or primary key constraint on columns "pw_id" */
  SettledetailsPkey = 'settledetails_pkey'
}

/** input type for incrementing numeric columns in table "settledetails" */
export type Settledetails_Inc_Input = {
  bs_id?: InputMaybe<Scalars['bigint']>;
  delflg?: InputMaybe<Scalars['Int']>;
  income_money?: InputMaybe<Scalars['numeric']>;
  modify_time?: InputMaybe<Scalars['bigint']>;
  not_income_money?: InputMaybe<Scalars['numeric']>;
  pay_money?: InputMaybe<Scalars['numeric']>;
  payway_id?: InputMaybe<Scalars['bigint']>;
  pw_id?: InputMaybe<Scalars['bigint']>;
  settle_state?: InputMaybe<Scalars['Int']>;
  ts_id?: InputMaybe<Scalars['bigint']>;
};

/** input type for inserting data into table "settledetails" */
export type Settledetails_Insert_Input = {
  bill?: InputMaybe<Bills_Obj_Rel_Insert_Input>;
  bs_id?: InputMaybe<Scalars['bigint']>;
  card_no?: InputMaybe<Scalars['String']>;
  consumer_code?: InputMaybe<Scalars['String']>;
  consumer_name?: InputMaybe<Scalars['String']>;
  crm_mobile?: InputMaybe<Scalars['String']>;
  delflg?: InputMaybe<Scalars['Int']>;
  income_money?: InputMaybe<Scalars['numeric']>;
  modify_time?: InputMaybe<Scalars['bigint']>;
  not_income_money?: InputMaybe<Scalars['numeric']>;
  pay_money?: InputMaybe<Scalars['numeric']>;
  payway_code?: InputMaybe<Scalars['String']>;
  payway_id?: InputMaybe<Scalars['bigint']>;
  payway_name?: InputMaybe<Scalars['String']>;
  payway_out_code?: InputMaybe<Scalars['String']>;
  pw_id?: InputMaybe<Scalars['bigint']>;
  settle_state?: InputMaybe<Scalars['Int']>;
  ts_id?: InputMaybe<Scalars['bigint']>;
};

/** aggregate max on columns */
export type Settledetails_Max_Fields = {
  __typename?: 'settledetails_max_fields';
  bs_id?: Maybe<Scalars['bigint']>;
  card_no?: Maybe<Scalars['String']>;
  consumer_code?: Maybe<Scalars['String']>;
  consumer_name?: Maybe<Scalars['String']>;
  crm_mobile?: Maybe<Scalars['String']>;
  delflg?: Maybe<Scalars['Int']>;
  income_money?: Maybe<Scalars['numeric']>;
  modify_time?: Maybe<Scalars['bigint']>;
  not_income_money?: Maybe<Scalars['numeric']>;
  pay_money?: Maybe<Scalars['numeric']>;
  payway_code?: Maybe<Scalars['String']>;
  payway_id?: Maybe<Scalars['bigint']>;
  payway_name?: Maybe<Scalars['String']>;
  payway_out_code?: Maybe<Scalars['String']>;
  pw_id?: Maybe<Scalars['bigint']>;
  settle_state?: Maybe<Scalars['Int']>;
  ts_id?: Maybe<Scalars['bigint']>;
};

/** order by max() on columns of table "settledetails" */
export type Settledetails_Max_Order_By = {
  bs_id?: InputMaybe<Order_By>;
  card_no?: InputMaybe<Order_By>;
  consumer_code?: InputMaybe<Order_By>;
  consumer_name?: InputMaybe<Order_By>;
  crm_mobile?: InputMaybe<Order_By>;
  delflg?: InputMaybe<Order_By>;
  income_money?: InputMaybe<Order_By>;
  modify_time?: InputMaybe<Order_By>;
  not_income_money?: InputMaybe<Order_By>;
  pay_money?: InputMaybe<Order_By>;
  payway_code?: InputMaybe<Order_By>;
  payway_id?: InputMaybe<Order_By>;
  payway_name?: InputMaybe<Order_By>;
  payway_out_code?: InputMaybe<Order_By>;
  pw_id?: InputMaybe<Order_By>;
  settle_state?: InputMaybe<Order_By>;
  ts_id?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type Settledetails_Min_Fields = {
  __typename?: 'settledetails_min_fields';
  bs_id?: Maybe<Scalars['bigint']>;
  card_no?: Maybe<Scalars['String']>;
  consumer_code?: Maybe<Scalars['String']>;
  consumer_name?: Maybe<Scalars['String']>;
  crm_mobile?: Maybe<Scalars['String']>;
  delflg?: Maybe<Scalars['Int']>;
  income_money?: Maybe<Scalars['numeric']>;
  modify_time?: Maybe<Scalars['bigint']>;
  not_income_money?: Maybe<Scalars['numeric']>;
  pay_money?: Maybe<Scalars['numeric']>;
  payway_code?: Maybe<Scalars['String']>;
  payway_id?: Maybe<Scalars['bigint']>;
  payway_name?: Maybe<Scalars['String']>;
  payway_out_code?: Maybe<Scalars['String']>;
  pw_id?: Maybe<Scalars['bigint']>;
  settle_state?: Maybe<Scalars['Int']>;
  ts_id?: Maybe<Scalars['bigint']>;
};

/** order by min() on columns of table "settledetails" */
export type Settledetails_Min_Order_By = {
  bs_id?: InputMaybe<Order_By>;
  card_no?: InputMaybe<Order_By>;
  consumer_code?: InputMaybe<Order_By>;
  consumer_name?: InputMaybe<Order_By>;
  crm_mobile?: InputMaybe<Order_By>;
  delflg?: InputMaybe<Order_By>;
  income_money?: InputMaybe<Order_By>;
  modify_time?: InputMaybe<Order_By>;
  not_income_money?: InputMaybe<Order_By>;
  pay_money?: InputMaybe<Order_By>;
  payway_code?: InputMaybe<Order_By>;
  payway_id?: InputMaybe<Order_By>;
  payway_name?: InputMaybe<Order_By>;
  payway_out_code?: InputMaybe<Order_By>;
  pw_id?: InputMaybe<Order_By>;
  settle_state?: InputMaybe<Order_By>;
  ts_id?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "settledetails" */
export type Settledetails_Mutation_Response = {
  __typename?: 'settledetails_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Settledetails>;
};

/** on_conflict condition type for table "settledetails" */
export type Settledetails_On_Conflict = {
  constraint: Settledetails_Constraint;
  update_columns?: Array<Settledetails_Update_Column>;
  where?: InputMaybe<Settledetails_Bool_Exp>;
};

/** Ordering options when selecting data from "settledetails". */
export type Settledetails_Order_By = {
  bill?: InputMaybe<Bills_Order_By>;
  bs_id?: InputMaybe<Order_By>;
  card_no?: InputMaybe<Order_By>;
  consumer_code?: InputMaybe<Order_By>;
  consumer_name?: InputMaybe<Order_By>;
  crm_mobile?: InputMaybe<Order_By>;
  delflg?: InputMaybe<Order_By>;
  income_money?: InputMaybe<Order_By>;
  modify_time?: InputMaybe<Order_By>;
  not_income_money?: InputMaybe<Order_By>;
  pay_money?: InputMaybe<Order_By>;
  payway_code?: InputMaybe<Order_By>;
  payway_id?: InputMaybe<Order_By>;
  payway_name?: InputMaybe<Order_By>;
  payway_out_code?: InputMaybe<Order_By>;
  pw_id?: InputMaybe<Order_By>;
  settle_state?: InputMaybe<Order_By>;
  ts_id?: InputMaybe<Order_By>;
};

/** primary key columns input for table: settledetails */
export type Settledetails_Pk_Columns_Input = {
  pw_id: Scalars['bigint'];
};

/** select columns of table "settledetails" */
export enum Settledetails_Select_Column {
  /** column name */
  BsId = 'bs_id',
  /** column name */
  CardNo = 'card_no',
  /** column name */
  ConsumerCode = 'consumer_code',
  /** column name */
  ConsumerName = 'consumer_name',
  /** column name */
  CrmMobile = 'crm_mobile',
  /** column name */
  Delflg = 'delflg',
  /** column name */
  IncomeMoney = 'income_money',
  /** column name */
  ModifyTime = 'modify_time',
  /** column name */
  NotIncomeMoney = 'not_income_money',
  /** column name */
  PayMoney = 'pay_money',
  /** column name */
  PaywayCode = 'payway_code',
  /** column name */
  PaywayId = 'payway_id',
  /** column name */
  PaywayName = 'payway_name',
  /** column name */
  PaywayOutCode = 'payway_out_code',
  /** column name */
  PwId = 'pw_id',
  /** column name */
  SettleState = 'settle_state',
  /** column name */
  TsId = 'ts_id'
}

/** input type for updating data in table "settledetails" */
export type Settledetails_Set_Input = {
  bs_id?: InputMaybe<Scalars['bigint']>;
  card_no?: InputMaybe<Scalars['String']>;
  consumer_code?: InputMaybe<Scalars['String']>;
  consumer_name?: InputMaybe<Scalars['String']>;
  crm_mobile?: InputMaybe<Scalars['String']>;
  delflg?: InputMaybe<Scalars['Int']>;
  income_money?: InputMaybe<Scalars['numeric']>;
  modify_time?: InputMaybe<Scalars['bigint']>;
  not_income_money?: InputMaybe<Scalars['numeric']>;
  pay_money?: InputMaybe<Scalars['numeric']>;
  payway_code?: InputMaybe<Scalars['String']>;
  payway_id?: InputMaybe<Scalars['bigint']>;
  payway_name?: InputMaybe<Scalars['String']>;
  payway_out_code?: InputMaybe<Scalars['String']>;
  pw_id?: InputMaybe<Scalars['bigint']>;
  settle_state?: InputMaybe<Scalars['Int']>;
  ts_id?: InputMaybe<Scalars['bigint']>;
};

/** aggregate stddev on columns */
export type Settledetails_Stddev_Fields = {
  __typename?: 'settledetails_stddev_fields';
  bs_id?: Maybe<Scalars['Float']>;
  delflg?: Maybe<Scalars['Float']>;
  income_money?: Maybe<Scalars['Float']>;
  modify_time?: Maybe<Scalars['Float']>;
  not_income_money?: Maybe<Scalars['Float']>;
  pay_money?: Maybe<Scalars['Float']>;
  payway_id?: Maybe<Scalars['Float']>;
  pw_id?: Maybe<Scalars['Float']>;
  settle_state?: Maybe<Scalars['Float']>;
  ts_id?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "settledetails" */
export type Settledetails_Stddev_Order_By = {
  bs_id?: InputMaybe<Order_By>;
  delflg?: InputMaybe<Order_By>;
  income_money?: InputMaybe<Order_By>;
  modify_time?: InputMaybe<Order_By>;
  not_income_money?: InputMaybe<Order_By>;
  pay_money?: InputMaybe<Order_By>;
  payway_id?: InputMaybe<Order_By>;
  pw_id?: InputMaybe<Order_By>;
  settle_state?: InputMaybe<Order_By>;
  ts_id?: InputMaybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Settledetails_Stddev_Pop_Fields = {
  __typename?: 'settledetails_stddev_pop_fields';
  bs_id?: Maybe<Scalars['Float']>;
  delflg?: Maybe<Scalars['Float']>;
  income_money?: Maybe<Scalars['Float']>;
  modify_time?: Maybe<Scalars['Float']>;
  not_income_money?: Maybe<Scalars['Float']>;
  pay_money?: Maybe<Scalars['Float']>;
  payway_id?: Maybe<Scalars['Float']>;
  pw_id?: Maybe<Scalars['Float']>;
  settle_state?: Maybe<Scalars['Float']>;
  ts_id?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "settledetails" */
export type Settledetails_Stddev_Pop_Order_By = {
  bs_id?: InputMaybe<Order_By>;
  delflg?: InputMaybe<Order_By>;
  income_money?: InputMaybe<Order_By>;
  modify_time?: InputMaybe<Order_By>;
  not_income_money?: InputMaybe<Order_By>;
  pay_money?: InputMaybe<Order_By>;
  payway_id?: InputMaybe<Order_By>;
  pw_id?: InputMaybe<Order_By>;
  settle_state?: InputMaybe<Order_By>;
  ts_id?: InputMaybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Settledetails_Stddev_Samp_Fields = {
  __typename?: 'settledetails_stddev_samp_fields';
  bs_id?: Maybe<Scalars['Float']>;
  delflg?: Maybe<Scalars['Float']>;
  income_money?: Maybe<Scalars['Float']>;
  modify_time?: Maybe<Scalars['Float']>;
  not_income_money?: Maybe<Scalars['Float']>;
  pay_money?: Maybe<Scalars['Float']>;
  payway_id?: Maybe<Scalars['Float']>;
  pw_id?: Maybe<Scalars['Float']>;
  settle_state?: Maybe<Scalars['Float']>;
  ts_id?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "settledetails" */
export type Settledetails_Stddev_Samp_Order_By = {
  bs_id?: InputMaybe<Order_By>;
  delflg?: InputMaybe<Order_By>;
  income_money?: InputMaybe<Order_By>;
  modify_time?: InputMaybe<Order_By>;
  not_income_money?: InputMaybe<Order_By>;
  pay_money?: InputMaybe<Order_By>;
  payway_id?: InputMaybe<Order_By>;
  pw_id?: InputMaybe<Order_By>;
  settle_state?: InputMaybe<Order_By>;
  ts_id?: InputMaybe<Order_By>;
};

/** Streaming cursor of the table "settledetails" */
export type Settledetails_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Settledetails_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Settledetails_Stream_Cursor_Value_Input = {
  bs_id?: InputMaybe<Scalars['bigint']>;
  card_no?: InputMaybe<Scalars['String']>;
  consumer_code?: InputMaybe<Scalars['String']>;
  consumer_name?: InputMaybe<Scalars['String']>;
  crm_mobile?: InputMaybe<Scalars['String']>;
  delflg?: InputMaybe<Scalars['Int']>;
  income_money?: InputMaybe<Scalars['numeric']>;
  modify_time?: InputMaybe<Scalars['bigint']>;
  not_income_money?: InputMaybe<Scalars['numeric']>;
  pay_money?: InputMaybe<Scalars['numeric']>;
  payway_code?: InputMaybe<Scalars['String']>;
  payway_id?: InputMaybe<Scalars['bigint']>;
  payway_name?: InputMaybe<Scalars['String']>;
  payway_out_code?: InputMaybe<Scalars['String']>;
  pw_id?: InputMaybe<Scalars['bigint']>;
  settle_state?: InputMaybe<Scalars['Int']>;
  ts_id?: InputMaybe<Scalars['bigint']>;
};

/** aggregate sum on columns */
export type Settledetails_Sum_Fields = {
  __typename?: 'settledetails_sum_fields';
  bs_id?: Maybe<Scalars['bigint']>;
  delflg?: Maybe<Scalars['Int']>;
  income_money?: Maybe<Scalars['numeric']>;
  modify_time?: Maybe<Scalars['bigint']>;
  not_income_money?: Maybe<Scalars['numeric']>;
  pay_money?: Maybe<Scalars['numeric']>;
  payway_id?: Maybe<Scalars['bigint']>;
  pw_id?: Maybe<Scalars['bigint']>;
  settle_state?: Maybe<Scalars['Int']>;
  ts_id?: Maybe<Scalars['bigint']>;
};

/** order by sum() on columns of table "settledetails" */
export type Settledetails_Sum_Order_By = {
  bs_id?: InputMaybe<Order_By>;
  delflg?: InputMaybe<Order_By>;
  income_money?: InputMaybe<Order_By>;
  modify_time?: InputMaybe<Order_By>;
  not_income_money?: InputMaybe<Order_By>;
  pay_money?: InputMaybe<Order_By>;
  payway_id?: InputMaybe<Order_By>;
  pw_id?: InputMaybe<Order_By>;
  settle_state?: InputMaybe<Order_By>;
  ts_id?: InputMaybe<Order_By>;
};

/** update columns of table "settledetails" */
export enum Settledetails_Update_Column {
  /** column name */
  BsId = 'bs_id',
  /** column name */
  CardNo = 'card_no',
  /** column name */
  ConsumerCode = 'consumer_code',
  /** column name */
  ConsumerName = 'consumer_name',
  /** column name */
  CrmMobile = 'crm_mobile',
  /** column name */
  Delflg = 'delflg',
  /** column name */
  IncomeMoney = 'income_money',
  /** column name */
  ModifyTime = 'modify_time',
  /** column name */
  NotIncomeMoney = 'not_income_money',
  /** column name */
  PayMoney = 'pay_money',
  /** column name */
  PaywayCode = 'payway_code',
  /** column name */
  PaywayId = 'payway_id',
  /** column name */
  PaywayName = 'payway_name',
  /** column name */
  PaywayOutCode = 'payway_out_code',
  /** column name */
  PwId = 'pw_id',
  /** column name */
  SettleState = 'settle_state',
  /** column name */
  TsId = 'ts_id'
}

export type Settledetails_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: InputMaybe<Settledetails_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Settledetails_Set_Input>;
  /** filter the rows which have to be updated */
  where: Settledetails_Bool_Exp;
};

/** aggregate var_pop on columns */
export type Settledetails_Var_Pop_Fields = {
  __typename?: 'settledetails_var_pop_fields';
  bs_id?: Maybe<Scalars['Float']>;
  delflg?: Maybe<Scalars['Float']>;
  income_money?: Maybe<Scalars['Float']>;
  modify_time?: Maybe<Scalars['Float']>;
  not_income_money?: Maybe<Scalars['Float']>;
  pay_money?: Maybe<Scalars['Float']>;
  payway_id?: Maybe<Scalars['Float']>;
  pw_id?: Maybe<Scalars['Float']>;
  settle_state?: Maybe<Scalars['Float']>;
  ts_id?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "settledetails" */
export type Settledetails_Var_Pop_Order_By = {
  bs_id?: InputMaybe<Order_By>;
  delflg?: InputMaybe<Order_By>;
  income_money?: InputMaybe<Order_By>;
  modify_time?: InputMaybe<Order_By>;
  not_income_money?: InputMaybe<Order_By>;
  pay_money?: InputMaybe<Order_By>;
  payway_id?: InputMaybe<Order_By>;
  pw_id?: InputMaybe<Order_By>;
  settle_state?: InputMaybe<Order_By>;
  ts_id?: InputMaybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Settledetails_Var_Samp_Fields = {
  __typename?: 'settledetails_var_samp_fields';
  bs_id?: Maybe<Scalars['Float']>;
  delflg?: Maybe<Scalars['Float']>;
  income_money?: Maybe<Scalars['Float']>;
  modify_time?: Maybe<Scalars['Float']>;
  not_income_money?: Maybe<Scalars['Float']>;
  pay_money?: Maybe<Scalars['Float']>;
  payway_id?: Maybe<Scalars['Float']>;
  pw_id?: Maybe<Scalars['Float']>;
  settle_state?: Maybe<Scalars['Float']>;
  ts_id?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "settledetails" */
export type Settledetails_Var_Samp_Order_By = {
  bs_id?: InputMaybe<Order_By>;
  delflg?: InputMaybe<Order_By>;
  income_money?: InputMaybe<Order_By>;
  modify_time?: InputMaybe<Order_By>;
  not_income_money?: InputMaybe<Order_By>;
  pay_money?: InputMaybe<Order_By>;
  payway_id?: InputMaybe<Order_By>;
  pw_id?: InputMaybe<Order_By>;
  settle_state?: InputMaybe<Order_By>;
  ts_id?: InputMaybe<Order_By>;
};

/** aggregate variance on columns */
export type Settledetails_Variance_Fields = {
  __typename?: 'settledetails_variance_fields';
  bs_id?: Maybe<Scalars['Float']>;
  delflg?: Maybe<Scalars['Float']>;
  income_money?: Maybe<Scalars['Float']>;
  modify_time?: Maybe<Scalars['Float']>;
  not_income_money?: Maybe<Scalars['Float']>;
  pay_money?: Maybe<Scalars['Float']>;
  payway_id?: Maybe<Scalars['Float']>;
  pw_id?: Maybe<Scalars['Float']>;
  settle_state?: Maybe<Scalars['Float']>;
  ts_id?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "settledetails" */
export type Settledetails_Variance_Order_By = {
  bs_id?: InputMaybe<Order_By>;
  delflg?: InputMaybe<Order_By>;
  income_money?: InputMaybe<Order_By>;
  modify_time?: InputMaybe<Order_By>;
  not_income_money?: InputMaybe<Order_By>;
  pay_money?: InputMaybe<Order_By>;
  payway_id?: InputMaybe<Order_By>;
  pw_id?: InputMaybe<Order_By>;
  settle_state?: InputMaybe<Order_By>;
  ts_id?: InputMaybe<Order_By>;
};

/** columns and relationships of "shift_lists" */
export type Shift_Lists = {
  __typename?: 'shift_lists';
  /** An array relationship */
  attendance_group_shifts: Array<Attendance_Group_Shifts>;
  /** An aggregate relationship */
  attendance_group_shifts_aggregate: Attendance_Group_Shifts_Aggregate;
  /** An array relationship */
  attendances: Array<Attendance>;
  /** An aggregate relationship */
  attendances_aggregate: Attendance_Aggregate;
  created_at: Scalars['timestamptz'];
  created_by?: Maybe<Scalars['String']>;
  early_minutes_as_early?: Maybe<Scalars['Int']>;
  early_minutes_as_lack?: Maybe<Scalars['Int']>;
  flexible_minutes?: Maybe<Scalars['Int']>;
  id: Scalars['String'];
  is_flexible?: Maybe<Scalars['smallint']>;
  late_minutes_as_lack?: Maybe<Scalars['Int']>;
  late_minutes_as_late?: Maybe<Scalars['Int']>;
  no_need_off?: Maybe<Scalars['smallint']>;
  off_delay_minutes?: Maybe<Scalars['Int']>;
  off_time?: Maybe<Scalars['time']>;
  on_advance_minutes?: Maybe<Scalars['Int']>;
  on_time?: Maybe<Scalars['time']>;
  punch_times?: Maybe<Scalars['Int']>;
  scheduled_length_day?: Maybe<Scalars['numeric']>;
  scheduled_length_hour?: Maybe<Scalars['numeric']>;
  shift_name?: Maybe<Scalars['String']>;
  updated_at: Scalars['timestamptz'];
};


/** columns and relationships of "shift_lists" */
export type Shift_ListsAttendance_Group_ShiftsArgs = {
  distinct_on?: InputMaybe<Array<Attendance_Group_Shifts_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Attendance_Group_Shifts_Order_By>>;
  where?: InputMaybe<Attendance_Group_Shifts_Bool_Exp>;
};


/** columns and relationships of "shift_lists" */
export type Shift_ListsAttendance_Group_Shifts_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Attendance_Group_Shifts_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Attendance_Group_Shifts_Order_By>>;
  where?: InputMaybe<Attendance_Group_Shifts_Bool_Exp>;
};


/** columns and relationships of "shift_lists" */
export type Shift_ListsAttendancesArgs = {
  distinct_on?: InputMaybe<Array<Attendance_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Attendance_Order_By>>;
  where?: InputMaybe<Attendance_Bool_Exp>;
};


/** columns and relationships of "shift_lists" */
export type Shift_ListsAttendances_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Attendance_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Attendance_Order_By>>;
  where?: InputMaybe<Attendance_Bool_Exp>;
};

/** aggregated selection of "shift_lists" */
export type Shift_Lists_Aggregate = {
  __typename?: 'shift_lists_aggregate';
  aggregate?: Maybe<Shift_Lists_Aggregate_Fields>;
  nodes: Array<Shift_Lists>;
};

/** aggregate fields of "shift_lists" */
export type Shift_Lists_Aggregate_Fields = {
  __typename?: 'shift_lists_aggregate_fields';
  avg?: Maybe<Shift_Lists_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Shift_Lists_Max_Fields>;
  min?: Maybe<Shift_Lists_Min_Fields>;
  stddev?: Maybe<Shift_Lists_Stddev_Fields>;
  stddev_pop?: Maybe<Shift_Lists_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Shift_Lists_Stddev_Samp_Fields>;
  sum?: Maybe<Shift_Lists_Sum_Fields>;
  var_pop?: Maybe<Shift_Lists_Var_Pop_Fields>;
  var_samp?: Maybe<Shift_Lists_Var_Samp_Fields>;
  variance?: Maybe<Shift_Lists_Variance_Fields>;
};


/** aggregate fields of "shift_lists" */
export type Shift_Lists_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Shift_Lists_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** aggregate avg on columns */
export type Shift_Lists_Avg_Fields = {
  __typename?: 'shift_lists_avg_fields';
  early_minutes_as_early?: Maybe<Scalars['Float']>;
  early_minutes_as_lack?: Maybe<Scalars['Float']>;
  flexible_minutes?: Maybe<Scalars['Float']>;
  is_flexible?: Maybe<Scalars['Float']>;
  late_minutes_as_lack?: Maybe<Scalars['Float']>;
  late_minutes_as_late?: Maybe<Scalars['Float']>;
  no_need_off?: Maybe<Scalars['Float']>;
  off_delay_minutes?: Maybe<Scalars['Float']>;
  on_advance_minutes?: Maybe<Scalars['Float']>;
  punch_times?: Maybe<Scalars['Float']>;
  scheduled_length_day?: Maybe<Scalars['Float']>;
  scheduled_length_hour?: Maybe<Scalars['Float']>;
};

/** Boolean expression to filter rows from the table "shift_lists". All fields are combined with a logical 'AND'. */
export type Shift_Lists_Bool_Exp = {
  _and?: InputMaybe<Array<Shift_Lists_Bool_Exp>>;
  _not?: InputMaybe<Shift_Lists_Bool_Exp>;
  _or?: InputMaybe<Array<Shift_Lists_Bool_Exp>>;
  attendance_group_shifts?: InputMaybe<Attendance_Group_Shifts_Bool_Exp>;
  attendance_group_shifts_aggregate?: InputMaybe<Attendance_Group_Shifts_Aggregate_Bool_Exp>;
  attendances?: InputMaybe<Attendance_Bool_Exp>;
  attendances_aggregate?: InputMaybe<Attendance_Aggregate_Bool_Exp>;
  created_at?: InputMaybe<Timestamptz_Comparison_Exp>;
  created_by?: InputMaybe<String_Comparison_Exp>;
  early_minutes_as_early?: InputMaybe<Int_Comparison_Exp>;
  early_minutes_as_lack?: InputMaybe<Int_Comparison_Exp>;
  flexible_minutes?: InputMaybe<Int_Comparison_Exp>;
  id?: InputMaybe<String_Comparison_Exp>;
  is_flexible?: InputMaybe<Smallint_Comparison_Exp>;
  late_minutes_as_lack?: InputMaybe<Int_Comparison_Exp>;
  late_minutes_as_late?: InputMaybe<Int_Comparison_Exp>;
  no_need_off?: InputMaybe<Smallint_Comparison_Exp>;
  off_delay_minutes?: InputMaybe<Int_Comparison_Exp>;
  off_time?: InputMaybe<Time_Comparison_Exp>;
  on_advance_minutes?: InputMaybe<Int_Comparison_Exp>;
  on_time?: InputMaybe<Time_Comparison_Exp>;
  punch_times?: InputMaybe<Int_Comparison_Exp>;
  scheduled_length_day?: InputMaybe<Numeric_Comparison_Exp>;
  scheduled_length_hour?: InputMaybe<Numeric_Comparison_Exp>;
  shift_name?: InputMaybe<String_Comparison_Exp>;
  updated_at?: InputMaybe<Timestamptz_Comparison_Exp>;
};

/** unique or primary key constraints on table "shift_lists" */
export enum Shift_Lists_Constraint {
  /** unique or primary key constraint on columns "id" */
  ShiftListsPrimary41 = 'shift_listsPRIMARY41'
}

/** input type for incrementing numeric columns in table "shift_lists" */
export type Shift_Lists_Inc_Input = {
  early_minutes_as_early?: InputMaybe<Scalars['Int']>;
  early_minutes_as_lack?: InputMaybe<Scalars['Int']>;
  flexible_minutes?: InputMaybe<Scalars['Int']>;
  is_flexible?: InputMaybe<Scalars['smallint']>;
  late_minutes_as_lack?: InputMaybe<Scalars['Int']>;
  late_minutes_as_late?: InputMaybe<Scalars['Int']>;
  no_need_off?: InputMaybe<Scalars['smallint']>;
  off_delay_minutes?: InputMaybe<Scalars['Int']>;
  on_advance_minutes?: InputMaybe<Scalars['Int']>;
  punch_times?: InputMaybe<Scalars['Int']>;
  scheduled_length_day?: InputMaybe<Scalars['numeric']>;
  scheduled_length_hour?: InputMaybe<Scalars['numeric']>;
};

/** input type for inserting data into table "shift_lists" */
export type Shift_Lists_Insert_Input = {
  attendance_group_shifts?: InputMaybe<Attendance_Group_Shifts_Arr_Rel_Insert_Input>;
  attendances?: InputMaybe<Attendance_Arr_Rel_Insert_Input>;
  created_at?: InputMaybe<Scalars['timestamptz']>;
  created_by?: InputMaybe<Scalars['String']>;
  early_minutes_as_early?: InputMaybe<Scalars['Int']>;
  early_minutes_as_lack?: InputMaybe<Scalars['Int']>;
  flexible_minutes?: InputMaybe<Scalars['Int']>;
  id?: InputMaybe<Scalars['String']>;
  is_flexible?: InputMaybe<Scalars['smallint']>;
  late_minutes_as_lack?: InputMaybe<Scalars['Int']>;
  late_minutes_as_late?: InputMaybe<Scalars['Int']>;
  no_need_off?: InputMaybe<Scalars['smallint']>;
  off_delay_minutes?: InputMaybe<Scalars['Int']>;
  off_time?: InputMaybe<Scalars['time']>;
  on_advance_minutes?: InputMaybe<Scalars['Int']>;
  on_time?: InputMaybe<Scalars['time']>;
  punch_times?: InputMaybe<Scalars['Int']>;
  scheduled_length_day?: InputMaybe<Scalars['numeric']>;
  scheduled_length_hour?: InputMaybe<Scalars['numeric']>;
  shift_name?: InputMaybe<Scalars['String']>;
  updated_at?: InputMaybe<Scalars['timestamptz']>;
};

/** aggregate max on columns */
export type Shift_Lists_Max_Fields = {
  __typename?: 'shift_lists_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  created_by?: Maybe<Scalars['String']>;
  early_minutes_as_early?: Maybe<Scalars['Int']>;
  early_minutes_as_lack?: Maybe<Scalars['Int']>;
  flexible_minutes?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['String']>;
  is_flexible?: Maybe<Scalars['smallint']>;
  late_minutes_as_lack?: Maybe<Scalars['Int']>;
  late_minutes_as_late?: Maybe<Scalars['Int']>;
  no_need_off?: Maybe<Scalars['smallint']>;
  off_delay_minutes?: Maybe<Scalars['Int']>;
  on_advance_minutes?: Maybe<Scalars['Int']>;
  punch_times?: Maybe<Scalars['Int']>;
  scheduled_length_day?: Maybe<Scalars['numeric']>;
  scheduled_length_hour?: Maybe<Scalars['numeric']>;
  shift_name?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregate min on columns */
export type Shift_Lists_Min_Fields = {
  __typename?: 'shift_lists_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  created_by?: Maybe<Scalars['String']>;
  early_minutes_as_early?: Maybe<Scalars['Int']>;
  early_minutes_as_lack?: Maybe<Scalars['Int']>;
  flexible_minutes?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['String']>;
  is_flexible?: Maybe<Scalars['smallint']>;
  late_minutes_as_lack?: Maybe<Scalars['Int']>;
  late_minutes_as_late?: Maybe<Scalars['Int']>;
  no_need_off?: Maybe<Scalars['smallint']>;
  off_delay_minutes?: Maybe<Scalars['Int']>;
  on_advance_minutes?: Maybe<Scalars['Int']>;
  punch_times?: Maybe<Scalars['Int']>;
  scheduled_length_day?: Maybe<Scalars['numeric']>;
  scheduled_length_hour?: Maybe<Scalars['numeric']>;
  shift_name?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** response of any mutation on the table "shift_lists" */
export type Shift_Lists_Mutation_Response = {
  __typename?: 'shift_lists_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Shift_Lists>;
};

/** input type for inserting object relation for remote table "shift_lists" */
export type Shift_Lists_Obj_Rel_Insert_Input = {
  data: Shift_Lists_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<Shift_Lists_On_Conflict>;
};

/** on_conflict condition type for table "shift_lists" */
export type Shift_Lists_On_Conflict = {
  constraint: Shift_Lists_Constraint;
  update_columns?: Array<Shift_Lists_Update_Column>;
  where?: InputMaybe<Shift_Lists_Bool_Exp>;
};

/** Ordering options when selecting data from "shift_lists". */
export type Shift_Lists_Order_By = {
  attendance_group_shifts_aggregate?: InputMaybe<Attendance_Group_Shifts_Aggregate_Order_By>;
  attendances_aggregate?: InputMaybe<Attendance_Aggregate_Order_By>;
  created_at?: InputMaybe<Order_By>;
  created_by?: InputMaybe<Order_By>;
  early_minutes_as_early?: InputMaybe<Order_By>;
  early_minutes_as_lack?: InputMaybe<Order_By>;
  flexible_minutes?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  is_flexible?: InputMaybe<Order_By>;
  late_minutes_as_lack?: InputMaybe<Order_By>;
  late_minutes_as_late?: InputMaybe<Order_By>;
  no_need_off?: InputMaybe<Order_By>;
  off_delay_minutes?: InputMaybe<Order_By>;
  off_time?: InputMaybe<Order_By>;
  on_advance_minutes?: InputMaybe<Order_By>;
  on_time?: InputMaybe<Order_By>;
  punch_times?: InputMaybe<Order_By>;
  scheduled_length_day?: InputMaybe<Order_By>;
  scheduled_length_hour?: InputMaybe<Order_By>;
  shift_name?: InputMaybe<Order_By>;
  updated_at?: InputMaybe<Order_By>;
};

/** primary key columns input for table: shift_lists */
export type Shift_Lists_Pk_Columns_Input = {
  id: Scalars['String'];
};

/** select columns of table "shift_lists" */
export enum Shift_Lists_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  CreatedBy = 'created_by',
  /** column name */
  EarlyMinutesAsEarly = 'early_minutes_as_early',
  /** column name */
  EarlyMinutesAsLack = 'early_minutes_as_lack',
  /** column name */
  FlexibleMinutes = 'flexible_minutes',
  /** column name */
  Id = 'id',
  /** column name */
  IsFlexible = 'is_flexible',
  /** column name */
  LateMinutesAsLack = 'late_minutes_as_lack',
  /** column name */
  LateMinutesAsLate = 'late_minutes_as_late',
  /** column name */
  NoNeedOff = 'no_need_off',
  /** column name */
  OffDelayMinutes = 'off_delay_minutes',
  /** column name */
  OffTime = 'off_time',
  /** column name */
  OnAdvanceMinutes = 'on_advance_minutes',
  /** column name */
  OnTime = 'on_time',
  /** column name */
  PunchTimes = 'punch_times',
  /** column name */
  ScheduledLengthDay = 'scheduled_length_day',
  /** column name */
  ScheduledLengthHour = 'scheduled_length_hour',
  /** column name */
  ShiftName = 'shift_name',
  /** column name */
  UpdatedAt = 'updated_at'
}

/** input type for updating data in table "shift_lists" */
export type Shift_Lists_Set_Input = {
  created_at?: InputMaybe<Scalars['timestamptz']>;
  created_by?: InputMaybe<Scalars['String']>;
  early_minutes_as_early?: InputMaybe<Scalars['Int']>;
  early_minutes_as_lack?: InputMaybe<Scalars['Int']>;
  flexible_minutes?: InputMaybe<Scalars['Int']>;
  id?: InputMaybe<Scalars['String']>;
  is_flexible?: InputMaybe<Scalars['smallint']>;
  late_minutes_as_lack?: InputMaybe<Scalars['Int']>;
  late_minutes_as_late?: InputMaybe<Scalars['Int']>;
  no_need_off?: InputMaybe<Scalars['smallint']>;
  off_delay_minutes?: InputMaybe<Scalars['Int']>;
  off_time?: InputMaybe<Scalars['time']>;
  on_advance_minutes?: InputMaybe<Scalars['Int']>;
  on_time?: InputMaybe<Scalars['time']>;
  punch_times?: InputMaybe<Scalars['Int']>;
  scheduled_length_day?: InputMaybe<Scalars['numeric']>;
  scheduled_length_hour?: InputMaybe<Scalars['numeric']>;
  shift_name?: InputMaybe<Scalars['String']>;
  updated_at?: InputMaybe<Scalars['timestamptz']>;
};

/** aggregate stddev on columns */
export type Shift_Lists_Stddev_Fields = {
  __typename?: 'shift_lists_stddev_fields';
  early_minutes_as_early?: Maybe<Scalars['Float']>;
  early_minutes_as_lack?: Maybe<Scalars['Float']>;
  flexible_minutes?: Maybe<Scalars['Float']>;
  is_flexible?: Maybe<Scalars['Float']>;
  late_minutes_as_lack?: Maybe<Scalars['Float']>;
  late_minutes_as_late?: Maybe<Scalars['Float']>;
  no_need_off?: Maybe<Scalars['Float']>;
  off_delay_minutes?: Maybe<Scalars['Float']>;
  on_advance_minutes?: Maybe<Scalars['Float']>;
  punch_times?: Maybe<Scalars['Float']>;
  scheduled_length_day?: Maybe<Scalars['Float']>;
  scheduled_length_hour?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_pop on columns */
export type Shift_Lists_Stddev_Pop_Fields = {
  __typename?: 'shift_lists_stddev_pop_fields';
  early_minutes_as_early?: Maybe<Scalars['Float']>;
  early_minutes_as_lack?: Maybe<Scalars['Float']>;
  flexible_minutes?: Maybe<Scalars['Float']>;
  is_flexible?: Maybe<Scalars['Float']>;
  late_minutes_as_lack?: Maybe<Scalars['Float']>;
  late_minutes_as_late?: Maybe<Scalars['Float']>;
  no_need_off?: Maybe<Scalars['Float']>;
  off_delay_minutes?: Maybe<Scalars['Float']>;
  on_advance_minutes?: Maybe<Scalars['Float']>;
  punch_times?: Maybe<Scalars['Float']>;
  scheduled_length_day?: Maybe<Scalars['Float']>;
  scheduled_length_hour?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_samp on columns */
export type Shift_Lists_Stddev_Samp_Fields = {
  __typename?: 'shift_lists_stddev_samp_fields';
  early_minutes_as_early?: Maybe<Scalars['Float']>;
  early_minutes_as_lack?: Maybe<Scalars['Float']>;
  flexible_minutes?: Maybe<Scalars['Float']>;
  is_flexible?: Maybe<Scalars['Float']>;
  late_minutes_as_lack?: Maybe<Scalars['Float']>;
  late_minutes_as_late?: Maybe<Scalars['Float']>;
  no_need_off?: Maybe<Scalars['Float']>;
  off_delay_minutes?: Maybe<Scalars['Float']>;
  on_advance_minutes?: Maybe<Scalars['Float']>;
  punch_times?: Maybe<Scalars['Float']>;
  scheduled_length_day?: Maybe<Scalars['Float']>;
  scheduled_length_hour?: Maybe<Scalars['Float']>;
};

/** Streaming cursor of the table "shift_lists" */
export type Shift_Lists_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Shift_Lists_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Shift_Lists_Stream_Cursor_Value_Input = {
  created_at?: InputMaybe<Scalars['timestamptz']>;
  created_by?: InputMaybe<Scalars['String']>;
  early_minutes_as_early?: InputMaybe<Scalars['Int']>;
  early_minutes_as_lack?: InputMaybe<Scalars['Int']>;
  flexible_minutes?: InputMaybe<Scalars['Int']>;
  id?: InputMaybe<Scalars['String']>;
  is_flexible?: InputMaybe<Scalars['smallint']>;
  late_minutes_as_lack?: InputMaybe<Scalars['Int']>;
  late_minutes_as_late?: InputMaybe<Scalars['Int']>;
  no_need_off?: InputMaybe<Scalars['smallint']>;
  off_delay_minutes?: InputMaybe<Scalars['Int']>;
  off_time?: InputMaybe<Scalars['time']>;
  on_advance_minutes?: InputMaybe<Scalars['Int']>;
  on_time?: InputMaybe<Scalars['time']>;
  punch_times?: InputMaybe<Scalars['Int']>;
  scheduled_length_day?: InputMaybe<Scalars['numeric']>;
  scheduled_length_hour?: InputMaybe<Scalars['numeric']>;
  shift_name?: InputMaybe<Scalars['String']>;
  updated_at?: InputMaybe<Scalars['timestamptz']>;
};

/** aggregate sum on columns */
export type Shift_Lists_Sum_Fields = {
  __typename?: 'shift_lists_sum_fields';
  early_minutes_as_early?: Maybe<Scalars['Int']>;
  early_minutes_as_lack?: Maybe<Scalars['Int']>;
  flexible_minutes?: Maybe<Scalars['Int']>;
  is_flexible?: Maybe<Scalars['smallint']>;
  late_minutes_as_lack?: Maybe<Scalars['Int']>;
  late_minutes_as_late?: Maybe<Scalars['Int']>;
  no_need_off?: Maybe<Scalars['smallint']>;
  off_delay_minutes?: Maybe<Scalars['Int']>;
  on_advance_minutes?: Maybe<Scalars['Int']>;
  punch_times?: Maybe<Scalars['Int']>;
  scheduled_length_day?: Maybe<Scalars['numeric']>;
  scheduled_length_hour?: Maybe<Scalars['numeric']>;
};

/** update columns of table "shift_lists" */
export enum Shift_Lists_Update_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  CreatedBy = 'created_by',
  /** column name */
  EarlyMinutesAsEarly = 'early_minutes_as_early',
  /** column name */
  EarlyMinutesAsLack = 'early_minutes_as_lack',
  /** column name */
  FlexibleMinutes = 'flexible_minutes',
  /** column name */
  Id = 'id',
  /** column name */
  IsFlexible = 'is_flexible',
  /** column name */
  LateMinutesAsLack = 'late_minutes_as_lack',
  /** column name */
  LateMinutesAsLate = 'late_minutes_as_late',
  /** column name */
  NoNeedOff = 'no_need_off',
  /** column name */
  OffDelayMinutes = 'off_delay_minutes',
  /** column name */
  OffTime = 'off_time',
  /** column name */
  OnAdvanceMinutes = 'on_advance_minutes',
  /** column name */
  OnTime = 'on_time',
  /** column name */
  PunchTimes = 'punch_times',
  /** column name */
  ScheduledLengthDay = 'scheduled_length_day',
  /** column name */
  ScheduledLengthHour = 'scheduled_length_hour',
  /** column name */
  ShiftName = 'shift_name',
  /** column name */
  UpdatedAt = 'updated_at'
}

export type Shift_Lists_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: InputMaybe<Shift_Lists_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Shift_Lists_Set_Input>;
  /** filter the rows which have to be updated */
  where: Shift_Lists_Bool_Exp;
};

/** aggregate var_pop on columns */
export type Shift_Lists_Var_Pop_Fields = {
  __typename?: 'shift_lists_var_pop_fields';
  early_minutes_as_early?: Maybe<Scalars['Float']>;
  early_minutes_as_lack?: Maybe<Scalars['Float']>;
  flexible_minutes?: Maybe<Scalars['Float']>;
  is_flexible?: Maybe<Scalars['Float']>;
  late_minutes_as_lack?: Maybe<Scalars['Float']>;
  late_minutes_as_late?: Maybe<Scalars['Float']>;
  no_need_off?: Maybe<Scalars['Float']>;
  off_delay_minutes?: Maybe<Scalars['Float']>;
  on_advance_minutes?: Maybe<Scalars['Float']>;
  punch_times?: Maybe<Scalars['Float']>;
  scheduled_length_day?: Maybe<Scalars['Float']>;
  scheduled_length_hour?: Maybe<Scalars['Float']>;
};

/** aggregate var_samp on columns */
export type Shift_Lists_Var_Samp_Fields = {
  __typename?: 'shift_lists_var_samp_fields';
  early_minutes_as_early?: Maybe<Scalars['Float']>;
  early_minutes_as_lack?: Maybe<Scalars['Float']>;
  flexible_minutes?: Maybe<Scalars['Float']>;
  is_flexible?: Maybe<Scalars['Float']>;
  late_minutes_as_lack?: Maybe<Scalars['Float']>;
  late_minutes_as_late?: Maybe<Scalars['Float']>;
  no_need_off?: Maybe<Scalars['Float']>;
  off_delay_minutes?: Maybe<Scalars['Float']>;
  on_advance_minutes?: Maybe<Scalars['Float']>;
  punch_times?: Maybe<Scalars['Float']>;
  scheduled_length_day?: Maybe<Scalars['Float']>;
  scheduled_length_hour?: Maybe<Scalars['Float']>;
};

/** aggregate variance on columns */
export type Shift_Lists_Variance_Fields = {
  __typename?: 'shift_lists_variance_fields';
  early_minutes_as_early?: Maybe<Scalars['Float']>;
  early_minutes_as_lack?: Maybe<Scalars['Float']>;
  flexible_minutes?: Maybe<Scalars['Float']>;
  is_flexible?: Maybe<Scalars['Float']>;
  late_minutes_as_lack?: Maybe<Scalars['Float']>;
  late_minutes_as_late?: Maybe<Scalars['Float']>;
  no_need_off?: Maybe<Scalars['Float']>;
  off_delay_minutes?: Maybe<Scalars['Float']>;
  on_advance_minutes?: Maybe<Scalars['Float']>;
  punch_times?: Maybe<Scalars['Float']>;
  scheduled_length_day?: Maybe<Scalars['Float']>;
  scheduled_length_hour?: Maybe<Scalars['Float']>;
};

/** Boolean expression to compare columns of type "smallint". All fields are combined with logical 'AND'. */
export type Smallint_Comparison_Exp = {
  _eq?: InputMaybe<Scalars['smallint']>;
  _gt?: InputMaybe<Scalars['smallint']>;
  _gte?: InputMaybe<Scalars['smallint']>;
  _in?: InputMaybe<Array<Scalars['smallint']>>;
  _is_null?: InputMaybe<Scalars['Boolean']>;
  _lt?: InputMaybe<Scalars['smallint']>;
  _lte?: InputMaybe<Scalars['smallint']>;
  _neq?: InputMaybe<Scalars['smallint']>;
  _nin?: InputMaybe<Array<Scalars['smallint']>>;
};

/** columns and relationships of "solditems" */
export type Solditems = {
  __typename?: 'solditems';
  big_class_code?: Maybe<Scalars['String']>;
  big_class_id?: Maybe<Scalars['bigint']>;
  big_class_name?: Maybe<Scalars['String']>;
  big_class_out_code?: Maybe<Scalars['String']>;
  /** An object relationship */
  bill?: Maybe<Bills>;
  bs_id?: Maybe<Scalars['bigint']>;
  create_time?: Maybe<Scalars['timestamp']>;
  delflg?: Maybe<Scalars['Int']>;
  deptCode?: Maybe<Scalars['String']>;
  deptId?: Maybe<Scalars['String']>;
  deptName?: Maybe<Scalars['String']>;
  disc_fix?: Maybe<Scalars['numeric']>;
  disc_flg?: Maybe<Scalars['Int']>;
  disc_money?: Maybe<Scalars['numeric']>;
  disc_name?: Maybe<Scalars['String']>;
  /** An object relationship */
  fooditem?: Maybe<Fooditems>;
  id?: Maybe<Scalars['Int']>;
  income_money?: Maybe<Scalars['numeric']>;
  is_change_price?: Maybe<Scalars['String']>;
  item_aid_code?: Maybe<Scalars['String']>;
  item_code?: Maybe<Scalars['String']>;
  item_id?: Maybe<Scalars['String']>;
  item_name?: Maybe<Scalars['String']>;
  item_type?: Maybe<Scalars['Int']>;
  item_type_name?: Maybe<Scalars['String']>;
  last_make_fee?: Maybe<Scalars['numeric']>;
  last_price?: Maybe<Scalars['numeric']>;
  last_qty?: Maybe<Scalars['numeric']>;
  last_total?: Maybe<Scalars['numeric']>;
  member_money?: Maybe<Scalars['numeric']>;
  method_id?: Maybe<Scalars['String']>;
  method_text?: Maybe<Scalars['String']>;
  modify_time?: Maybe<Scalars['timestamp']>;
  not_income_money?: Maybe<Scalars['numeric']>;
  orig_price?: Maybe<Scalars['numeric']>;
  orig_subtotal?: Maybe<Scalars['numeric']>;
  pkg_flg?: Maybe<Scalars['Int']>;
  pkg_flg_name?: Maybe<Scalars['String']>;
  pkg_sc_id?: Maybe<Scalars['Int']>;
  present_money?: Maybe<Scalars['numeric']>;
  promote_money?: Maybe<Scalars['numeric']>;
  rz_name?: Maybe<Scalars['String']>;
  sale_price?: Maybe<Scalars['numeric']>;
  sales_revenue_type_id?: Maybe<Scalars['String']>;
  sc_id: Scalars['bigint'];
  settle_time?: Maybe<Scalars['timestamp']>;
  size_code?: Maybe<Scalars['String']>;
  size_id?: Maybe<Scalars['bigint']>;
  size_name?: Maybe<Scalars['String']>;
  small_class_code?: Maybe<Scalars['String']>;
  small_class_id?: Maybe<Scalars['bigint']>;
  small_class_name?: Maybe<Scalars['String']>;
  small_class_out_code?: Maybe<Scalars['String']>;
  tax_rate_dinein?: Maybe<Scalars['numeric']>;
  tax_rate_takeout?: Maybe<Scalars['numeric']>;
  tax_rate_takesale?: Maybe<Scalars['numeric']>;
  unit_name?: Maybe<Scalars['String']>;
  wipe_money?: Maybe<Scalars['numeric']>;
};

/** aggregated selection of "solditems" */
export type Solditems_Aggregate = {
  __typename?: 'solditems_aggregate';
  aggregate?: Maybe<Solditems_Aggregate_Fields>;
  nodes: Array<Solditems>;
};

export type Solditems_Aggregate_Bool_Exp = {
  count?: InputMaybe<Solditems_Aggregate_Bool_Exp_Count>;
};

export type Solditems_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<Solditems_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<Solditems_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "solditems" */
export type Solditems_Aggregate_Fields = {
  __typename?: 'solditems_aggregate_fields';
  avg?: Maybe<Solditems_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Solditems_Max_Fields>;
  min?: Maybe<Solditems_Min_Fields>;
  stddev?: Maybe<Solditems_Stddev_Fields>;
  stddev_pop?: Maybe<Solditems_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Solditems_Stddev_Samp_Fields>;
  sum?: Maybe<Solditems_Sum_Fields>;
  var_pop?: Maybe<Solditems_Var_Pop_Fields>;
  var_samp?: Maybe<Solditems_Var_Samp_Fields>;
  variance?: Maybe<Solditems_Variance_Fields>;
};


/** aggregate fields of "solditems" */
export type Solditems_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Solditems_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "solditems" */
export type Solditems_Aggregate_Order_By = {
  avg?: InputMaybe<Solditems_Avg_Order_By>;
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<Solditems_Max_Order_By>;
  min?: InputMaybe<Solditems_Min_Order_By>;
  stddev?: InputMaybe<Solditems_Stddev_Order_By>;
  stddev_pop?: InputMaybe<Solditems_Stddev_Pop_Order_By>;
  stddev_samp?: InputMaybe<Solditems_Stddev_Samp_Order_By>;
  sum?: InputMaybe<Solditems_Sum_Order_By>;
  var_pop?: InputMaybe<Solditems_Var_Pop_Order_By>;
  var_samp?: InputMaybe<Solditems_Var_Samp_Order_By>;
  variance?: InputMaybe<Solditems_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "solditems" */
export type Solditems_Arr_Rel_Insert_Input = {
  data: Array<Solditems_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<Solditems_On_Conflict>;
};

/** aggregate avg on columns */
export type Solditems_Avg_Fields = {
  __typename?: 'solditems_avg_fields';
  big_class_id?: Maybe<Scalars['Float']>;
  bs_id?: Maybe<Scalars['Float']>;
  delflg?: Maybe<Scalars['Float']>;
  disc_fix?: Maybe<Scalars['Float']>;
  disc_flg?: Maybe<Scalars['Float']>;
  disc_money?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  income_money?: Maybe<Scalars['Float']>;
  item_type?: Maybe<Scalars['Float']>;
  last_make_fee?: Maybe<Scalars['Float']>;
  last_price?: Maybe<Scalars['Float']>;
  last_qty?: Maybe<Scalars['Float']>;
  last_total?: Maybe<Scalars['Float']>;
  member_money?: Maybe<Scalars['Float']>;
  not_income_money?: Maybe<Scalars['Float']>;
  orig_price?: Maybe<Scalars['Float']>;
  orig_subtotal?: Maybe<Scalars['Float']>;
  pkg_flg?: Maybe<Scalars['Float']>;
  pkg_sc_id?: Maybe<Scalars['Float']>;
  present_money?: Maybe<Scalars['Float']>;
  promote_money?: Maybe<Scalars['Float']>;
  sale_price?: Maybe<Scalars['Float']>;
  sc_id?: Maybe<Scalars['Float']>;
  size_id?: Maybe<Scalars['Float']>;
  small_class_id?: Maybe<Scalars['Float']>;
  tax_rate_dinein?: Maybe<Scalars['Float']>;
  tax_rate_takeout?: Maybe<Scalars['Float']>;
  tax_rate_takesale?: Maybe<Scalars['Float']>;
  wipe_money?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "solditems" */
export type Solditems_Avg_Order_By = {
  big_class_id?: InputMaybe<Order_By>;
  bs_id?: InputMaybe<Order_By>;
  delflg?: InputMaybe<Order_By>;
  disc_fix?: InputMaybe<Order_By>;
  disc_flg?: InputMaybe<Order_By>;
  disc_money?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  income_money?: InputMaybe<Order_By>;
  item_type?: InputMaybe<Order_By>;
  last_make_fee?: InputMaybe<Order_By>;
  last_price?: InputMaybe<Order_By>;
  last_qty?: InputMaybe<Order_By>;
  last_total?: InputMaybe<Order_By>;
  member_money?: InputMaybe<Order_By>;
  not_income_money?: InputMaybe<Order_By>;
  orig_price?: InputMaybe<Order_By>;
  orig_subtotal?: InputMaybe<Order_By>;
  pkg_flg?: InputMaybe<Order_By>;
  pkg_sc_id?: InputMaybe<Order_By>;
  present_money?: InputMaybe<Order_By>;
  promote_money?: InputMaybe<Order_By>;
  sale_price?: InputMaybe<Order_By>;
  sc_id?: InputMaybe<Order_By>;
  size_id?: InputMaybe<Order_By>;
  small_class_id?: InputMaybe<Order_By>;
  tax_rate_dinein?: InputMaybe<Order_By>;
  tax_rate_takeout?: InputMaybe<Order_By>;
  tax_rate_takesale?: InputMaybe<Order_By>;
  wipe_money?: InputMaybe<Order_By>;
};

/** Boolean expression to filter rows from the table "solditems". All fields are combined with a logical 'AND'. */
export type Solditems_Bool_Exp = {
  _and?: InputMaybe<Array<Solditems_Bool_Exp>>;
  _not?: InputMaybe<Solditems_Bool_Exp>;
  _or?: InputMaybe<Array<Solditems_Bool_Exp>>;
  big_class_code?: InputMaybe<String_Comparison_Exp>;
  big_class_id?: InputMaybe<Bigint_Comparison_Exp>;
  big_class_name?: InputMaybe<String_Comparison_Exp>;
  big_class_out_code?: InputMaybe<String_Comparison_Exp>;
  bill?: InputMaybe<Bills_Bool_Exp>;
  bs_id?: InputMaybe<Bigint_Comparison_Exp>;
  create_time?: InputMaybe<Timestamp_Comparison_Exp>;
  delflg?: InputMaybe<Int_Comparison_Exp>;
  deptCode?: InputMaybe<String_Comparison_Exp>;
  deptId?: InputMaybe<String_Comparison_Exp>;
  deptName?: InputMaybe<String_Comparison_Exp>;
  disc_fix?: InputMaybe<Numeric_Comparison_Exp>;
  disc_flg?: InputMaybe<Int_Comparison_Exp>;
  disc_money?: InputMaybe<Numeric_Comparison_Exp>;
  disc_name?: InputMaybe<String_Comparison_Exp>;
  fooditem?: InputMaybe<Fooditems_Bool_Exp>;
  id?: InputMaybe<Int_Comparison_Exp>;
  income_money?: InputMaybe<Numeric_Comparison_Exp>;
  is_change_price?: InputMaybe<String_Comparison_Exp>;
  item_aid_code?: InputMaybe<String_Comparison_Exp>;
  item_code?: InputMaybe<String_Comparison_Exp>;
  item_id?: InputMaybe<String_Comparison_Exp>;
  item_name?: InputMaybe<String_Comparison_Exp>;
  item_type?: InputMaybe<Int_Comparison_Exp>;
  item_type_name?: InputMaybe<String_Comparison_Exp>;
  last_make_fee?: InputMaybe<Numeric_Comparison_Exp>;
  last_price?: InputMaybe<Numeric_Comparison_Exp>;
  last_qty?: InputMaybe<Numeric_Comparison_Exp>;
  last_total?: InputMaybe<Numeric_Comparison_Exp>;
  member_money?: InputMaybe<Numeric_Comparison_Exp>;
  method_id?: InputMaybe<String_Comparison_Exp>;
  method_text?: InputMaybe<String_Comparison_Exp>;
  modify_time?: InputMaybe<Timestamp_Comparison_Exp>;
  not_income_money?: InputMaybe<Numeric_Comparison_Exp>;
  orig_price?: InputMaybe<Numeric_Comparison_Exp>;
  orig_subtotal?: InputMaybe<Numeric_Comparison_Exp>;
  pkg_flg?: InputMaybe<Int_Comparison_Exp>;
  pkg_flg_name?: InputMaybe<String_Comparison_Exp>;
  pkg_sc_id?: InputMaybe<Int_Comparison_Exp>;
  present_money?: InputMaybe<Numeric_Comparison_Exp>;
  promote_money?: InputMaybe<Numeric_Comparison_Exp>;
  rz_name?: InputMaybe<String_Comparison_Exp>;
  sale_price?: InputMaybe<Numeric_Comparison_Exp>;
  sales_revenue_type_id?: InputMaybe<String_Comparison_Exp>;
  sc_id?: InputMaybe<Bigint_Comparison_Exp>;
  settle_time?: InputMaybe<Timestamp_Comparison_Exp>;
  size_code?: InputMaybe<String_Comparison_Exp>;
  size_id?: InputMaybe<Bigint_Comparison_Exp>;
  size_name?: InputMaybe<String_Comparison_Exp>;
  small_class_code?: InputMaybe<String_Comparison_Exp>;
  small_class_id?: InputMaybe<Bigint_Comparison_Exp>;
  small_class_name?: InputMaybe<String_Comparison_Exp>;
  small_class_out_code?: InputMaybe<String_Comparison_Exp>;
  tax_rate_dinein?: InputMaybe<Numeric_Comparison_Exp>;
  tax_rate_takeout?: InputMaybe<Numeric_Comparison_Exp>;
  tax_rate_takesale?: InputMaybe<Numeric_Comparison_Exp>;
  unit_name?: InputMaybe<String_Comparison_Exp>;
  wipe_money?: InputMaybe<Numeric_Comparison_Exp>;
};

/** unique or primary key constraints on table "solditems" */
export enum Solditems_Constraint {
  /** unique or primary key constraint on columns "sc_id" */
  SolditemsPkey = 'solditems_pkey'
}

/** input type for incrementing numeric columns in table "solditems" */
export type Solditems_Inc_Input = {
  big_class_id?: InputMaybe<Scalars['bigint']>;
  bs_id?: InputMaybe<Scalars['bigint']>;
  delflg?: InputMaybe<Scalars['Int']>;
  disc_fix?: InputMaybe<Scalars['numeric']>;
  disc_flg?: InputMaybe<Scalars['Int']>;
  disc_money?: InputMaybe<Scalars['numeric']>;
  id?: InputMaybe<Scalars['Int']>;
  income_money?: InputMaybe<Scalars['numeric']>;
  item_type?: InputMaybe<Scalars['Int']>;
  last_make_fee?: InputMaybe<Scalars['numeric']>;
  last_price?: InputMaybe<Scalars['numeric']>;
  last_qty?: InputMaybe<Scalars['numeric']>;
  last_total?: InputMaybe<Scalars['numeric']>;
  member_money?: InputMaybe<Scalars['numeric']>;
  not_income_money?: InputMaybe<Scalars['numeric']>;
  orig_price?: InputMaybe<Scalars['numeric']>;
  orig_subtotal?: InputMaybe<Scalars['numeric']>;
  pkg_flg?: InputMaybe<Scalars['Int']>;
  pkg_sc_id?: InputMaybe<Scalars['Int']>;
  present_money?: InputMaybe<Scalars['numeric']>;
  promote_money?: InputMaybe<Scalars['numeric']>;
  sale_price?: InputMaybe<Scalars['numeric']>;
  sc_id?: InputMaybe<Scalars['bigint']>;
  size_id?: InputMaybe<Scalars['bigint']>;
  small_class_id?: InputMaybe<Scalars['bigint']>;
  tax_rate_dinein?: InputMaybe<Scalars['numeric']>;
  tax_rate_takeout?: InputMaybe<Scalars['numeric']>;
  tax_rate_takesale?: InputMaybe<Scalars['numeric']>;
  wipe_money?: InputMaybe<Scalars['numeric']>;
};

/** input type for inserting data into table "solditems" */
export type Solditems_Insert_Input = {
  big_class_code?: InputMaybe<Scalars['String']>;
  big_class_id?: InputMaybe<Scalars['bigint']>;
  big_class_name?: InputMaybe<Scalars['String']>;
  big_class_out_code?: InputMaybe<Scalars['String']>;
  bill?: InputMaybe<Bills_Obj_Rel_Insert_Input>;
  bs_id?: InputMaybe<Scalars['bigint']>;
  create_time?: InputMaybe<Scalars['timestamp']>;
  delflg?: InputMaybe<Scalars['Int']>;
  deptCode?: InputMaybe<Scalars['String']>;
  deptId?: InputMaybe<Scalars['String']>;
  deptName?: InputMaybe<Scalars['String']>;
  disc_fix?: InputMaybe<Scalars['numeric']>;
  disc_flg?: InputMaybe<Scalars['Int']>;
  disc_money?: InputMaybe<Scalars['numeric']>;
  disc_name?: InputMaybe<Scalars['String']>;
  fooditem?: InputMaybe<Fooditems_Obj_Rel_Insert_Input>;
  id?: InputMaybe<Scalars['Int']>;
  income_money?: InputMaybe<Scalars['numeric']>;
  is_change_price?: InputMaybe<Scalars['String']>;
  item_aid_code?: InputMaybe<Scalars['String']>;
  item_code?: InputMaybe<Scalars['String']>;
  item_id?: InputMaybe<Scalars['String']>;
  item_name?: InputMaybe<Scalars['String']>;
  item_type?: InputMaybe<Scalars['Int']>;
  item_type_name?: InputMaybe<Scalars['String']>;
  last_make_fee?: InputMaybe<Scalars['numeric']>;
  last_price?: InputMaybe<Scalars['numeric']>;
  last_qty?: InputMaybe<Scalars['numeric']>;
  last_total?: InputMaybe<Scalars['numeric']>;
  member_money?: InputMaybe<Scalars['numeric']>;
  method_id?: InputMaybe<Scalars['String']>;
  method_text?: InputMaybe<Scalars['String']>;
  modify_time?: InputMaybe<Scalars['timestamp']>;
  not_income_money?: InputMaybe<Scalars['numeric']>;
  orig_price?: InputMaybe<Scalars['numeric']>;
  orig_subtotal?: InputMaybe<Scalars['numeric']>;
  pkg_flg?: InputMaybe<Scalars['Int']>;
  pkg_flg_name?: InputMaybe<Scalars['String']>;
  pkg_sc_id?: InputMaybe<Scalars['Int']>;
  present_money?: InputMaybe<Scalars['numeric']>;
  promote_money?: InputMaybe<Scalars['numeric']>;
  rz_name?: InputMaybe<Scalars['String']>;
  sale_price?: InputMaybe<Scalars['numeric']>;
  sales_revenue_type_id?: InputMaybe<Scalars['String']>;
  sc_id?: InputMaybe<Scalars['bigint']>;
  settle_time?: InputMaybe<Scalars['timestamp']>;
  size_code?: InputMaybe<Scalars['String']>;
  size_id?: InputMaybe<Scalars['bigint']>;
  size_name?: InputMaybe<Scalars['String']>;
  small_class_code?: InputMaybe<Scalars['String']>;
  small_class_id?: InputMaybe<Scalars['bigint']>;
  small_class_name?: InputMaybe<Scalars['String']>;
  small_class_out_code?: InputMaybe<Scalars['String']>;
  tax_rate_dinein?: InputMaybe<Scalars['numeric']>;
  tax_rate_takeout?: InputMaybe<Scalars['numeric']>;
  tax_rate_takesale?: InputMaybe<Scalars['numeric']>;
  unit_name?: InputMaybe<Scalars['String']>;
  wipe_money?: InputMaybe<Scalars['numeric']>;
};

/** aggregate max on columns */
export type Solditems_Max_Fields = {
  __typename?: 'solditems_max_fields';
  big_class_code?: Maybe<Scalars['String']>;
  big_class_id?: Maybe<Scalars['bigint']>;
  big_class_name?: Maybe<Scalars['String']>;
  big_class_out_code?: Maybe<Scalars['String']>;
  bs_id?: Maybe<Scalars['bigint']>;
  create_time?: Maybe<Scalars['timestamp']>;
  delflg?: Maybe<Scalars['Int']>;
  deptCode?: Maybe<Scalars['String']>;
  deptId?: Maybe<Scalars['String']>;
  deptName?: Maybe<Scalars['String']>;
  disc_fix?: Maybe<Scalars['numeric']>;
  disc_flg?: Maybe<Scalars['Int']>;
  disc_money?: Maybe<Scalars['numeric']>;
  disc_name?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['Int']>;
  income_money?: Maybe<Scalars['numeric']>;
  is_change_price?: Maybe<Scalars['String']>;
  item_aid_code?: Maybe<Scalars['String']>;
  item_code?: Maybe<Scalars['String']>;
  item_id?: Maybe<Scalars['String']>;
  item_name?: Maybe<Scalars['String']>;
  item_type?: Maybe<Scalars['Int']>;
  item_type_name?: Maybe<Scalars['String']>;
  last_make_fee?: Maybe<Scalars['numeric']>;
  last_price?: Maybe<Scalars['numeric']>;
  last_qty?: Maybe<Scalars['numeric']>;
  last_total?: Maybe<Scalars['numeric']>;
  member_money?: Maybe<Scalars['numeric']>;
  method_id?: Maybe<Scalars['String']>;
  method_text?: Maybe<Scalars['String']>;
  modify_time?: Maybe<Scalars['timestamp']>;
  not_income_money?: Maybe<Scalars['numeric']>;
  orig_price?: Maybe<Scalars['numeric']>;
  orig_subtotal?: Maybe<Scalars['numeric']>;
  pkg_flg?: Maybe<Scalars['Int']>;
  pkg_flg_name?: Maybe<Scalars['String']>;
  pkg_sc_id?: Maybe<Scalars['Int']>;
  present_money?: Maybe<Scalars['numeric']>;
  promote_money?: Maybe<Scalars['numeric']>;
  rz_name?: Maybe<Scalars['String']>;
  sale_price?: Maybe<Scalars['numeric']>;
  sales_revenue_type_id?: Maybe<Scalars['String']>;
  sc_id?: Maybe<Scalars['bigint']>;
  settle_time?: Maybe<Scalars['timestamp']>;
  size_code?: Maybe<Scalars['String']>;
  size_id?: Maybe<Scalars['bigint']>;
  size_name?: Maybe<Scalars['String']>;
  small_class_code?: Maybe<Scalars['String']>;
  small_class_id?: Maybe<Scalars['bigint']>;
  small_class_name?: Maybe<Scalars['String']>;
  small_class_out_code?: Maybe<Scalars['String']>;
  tax_rate_dinein?: Maybe<Scalars['numeric']>;
  tax_rate_takeout?: Maybe<Scalars['numeric']>;
  tax_rate_takesale?: Maybe<Scalars['numeric']>;
  unit_name?: Maybe<Scalars['String']>;
  wipe_money?: Maybe<Scalars['numeric']>;
};

/** order by max() on columns of table "solditems" */
export type Solditems_Max_Order_By = {
  big_class_code?: InputMaybe<Order_By>;
  big_class_id?: InputMaybe<Order_By>;
  big_class_name?: InputMaybe<Order_By>;
  big_class_out_code?: InputMaybe<Order_By>;
  bs_id?: InputMaybe<Order_By>;
  create_time?: InputMaybe<Order_By>;
  delflg?: InputMaybe<Order_By>;
  deptCode?: InputMaybe<Order_By>;
  deptId?: InputMaybe<Order_By>;
  deptName?: InputMaybe<Order_By>;
  disc_fix?: InputMaybe<Order_By>;
  disc_flg?: InputMaybe<Order_By>;
  disc_money?: InputMaybe<Order_By>;
  disc_name?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  income_money?: InputMaybe<Order_By>;
  is_change_price?: InputMaybe<Order_By>;
  item_aid_code?: InputMaybe<Order_By>;
  item_code?: InputMaybe<Order_By>;
  item_id?: InputMaybe<Order_By>;
  item_name?: InputMaybe<Order_By>;
  item_type?: InputMaybe<Order_By>;
  item_type_name?: InputMaybe<Order_By>;
  last_make_fee?: InputMaybe<Order_By>;
  last_price?: InputMaybe<Order_By>;
  last_qty?: InputMaybe<Order_By>;
  last_total?: InputMaybe<Order_By>;
  member_money?: InputMaybe<Order_By>;
  method_id?: InputMaybe<Order_By>;
  method_text?: InputMaybe<Order_By>;
  modify_time?: InputMaybe<Order_By>;
  not_income_money?: InputMaybe<Order_By>;
  orig_price?: InputMaybe<Order_By>;
  orig_subtotal?: InputMaybe<Order_By>;
  pkg_flg?: InputMaybe<Order_By>;
  pkg_flg_name?: InputMaybe<Order_By>;
  pkg_sc_id?: InputMaybe<Order_By>;
  present_money?: InputMaybe<Order_By>;
  promote_money?: InputMaybe<Order_By>;
  rz_name?: InputMaybe<Order_By>;
  sale_price?: InputMaybe<Order_By>;
  sales_revenue_type_id?: InputMaybe<Order_By>;
  sc_id?: InputMaybe<Order_By>;
  settle_time?: InputMaybe<Order_By>;
  size_code?: InputMaybe<Order_By>;
  size_id?: InputMaybe<Order_By>;
  size_name?: InputMaybe<Order_By>;
  small_class_code?: InputMaybe<Order_By>;
  small_class_id?: InputMaybe<Order_By>;
  small_class_name?: InputMaybe<Order_By>;
  small_class_out_code?: InputMaybe<Order_By>;
  tax_rate_dinein?: InputMaybe<Order_By>;
  tax_rate_takeout?: InputMaybe<Order_By>;
  tax_rate_takesale?: InputMaybe<Order_By>;
  unit_name?: InputMaybe<Order_By>;
  wipe_money?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type Solditems_Min_Fields = {
  __typename?: 'solditems_min_fields';
  big_class_code?: Maybe<Scalars['String']>;
  big_class_id?: Maybe<Scalars['bigint']>;
  big_class_name?: Maybe<Scalars['String']>;
  big_class_out_code?: Maybe<Scalars['String']>;
  bs_id?: Maybe<Scalars['bigint']>;
  create_time?: Maybe<Scalars['timestamp']>;
  delflg?: Maybe<Scalars['Int']>;
  deptCode?: Maybe<Scalars['String']>;
  deptId?: Maybe<Scalars['String']>;
  deptName?: Maybe<Scalars['String']>;
  disc_fix?: Maybe<Scalars['numeric']>;
  disc_flg?: Maybe<Scalars['Int']>;
  disc_money?: Maybe<Scalars['numeric']>;
  disc_name?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['Int']>;
  income_money?: Maybe<Scalars['numeric']>;
  is_change_price?: Maybe<Scalars['String']>;
  item_aid_code?: Maybe<Scalars['String']>;
  item_code?: Maybe<Scalars['String']>;
  item_id?: Maybe<Scalars['String']>;
  item_name?: Maybe<Scalars['String']>;
  item_type?: Maybe<Scalars['Int']>;
  item_type_name?: Maybe<Scalars['String']>;
  last_make_fee?: Maybe<Scalars['numeric']>;
  last_price?: Maybe<Scalars['numeric']>;
  last_qty?: Maybe<Scalars['numeric']>;
  last_total?: Maybe<Scalars['numeric']>;
  member_money?: Maybe<Scalars['numeric']>;
  method_id?: Maybe<Scalars['String']>;
  method_text?: Maybe<Scalars['String']>;
  modify_time?: Maybe<Scalars['timestamp']>;
  not_income_money?: Maybe<Scalars['numeric']>;
  orig_price?: Maybe<Scalars['numeric']>;
  orig_subtotal?: Maybe<Scalars['numeric']>;
  pkg_flg?: Maybe<Scalars['Int']>;
  pkg_flg_name?: Maybe<Scalars['String']>;
  pkg_sc_id?: Maybe<Scalars['Int']>;
  present_money?: Maybe<Scalars['numeric']>;
  promote_money?: Maybe<Scalars['numeric']>;
  rz_name?: Maybe<Scalars['String']>;
  sale_price?: Maybe<Scalars['numeric']>;
  sales_revenue_type_id?: Maybe<Scalars['String']>;
  sc_id?: Maybe<Scalars['bigint']>;
  settle_time?: Maybe<Scalars['timestamp']>;
  size_code?: Maybe<Scalars['String']>;
  size_id?: Maybe<Scalars['bigint']>;
  size_name?: Maybe<Scalars['String']>;
  small_class_code?: Maybe<Scalars['String']>;
  small_class_id?: Maybe<Scalars['bigint']>;
  small_class_name?: Maybe<Scalars['String']>;
  small_class_out_code?: Maybe<Scalars['String']>;
  tax_rate_dinein?: Maybe<Scalars['numeric']>;
  tax_rate_takeout?: Maybe<Scalars['numeric']>;
  tax_rate_takesale?: Maybe<Scalars['numeric']>;
  unit_name?: Maybe<Scalars['String']>;
  wipe_money?: Maybe<Scalars['numeric']>;
};

/** order by min() on columns of table "solditems" */
export type Solditems_Min_Order_By = {
  big_class_code?: InputMaybe<Order_By>;
  big_class_id?: InputMaybe<Order_By>;
  big_class_name?: InputMaybe<Order_By>;
  big_class_out_code?: InputMaybe<Order_By>;
  bs_id?: InputMaybe<Order_By>;
  create_time?: InputMaybe<Order_By>;
  delflg?: InputMaybe<Order_By>;
  deptCode?: InputMaybe<Order_By>;
  deptId?: InputMaybe<Order_By>;
  deptName?: InputMaybe<Order_By>;
  disc_fix?: InputMaybe<Order_By>;
  disc_flg?: InputMaybe<Order_By>;
  disc_money?: InputMaybe<Order_By>;
  disc_name?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  income_money?: InputMaybe<Order_By>;
  is_change_price?: InputMaybe<Order_By>;
  item_aid_code?: InputMaybe<Order_By>;
  item_code?: InputMaybe<Order_By>;
  item_id?: InputMaybe<Order_By>;
  item_name?: InputMaybe<Order_By>;
  item_type?: InputMaybe<Order_By>;
  item_type_name?: InputMaybe<Order_By>;
  last_make_fee?: InputMaybe<Order_By>;
  last_price?: InputMaybe<Order_By>;
  last_qty?: InputMaybe<Order_By>;
  last_total?: InputMaybe<Order_By>;
  member_money?: InputMaybe<Order_By>;
  method_id?: InputMaybe<Order_By>;
  method_text?: InputMaybe<Order_By>;
  modify_time?: InputMaybe<Order_By>;
  not_income_money?: InputMaybe<Order_By>;
  orig_price?: InputMaybe<Order_By>;
  orig_subtotal?: InputMaybe<Order_By>;
  pkg_flg?: InputMaybe<Order_By>;
  pkg_flg_name?: InputMaybe<Order_By>;
  pkg_sc_id?: InputMaybe<Order_By>;
  present_money?: InputMaybe<Order_By>;
  promote_money?: InputMaybe<Order_By>;
  rz_name?: InputMaybe<Order_By>;
  sale_price?: InputMaybe<Order_By>;
  sales_revenue_type_id?: InputMaybe<Order_By>;
  sc_id?: InputMaybe<Order_By>;
  settle_time?: InputMaybe<Order_By>;
  size_code?: InputMaybe<Order_By>;
  size_id?: InputMaybe<Order_By>;
  size_name?: InputMaybe<Order_By>;
  small_class_code?: InputMaybe<Order_By>;
  small_class_id?: InputMaybe<Order_By>;
  small_class_name?: InputMaybe<Order_By>;
  small_class_out_code?: InputMaybe<Order_By>;
  tax_rate_dinein?: InputMaybe<Order_By>;
  tax_rate_takeout?: InputMaybe<Order_By>;
  tax_rate_takesale?: InputMaybe<Order_By>;
  unit_name?: InputMaybe<Order_By>;
  wipe_money?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "solditems" */
export type Solditems_Mutation_Response = {
  __typename?: 'solditems_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Solditems>;
};

/** on_conflict condition type for table "solditems" */
export type Solditems_On_Conflict = {
  constraint: Solditems_Constraint;
  update_columns?: Array<Solditems_Update_Column>;
  where?: InputMaybe<Solditems_Bool_Exp>;
};

/** Ordering options when selecting data from "solditems". */
export type Solditems_Order_By = {
  big_class_code?: InputMaybe<Order_By>;
  big_class_id?: InputMaybe<Order_By>;
  big_class_name?: InputMaybe<Order_By>;
  big_class_out_code?: InputMaybe<Order_By>;
  bill?: InputMaybe<Bills_Order_By>;
  bs_id?: InputMaybe<Order_By>;
  create_time?: InputMaybe<Order_By>;
  delflg?: InputMaybe<Order_By>;
  deptCode?: InputMaybe<Order_By>;
  deptId?: InputMaybe<Order_By>;
  deptName?: InputMaybe<Order_By>;
  disc_fix?: InputMaybe<Order_By>;
  disc_flg?: InputMaybe<Order_By>;
  disc_money?: InputMaybe<Order_By>;
  disc_name?: InputMaybe<Order_By>;
  fooditem?: InputMaybe<Fooditems_Order_By>;
  id?: InputMaybe<Order_By>;
  income_money?: InputMaybe<Order_By>;
  is_change_price?: InputMaybe<Order_By>;
  item_aid_code?: InputMaybe<Order_By>;
  item_code?: InputMaybe<Order_By>;
  item_id?: InputMaybe<Order_By>;
  item_name?: InputMaybe<Order_By>;
  item_type?: InputMaybe<Order_By>;
  item_type_name?: InputMaybe<Order_By>;
  last_make_fee?: InputMaybe<Order_By>;
  last_price?: InputMaybe<Order_By>;
  last_qty?: InputMaybe<Order_By>;
  last_total?: InputMaybe<Order_By>;
  member_money?: InputMaybe<Order_By>;
  method_id?: InputMaybe<Order_By>;
  method_text?: InputMaybe<Order_By>;
  modify_time?: InputMaybe<Order_By>;
  not_income_money?: InputMaybe<Order_By>;
  orig_price?: InputMaybe<Order_By>;
  orig_subtotal?: InputMaybe<Order_By>;
  pkg_flg?: InputMaybe<Order_By>;
  pkg_flg_name?: InputMaybe<Order_By>;
  pkg_sc_id?: InputMaybe<Order_By>;
  present_money?: InputMaybe<Order_By>;
  promote_money?: InputMaybe<Order_By>;
  rz_name?: InputMaybe<Order_By>;
  sale_price?: InputMaybe<Order_By>;
  sales_revenue_type_id?: InputMaybe<Order_By>;
  sc_id?: InputMaybe<Order_By>;
  settle_time?: InputMaybe<Order_By>;
  size_code?: InputMaybe<Order_By>;
  size_id?: InputMaybe<Order_By>;
  size_name?: InputMaybe<Order_By>;
  small_class_code?: InputMaybe<Order_By>;
  small_class_id?: InputMaybe<Order_By>;
  small_class_name?: InputMaybe<Order_By>;
  small_class_out_code?: InputMaybe<Order_By>;
  tax_rate_dinein?: InputMaybe<Order_By>;
  tax_rate_takeout?: InputMaybe<Order_By>;
  tax_rate_takesale?: InputMaybe<Order_By>;
  unit_name?: InputMaybe<Order_By>;
  wipe_money?: InputMaybe<Order_By>;
};

/** primary key columns input for table: solditems */
export type Solditems_Pk_Columns_Input = {
  sc_id: Scalars['bigint'];
};

/** select columns of table "solditems" */
export enum Solditems_Select_Column {
  /** column name */
  BigClassCode = 'big_class_code',
  /** column name */
  BigClassId = 'big_class_id',
  /** column name */
  BigClassName = 'big_class_name',
  /** column name */
  BigClassOutCode = 'big_class_out_code',
  /** column name */
  BsId = 'bs_id',
  /** column name */
  CreateTime = 'create_time',
  /** column name */
  Delflg = 'delflg',
  /** column name */
  DeptCode = 'deptCode',
  /** column name */
  DeptId = 'deptId',
  /** column name */
  DeptName = 'deptName',
  /** column name */
  DiscFix = 'disc_fix',
  /** column name */
  DiscFlg = 'disc_flg',
  /** column name */
  DiscMoney = 'disc_money',
  /** column name */
  DiscName = 'disc_name',
  /** column name */
  Id = 'id',
  /** column name */
  IncomeMoney = 'income_money',
  /** column name */
  IsChangePrice = 'is_change_price',
  /** column name */
  ItemAidCode = 'item_aid_code',
  /** column name */
  ItemCode = 'item_code',
  /** column name */
  ItemId = 'item_id',
  /** column name */
  ItemName = 'item_name',
  /** column name */
  ItemType = 'item_type',
  /** column name */
  ItemTypeName = 'item_type_name',
  /** column name */
  LastMakeFee = 'last_make_fee',
  /** column name */
  LastPrice = 'last_price',
  /** column name */
  LastQty = 'last_qty',
  /** column name */
  LastTotal = 'last_total',
  /** column name */
  MemberMoney = 'member_money',
  /** column name */
  MethodId = 'method_id',
  /** column name */
  MethodText = 'method_text',
  /** column name */
  ModifyTime = 'modify_time',
  /** column name */
  NotIncomeMoney = 'not_income_money',
  /** column name */
  OrigPrice = 'orig_price',
  /** column name */
  OrigSubtotal = 'orig_subtotal',
  /** column name */
  PkgFlg = 'pkg_flg',
  /** column name */
  PkgFlgName = 'pkg_flg_name',
  /** column name */
  PkgScId = 'pkg_sc_id',
  /** column name */
  PresentMoney = 'present_money',
  /** column name */
  PromoteMoney = 'promote_money',
  /** column name */
  RzName = 'rz_name',
  /** column name */
  SalePrice = 'sale_price',
  /** column name */
  SalesRevenueTypeId = 'sales_revenue_type_id',
  /** column name */
  ScId = 'sc_id',
  /** column name */
  SettleTime = 'settle_time',
  /** column name */
  SizeCode = 'size_code',
  /** column name */
  SizeId = 'size_id',
  /** column name */
  SizeName = 'size_name',
  /** column name */
  SmallClassCode = 'small_class_code',
  /** column name */
  SmallClassId = 'small_class_id',
  /** column name */
  SmallClassName = 'small_class_name',
  /** column name */
  SmallClassOutCode = 'small_class_out_code',
  /** column name */
  TaxRateDinein = 'tax_rate_dinein',
  /** column name */
  TaxRateTakeout = 'tax_rate_takeout',
  /** column name */
  TaxRateTakesale = 'tax_rate_takesale',
  /** column name */
  UnitName = 'unit_name',
  /** column name */
  WipeMoney = 'wipe_money'
}

/** input type for updating data in table "solditems" */
export type Solditems_Set_Input = {
  big_class_code?: InputMaybe<Scalars['String']>;
  big_class_id?: InputMaybe<Scalars['bigint']>;
  big_class_name?: InputMaybe<Scalars['String']>;
  big_class_out_code?: InputMaybe<Scalars['String']>;
  bs_id?: InputMaybe<Scalars['bigint']>;
  create_time?: InputMaybe<Scalars['timestamp']>;
  delflg?: InputMaybe<Scalars['Int']>;
  deptCode?: InputMaybe<Scalars['String']>;
  deptId?: InputMaybe<Scalars['String']>;
  deptName?: InputMaybe<Scalars['String']>;
  disc_fix?: InputMaybe<Scalars['numeric']>;
  disc_flg?: InputMaybe<Scalars['Int']>;
  disc_money?: InputMaybe<Scalars['numeric']>;
  disc_name?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['Int']>;
  income_money?: InputMaybe<Scalars['numeric']>;
  is_change_price?: InputMaybe<Scalars['String']>;
  item_aid_code?: InputMaybe<Scalars['String']>;
  item_code?: InputMaybe<Scalars['String']>;
  item_id?: InputMaybe<Scalars['String']>;
  item_name?: InputMaybe<Scalars['String']>;
  item_type?: InputMaybe<Scalars['Int']>;
  item_type_name?: InputMaybe<Scalars['String']>;
  last_make_fee?: InputMaybe<Scalars['numeric']>;
  last_price?: InputMaybe<Scalars['numeric']>;
  last_qty?: InputMaybe<Scalars['numeric']>;
  last_total?: InputMaybe<Scalars['numeric']>;
  member_money?: InputMaybe<Scalars['numeric']>;
  method_id?: InputMaybe<Scalars['String']>;
  method_text?: InputMaybe<Scalars['String']>;
  modify_time?: InputMaybe<Scalars['timestamp']>;
  not_income_money?: InputMaybe<Scalars['numeric']>;
  orig_price?: InputMaybe<Scalars['numeric']>;
  orig_subtotal?: InputMaybe<Scalars['numeric']>;
  pkg_flg?: InputMaybe<Scalars['Int']>;
  pkg_flg_name?: InputMaybe<Scalars['String']>;
  pkg_sc_id?: InputMaybe<Scalars['Int']>;
  present_money?: InputMaybe<Scalars['numeric']>;
  promote_money?: InputMaybe<Scalars['numeric']>;
  rz_name?: InputMaybe<Scalars['String']>;
  sale_price?: InputMaybe<Scalars['numeric']>;
  sales_revenue_type_id?: InputMaybe<Scalars['String']>;
  sc_id?: InputMaybe<Scalars['bigint']>;
  settle_time?: InputMaybe<Scalars['timestamp']>;
  size_code?: InputMaybe<Scalars['String']>;
  size_id?: InputMaybe<Scalars['bigint']>;
  size_name?: InputMaybe<Scalars['String']>;
  small_class_code?: InputMaybe<Scalars['String']>;
  small_class_id?: InputMaybe<Scalars['bigint']>;
  small_class_name?: InputMaybe<Scalars['String']>;
  small_class_out_code?: InputMaybe<Scalars['String']>;
  tax_rate_dinein?: InputMaybe<Scalars['numeric']>;
  tax_rate_takeout?: InputMaybe<Scalars['numeric']>;
  tax_rate_takesale?: InputMaybe<Scalars['numeric']>;
  unit_name?: InputMaybe<Scalars['String']>;
  wipe_money?: InputMaybe<Scalars['numeric']>;
};

/** aggregate stddev on columns */
export type Solditems_Stddev_Fields = {
  __typename?: 'solditems_stddev_fields';
  big_class_id?: Maybe<Scalars['Float']>;
  bs_id?: Maybe<Scalars['Float']>;
  delflg?: Maybe<Scalars['Float']>;
  disc_fix?: Maybe<Scalars['Float']>;
  disc_flg?: Maybe<Scalars['Float']>;
  disc_money?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  income_money?: Maybe<Scalars['Float']>;
  item_type?: Maybe<Scalars['Float']>;
  last_make_fee?: Maybe<Scalars['Float']>;
  last_price?: Maybe<Scalars['Float']>;
  last_qty?: Maybe<Scalars['Float']>;
  last_total?: Maybe<Scalars['Float']>;
  member_money?: Maybe<Scalars['Float']>;
  not_income_money?: Maybe<Scalars['Float']>;
  orig_price?: Maybe<Scalars['Float']>;
  orig_subtotal?: Maybe<Scalars['Float']>;
  pkg_flg?: Maybe<Scalars['Float']>;
  pkg_sc_id?: Maybe<Scalars['Float']>;
  present_money?: Maybe<Scalars['Float']>;
  promote_money?: Maybe<Scalars['Float']>;
  sale_price?: Maybe<Scalars['Float']>;
  sc_id?: Maybe<Scalars['Float']>;
  size_id?: Maybe<Scalars['Float']>;
  small_class_id?: Maybe<Scalars['Float']>;
  tax_rate_dinein?: Maybe<Scalars['Float']>;
  tax_rate_takeout?: Maybe<Scalars['Float']>;
  tax_rate_takesale?: Maybe<Scalars['Float']>;
  wipe_money?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "solditems" */
export type Solditems_Stddev_Order_By = {
  big_class_id?: InputMaybe<Order_By>;
  bs_id?: InputMaybe<Order_By>;
  delflg?: InputMaybe<Order_By>;
  disc_fix?: InputMaybe<Order_By>;
  disc_flg?: InputMaybe<Order_By>;
  disc_money?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  income_money?: InputMaybe<Order_By>;
  item_type?: InputMaybe<Order_By>;
  last_make_fee?: InputMaybe<Order_By>;
  last_price?: InputMaybe<Order_By>;
  last_qty?: InputMaybe<Order_By>;
  last_total?: InputMaybe<Order_By>;
  member_money?: InputMaybe<Order_By>;
  not_income_money?: InputMaybe<Order_By>;
  orig_price?: InputMaybe<Order_By>;
  orig_subtotal?: InputMaybe<Order_By>;
  pkg_flg?: InputMaybe<Order_By>;
  pkg_sc_id?: InputMaybe<Order_By>;
  present_money?: InputMaybe<Order_By>;
  promote_money?: InputMaybe<Order_By>;
  sale_price?: InputMaybe<Order_By>;
  sc_id?: InputMaybe<Order_By>;
  size_id?: InputMaybe<Order_By>;
  small_class_id?: InputMaybe<Order_By>;
  tax_rate_dinein?: InputMaybe<Order_By>;
  tax_rate_takeout?: InputMaybe<Order_By>;
  tax_rate_takesale?: InputMaybe<Order_By>;
  wipe_money?: InputMaybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Solditems_Stddev_Pop_Fields = {
  __typename?: 'solditems_stddev_pop_fields';
  big_class_id?: Maybe<Scalars['Float']>;
  bs_id?: Maybe<Scalars['Float']>;
  delflg?: Maybe<Scalars['Float']>;
  disc_fix?: Maybe<Scalars['Float']>;
  disc_flg?: Maybe<Scalars['Float']>;
  disc_money?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  income_money?: Maybe<Scalars['Float']>;
  item_type?: Maybe<Scalars['Float']>;
  last_make_fee?: Maybe<Scalars['Float']>;
  last_price?: Maybe<Scalars['Float']>;
  last_qty?: Maybe<Scalars['Float']>;
  last_total?: Maybe<Scalars['Float']>;
  member_money?: Maybe<Scalars['Float']>;
  not_income_money?: Maybe<Scalars['Float']>;
  orig_price?: Maybe<Scalars['Float']>;
  orig_subtotal?: Maybe<Scalars['Float']>;
  pkg_flg?: Maybe<Scalars['Float']>;
  pkg_sc_id?: Maybe<Scalars['Float']>;
  present_money?: Maybe<Scalars['Float']>;
  promote_money?: Maybe<Scalars['Float']>;
  sale_price?: Maybe<Scalars['Float']>;
  sc_id?: Maybe<Scalars['Float']>;
  size_id?: Maybe<Scalars['Float']>;
  small_class_id?: Maybe<Scalars['Float']>;
  tax_rate_dinein?: Maybe<Scalars['Float']>;
  tax_rate_takeout?: Maybe<Scalars['Float']>;
  tax_rate_takesale?: Maybe<Scalars['Float']>;
  wipe_money?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "solditems" */
export type Solditems_Stddev_Pop_Order_By = {
  big_class_id?: InputMaybe<Order_By>;
  bs_id?: InputMaybe<Order_By>;
  delflg?: InputMaybe<Order_By>;
  disc_fix?: InputMaybe<Order_By>;
  disc_flg?: InputMaybe<Order_By>;
  disc_money?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  income_money?: InputMaybe<Order_By>;
  item_type?: InputMaybe<Order_By>;
  last_make_fee?: InputMaybe<Order_By>;
  last_price?: InputMaybe<Order_By>;
  last_qty?: InputMaybe<Order_By>;
  last_total?: InputMaybe<Order_By>;
  member_money?: InputMaybe<Order_By>;
  not_income_money?: InputMaybe<Order_By>;
  orig_price?: InputMaybe<Order_By>;
  orig_subtotal?: InputMaybe<Order_By>;
  pkg_flg?: InputMaybe<Order_By>;
  pkg_sc_id?: InputMaybe<Order_By>;
  present_money?: InputMaybe<Order_By>;
  promote_money?: InputMaybe<Order_By>;
  sale_price?: InputMaybe<Order_By>;
  sc_id?: InputMaybe<Order_By>;
  size_id?: InputMaybe<Order_By>;
  small_class_id?: InputMaybe<Order_By>;
  tax_rate_dinein?: InputMaybe<Order_By>;
  tax_rate_takeout?: InputMaybe<Order_By>;
  tax_rate_takesale?: InputMaybe<Order_By>;
  wipe_money?: InputMaybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Solditems_Stddev_Samp_Fields = {
  __typename?: 'solditems_stddev_samp_fields';
  big_class_id?: Maybe<Scalars['Float']>;
  bs_id?: Maybe<Scalars['Float']>;
  delflg?: Maybe<Scalars['Float']>;
  disc_fix?: Maybe<Scalars['Float']>;
  disc_flg?: Maybe<Scalars['Float']>;
  disc_money?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  income_money?: Maybe<Scalars['Float']>;
  item_type?: Maybe<Scalars['Float']>;
  last_make_fee?: Maybe<Scalars['Float']>;
  last_price?: Maybe<Scalars['Float']>;
  last_qty?: Maybe<Scalars['Float']>;
  last_total?: Maybe<Scalars['Float']>;
  member_money?: Maybe<Scalars['Float']>;
  not_income_money?: Maybe<Scalars['Float']>;
  orig_price?: Maybe<Scalars['Float']>;
  orig_subtotal?: Maybe<Scalars['Float']>;
  pkg_flg?: Maybe<Scalars['Float']>;
  pkg_sc_id?: Maybe<Scalars['Float']>;
  present_money?: Maybe<Scalars['Float']>;
  promote_money?: Maybe<Scalars['Float']>;
  sale_price?: Maybe<Scalars['Float']>;
  sc_id?: Maybe<Scalars['Float']>;
  size_id?: Maybe<Scalars['Float']>;
  small_class_id?: Maybe<Scalars['Float']>;
  tax_rate_dinein?: Maybe<Scalars['Float']>;
  tax_rate_takeout?: Maybe<Scalars['Float']>;
  tax_rate_takesale?: Maybe<Scalars['Float']>;
  wipe_money?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "solditems" */
export type Solditems_Stddev_Samp_Order_By = {
  big_class_id?: InputMaybe<Order_By>;
  bs_id?: InputMaybe<Order_By>;
  delflg?: InputMaybe<Order_By>;
  disc_fix?: InputMaybe<Order_By>;
  disc_flg?: InputMaybe<Order_By>;
  disc_money?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  income_money?: InputMaybe<Order_By>;
  item_type?: InputMaybe<Order_By>;
  last_make_fee?: InputMaybe<Order_By>;
  last_price?: InputMaybe<Order_By>;
  last_qty?: InputMaybe<Order_By>;
  last_total?: InputMaybe<Order_By>;
  member_money?: InputMaybe<Order_By>;
  not_income_money?: InputMaybe<Order_By>;
  orig_price?: InputMaybe<Order_By>;
  orig_subtotal?: InputMaybe<Order_By>;
  pkg_flg?: InputMaybe<Order_By>;
  pkg_sc_id?: InputMaybe<Order_By>;
  present_money?: InputMaybe<Order_By>;
  promote_money?: InputMaybe<Order_By>;
  sale_price?: InputMaybe<Order_By>;
  sc_id?: InputMaybe<Order_By>;
  size_id?: InputMaybe<Order_By>;
  small_class_id?: InputMaybe<Order_By>;
  tax_rate_dinein?: InputMaybe<Order_By>;
  tax_rate_takeout?: InputMaybe<Order_By>;
  tax_rate_takesale?: InputMaybe<Order_By>;
  wipe_money?: InputMaybe<Order_By>;
};

/** Streaming cursor of the table "solditems" */
export type Solditems_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Solditems_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Solditems_Stream_Cursor_Value_Input = {
  big_class_code?: InputMaybe<Scalars['String']>;
  big_class_id?: InputMaybe<Scalars['bigint']>;
  big_class_name?: InputMaybe<Scalars['String']>;
  big_class_out_code?: InputMaybe<Scalars['String']>;
  bs_id?: InputMaybe<Scalars['bigint']>;
  create_time?: InputMaybe<Scalars['timestamp']>;
  delflg?: InputMaybe<Scalars['Int']>;
  deptCode?: InputMaybe<Scalars['String']>;
  deptId?: InputMaybe<Scalars['String']>;
  deptName?: InputMaybe<Scalars['String']>;
  disc_fix?: InputMaybe<Scalars['numeric']>;
  disc_flg?: InputMaybe<Scalars['Int']>;
  disc_money?: InputMaybe<Scalars['numeric']>;
  disc_name?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['Int']>;
  income_money?: InputMaybe<Scalars['numeric']>;
  is_change_price?: InputMaybe<Scalars['String']>;
  item_aid_code?: InputMaybe<Scalars['String']>;
  item_code?: InputMaybe<Scalars['String']>;
  item_id?: InputMaybe<Scalars['String']>;
  item_name?: InputMaybe<Scalars['String']>;
  item_type?: InputMaybe<Scalars['Int']>;
  item_type_name?: InputMaybe<Scalars['String']>;
  last_make_fee?: InputMaybe<Scalars['numeric']>;
  last_price?: InputMaybe<Scalars['numeric']>;
  last_qty?: InputMaybe<Scalars['numeric']>;
  last_total?: InputMaybe<Scalars['numeric']>;
  member_money?: InputMaybe<Scalars['numeric']>;
  method_id?: InputMaybe<Scalars['String']>;
  method_text?: InputMaybe<Scalars['String']>;
  modify_time?: InputMaybe<Scalars['timestamp']>;
  not_income_money?: InputMaybe<Scalars['numeric']>;
  orig_price?: InputMaybe<Scalars['numeric']>;
  orig_subtotal?: InputMaybe<Scalars['numeric']>;
  pkg_flg?: InputMaybe<Scalars['Int']>;
  pkg_flg_name?: InputMaybe<Scalars['String']>;
  pkg_sc_id?: InputMaybe<Scalars['Int']>;
  present_money?: InputMaybe<Scalars['numeric']>;
  promote_money?: InputMaybe<Scalars['numeric']>;
  rz_name?: InputMaybe<Scalars['String']>;
  sale_price?: InputMaybe<Scalars['numeric']>;
  sales_revenue_type_id?: InputMaybe<Scalars['String']>;
  sc_id?: InputMaybe<Scalars['bigint']>;
  settle_time?: InputMaybe<Scalars['timestamp']>;
  size_code?: InputMaybe<Scalars['String']>;
  size_id?: InputMaybe<Scalars['bigint']>;
  size_name?: InputMaybe<Scalars['String']>;
  small_class_code?: InputMaybe<Scalars['String']>;
  small_class_id?: InputMaybe<Scalars['bigint']>;
  small_class_name?: InputMaybe<Scalars['String']>;
  small_class_out_code?: InputMaybe<Scalars['String']>;
  tax_rate_dinein?: InputMaybe<Scalars['numeric']>;
  tax_rate_takeout?: InputMaybe<Scalars['numeric']>;
  tax_rate_takesale?: InputMaybe<Scalars['numeric']>;
  unit_name?: InputMaybe<Scalars['String']>;
  wipe_money?: InputMaybe<Scalars['numeric']>;
};

/** aggregate sum on columns */
export type Solditems_Sum_Fields = {
  __typename?: 'solditems_sum_fields';
  big_class_id?: Maybe<Scalars['bigint']>;
  bs_id?: Maybe<Scalars['bigint']>;
  delflg?: Maybe<Scalars['Int']>;
  disc_fix?: Maybe<Scalars['numeric']>;
  disc_flg?: Maybe<Scalars['Int']>;
  disc_money?: Maybe<Scalars['numeric']>;
  id?: Maybe<Scalars['Int']>;
  income_money?: Maybe<Scalars['numeric']>;
  item_type?: Maybe<Scalars['Int']>;
  last_make_fee?: Maybe<Scalars['numeric']>;
  last_price?: Maybe<Scalars['numeric']>;
  last_qty?: Maybe<Scalars['numeric']>;
  last_total?: Maybe<Scalars['numeric']>;
  member_money?: Maybe<Scalars['numeric']>;
  not_income_money?: Maybe<Scalars['numeric']>;
  orig_price?: Maybe<Scalars['numeric']>;
  orig_subtotal?: Maybe<Scalars['numeric']>;
  pkg_flg?: Maybe<Scalars['Int']>;
  pkg_sc_id?: Maybe<Scalars['Int']>;
  present_money?: Maybe<Scalars['numeric']>;
  promote_money?: Maybe<Scalars['numeric']>;
  sale_price?: Maybe<Scalars['numeric']>;
  sc_id?: Maybe<Scalars['bigint']>;
  size_id?: Maybe<Scalars['bigint']>;
  small_class_id?: Maybe<Scalars['bigint']>;
  tax_rate_dinein?: Maybe<Scalars['numeric']>;
  tax_rate_takeout?: Maybe<Scalars['numeric']>;
  tax_rate_takesale?: Maybe<Scalars['numeric']>;
  wipe_money?: Maybe<Scalars['numeric']>;
};

/** order by sum() on columns of table "solditems" */
export type Solditems_Sum_Order_By = {
  big_class_id?: InputMaybe<Order_By>;
  bs_id?: InputMaybe<Order_By>;
  delflg?: InputMaybe<Order_By>;
  disc_fix?: InputMaybe<Order_By>;
  disc_flg?: InputMaybe<Order_By>;
  disc_money?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  income_money?: InputMaybe<Order_By>;
  item_type?: InputMaybe<Order_By>;
  last_make_fee?: InputMaybe<Order_By>;
  last_price?: InputMaybe<Order_By>;
  last_qty?: InputMaybe<Order_By>;
  last_total?: InputMaybe<Order_By>;
  member_money?: InputMaybe<Order_By>;
  not_income_money?: InputMaybe<Order_By>;
  orig_price?: InputMaybe<Order_By>;
  orig_subtotal?: InputMaybe<Order_By>;
  pkg_flg?: InputMaybe<Order_By>;
  pkg_sc_id?: InputMaybe<Order_By>;
  present_money?: InputMaybe<Order_By>;
  promote_money?: InputMaybe<Order_By>;
  sale_price?: InputMaybe<Order_By>;
  sc_id?: InputMaybe<Order_By>;
  size_id?: InputMaybe<Order_By>;
  small_class_id?: InputMaybe<Order_By>;
  tax_rate_dinein?: InputMaybe<Order_By>;
  tax_rate_takeout?: InputMaybe<Order_By>;
  tax_rate_takesale?: InputMaybe<Order_By>;
  wipe_money?: InputMaybe<Order_By>;
};

/** columns and relationships of "solditems_summary" */
export type Solditems_Summary = {
  __typename?: 'solditems_summary';
  /** An object relationship */
  fooditem?: Maybe<Fooditems>;
  income_money?: Maybe<Scalars['numeric']>;
  item_id?: Maybe<Scalars['String']>;
  last_price?: Maybe<Scalars['numeric']>;
  last_qty?: Maybe<Scalars['numeric']>;
};

export type Solditems_Summary_Aggregate = {
  __typename?: 'solditems_summary_aggregate';
  aggregate?: Maybe<Solditems_Summary_Aggregate_Fields>;
  nodes: Array<Solditems_Summary>;
};

/** aggregate fields of "solditems_summary" */
export type Solditems_Summary_Aggregate_Fields = {
  __typename?: 'solditems_summary_aggregate_fields';
  avg?: Maybe<Solditems_Summary_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Solditems_Summary_Max_Fields>;
  min?: Maybe<Solditems_Summary_Min_Fields>;
  stddev?: Maybe<Solditems_Summary_Stddev_Fields>;
  stddev_pop?: Maybe<Solditems_Summary_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Solditems_Summary_Stddev_Samp_Fields>;
  sum?: Maybe<Solditems_Summary_Sum_Fields>;
  var_pop?: Maybe<Solditems_Summary_Var_Pop_Fields>;
  var_samp?: Maybe<Solditems_Summary_Var_Samp_Fields>;
  variance?: Maybe<Solditems_Summary_Variance_Fields>;
};


/** aggregate fields of "solditems_summary" */
export type Solditems_Summary_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Solditems_Summary_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** aggregate avg on columns */
export type Solditems_Summary_Avg_Fields = {
  __typename?: 'solditems_summary_avg_fields';
  income_money?: Maybe<Scalars['Float']>;
  last_price?: Maybe<Scalars['Float']>;
  last_qty?: Maybe<Scalars['Float']>;
};

/** Boolean expression to filter rows from the table "solditems_summary". All fields are combined with a logical 'AND'. */
export type Solditems_Summary_Bool_Exp = {
  _and?: InputMaybe<Array<Solditems_Summary_Bool_Exp>>;
  _not?: InputMaybe<Solditems_Summary_Bool_Exp>;
  _or?: InputMaybe<Array<Solditems_Summary_Bool_Exp>>;
  fooditem?: InputMaybe<Fooditems_Bool_Exp>;
  income_money?: InputMaybe<Numeric_Comparison_Exp>;
  item_id?: InputMaybe<String_Comparison_Exp>;
  last_price?: InputMaybe<Numeric_Comparison_Exp>;
  last_qty?: InputMaybe<Numeric_Comparison_Exp>;
};

/** input type for incrementing numeric columns in table "solditems_summary" */
export type Solditems_Summary_Inc_Input = {
  income_money?: InputMaybe<Scalars['numeric']>;
  last_price?: InputMaybe<Scalars['numeric']>;
  last_qty?: InputMaybe<Scalars['numeric']>;
};

/** input type for inserting data into table "solditems_summary" */
export type Solditems_Summary_Insert_Input = {
  fooditem?: InputMaybe<Fooditems_Obj_Rel_Insert_Input>;
  income_money?: InputMaybe<Scalars['numeric']>;
  item_id?: InputMaybe<Scalars['String']>;
  last_price?: InputMaybe<Scalars['numeric']>;
  last_qty?: InputMaybe<Scalars['numeric']>;
};

/** aggregate max on columns */
export type Solditems_Summary_Max_Fields = {
  __typename?: 'solditems_summary_max_fields';
  income_money?: Maybe<Scalars['numeric']>;
  item_id?: Maybe<Scalars['String']>;
  last_price?: Maybe<Scalars['numeric']>;
  last_qty?: Maybe<Scalars['numeric']>;
};

/** aggregate min on columns */
export type Solditems_Summary_Min_Fields = {
  __typename?: 'solditems_summary_min_fields';
  income_money?: Maybe<Scalars['numeric']>;
  item_id?: Maybe<Scalars['String']>;
  last_price?: Maybe<Scalars['numeric']>;
  last_qty?: Maybe<Scalars['numeric']>;
};

/** response of any mutation on the table "solditems_summary" */
export type Solditems_Summary_Mutation_Response = {
  __typename?: 'solditems_summary_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Solditems_Summary>;
};

/** Ordering options when selecting data from "solditems_summary". */
export type Solditems_Summary_Order_By = {
  fooditem?: InputMaybe<Fooditems_Order_By>;
  income_money?: InputMaybe<Order_By>;
  item_id?: InputMaybe<Order_By>;
  last_price?: InputMaybe<Order_By>;
  last_qty?: InputMaybe<Order_By>;
};

/** select columns of table "solditems_summary" */
export enum Solditems_Summary_Select_Column {
  /** column name */
  IncomeMoney = 'income_money',
  /** column name */
  ItemId = 'item_id',
  /** column name */
  LastPrice = 'last_price',
  /** column name */
  LastQty = 'last_qty'
}

/** input type for updating data in table "solditems_summary" */
export type Solditems_Summary_Set_Input = {
  income_money?: InputMaybe<Scalars['numeric']>;
  item_id?: InputMaybe<Scalars['String']>;
  last_price?: InputMaybe<Scalars['numeric']>;
  last_qty?: InputMaybe<Scalars['numeric']>;
};

/** aggregate stddev on columns */
export type Solditems_Summary_Stddev_Fields = {
  __typename?: 'solditems_summary_stddev_fields';
  income_money?: Maybe<Scalars['Float']>;
  last_price?: Maybe<Scalars['Float']>;
  last_qty?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_pop on columns */
export type Solditems_Summary_Stddev_Pop_Fields = {
  __typename?: 'solditems_summary_stddev_pop_fields';
  income_money?: Maybe<Scalars['Float']>;
  last_price?: Maybe<Scalars['Float']>;
  last_qty?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_samp on columns */
export type Solditems_Summary_Stddev_Samp_Fields = {
  __typename?: 'solditems_summary_stddev_samp_fields';
  income_money?: Maybe<Scalars['Float']>;
  last_price?: Maybe<Scalars['Float']>;
  last_qty?: Maybe<Scalars['Float']>;
};

/** Streaming cursor of the table "solditems_summary" */
export type Solditems_Summary_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Solditems_Summary_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Solditems_Summary_Stream_Cursor_Value_Input = {
  income_money?: InputMaybe<Scalars['numeric']>;
  item_id?: InputMaybe<Scalars['String']>;
  last_price?: InputMaybe<Scalars['numeric']>;
  last_qty?: InputMaybe<Scalars['numeric']>;
};

/** aggregate sum on columns */
export type Solditems_Summary_Sum_Fields = {
  __typename?: 'solditems_summary_sum_fields';
  income_money?: Maybe<Scalars['numeric']>;
  last_price?: Maybe<Scalars['numeric']>;
  last_qty?: Maybe<Scalars['numeric']>;
};

export type Solditems_Summary_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: InputMaybe<Solditems_Summary_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Solditems_Summary_Set_Input>;
  /** filter the rows which have to be updated */
  where: Solditems_Summary_Bool_Exp;
};

/** aggregate var_pop on columns */
export type Solditems_Summary_Var_Pop_Fields = {
  __typename?: 'solditems_summary_var_pop_fields';
  income_money?: Maybe<Scalars['Float']>;
  last_price?: Maybe<Scalars['Float']>;
  last_qty?: Maybe<Scalars['Float']>;
};

/** aggregate var_samp on columns */
export type Solditems_Summary_Var_Samp_Fields = {
  __typename?: 'solditems_summary_var_samp_fields';
  income_money?: Maybe<Scalars['Float']>;
  last_price?: Maybe<Scalars['Float']>;
  last_qty?: Maybe<Scalars['Float']>;
};

/** aggregate variance on columns */
export type Solditems_Summary_Variance_Fields = {
  __typename?: 'solditems_summary_variance_fields';
  income_money?: Maybe<Scalars['Float']>;
  last_price?: Maybe<Scalars['Float']>;
  last_qty?: Maybe<Scalars['Float']>;
};

/** update columns of table "solditems" */
export enum Solditems_Update_Column {
  /** column name */
  BigClassCode = 'big_class_code',
  /** column name */
  BigClassId = 'big_class_id',
  /** column name */
  BigClassName = 'big_class_name',
  /** column name */
  BigClassOutCode = 'big_class_out_code',
  /** column name */
  BsId = 'bs_id',
  /** column name */
  CreateTime = 'create_time',
  /** column name */
  Delflg = 'delflg',
  /** column name */
  DeptCode = 'deptCode',
  /** column name */
  DeptId = 'deptId',
  /** column name */
  DeptName = 'deptName',
  /** column name */
  DiscFix = 'disc_fix',
  /** column name */
  DiscFlg = 'disc_flg',
  /** column name */
  DiscMoney = 'disc_money',
  /** column name */
  DiscName = 'disc_name',
  /** column name */
  Id = 'id',
  /** column name */
  IncomeMoney = 'income_money',
  /** column name */
  IsChangePrice = 'is_change_price',
  /** column name */
  ItemAidCode = 'item_aid_code',
  /** column name */
  ItemCode = 'item_code',
  /** column name */
  ItemId = 'item_id',
  /** column name */
  ItemName = 'item_name',
  /** column name */
  ItemType = 'item_type',
  /** column name */
  ItemTypeName = 'item_type_name',
  /** column name */
  LastMakeFee = 'last_make_fee',
  /** column name */
  LastPrice = 'last_price',
  /** column name */
  LastQty = 'last_qty',
  /** column name */
  LastTotal = 'last_total',
  /** column name */
  MemberMoney = 'member_money',
  /** column name */
  MethodId = 'method_id',
  /** column name */
  MethodText = 'method_text',
  /** column name */
  ModifyTime = 'modify_time',
  /** column name */
  NotIncomeMoney = 'not_income_money',
  /** column name */
  OrigPrice = 'orig_price',
  /** column name */
  OrigSubtotal = 'orig_subtotal',
  /** column name */
  PkgFlg = 'pkg_flg',
  /** column name */
  PkgFlgName = 'pkg_flg_name',
  /** column name */
  PkgScId = 'pkg_sc_id',
  /** column name */
  PresentMoney = 'present_money',
  /** column name */
  PromoteMoney = 'promote_money',
  /** column name */
  RzName = 'rz_name',
  /** column name */
  SalePrice = 'sale_price',
  /** column name */
  SalesRevenueTypeId = 'sales_revenue_type_id',
  /** column name */
  ScId = 'sc_id',
  /** column name */
  SettleTime = 'settle_time',
  /** column name */
  SizeCode = 'size_code',
  /** column name */
  SizeId = 'size_id',
  /** column name */
  SizeName = 'size_name',
  /** column name */
  SmallClassCode = 'small_class_code',
  /** column name */
  SmallClassId = 'small_class_id',
  /** column name */
  SmallClassName = 'small_class_name',
  /** column name */
  SmallClassOutCode = 'small_class_out_code',
  /** column name */
  TaxRateDinein = 'tax_rate_dinein',
  /** column name */
  TaxRateTakeout = 'tax_rate_takeout',
  /** column name */
  TaxRateTakesale = 'tax_rate_takesale',
  /** column name */
  UnitName = 'unit_name',
  /** column name */
  WipeMoney = 'wipe_money'
}

export type Solditems_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: InputMaybe<Solditems_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Solditems_Set_Input>;
  /** filter the rows which have to be updated */
  where: Solditems_Bool_Exp;
};

/** aggregate var_pop on columns */
export type Solditems_Var_Pop_Fields = {
  __typename?: 'solditems_var_pop_fields';
  big_class_id?: Maybe<Scalars['Float']>;
  bs_id?: Maybe<Scalars['Float']>;
  delflg?: Maybe<Scalars['Float']>;
  disc_fix?: Maybe<Scalars['Float']>;
  disc_flg?: Maybe<Scalars['Float']>;
  disc_money?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  income_money?: Maybe<Scalars['Float']>;
  item_type?: Maybe<Scalars['Float']>;
  last_make_fee?: Maybe<Scalars['Float']>;
  last_price?: Maybe<Scalars['Float']>;
  last_qty?: Maybe<Scalars['Float']>;
  last_total?: Maybe<Scalars['Float']>;
  member_money?: Maybe<Scalars['Float']>;
  not_income_money?: Maybe<Scalars['Float']>;
  orig_price?: Maybe<Scalars['Float']>;
  orig_subtotal?: Maybe<Scalars['Float']>;
  pkg_flg?: Maybe<Scalars['Float']>;
  pkg_sc_id?: Maybe<Scalars['Float']>;
  present_money?: Maybe<Scalars['Float']>;
  promote_money?: Maybe<Scalars['Float']>;
  sale_price?: Maybe<Scalars['Float']>;
  sc_id?: Maybe<Scalars['Float']>;
  size_id?: Maybe<Scalars['Float']>;
  small_class_id?: Maybe<Scalars['Float']>;
  tax_rate_dinein?: Maybe<Scalars['Float']>;
  tax_rate_takeout?: Maybe<Scalars['Float']>;
  tax_rate_takesale?: Maybe<Scalars['Float']>;
  wipe_money?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "solditems" */
export type Solditems_Var_Pop_Order_By = {
  big_class_id?: InputMaybe<Order_By>;
  bs_id?: InputMaybe<Order_By>;
  delflg?: InputMaybe<Order_By>;
  disc_fix?: InputMaybe<Order_By>;
  disc_flg?: InputMaybe<Order_By>;
  disc_money?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  income_money?: InputMaybe<Order_By>;
  item_type?: InputMaybe<Order_By>;
  last_make_fee?: InputMaybe<Order_By>;
  last_price?: InputMaybe<Order_By>;
  last_qty?: InputMaybe<Order_By>;
  last_total?: InputMaybe<Order_By>;
  member_money?: InputMaybe<Order_By>;
  not_income_money?: InputMaybe<Order_By>;
  orig_price?: InputMaybe<Order_By>;
  orig_subtotal?: InputMaybe<Order_By>;
  pkg_flg?: InputMaybe<Order_By>;
  pkg_sc_id?: InputMaybe<Order_By>;
  present_money?: InputMaybe<Order_By>;
  promote_money?: InputMaybe<Order_By>;
  sale_price?: InputMaybe<Order_By>;
  sc_id?: InputMaybe<Order_By>;
  size_id?: InputMaybe<Order_By>;
  small_class_id?: InputMaybe<Order_By>;
  tax_rate_dinein?: InputMaybe<Order_By>;
  tax_rate_takeout?: InputMaybe<Order_By>;
  tax_rate_takesale?: InputMaybe<Order_By>;
  wipe_money?: InputMaybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Solditems_Var_Samp_Fields = {
  __typename?: 'solditems_var_samp_fields';
  big_class_id?: Maybe<Scalars['Float']>;
  bs_id?: Maybe<Scalars['Float']>;
  delflg?: Maybe<Scalars['Float']>;
  disc_fix?: Maybe<Scalars['Float']>;
  disc_flg?: Maybe<Scalars['Float']>;
  disc_money?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  income_money?: Maybe<Scalars['Float']>;
  item_type?: Maybe<Scalars['Float']>;
  last_make_fee?: Maybe<Scalars['Float']>;
  last_price?: Maybe<Scalars['Float']>;
  last_qty?: Maybe<Scalars['Float']>;
  last_total?: Maybe<Scalars['Float']>;
  member_money?: Maybe<Scalars['Float']>;
  not_income_money?: Maybe<Scalars['Float']>;
  orig_price?: Maybe<Scalars['Float']>;
  orig_subtotal?: Maybe<Scalars['Float']>;
  pkg_flg?: Maybe<Scalars['Float']>;
  pkg_sc_id?: Maybe<Scalars['Float']>;
  present_money?: Maybe<Scalars['Float']>;
  promote_money?: Maybe<Scalars['Float']>;
  sale_price?: Maybe<Scalars['Float']>;
  sc_id?: Maybe<Scalars['Float']>;
  size_id?: Maybe<Scalars['Float']>;
  small_class_id?: Maybe<Scalars['Float']>;
  tax_rate_dinein?: Maybe<Scalars['Float']>;
  tax_rate_takeout?: Maybe<Scalars['Float']>;
  tax_rate_takesale?: Maybe<Scalars['Float']>;
  wipe_money?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "solditems" */
export type Solditems_Var_Samp_Order_By = {
  big_class_id?: InputMaybe<Order_By>;
  bs_id?: InputMaybe<Order_By>;
  delflg?: InputMaybe<Order_By>;
  disc_fix?: InputMaybe<Order_By>;
  disc_flg?: InputMaybe<Order_By>;
  disc_money?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  income_money?: InputMaybe<Order_By>;
  item_type?: InputMaybe<Order_By>;
  last_make_fee?: InputMaybe<Order_By>;
  last_price?: InputMaybe<Order_By>;
  last_qty?: InputMaybe<Order_By>;
  last_total?: InputMaybe<Order_By>;
  member_money?: InputMaybe<Order_By>;
  not_income_money?: InputMaybe<Order_By>;
  orig_price?: InputMaybe<Order_By>;
  orig_subtotal?: InputMaybe<Order_By>;
  pkg_flg?: InputMaybe<Order_By>;
  pkg_sc_id?: InputMaybe<Order_By>;
  present_money?: InputMaybe<Order_By>;
  promote_money?: InputMaybe<Order_By>;
  sale_price?: InputMaybe<Order_By>;
  sc_id?: InputMaybe<Order_By>;
  size_id?: InputMaybe<Order_By>;
  small_class_id?: InputMaybe<Order_By>;
  tax_rate_dinein?: InputMaybe<Order_By>;
  tax_rate_takeout?: InputMaybe<Order_By>;
  tax_rate_takesale?: InputMaybe<Order_By>;
  wipe_money?: InputMaybe<Order_By>;
};

/** aggregate variance on columns */
export type Solditems_Variance_Fields = {
  __typename?: 'solditems_variance_fields';
  big_class_id?: Maybe<Scalars['Float']>;
  bs_id?: Maybe<Scalars['Float']>;
  delflg?: Maybe<Scalars['Float']>;
  disc_fix?: Maybe<Scalars['Float']>;
  disc_flg?: Maybe<Scalars['Float']>;
  disc_money?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  income_money?: Maybe<Scalars['Float']>;
  item_type?: Maybe<Scalars['Float']>;
  last_make_fee?: Maybe<Scalars['Float']>;
  last_price?: Maybe<Scalars['Float']>;
  last_qty?: Maybe<Scalars['Float']>;
  last_total?: Maybe<Scalars['Float']>;
  member_money?: Maybe<Scalars['Float']>;
  not_income_money?: Maybe<Scalars['Float']>;
  orig_price?: Maybe<Scalars['Float']>;
  orig_subtotal?: Maybe<Scalars['Float']>;
  pkg_flg?: Maybe<Scalars['Float']>;
  pkg_sc_id?: Maybe<Scalars['Float']>;
  present_money?: Maybe<Scalars['Float']>;
  promote_money?: Maybe<Scalars['Float']>;
  sale_price?: Maybe<Scalars['Float']>;
  sc_id?: Maybe<Scalars['Float']>;
  size_id?: Maybe<Scalars['Float']>;
  small_class_id?: Maybe<Scalars['Float']>;
  tax_rate_dinein?: Maybe<Scalars['Float']>;
  tax_rate_takeout?: Maybe<Scalars['Float']>;
  tax_rate_takesale?: Maybe<Scalars['Float']>;
  wipe_money?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "solditems" */
export type Solditems_Variance_Order_By = {
  big_class_id?: InputMaybe<Order_By>;
  bs_id?: InputMaybe<Order_By>;
  delflg?: InputMaybe<Order_By>;
  disc_fix?: InputMaybe<Order_By>;
  disc_flg?: InputMaybe<Order_By>;
  disc_money?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  income_money?: InputMaybe<Order_By>;
  item_type?: InputMaybe<Order_By>;
  last_make_fee?: InputMaybe<Order_By>;
  last_price?: InputMaybe<Order_By>;
  last_qty?: InputMaybe<Order_By>;
  last_total?: InputMaybe<Order_By>;
  member_money?: InputMaybe<Order_By>;
  not_income_money?: InputMaybe<Order_By>;
  orig_price?: InputMaybe<Order_By>;
  orig_subtotal?: InputMaybe<Order_By>;
  pkg_flg?: InputMaybe<Order_By>;
  pkg_sc_id?: InputMaybe<Order_By>;
  present_money?: InputMaybe<Order_By>;
  promote_money?: InputMaybe<Order_By>;
  sale_price?: InputMaybe<Order_By>;
  sc_id?: InputMaybe<Order_By>;
  size_id?: InputMaybe<Order_By>;
  small_class_id?: InputMaybe<Order_By>;
  tax_rate_dinein?: InputMaybe<Order_By>;
  tax_rate_takeout?: InputMaybe<Order_By>;
  tax_rate_takesale?: InputMaybe<Order_By>;
  wipe_money?: InputMaybe<Order_By>;
};

/** columns and relationships of "store_employee" */
export type Store_Employee = {
  __typename?: 'store_employee';
  /** An object relationship */
  employee: Employees;
  employee_id: Scalars['String'];
  /** An object relationship */
  store: Stores;
  store_id: Scalars['String'];
};

/** aggregated selection of "store_employee" */
export type Store_Employee_Aggregate = {
  __typename?: 'store_employee_aggregate';
  aggregate?: Maybe<Store_Employee_Aggregate_Fields>;
  nodes: Array<Store_Employee>;
};

export type Store_Employee_Aggregate_Bool_Exp = {
  count?: InputMaybe<Store_Employee_Aggregate_Bool_Exp_Count>;
};

export type Store_Employee_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<Store_Employee_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<Store_Employee_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "store_employee" */
export type Store_Employee_Aggregate_Fields = {
  __typename?: 'store_employee_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Store_Employee_Max_Fields>;
  min?: Maybe<Store_Employee_Min_Fields>;
};


/** aggregate fields of "store_employee" */
export type Store_Employee_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Store_Employee_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "store_employee" */
export type Store_Employee_Aggregate_Order_By = {
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<Store_Employee_Max_Order_By>;
  min?: InputMaybe<Store_Employee_Min_Order_By>;
};

/** input type for inserting array relation for remote table "store_employee" */
export type Store_Employee_Arr_Rel_Insert_Input = {
  data: Array<Store_Employee_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<Store_Employee_On_Conflict>;
};

/** Boolean expression to filter rows from the table "store_employee". All fields are combined with a logical 'AND'. */
export type Store_Employee_Bool_Exp = {
  _and?: InputMaybe<Array<Store_Employee_Bool_Exp>>;
  _not?: InputMaybe<Store_Employee_Bool_Exp>;
  _or?: InputMaybe<Array<Store_Employee_Bool_Exp>>;
  employee?: InputMaybe<Employees_Bool_Exp>;
  employee_id?: InputMaybe<String_Comparison_Exp>;
  store?: InputMaybe<Stores_Bool_Exp>;
  store_id?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "store_employee" */
export enum Store_Employee_Constraint {
  /** unique or primary key constraint on columns "employee_id", "store_id" */
  StoreEmployeePrimary43 = 'store_employeePRIMARY43'
}

/** input type for inserting data into table "store_employee" */
export type Store_Employee_Insert_Input = {
  employee?: InputMaybe<Employees_Obj_Rel_Insert_Input>;
  employee_id?: InputMaybe<Scalars['String']>;
  store?: InputMaybe<Stores_Obj_Rel_Insert_Input>;
  store_id?: InputMaybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Store_Employee_Max_Fields = {
  __typename?: 'store_employee_max_fields';
  employee_id?: Maybe<Scalars['String']>;
  store_id?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "store_employee" */
export type Store_Employee_Max_Order_By = {
  employee_id?: InputMaybe<Order_By>;
  store_id?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type Store_Employee_Min_Fields = {
  __typename?: 'store_employee_min_fields';
  employee_id?: Maybe<Scalars['String']>;
  store_id?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "store_employee" */
export type Store_Employee_Min_Order_By = {
  employee_id?: InputMaybe<Order_By>;
  store_id?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "store_employee" */
export type Store_Employee_Mutation_Response = {
  __typename?: 'store_employee_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Store_Employee>;
};

/** on_conflict condition type for table "store_employee" */
export type Store_Employee_On_Conflict = {
  constraint: Store_Employee_Constraint;
  update_columns?: Array<Store_Employee_Update_Column>;
  where?: InputMaybe<Store_Employee_Bool_Exp>;
};

/** Ordering options when selecting data from "store_employee". */
export type Store_Employee_Order_By = {
  employee?: InputMaybe<Employees_Order_By>;
  employee_id?: InputMaybe<Order_By>;
  store?: InputMaybe<Stores_Order_By>;
  store_id?: InputMaybe<Order_By>;
};

/** primary key columns input for table: store_employee */
export type Store_Employee_Pk_Columns_Input = {
  employee_id: Scalars['String'];
  store_id: Scalars['String'];
};

/** select columns of table "store_employee" */
export enum Store_Employee_Select_Column {
  /** column name */
  EmployeeId = 'employee_id',
  /** column name */
  StoreId = 'store_id'
}

/** input type for updating data in table "store_employee" */
export type Store_Employee_Set_Input = {
  employee_id?: InputMaybe<Scalars['String']>;
  store_id?: InputMaybe<Scalars['String']>;
};

/** Streaming cursor of the table "store_employee" */
export type Store_Employee_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Store_Employee_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Store_Employee_Stream_Cursor_Value_Input = {
  employee_id?: InputMaybe<Scalars['String']>;
  store_id?: InputMaybe<Scalars['String']>;
};

/** update columns of table "store_employee" */
export enum Store_Employee_Update_Column {
  /** column name */
  EmployeeId = 'employee_id',
  /** column name */
  StoreId = 'store_id'
}

export type Store_Employee_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Store_Employee_Set_Input>;
  /** filter the rows which have to be updated */
  where: Store_Employee_Bool_Exp;
};

/** columns and relationships of "stores" */
export type Stores = {
  __typename?: 'stores';
  /** An array relationship */
  attendance_groups: Array<Attendance_Groups>;
  /** An aggregate relationship */
  attendance_groups_aggregate: Attendance_Groups_Aggregate;
  /** An array relationship */
  bills: Array<Bills>;
  /** An aggregate relationship */
  bills_aggregate: Bills_Aggregate;
  /** An object relationship */
  brand: Brands;
  brand_id: Scalars['String'];
  /** An object relationship */
  department?: Maybe<Departments>;
  department_id?: Maybe<Scalars['String']>;
  /** An array relationship */
  departments: Array<Departments>;
  /** An aggregate relationship */
  departments_aggregate: Departments_Aggregate;
  /** An array relationship */
  departmentstores: Array<Departments_Stores>;
  /** An aggregate relationship */
  departmentstores_aggregate: Departments_Stores_Aggregate;
  id: Scalars['String'];
  is_operation?: Maybe<Scalars['smallint']>;
  name?: Maybe<Scalars['String']>;
  salary_account?: Maybe<Scalars['String']>;
  seat_count?: Maybe<Scalars['Int']>;
  status?: Maybe<Scalars['Int']>;
  store?: Maybe<Scalars['String']>;
  /** An array relationship */
  store_employees: Array<Store_Employee>;
  /** An aggregate relationship */
  store_employees_aggregate: Store_Employee_Aggregate;
  supply_shop_id?: Maybe<Scalars['String']>;
  table_count?: Maybe<Scalars['Int']>;
};


/** columns and relationships of "stores" */
export type StoresAttendance_GroupsArgs = {
  distinct_on?: InputMaybe<Array<Attendance_Groups_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Attendance_Groups_Order_By>>;
  where?: InputMaybe<Attendance_Groups_Bool_Exp>;
};


/** columns and relationships of "stores" */
export type StoresAttendance_Groups_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Attendance_Groups_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Attendance_Groups_Order_By>>;
  where?: InputMaybe<Attendance_Groups_Bool_Exp>;
};


/** columns and relationships of "stores" */
export type StoresBillsArgs = {
  distinct_on?: InputMaybe<Array<Bills_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Bills_Order_By>>;
  where?: InputMaybe<Bills_Bool_Exp>;
};


/** columns and relationships of "stores" */
export type StoresBills_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Bills_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Bills_Order_By>>;
  where?: InputMaybe<Bills_Bool_Exp>;
};


/** columns and relationships of "stores" */
export type StoresDepartmentsArgs = {
  distinct_on?: InputMaybe<Array<Departments_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Departments_Order_By>>;
  where?: InputMaybe<Departments_Bool_Exp>;
};


/** columns and relationships of "stores" */
export type StoresDepartments_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Departments_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Departments_Order_By>>;
  where?: InputMaybe<Departments_Bool_Exp>;
};


/** columns and relationships of "stores" */
export type StoresDepartmentstoresArgs = {
  distinct_on?: InputMaybe<Array<Departments_Stores_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Departments_Stores_Order_By>>;
  where?: InputMaybe<Departments_Stores_Bool_Exp>;
};


/** columns and relationships of "stores" */
export type StoresDepartmentstores_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Departments_Stores_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Departments_Stores_Order_By>>;
  where?: InputMaybe<Departments_Stores_Bool_Exp>;
};


/** columns and relationships of "stores" */
export type StoresStore_EmployeesArgs = {
  distinct_on?: InputMaybe<Array<Store_Employee_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Store_Employee_Order_By>>;
  where?: InputMaybe<Store_Employee_Bool_Exp>;
};


/** columns and relationships of "stores" */
export type StoresStore_Employees_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Store_Employee_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Store_Employee_Order_By>>;
  where?: InputMaybe<Store_Employee_Bool_Exp>;
};

/** aggregated selection of "stores" */
export type Stores_Aggregate = {
  __typename?: 'stores_aggregate';
  aggregate?: Maybe<Stores_Aggregate_Fields>;
  nodes: Array<Stores>;
};

export type Stores_Aggregate_Bool_Exp = {
  count?: InputMaybe<Stores_Aggregate_Bool_Exp_Count>;
};

export type Stores_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<Stores_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<Stores_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "stores" */
export type Stores_Aggregate_Fields = {
  __typename?: 'stores_aggregate_fields';
  avg?: Maybe<Stores_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Stores_Max_Fields>;
  min?: Maybe<Stores_Min_Fields>;
  stddev?: Maybe<Stores_Stddev_Fields>;
  stddev_pop?: Maybe<Stores_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Stores_Stddev_Samp_Fields>;
  sum?: Maybe<Stores_Sum_Fields>;
  var_pop?: Maybe<Stores_Var_Pop_Fields>;
  var_samp?: Maybe<Stores_Var_Samp_Fields>;
  variance?: Maybe<Stores_Variance_Fields>;
};


/** aggregate fields of "stores" */
export type Stores_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Stores_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "stores" */
export type Stores_Aggregate_Order_By = {
  avg?: InputMaybe<Stores_Avg_Order_By>;
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<Stores_Max_Order_By>;
  min?: InputMaybe<Stores_Min_Order_By>;
  stddev?: InputMaybe<Stores_Stddev_Order_By>;
  stddev_pop?: InputMaybe<Stores_Stddev_Pop_Order_By>;
  stddev_samp?: InputMaybe<Stores_Stddev_Samp_Order_By>;
  sum?: InputMaybe<Stores_Sum_Order_By>;
  var_pop?: InputMaybe<Stores_Var_Pop_Order_By>;
  var_samp?: InputMaybe<Stores_Var_Samp_Order_By>;
  variance?: InputMaybe<Stores_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "stores" */
export type Stores_Arr_Rel_Insert_Input = {
  data: Array<Stores_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<Stores_On_Conflict>;
};

/** aggregate avg on columns */
export type Stores_Avg_Fields = {
  __typename?: 'stores_avg_fields';
  is_operation?: Maybe<Scalars['Float']>;
  seat_count?: Maybe<Scalars['Float']>;
  status?: Maybe<Scalars['Float']>;
  table_count?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "stores" */
export type Stores_Avg_Order_By = {
  is_operation?: InputMaybe<Order_By>;
  seat_count?: InputMaybe<Order_By>;
  status?: InputMaybe<Order_By>;
  table_count?: InputMaybe<Order_By>;
};

/** Boolean expression to filter rows from the table "stores". All fields are combined with a logical 'AND'. */
export type Stores_Bool_Exp = {
  _and?: InputMaybe<Array<Stores_Bool_Exp>>;
  _not?: InputMaybe<Stores_Bool_Exp>;
  _or?: InputMaybe<Array<Stores_Bool_Exp>>;
  attendance_groups?: InputMaybe<Attendance_Groups_Bool_Exp>;
  attendance_groups_aggregate?: InputMaybe<Attendance_Groups_Aggregate_Bool_Exp>;
  bills?: InputMaybe<Bills_Bool_Exp>;
  bills_aggregate?: InputMaybe<Bills_Aggregate_Bool_Exp>;
  brand?: InputMaybe<Brands_Bool_Exp>;
  brand_id?: InputMaybe<String_Comparison_Exp>;
  department?: InputMaybe<Departments_Bool_Exp>;
  department_id?: InputMaybe<String_Comparison_Exp>;
  departments?: InputMaybe<Departments_Bool_Exp>;
  departments_aggregate?: InputMaybe<Departments_Aggregate_Bool_Exp>;
  departmentstores?: InputMaybe<Departments_Stores_Bool_Exp>;
  departmentstores_aggregate?: InputMaybe<Departments_Stores_Aggregate_Bool_Exp>;
  id?: InputMaybe<String_Comparison_Exp>;
  is_operation?: InputMaybe<Smallint_Comparison_Exp>;
  name?: InputMaybe<String_Comparison_Exp>;
  salary_account?: InputMaybe<String_Comparison_Exp>;
  seat_count?: InputMaybe<Int_Comparison_Exp>;
  status?: InputMaybe<Int_Comparison_Exp>;
  store?: InputMaybe<String_Comparison_Exp>;
  store_employees?: InputMaybe<Store_Employee_Bool_Exp>;
  store_employees_aggregate?: InputMaybe<Store_Employee_Aggregate_Bool_Exp>;
  supply_shop_id?: InputMaybe<String_Comparison_Exp>;
  table_count?: InputMaybe<Int_Comparison_Exp>;
};

/** unique or primary key constraints on table "stores" */
export enum Stores_Constraint {
  /** unique or primary key constraint on columns "id" */
  StoresPrimary46 = 'storesPRIMARY46'
}

/** input type for incrementing numeric columns in table "stores" */
export type Stores_Inc_Input = {
  is_operation?: InputMaybe<Scalars['smallint']>;
  seat_count?: InputMaybe<Scalars['Int']>;
  status?: InputMaybe<Scalars['Int']>;
  table_count?: InputMaybe<Scalars['Int']>;
};

/** input type for inserting data into table "stores" */
export type Stores_Insert_Input = {
  attendance_groups?: InputMaybe<Attendance_Groups_Arr_Rel_Insert_Input>;
  bills?: InputMaybe<Bills_Arr_Rel_Insert_Input>;
  brand?: InputMaybe<Brands_Obj_Rel_Insert_Input>;
  brand_id?: InputMaybe<Scalars['String']>;
  department?: InputMaybe<Departments_Obj_Rel_Insert_Input>;
  department_id?: InputMaybe<Scalars['String']>;
  departments?: InputMaybe<Departments_Arr_Rel_Insert_Input>;
  departmentstores?: InputMaybe<Departments_Stores_Arr_Rel_Insert_Input>;
  id?: InputMaybe<Scalars['String']>;
  is_operation?: InputMaybe<Scalars['smallint']>;
  name?: InputMaybe<Scalars['String']>;
  salary_account?: InputMaybe<Scalars['String']>;
  seat_count?: InputMaybe<Scalars['Int']>;
  status?: InputMaybe<Scalars['Int']>;
  store?: InputMaybe<Scalars['String']>;
  store_employees?: InputMaybe<Store_Employee_Arr_Rel_Insert_Input>;
  supply_shop_id?: InputMaybe<Scalars['String']>;
  table_count?: InputMaybe<Scalars['Int']>;
};

/** aggregate max on columns */
export type Stores_Max_Fields = {
  __typename?: 'stores_max_fields';
  brand_id?: Maybe<Scalars['String']>;
  department_id?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  is_operation?: Maybe<Scalars['smallint']>;
  name?: Maybe<Scalars['String']>;
  salary_account?: Maybe<Scalars['String']>;
  seat_count?: Maybe<Scalars['Int']>;
  status?: Maybe<Scalars['Int']>;
  store?: Maybe<Scalars['String']>;
  supply_shop_id?: Maybe<Scalars['String']>;
  table_count?: Maybe<Scalars['Int']>;
};

/** order by max() on columns of table "stores" */
export type Stores_Max_Order_By = {
  brand_id?: InputMaybe<Order_By>;
  department_id?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  is_operation?: InputMaybe<Order_By>;
  name?: InputMaybe<Order_By>;
  salary_account?: InputMaybe<Order_By>;
  seat_count?: InputMaybe<Order_By>;
  status?: InputMaybe<Order_By>;
  store?: InputMaybe<Order_By>;
  supply_shop_id?: InputMaybe<Order_By>;
  table_count?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type Stores_Min_Fields = {
  __typename?: 'stores_min_fields';
  brand_id?: Maybe<Scalars['String']>;
  department_id?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  is_operation?: Maybe<Scalars['smallint']>;
  name?: Maybe<Scalars['String']>;
  salary_account?: Maybe<Scalars['String']>;
  seat_count?: Maybe<Scalars['Int']>;
  status?: Maybe<Scalars['Int']>;
  store?: Maybe<Scalars['String']>;
  supply_shop_id?: Maybe<Scalars['String']>;
  table_count?: Maybe<Scalars['Int']>;
};

/** order by min() on columns of table "stores" */
export type Stores_Min_Order_By = {
  brand_id?: InputMaybe<Order_By>;
  department_id?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  is_operation?: InputMaybe<Order_By>;
  name?: InputMaybe<Order_By>;
  salary_account?: InputMaybe<Order_By>;
  seat_count?: InputMaybe<Order_By>;
  status?: InputMaybe<Order_By>;
  store?: InputMaybe<Order_By>;
  supply_shop_id?: InputMaybe<Order_By>;
  table_count?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "stores" */
export type Stores_Mutation_Response = {
  __typename?: 'stores_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Stores>;
};

/** input type for inserting object relation for remote table "stores" */
export type Stores_Obj_Rel_Insert_Input = {
  data: Stores_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<Stores_On_Conflict>;
};

/** on_conflict condition type for table "stores" */
export type Stores_On_Conflict = {
  constraint: Stores_Constraint;
  update_columns?: Array<Stores_Update_Column>;
  where?: InputMaybe<Stores_Bool_Exp>;
};

/** Ordering options when selecting data from "stores". */
export type Stores_Order_By = {
  attendance_groups_aggregate?: InputMaybe<Attendance_Groups_Aggregate_Order_By>;
  bills_aggregate?: InputMaybe<Bills_Aggregate_Order_By>;
  brand?: InputMaybe<Brands_Order_By>;
  brand_id?: InputMaybe<Order_By>;
  department?: InputMaybe<Departments_Order_By>;
  department_id?: InputMaybe<Order_By>;
  departments_aggregate?: InputMaybe<Departments_Aggregate_Order_By>;
  departmentstores_aggregate?: InputMaybe<Departments_Stores_Aggregate_Order_By>;
  id?: InputMaybe<Order_By>;
  is_operation?: InputMaybe<Order_By>;
  name?: InputMaybe<Order_By>;
  salary_account?: InputMaybe<Order_By>;
  seat_count?: InputMaybe<Order_By>;
  status?: InputMaybe<Order_By>;
  store?: InputMaybe<Order_By>;
  store_employees_aggregate?: InputMaybe<Store_Employee_Aggregate_Order_By>;
  supply_shop_id?: InputMaybe<Order_By>;
  table_count?: InputMaybe<Order_By>;
};

/** primary key columns input for table: stores */
export type Stores_Pk_Columns_Input = {
  id: Scalars['String'];
};

/** select columns of table "stores" */
export enum Stores_Select_Column {
  /** column name */
  BrandId = 'brand_id',
  /** column name */
  DepartmentId = 'department_id',
  /** column name */
  Id = 'id',
  /** column name */
  IsOperation = 'is_operation',
  /** column name */
  Name = 'name',
  /** column name */
  SalaryAccount = 'salary_account',
  /** column name */
  SeatCount = 'seat_count',
  /** column name */
  Status = 'status',
  /** column name */
  Store = 'store',
  /** column name */
  SupplyShopId = 'supply_shop_id',
  /** column name */
  TableCount = 'table_count'
}

/** input type for updating data in table "stores" */
export type Stores_Set_Input = {
  brand_id?: InputMaybe<Scalars['String']>;
  department_id?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['String']>;
  is_operation?: InputMaybe<Scalars['smallint']>;
  name?: InputMaybe<Scalars['String']>;
  salary_account?: InputMaybe<Scalars['String']>;
  seat_count?: InputMaybe<Scalars['Int']>;
  status?: InputMaybe<Scalars['Int']>;
  store?: InputMaybe<Scalars['String']>;
  supply_shop_id?: InputMaybe<Scalars['String']>;
  table_count?: InputMaybe<Scalars['Int']>;
};

/** aggregate stddev on columns */
export type Stores_Stddev_Fields = {
  __typename?: 'stores_stddev_fields';
  is_operation?: Maybe<Scalars['Float']>;
  seat_count?: Maybe<Scalars['Float']>;
  status?: Maybe<Scalars['Float']>;
  table_count?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "stores" */
export type Stores_Stddev_Order_By = {
  is_operation?: InputMaybe<Order_By>;
  seat_count?: InputMaybe<Order_By>;
  status?: InputMaybe<Order_By>;
  table_count?: InputMaybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Stores_Stddev_Pop_Fields = {
  __typename?: 'stores_stddev_pop_fields';
  is_operation?: Maybe<Scalars['Float']>;
  seat_count?: Maybe<Scalars['Float']>;
  status?: Maybe<Scalars['Float']>;
  table_count?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "stores" */
export type Stores_Stddev_Pop_Order_By = {
  is_operation?: InputMaybe<Order_By>;
  seat_count?: InputMaybe<Order_By>;
  status?: InputMaybe<Order_By>;
  table_count?: InputMaybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Stores_Stddev_Samp_Fields = {
  __typename?: 'stores_stddev_samp_fields';
  is_operation?: Maybe<Scalars['Float']>;
  seat_count?: Maybe<Scalars['Float']>;
  status?: Maybe<Scalars['Float']>;
  table_count?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "stores" */
export type Stores_Stddev_Samp_Order_By = {
  is_operation?: InputMaybe<Order_By>;
  seat_count?: InputMaybe<Order_By>;
  status?: InputMaybe<Order_By>;
  table_count?: InputMaybe<Order_By>;
};

/** Streaming cursor of the table "stores" */
export type Stores_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Stores_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Stores_Stream_Cursor_Value_Input = {
  brand_id?: InputMaybe<Scalars['String']>;
  department_id?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['String']>;
  is_operation?: InputMaybe<Scalars['smallint']>;
  name?: InputMaybe<Scalars['String']>;
  salary_account?: InputMaybe<Scalars['String']>;
  seat_count?: InputMaybe<Scalars['Int']>;
  status?: InputMaybe<Scalars['Int']>;
  store?: InputMaybe<Scalars['String']>;
  supply_shop_id?: InputMaybe<Scalars['String']>;
  table_count?: InputMaybe<Scalars['Int']>;
};

/** aggregate sum on columns */
export type Stores_Sum_Fields = {
  __typename?: 'stores_sum_fields';
  is_operation?: Maybe<Scalars['smallint']>;
  seat_count?: Maybe<Scalars['Int']>;
  status?: Maybe<Scalars['Int']>;
  table_count?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "stores" */
export type Stores_Sum_Order_By = {
  is_operation?: InputMaybe<Order_By>;
  seat_count?: InputMaybe<Order_By>;
  status?: InputMaybe<Order_By>;
  table_count?: InputMaybe<Order_By>;
};

/** update columns of table "stores" */
export enum Stores_Update_Column {
  /** column name */
  BrandId = 'brand_id',
  /** column name */
  DepartmentId = 'department_id',
  /** column name */
  Id = 'id',
  /** column name */
  IsOperation = 'is_operation',
  /** column name */
  Name = 'name',
  /** column name */
  SalaryAccount = 'salary_account',
  /** column name */
  SeatCount = 'seat_count',
  /** column name */
  Status = 'status',
  /** column name */
  Store = 'store',
  /** column name */
  SupplyShopId = 'supply_shop_id',
  /** column name */
  TableCount = 'table_count'
}

export type Stores_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: InputMaybe<Stores_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Stores_Set_Input>;
  /** filter the rows which have to be updated */
  where: Stores_Bool_Exp;
};

/** aggregate var_pop on columns */
export type Stores_Var_Pop_Fields = {
  __typename?: 'stores_var_pop_fields';
  is_operation?: Maybe<Scalars['Float']>;
  seat_count?: Maybe<Scalars['Float']>;
  status?: Maybe<Scalars['Float']>;
  table_count?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "stores" */
export type Stores_Var_Pop_Order_By = {
  is_operation?: InputMaybe<Order_By>;
  seat_count?: InputMaybe<Order_By>;
  status?: InputMaybe<Order_By>;
  table_count?: InputMaybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Stores_Var_Samp_Fields = {
  __typename?: 'stores_var_samp_fields';
  is_operation?: Maybe<Scalars['Float']>;
  seat_count?: Maybe<Scalars['Float']>;
  status?: Maybe<Scalars['Float']>;
  table_count?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "stores" */
export type Stores_Var_Samp_Order_By = {
  is_operation?: InputMaybe<Order_By>;
  seat_count?: InputMaybe<Order_By>;
  status?: InputMaybe<Order_By>;
  table_count?: InputMaybe<Order_By>;
};

/** aggregate variance on columns */
export type Stores_Variance_Fields = {
  __typename?: 'stores_variance_fields';
  is_operation?: Maybe<Scalars['Float']>;
  seat_count?: Maybe<Scalars['Float']>;
  status?: Maybe<Scalars['Float']>;
  table_count?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "stores" */
export type Stores_Variance_Order_By = {
  is_operation?: InputMaybe<Order_By>;
  seat_count?: InputMaybe<Order_By>;
  status?: InputMaybe<Order_By>;
  table_count?: InputMaybe<Order_By>;
};

export type Subscription_Root = {
  __typename?: 'subscription_root';
  /** fetch data from the table: "attendance" */
  attendance: Array<Attendance>;
  /** fetch aggregated fields from the table: "attendance" */
  attendance_aggregate: Attendance_Aggregate;
  /** fetch data from the table: "attendance" using primary key columns */
  attendance_by_pk?: Maybe<Attendance>;
  /** An array relationship */
  attendance_group_leaders: Array<Attendance_Group_Leaders>;
  /** An aggregate relationship */
  attendance_group_leaders_aggregate: Attendance_Group_Leaders_Aggregate;
  /** fetch data from the table: "attendance_group_leaders" using primary key columns */
  attendance_group_leaders_by_pk?: Maybe<Attendance_Group_Leaders>;
  /** fetch data from the table in a streaming manner: "attendance_group_leaders" */
  attendance_group_leaders_stream: Array<Attendance_Group_Leaders>;
  /** An array relationship */
  attendance_group_shifts: Array<Attendance_Group_Shifts>;
  /** An aggregate relationship */
  attendance_group_shifts_aggregate: Attendance_Group_Shifts_Aggregate;
  /** fetch data from the table: "attendance_group_shifts" using primary key columns */
  attendance_group_shifts_by_pk?: Maybe<Attendance_Group_Shifts>;
  /** fetch data from the table in a streaming manner: "attendance_group_shifts" */
  attendance_group_shifts_stream: Array<Attendance_Group_Shifts>;
  /** An array relationship */
  attendance_group_subleaders: Array<Attendance_Group_Subleaders>;
  /** An aggregate relationship */
  attendance_group_subleaders_aggregate: Attendance_Group_Subleaders_Aggregate;
  /** fetch data from the table: "attendance_group_subleaders" using primary key columns */
  attendance_group_subleaders_by_pk?: Maybe<Attendance_Group_Subleaders>;
  /** fetch data from the table in a streaming manner: "attendance_group_subleaders" */
  attendance_group_subleaders_stream: Array<Attendance_Group_Subleaders>;
  /** An array relationship */
  attendance_groups: Array<Attendance_Groups>;
  /** An aggregate relationship */
  attendance_groups_aggregate: Attendance_Groups_Aggregate;
  /** fetch data from the table: "attendance_groups" using primary key columns */
  attendance_groups_by_pk?: Maybe<Attendance_Groups>;
  /** fetch data from the table in a streaming manner: "attendance_groups" */
  attendance_groups_stream: Array<Attendance_Groups>;
  /** An array relationship */
  attendance_locations: Array<Attendance_Locations>;
  /** An aggregate relationship */
  attendance_locations_aggregate: Attendance_Locations_Aggregate;
  /** fetch data from the table: "attendance_locations" using primary key columns */
  attendance_locations_by_pk?: Maybe<Attendance_Locations>;
  /** fetch data from the table in a streaming manner: "attendance_locations" */
  attendance_locations_stream: Array<Attendance_Locations>;
  /** fetch data from the table in a streaming manner: "attendance" */
  attendance_stream: Array<Attendance>;
  /** An array relationship */
  bills: Array<Bills>;
  /** An aggregate relationship */
  bills_aggregate: Bills_Aggregate;
  /** fetch data from the table: "bills" using primary key columns */
  bills_by_pk?: Maybe<Bills>;
  /** fetch data from the table in a streaming manner: "bills" */
  bills_stream: Array<Bills>;
  /** An array relationship */
  bonusdeductions: Array<Bonusdeductions>;
  /** An aggregate relationship */
  bonusdeductions_aggregate: Bonusdeductions_Aggregate;
  /** fetch data from the table: "bonusdeductions" using primary key columns */
  bonusdeductions_by_pk?: Maybe<Bonusdeductions>;
  /** fetch data from the table in a streaming manner: "bonusdeductions" */
  bonusdeductions_stream: Array<Bonusdeductions>;
  /** fetch data from the table: "bonusdeductiontypes" */
  bonusdeductiontypes: Array<Bonusdeductiontypes>;
  /** fetch aggregated fields from the table: "bonusdeductiontypes" */
  bonusdeductiontypes_aggregate: Bonusdeductiontypes_Aggregate;
  /** fetch data from the table: "bonusdeductiontypes" using primary key columns */
  bonusdeductiontypes_by_pk?: Maybe<Bonusdeductiontypes>;
  /** fetch data from the table in a streaming manner: "bonusdeductiontypes" */
  bonusdeductiontypes_stream: Array<Bonusdeductiontypes>;
  /** An array relationship */
  brands: Array<Brands>;
  /** An aggregate relationship */
  brands_aggregate: Brands_Aggregate;
  /** fetch data from the table: "brands" using primary key columns */
  brands_by_pk?: Maybe<Brands>;
  /** An array relationship */
  brands_employees: Array<Brands_Employees>;
  /** An aggregate relationship */
  brands_employees_aggregate: Brands_Employees_Aggregate;
  /** fetch data from the table: "brands_employees" using primary key columns */
  brands_employees_by_pk?: Maybe<Brands_Employees>;
  /** fetch data from the table in a streaming manner: "brands_employees" */
  brands_employees_stream: Array<Brands_Employees>;
  /** fetch data from the table in a streaming manner: "brands" */
  brands_stream: Array<Brands>;
  /** An array relationship */
  departments: Array<Departments>;
  /** An aggregate relationship */
  departments_aggregate: Departments_Aggregate;
  /** fetch data from the table: "departments" using primary key columns */
  departments_by_pk?: Maybe<Departments>;
  /** An array relationship */
  departments_employees: Array<Departments_Employees>;
  /** An aggregate relationship */
  departments_employees_aggregate: Departments_Employees_Aggregate;
  /** fetch data from the table: "departments_employees" using primary key columns */
  departments_employees_by_pk?: Maybe<Departments_Employees>;
  /** fetch data from the table in a streaming manner: "departments_employees" */
  departments_employees_stream: Array<Departments_Employees>;
  /** fetch data from the table: "departments_stores" */
  departments_stores: Array<Departments_Stores>;
  /** fetch aggregated fields from the table: "departments_stores" */
  departments_stores_aggregate: Departments_Stores_Aggregate;
  /** fetch data from the table: "departments_stores" using primary key columns */
  departments_stores_by_pk?: Maybe<Departments_Stores>;
  /** fetch data from the table in a streaming manner: "departments_stores" */
  departments_stores_stream: Array<Departments_Stores>;
  /** fetch data from the table in a streaming manner: "departments" */
  departments_stream: Array<Departments>;
  /** An array relationship */
  dsstorebills: Array<Dsstorebills>;
  /** An aggregate relationship */
  dsstorebills_aggregate: Dsstorebills_Aggregate;
  /** fetch data from the table: "dsstorebills" using primary key columns */
  dsstorebills_by_pk?: Maybe<Dsstorebills>;
  /** fetch data from the table in a streaming manner: "dsstorebills" */
  dsstorebills_stream: Array<Dsstorebills>;
  /** An array relationship */
  employee_attachments: Array<Employee_Attachments>;
  /** An aggregate relationship */
  employee_attachments_aggregate: Employee_Attachments_Aggregate;
  /** fetch data from the table: "employee_attachments" using primary key columns */
  employee_attachments_by_pk?: Maybe<Employee_Attachments>;
  /** fetch data from the table in a streaming manner: "employee_attachments" */
  employee_attachments_stream: Array<Employee_Attachments>;
  /** fetch data from the table: "employee_insurance" */
  employee_insurance: Array<Employee_Insurance>;
  /** fetch aggregated fields from the table: "employee_insurance" */
  employee_insurance_aggregate: Employee_Insurance_Aggregate;
  /** fetch data from the table: "employee_insurance" using primary key columns */
  employee_insurance_by_pk?: Maybe<Employee_Insurance>;
  /** fetch data from the table in a streaming manner: "employee_insurance" */
  employee_insurance_stream: Array<Employee_Insurance>;
  /** An array relationship */
  employee_leaves: Array<Employee_Leaves>;
  /** An aggregate relationship */
  employee_leaves_aggregate: Employee_Leaves_Aggregate;
  /** fetch data from the table: "employee_leaves" using primary key columns */
  employee_leaves_by_pk?: Maybe<Employee_Leaves>;
  /** fetch data from the table in a streaming manner: "employee_leaves" */
  employee_leaves_stream: Array<Employee_Leaves>;
  /** fetch data from the table: "employee_salary_department" */
  employee_salary_department: Array<Employee_Salary_Department>;
  /** fetch aggregated fields from the table: "employee_salary_department" */
  employee_salary_department_aggregate: Employee_Salary_Department_Aggregate;
  /** fetch data from the table: "employee_salary_department" using primary key columns */
  employee_salary_department_by_pk?: Maybe<Employee_Salary_Department>;
  /** fetch data from the table in a streaming manner: "employee_salary_department" */
  employee_salary_department_stream: Array<Employee_Salary_Department>;
  /** An array relationship */
  employees: Array<Employees>;
  /** An aggregate relationship */
  employees_aggregate: Employees_Aggregate;
  /** fetch data from the table: "employees" using primary key columns */
  employees_by_pk?: Maybe<Employees>;
  /** An array relationship */
  employees_roles: Array<Employees_Roles>;
  /** An aggregate relationship */
  employees_roles_aggregate: Employees_Roles_Aggregate;
  /** fetch data from the table: "employees_roles" using primary key columns */
  employees_roles_by_pk?: Maybe<Employees_Roles>;
  /** fetch data from the table in a streaming manner: "employees_roles" */
  employees_roles_stream: Array<Employees_Roles>;
  /** fetch data from the table in a streaming manner: "employees" */
  employees_stream: Array<Employees>;
  /** fetch data from the table: "foodcategories" */
  foodcategories: Array<Foodcategories>;
  /** fetch aggregated fields from the table: "foodcategories" */
  foodcategories_aggregate: Foodcategories_Aggregate;
  /** fetch data from the table: "foodcategories" using primary key columns */
  foodcategories_by_pk?: Maybe<Foodcategories>;
  /** fetch data from the table in a streaming manner: "foodcategories" */
  foodcategories_stream: Array<Foodcategories>;
  /** An array relationship */
  fooditems: Array<Fooditems>;
  /** An aggregate relationship */
  fooditems_aggregate: Fooditems_Aggregate;
  /** fetch data from the table: "fooditems" using primary key columns */
  fooditems_by_pk?: Maybe<Fooditems>;
  /** fetch data from the table in a streaming manner: "fooditems" */
  fooditems_stream: Array<Fooditems>;
  /** execute function "func_solditems_summary" which returns "solditems_summary" */
  func_solditems_summary: Array<Solditems_Summary>;
  /** execute function "func_solditems_summary" and query aggregates on result of table type "solditems_summary" */
  func_solditems_summary_aggregate: Solditems_Summary_Aggregate;
  /** An array relationship */
  ingredients: Array<Ingredients>;
  /** An aggregate relationship */
  ingredients_aggregate: Ingredients_Aggregate;
  /** fetch data from the table: "ingredients" using primary key columns */
  ingredients_by_pk?: Maybe<Ingredients>;
  /** fetch data from the table in a streaming manner: "ingredients" */
  ingredients_stream: Array<Ingredients>;
  /** fetch data from the table: "insurance_fund_types" */
  insurance_fund_types: Array<Insurance_Fund_Types>;
  /** fetch aggregated fields from the table: "insurance_fund_types" */
  insurance_fund_types_aggregate: Insurance_Fund_Types_Aggregate;
  /** fetch data from the table: "insurance_fund_types" using primary key columns */
  insurance_fund_types_by_pk?: Maybe<Insurance_Fund_Types>;
  /** fetch data from the table in a streaming manner: "insurance_fund_types" */
  insurance_fund_types_stream: Array<Insurance_Fund_Types>;
  /** An array relationship */
  insurance_funds: Array<Insurance_Funds>;
  /** An aggregate relationship */
  insurance_funds_aggregate: Insurance_Funds_Aggregate;
  /** fetch data from the table: "insurance_funds" using primary key columns */
  insurance_funds_by_pk?: Maybe<Insurance_Funds>;
  /** fetch data from the table in a streaming manner: "insurance_funds" */
  insurance_funds_stream: Array<Insurance_Funds>;
  /** fetch data from the table: "leave_types" */
  leave_types: Array<Leave_Types>;
  /** fetch aggregated fields from the table: "leave_types" */
  leave_types_aggregate: Leave_Types_Aggregate;
  /** fetch data from the table: "leave_types" using primary key columns */
  leave_types_by_pk?: Maybe<Leave_Types>;
  /** fetch data from the table in a streaming manner: "leave_types" */
  leave_types_stream: Array<Leave_Types>;
  /** fetch data from the table: "monthlysalary" */
  monthlysalary: Array<Monthlysalary>;
  /** fetch aggregated fields from the table: "monthlysalary" */
  monthlysalary_aggregate: Monthlysalary_Aggregate;
  /** fetch data from the table: "monthlysalary" using primary key columns */
  monthlysalary_by_pk?: Maybe<Monthlysalary>;
  /** fetch data from the table in a streaming manner: "monthlysalary" */
  monthlysalary_stream: Array<Monthlysalary>;
  /** An array relationship */
  nav_bg_categories: Array<Nav_Bg_Categories>;
  /** An aggregate relationship */
  nav_bg_categories_aggregate: Nav_Bg_Categories_Aggregate;
  /** fetch data from the table: "nav_bg_categories" using primary key columns */
  nav_bg_categories_by_pk?: Maybe<Nav_Bg_Categories>;
  /** fetch data from the table in a streaming manner: "nav_bg_categories" */
  nav_bg_categories_stream: Array<Nav_Bg_Categories>;
  /** An array relationship */
  nav_sm_categories: Array<Nav_Sm_Categories>;
  /** An aggregate relationship */
  nav_sm_categories_aggregate: Nav_Sm_Categories_Aggregate;
  /** fetch data from the table: "nav_sm_categories" using primary key columns */
  nav_sm_categories_by_pk?: Maybe<Nav_Sm_Categories>;
  /** fetch data from the table in a streaming manner: "nav_sm_categories" */
  nav_sm_categories_stream: Array<Nav_Sm_Categories>;
  /** fetch data from the table: "nav_xl_categories" */
  nav_xl_categories: Array<Nav_Xl_Categories>;
  /** fetch aggregated fields from the table: "nav_xl_categories" */
  nav_xl_categories_aggregate: Nav_Xl_Categories_Aggregate;
  /** fetch data from the table: "nav_xl_categories" using primary key columns */
  nav_xl_categories_by_pk?: Maybe<Nav_Xl_Categories>;
  /** fetch data from the table in a streaming manner: "nav_xl_categories" */
  nav_xl_categories_stream: Array<Nav_Xl_Categories>;
  /** fetch data from the table: "organstores" */
  organstores: Array<Organstores>;
  /** fetch aggregated fields from the table: "organstores" */
  organstores_aggregate: Organstores_Aggregate;
  /** fetch data from the table: "organstores" using primary key columns */
  organstores_by_pk?: Maybe<Organstores>;
  /** fetch data from the table in a streaming manner: "organstores" */
  organstores_stream: Array<Organstores>;
  /** An array relationship */
  role_nav_sm_categories: Array<Role_Nav_Sm_Categories>;
  /** An aggregate relationship */
  role_nav_sm_categories_aggregate: Role_Nav_Sm_Categories_Aggregate;
  /** fetch data from the table: "role_nav_sm_categories" using primary key columns */
  role_nav_sm_categories_by_pk?: Maybe<Role_Nav_Sm_Categories>;
  /** fetch data from the table in a streaming manner: "role_nav_sm_categories" */
  role_nav_sm_categories_stream: Array<Role_Nav_Sm_Categories>;
  /** fetch data from the table: "role_scope" */
  role_scope: Array<Role_Scope>;
  /** fetch aggregated fields from the table: "role_scope" */
  role_scope_aggregate: Role_Scope_Aggregate;
  /** fetch data from the table: "role_scope" using primary key columns */
  role_scope_by_pk?: Maybe<Role_Scope>;
  /** fetch data from the table in a streaming manner: "role_scope" */
  role_scope_stream: Array<Role_Scope>;
  /** fetch data from the table: "roles" */
  roles: Array<Roles>;
  /** fetch aggregated fields from the table: "roles" */
  roles_aggregate: Roles_Aggregate;
  /** fetch data from the table: "roles" using primary key columns */
  roles_by_pk?: Maybe<Roles>;
  /** fetch data from the table in a streaming manner: "roles" */
  roles_stream: Array<Roles>;
  /** fetch data from the table: "salary_accounts" */
  salary_accounts: Array<Salary_Accounts>;
  /** fetch aggregated fields from the table: "salary_accounts" */
  salary_accounts_aggregate: Salary_Accounts_Aggregate;
  /** fetch data from the table: "salary_accounts" using primary key columns */
  salary_accounts_by_pk?: Maybe<Salary_Accounts>;
  /** fetch data from the table in a streaming manner: "salary_accounts" */
  salary_accounts_stream: Array<Salary_Accounts>;
  /** fetch data from the table: "salary_types" */
  salary_types: Array<Salary_Types>;
  /** fetch aggregated fields from the table: "salary_types" */
  salary_types_aggregate: Salary_Types_Aggregate;
  /** fetch data from the table: "salary_types" using primary key columns */
  salary_types_by_pk?: Maybe<Salary_Types>;
  /** fetch data from the table in a streaming manner: "salary_types" */
  salary_types_stream: Array<Salary_Types>;
  /** fetch data from the table: "salesitemsdata" */
  salesitemsdata: Array<Salesitemsdata>;
  /** fetch aggregated fields from the table: "salesitemsdata" */
  salesitemsdata_aggregate: Salesitemsdata_Aggregate;
  /** fetch data from the table: "salesitemsdata" using primary key columns */
  salesitemsdata_by_pk?: Maybe<Salesitemsdata>;
  /** fetch data from the table in a streaming manner: "salesitemsdata" */
  salesitemsdata_stream: Array<Salesitemsdata>;
  /** fetch data from the table: "scope_nav_sm_categories" */
  scope_nav_sm_categories: Array<Scope_Nav_Sm_Categories>;
  /** fetch aggregated fields from the table: "scope_nav_sm_categories" */
  scope_nav_sm_categories_aggregate: Scope_Nav_Sm_Categories_Aggregate;
  /** fetch data from the table: "scope_nav_sm_categories" using primary key columns */
  scope_nav_sm_categories_by_pk?: Maybe<Scope_Nav_Sm_Categories>;
  /** fetch data from the table in a streaming manner: "scope_nav_sm_categories" */
  scope_nav_sm_categories_stream: Array<Scope_Nav_Sm_Categories>;
  /** fetch data from the table: "scopes" */
  scopes: Array<Scopes>;
  /** fetch aggregated fields from the table: "scopes" */
  scopes_aggregate: Scopes_Aggregate;
  /** fetch data from the table: "scopes" using primary key columns */
  scopes_by_pk?: Maybe<Scopes>;
  /** fetch data from the table in a streaming manner: "scopes" */
  scopes_stream: Array<Scopes>;
  /** fetch data from the table: "service_entitlement" */
  service_entitlement: Array<Service_Entitlement>;
  /** fetch aggregated fields from the table: "service_entitlement" */
  service_entitlement_aggregate: Service_Entitlement_Aggregate;
  /** fetch data from the table: "service_entitlement" using primary key columns */
  service_entitlement_by_pk?: Maybe<Service_Entitlement>;
  /** fetch data from the table in a streaming manner: "service_entitlement" */
  service_entitlement_stream: Array<Service_Entitlement>;
  /** An array relationship */
  settledetails: Array<Settledetails>;
  /** An aggregate relationship */
  settledetails_aggregate: Settledetails_Aggregate;
  /** fetch data from the table: "settledetails" using primary key columns */
  settledetails_by_pk?: Maybe<Settledetails>;
  /** fetch data from the table in a streaming manner: "settledetails" */
  settledetails_stream: Array<Settledetails>;
  /** fetch data from the table: "shift_lists" */
  shift_lists: Array<Shift_Lists>;
  /** fetch aggregated fields from the table: "shift_lists" */
  shift_lists_aggregate: Shift_Lists_Aggregate;
  /** fetch data from the table: "shift_lists" using primary key columns */
  shift_lists_by_pk?: Maybe<Shift_Lists>;
  /** fetch data from the table in a streaming manner: "shift_lists" */
  shift_lists_stream: Array<Shift_Lists>;
  /** An array relationship */
  solditems: Array<Solditems>;
  /** An aggregate relationship */
  solditems_aggregate: Solditems_Aggregate;
  /** fetch data from the table: "solditems" using primary key columns */
  solditems_by_pk?: Maybe<Solditems>;
  /** fetch data from the table in a streaming manner: "solditems" */
  solditems_stream: Array<Solditems>;
  /** fetch data from the table: "solditems_summary" */
  solditems_summary: Array<Solditems_Summary>;
  /** fetch aggregated fields from the table: "solditems_summary" */
  solditems_summary_aggregate: Solditems_Summary_Aggregate;
  /** fetch data from the table in a streaming manner: "solditems_summary" */
  solditems_summary_stream: Array<Solditems_Summary>;
  /** fetch data from the table: "store_employee" */
  store_employee: Array<Store_Employee>;
  /** fetch aggregated fields from the table: "store_employee" */
  store_employee_aggregate: Store_Employee_Aggregate;
  /** fetch data from the table: "store_employee" using primary key columns */
  store_employee_by_pk?: Maybe<Store_Employee>;
  /** fetch data from the table in a streaming manner: "store_employee" */
  store_employee_stream: Array<Store_Employee>;
  /** An array relationship */
  stores: Array<Stores>;
  /** An aggregate relationship */
  stores_aggregate: Stores_Aggregate;
  /** fetch data from the table: "stores" using primary key columns */
  stores_by_pk?: Maybe<Stores>;
  /** fetch data from the table in a streaming manner: "stores" */
  stores_stream: Array<Stores>;
  /** fetch data from the table: "suppliers" */
  suppliers: Array<Suppliers>;
  /** fetch aggregated fields from the table: "suppliers" */
  suppliers_aggregate: Suppliers_Aggregate;
  /** fetch data from the table: "suppliers" using primary key columns */
  suppliers_by_pk?: Maybe<Suppliers>;
  /** fetch data from the table in a streaming manner: "suppliers" */
  suppliers_stream: Array<Suppliers>;
  /** An array relationship */
  supplyitems: Array<Supplyitems>;
  /** An aggregate relationship */
  supplyitems_aggregate: Supplyitems_Aggregate;
  /** fetch data from the table: "supplyitems" using primary key columns */
  supplyitems_by_pk?: Maybe<Supplyitems>;
  /** fetch data from the table in a streaming manner: "supplyitems" */
  supplyitems_stream: Array<Supplyitems>;
  /** fetch data from the table: "supplyitemtypes" */
  supplyitemtypes: Array<Supplyitemtypes>;
  /** fetch aggregated fields from the table: "supplyitemtypes" */
  supplyitemtypes_aggregate: Supplyitemtypes_Aggregate;
  /** fetch data from the table: "supplyitemtypes" using primary key columns */
  supplyitemtypes_by_pk?: Maybe<Supplyitemtypes>;
  /** fetch data from the table in a streaming manner: "supplyitemtypes" */
  supplyitemtypes_stream: Array<Supplyitemtypes>;
  /** fetch data from the table: "supplyitemunits" */
  supplyitemunits: Array<Supplyitemunits>;
  /** fetch aggregated fields from the table: "supplyitemunits" */
  supplyitemunits_aggregate: Supplyitemunits_Aggregate;
  /** fetch data from the table: "supplyitemunits" using primary key columns */
  supplyitemunits_by_pk?: Maybe<Supplyitemunits>;
  /** fetch data from the table in a streaming manner: "supplyitemunits" */
  supplyitemunits_stream: Array<Supplyitemunits>;
  /** fetch data from the table: "supplyrdc" */
  supplyrdc: Array<Supplyrdc>;
  /** fetch aggregated fields from the table: "supplyrdc" */
  supplyrdc_aggregate: Supplyrdc_Aggregate;
  /** fetch data from the table: "supplyrdc" using primary key columns */
  supplyrdc_by_pk?: Maybe<Supplyrdc>;
  /** fetch data from the table in a streaming manner: "supplyrdc" */
  supplyrdc_stream: Array<Supplyrdc>;
  /** fetch data from the table: "view_daily_items_sold" */
  view_daily_items_sold: Array<View_Daily_Items_Sold>;
  /** fetch aggregated fields from the table: "view_daily_items_sold" */
  view_daily_items_sold_aggregate: View_Daily_Items_Sold_Aggregate;
  /** fetch data from the table in a streaming manner: "view_daily_items_sold" */
  view_daily_items_sold_stream: Array<View_Daily_Items_Sold>;
  /** fetch data from the table: "view_monthly_salary" */
  view_monthly_salary: Array<View_Monthly_Salary>;
  /** fetch data from the table: "view_monthly_salary_2" */
  view_monthly_salary_2: Array<View_Monthly_Salary_2>;
  /** fetch aggregated fields from the table: "view_monthly_salary_2" */
  view_monthly_salary_2_aggregate: View_Monthly_Salary_2_Aggregate;
  /** fetch data from the table in a streaming manner: "view_monthly_salary_2" */
  view_monthly_salary_2_stream: Array<View_Monthly_Salary_2>;
  /** fetch aggregated fields from the table: "view_monthly_salary" */
  view_monthly_salary_aggregate: View_Monthly_Salary_Aggregate;
  /** fetch data from the table in a streaming manner: "view_monthly_salary" */
  view_monthly_salary_stream: Array<View_Monthly_Salary>;
  /** fetch data from the table: "view_solditems" */
  view_solditems: Array<View_Solditems>;
  /** fetch aggregated fields from the table: "view_solditems" */
  view_solditems_aggregate: View_Solditems_Aggregate;
  /** fetch data from the table in a streaming manner: "view_solditems" */
  view_solditems_stream: Array<View_Solditems>;
};


export type Subscription_RootAttendanceArgs = {
  distinct_on?: InputMaybe<Array<Attendance_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Attendance_Order_By>>;
  where?: InputMaybe<Attendance_Bool_Exp>;
};


export type Subscription_RootAttendance_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Attendance_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Attendance_Order_By>>;
  where?: InputMaybe<Attendance_Bool_Exp>;
};


export type Subscription_RootAttendance_By_PkArgs = {
  id: Scalars['String'];
};


export type Subscription_RootAttendance_Group_LeadersArgs = {
  distinct_on?: InputMaybe<Array<Attendance_Group_Leaders_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Attendance_Group_Leaders_Order_By>>;
  where?: InputMaybe<Attendance_Group_Leaders_Bool_Exp>;
};


export type Subscription_RootAttendance_Group_Leaders_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Attendance_Group_Leaders_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Attendance_Group_Leaders_Order_By>>;
  where?: InputMaybe<Attendance_Group_Leaders_Bool_Exp>;
};


export type Subscription_RootAttendance_Group_Leaders_By_PkArgs = {
  attendance_group_id: Scalars['String'];
  employee_id: Scalars['String'];
};


export type Subscription_RootAttendance_Group_Leaders_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<Attendance_Group_Leaders_Stream_Cursor_Input>>;
  where?: InputMaybe<Attendance_Group_Leaders_Bool_Exp>;
};


export type Subscription_RootAttendance_Group_ShiftsArgs = {
  distinct_on?: InputMaybe<Array<Attendance_Group_Shifts_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Attendance_Group_Shifts_Order_By>>;
  where?: InputMaybe<Attendance_Group_Shifts_Bool_Exp>;
};


export type Subscription_RootAttendance_Group_Shifts_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Attendance_Group_Shifts_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Attendance_Group_Shifts_Order_By>>;
  where?: InputMaybe<Attendance_Group_Shifts_Bool_Exp>;
};


export type Subscription_RootAttendance_Group_Shifts_By_PkArgs = {
  attendance_group_id: Scalars['String'];
  shift_list_id: Scalars['String'];
};


export type Subscription_RootAttendance_Group_Shifts_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<Attendance_Group_Shifts_Stream_Cursor_Input>>;
  where?: InputMaybe<Attendance_Group_Shifts_Bool_Exp>;
};


export type Subscription_RootAttendance_Group_SubleadersArgs = {
  distinct_on?: InputMaybe<Array<Attendance_Group_Subleaders_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Attendance_Group_Subleaders_Order_By>>;
  where?: InputMaybe<Attendance_Group_Subleaders_Bool_Exp>;
};


export type Subscription_RootAttendance_Group_Subleaders_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Attendance_Group_Subleaders_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Attendance_Group_Subleaders_Order_By>>;
  where?: InputMaybe<Attendance_Group_Subleaders_Bool_Exp>;
};


export type Subscription_RootAttendance_Group_Subleaders_By_PkArgs = {
  attendance_group_id: Scalars['String'];
  employee_id: Scalars['String'];
};


export type Subscription_RootAttendance_Group_Subleaders_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<Attendance_Group_Subleaders_Stream_Cursor_Input>>;
  where?: InputMaybe<Attendance_Group_Subleaders_Bool_Exp>;
};


export type Subscription_RootAttendance_GroupsArgs = {
  distinct_on?: InputMaybe<Array<Attendance_Groups_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Attendance_Groups_Order_By>>;
  where?: InputMaybe<Attendance_Groups_Bool_Exp>;
};


export type Subscription_RootAttendance_Groups_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Attendance_Groups_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Attendance_Groups_Order_By>>;
  where?: InputMaybe<Attendance_Groups_Bool_Exp>;
};


export type Subscription_RootAttendance_Groups_By_PkArgs = {
  id: Scalars['String'];
};


export type Subscription_RootAttendance_Groups_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<Attendance_Groups_Stream_Cursor_Input>>;
  where?: InputMaybe<Attendance_Groups_Bool_Exp>;
};


export type Subscription_RootAttendance_LocationsArgs = {
  distinct_on?: InputMaybe<Array<Attendance_Locations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Attendance_Locations_Order_By>>;
  where?: InputMaybe<Attendance_Locations_Bool_Exp>;
};


export type Subscription_RootAttendance_Locations_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Attendance_Locations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Attendance_Locations_Order_By>>;
  where?: InputMaybe<Attendance_Locations_Bool_Exp>;
};


export type Subscription_RootAttendance_Locations_By_PkArgs = {
  id: Scalars['String'];
};


export type Subscription_RootAttendance_Locations_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<Attendance_Locations_Stream_Cursor_Input>>;
  where?: InputMaybe<Attendance_Locations_Bool_Exp>;
};


export type Subscription_RootAttendance_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<Attendance_Stream_Cursor_Input>>;
  where?: InputMaybe<Attendance_Bool_Exp>;
};


export type Subscription_RootBillsArgs = {
  distinct_on?: InputMaybe<Array<Bills_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Bills_Order_By>>;
  where?: InputMaybe<Bills_Bool_Exp>;
};


export type Subscription_RootBills_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Bills_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Bills_Order_By>>;
  where?: InputMaybe<Bills_Bool_Exp>;
};


export type Subscription_RootBills_By_PkArgs = {
  bs_id: Scalars['bigint'];
};


export type Subscription_RootBills_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<Bills_Stream_Cursor_Input>>;
  where?: InputMaybe<Bills_Bool_Exp>;
};


export type Subscription_RootBonusdeductionsArgs = {
  distinct_on?: InputMaybe<Array<Bonusdeductions_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Bonusdeductions_Order_By>>;
  where?: InputMaybe<Bonusdeductions_Bool_Exp>;
};


export type Subscription_RootBonusdeductions_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Bonusdeductions_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Bonusdeductions_Order_By>>;
  where?: InputMaybe<Bonusdeductions_Bool_Exp>;
};


export type Subscription_RootBonusdeductions_By_PkArgs = {
  id: Scalars['String'];
};


export type Subscription_RootBonusdeductions_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<Bonusdeductions_Stream_Cursor_Input>>;
  where?: InputMaybe<Bonusdeductions_Bool_Exp>;
};


export type Subscription_RootBonusdeductiontypesArgs = {
  distinct_on?: InputMaybe<Array<Bonusdeductiontypes_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Bonusdeductiontypes_Order_By>>;
  where?: InputMaybe<Bonusdeductiontypes_Bool_Exp>;
};


export type Subscription_RootBonusdeductiontypes_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Bonusdeductiontypes_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Bonusdeductiontypes_Order_By>>;
  where?: InputMaybe<Bonusdeductiontypes_Bool_Exp>;
};


export type Subscription_RootBonusdeductiontypes_By_PkArgs = {
  id: Scalars['String'];
};


export type Subscription_RootBonusdeductiontypes_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<Bonusdeductiontypes_Stream_Cursor_Input>>;
  where?: InputMaybe<Bonusdeductiontypes_Bool_Exp>;
};


export type Subscription_RootBrandsArgs = {
  distinct_on?: InputMaybe<Array<Brands_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Brands_Order_By>>;
  where?: InputMaybe<Brands_Bool_Exp>;
};


export type Subscription_RootBrands_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Brands_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Brands_Order_By>>;
  where?: InputMaybe<Brands_Bool_Exp>;
};


export type Subscription_RootBrands_By_PkArgs = {
  id: Scalars['String'];
};


export type Subscription_RootBrands_EmployeesArgs = {
  distinct_on?: InputMaybe<Array<Brands_Employees_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Brands_Employees_Order_By>>;
  where?: InputMaybe<Brands_Employees_Bool_Exp>;
};


export type Subscription_RootBrands_Employees_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Brands_Employees_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Brands_Employees_Order_By>>;
  where?: InputMaybe<Brands_Employees_Bool_Exp>;
};


export type Subscription_RootBrands_Employees_By_PkArgs = {
  brand_id: Scalars['String'];
  employee_id: Scalars['String'];
};


export type Subscription_RootBrands_Employees_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<Brands_Employees_Stream_Cursor_Input>>;
  where?: InputMaybe<Brands_Employees_Bool_Exp>;
};


export type Subscription_RootBrands_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<Brands_Stream_Cursor_Input>>;
  where?: InputMaybe<Brands_Bool_Exp>;
};


export type Subscription_RootDepartmentsArgs = {
  distinct_on?: InputMaybe<Array<Departments_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Departments_Order_By>>;
  where?: InputMaybe<Departments_Bool_Exp>;
};


export type Subscription_RootDepartments_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Departments_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Departments_Order_By>>;
  where?: InputMaybe<Departments_Bool_Exp>;
};


export type Subscription_RootDepartments_By_PkArgs = {
  id: Scalars['String'];
};


export type Subscription_RootDepartments_EmployeesArgs = {
  distinct_on?: InputMaybe<Array<Departments_Employees_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Departments_Employees_Order_By>>;
  where?: InputMaybe<Departments_Employees_Bool_Exp>;
};


export type Subscription_RootDepartments_Employees_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Departments_Employees_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Departments_Employees_Order_By>>;
  where?: InputMaybe<Departments_Employees_Bool_Exp>;
};


export type Subscription_RootDepartments_Employees_By_PkArgs = {
  department_id: Scalars['String'];
  employee_id: Scalars['String'];
};


export type Subscription_RootDepartments_Employees_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<Departments_Employees_Stream_Cursor_Input>>;
  where?: InputMaybe<Departments_Employees_Bool_Exp>;
};


export type Subscription_RootDepartments_StoresArgs = {
  distinct_on?: InputMaybe<Array<Departments_Stores_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Departments_Stores_Order_By>>;
  where?: InputMaybe<Departments_Stores_Bool_Exp>;
};


export type Subscription_RootDepartments_Stores_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Departments_Stores_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Departments_Stores_Order_By>>;
  where?: InputMaybe<Departments_Stores_Bool_Exp>;
};


export type Subscription_RootDepartments_Stores_By_PkArgs = {
  department_id: Scalars['String'];
};


export type Subscription_RootDepartments_Stores_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<Departments_Stores_Stream_Cursor_Input>>;
  where?: InputMaybe<Departments_Stores_Bool_Exp>;
};


export type Subscription_RootDepartments_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<Departments_Stream_Cursor_Input>>;
  where?: InputMaybe<Departments_Bool_Exp>;
};


export type Subscription_RootDsstorebillsArgs = {
  distinct_on?: InputMaybe<Array<Dsstorebills_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Dsstorebills_Order_By>>;
  where?: InputMaybe<Dsstorebills_Bool_Exp>;
};


export type Subscription_RootDsstorebills_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Dsstorebills_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Dsstorebills_Order_By>>;
  where?: InputMaybe<Dsstorebills_Bool_Exp>;
};


export type Subscription_RootDsstorebills_By_PkArgs = {
  StoreBillDTID: Scalars['String'];
  StoreCode: Scalars['String'];
};


export type Subscription_RootDsstorebills_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<Dsstorebills_Stream_Cursor_Input>>;
  where?: InputMaybe<Dsstorebills_Bool_Exp>;
};


export type Subscription_RootEmployee_AttachmentsArgs = {
  distinct_on?: InputMaybe<Array<Employee_Attachments_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Employee_Attachments_Order_By>>;
  where?: InputMaybe<Employee_Attachments_Bool_Exp>;
};


export type Subscription_RootEmployee_Attachments_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Employee_Attachments_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Employee_Attachments_Order_By>>;
  where?: InputMaybe<Employee_Attachments_Bool_Exp>;
};


export type Subscription_RootEmployee_Attachments_By_PkArgs = {
  id: Scalars['String'];
};


export type Subscription_RootEmployee_Attachments_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<Employee_Attachments_Stream_Cursor_Input>>;
  where?: InputMaybe<Employee_Attachments_Bool_Exp>;
};


export type Subscription_RootEmployee_InsuranceArgs = {
  distinct_on?: InputMaybe<Array<Employee_Insurance_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Employee_Insurance_Order_By>>;
  where?: InputMaybe<Employee_Insurance_Bool_Exp>;
};


export type Subscription_RootEmployee_Insurance_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Employee_Insurance_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Employee_Insurance_Order_By>>;
  where?: InputMaybe<Employee_Insurance_Bool_Exp>;
};


export type Subscription_RootEmployee_Insurance_By_PkArgs = {
  id: Scalars['String'];
};


export type Subscription_RootEmployee_Insurance_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<Employee_Insurance_Stream_Cursor_Input>>;
  where?: InputMaybe<Employee_Insurance_Bool_Exp>;
};


export type Subscription_RootEmployee_LeavesArgs = {
  distinct_on?: InputMaybe<Array<Employee_Leaves_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Employee_Leaves_Order_By>>;
  where?: InputMaybe<Employee_Leaves_Bool_Exp>;
};


export type Subscription_RootEmployee_Leaves_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Employee_Leaves_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Employee_Leaves_Order_By>>;
  where?: InputMaybe<Employee_Leaves_Bool_Exp>;
};


export type Subscription_RootEmployee_Leaves_By_PkArgs = {
  id: Scalars['String'];
};


export type Subscription_RootEmployee_Leaves_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<Employee_Leaves_Stream_Cursor_Input>>;
  where?: InputMaybe<Employee_Leaves_Bool_Exp>;
};


export type Subscription_RootEmployee_Salary_DepartmentArgs = {
  distinct_on?: InputMaybe<Array<Employee_Salary_Department_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Employee_Salary_Department_Order_By>>;
  where?: InputMaybe<Employee_Salary_Department_Bool_Exp>;
};


export type Subscription_RootEmployee_Salary_Department_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Employee_Salary_Department_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Employee_Salary_Department_Order_By>>;
  where?: InputMaybe<Employee_Salary_Department_Bool_Exp>;
};


export type Subscription_RootEmployee_Salary_Department_By_PkArgs = {
  department_id: Scalars['String'];
  employee_id: Scalars['String'];
};


export type Subscription_RootEmployee_Salary_Department_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<Employee_Salary_Department_Stream_Cursor_Input>>;
  where?: InputMaybe<Employee_Salary_Department_Bool_Exp>;
};


export type Subscription_RootEmployeesArgs = {
  distinct_on?: InputMaybe<Array<Employees_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Employees_Order_By>>;
  where?: InputMaybe<Employees_Bool_Exp>;
};


export type Subscription_RootEmployees_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Employees_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Employees_Order_By>>;
  where?: InputMaybe<Employees_Bool_Exp>;
};


export type Subscription_RootEmployees_By_PkArgs = {
  id: Scalars['String'];
};


export type Subscription_RootEmployees_RolesArgs = {
  distinct_on?: InputMaybe<Array<Employees_Roles_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Employees_Roles_Order_By>>;
  where?: InputMaybe<Employees_Roles_Bool_Exp>;
};


export type Subscription_RootEmployees_Roles_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Employees_Roles_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Employees_Roles_Order_By>>;
  where?: InputMaybe<Employees_Roles_Bool_Exp>;
};


export type Subscription_RootEmployees_Roles_By_PkArgs = {
  employee_id: Scalars['String'];
  role_id: Scalars['String'];
};


export type Subscription_RootEmployees_Roles_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<Employees_Roles_Stream_Cursor_Input>>;
  where?: InputMaybe<Employees_Roles_Bool_Exp>;
};


export type Subscription_RootEmployees_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<Employees_Stream_Cursor_Input>>;
  where?: InputMaybe<Employees_Bool_Exp>;
};


export type Subscription_RootFoodcategoriesArgs = {
  distinct_on?: InputMaybe<Array<Foodcategories_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Foodcategories_Order_By>>;
  where?: InputMaybe<Foodcategories_Bool_Exp>;
};


export type Subscription_RootFoodcategories_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Foodcategories_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Foodcategories_Order_By>>;
  where?: InputMaybe<Foodcategories_Bool_Exp>;
};


export type Subscription_RootFoodcategories_By_PkArgs = {
  class_id: Scalars['bigint'];
};


export type Subscription_RootFoodcategories_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<Foodcategories_Stream_Cursor_Input>>;
  where?: InputMaybe<Foodcategories_Bool_Exp>;
};


export type Subscription_RootFooditemsArgs = {
  distinct_on?: InputMaybe<Array<Fooditems_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Fooditems_Order_By>>;
  where?: InputMaybe<Fooditems_Bool_Exp>;
};


export type Subscription_RootFooditems_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Fooditems_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Fooditems_Order_By>>;
  where?: InputMaybe<Fooditems_Bool_Exp>;
};


export type Subscription_RootFooditems_By_PkArgs = {
  item_id: Scalars['String'];
};


export type Subscription_RootFooditems_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<Fooditems_Stream_Cursor_Input>>;
  where?: InputMaybe<Fooditems_Bool_Exp>;
};


export type Subscription_RootFunc_Solditems_SummaryArgs = {
  args: Func_Solditems_Summary_Args;
  distinct_on?: InputMaybe<Array<Solditems_Summary_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Solditems_Summary_Order_By>>;
  where?: InputMaybe<Solditems_Summary_Bool_Exp>;
};


export type Subscription_RootFunc_Solditems_Summary_AggregateArgs = {
  args: Func_Solditems_Summary_Args;
  distinct_on?: InputMaybe<Array<Solditems_Summary_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Solditems_Summary_Order_By>>;
  where?: InputMaybe<Solditems_Summary_Bool_Exp>;
};


export type Subscription_RootIngredientsArgs = {
  distinct_on?: InputMaybe<Array<Ingredients_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Ingredients_Order_By>>;
  where?: InputMaybe<Ingredients_Bool_Exp>;
};


export type Subscription_RootIngredients_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Ingredients_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Ingredients_Order_By>>;
  where?: InputMaybe<Ingredients_Bool_Exp>;
};


export type Subscription_RootIngredients_By_PkArgs = {
  id: Scalars['Int'];
};


export type Subscription_RootIngredients_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<Ingredients_Stream_Cursor_Input>>;
  where?: InputMaybe<Ingredients_Bool_Exp>;
};


export type Subscription_RootInsurance_Fund_TypesArgs = {
  distinct_on?: InputMaybe<Array<Insurance_Fund_Types_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Insurance_Fund_Types_Order_By>>;
  where?: InputMaybe<Insurance_Fund_Types_Bool_Exp>;
};


export type Subscription_RootInsurance_Fund_Types_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Insurance_Fund_Types_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Insurance_Fund_Types_Order_By>>;
  where?: InputMaybe<Insurance_Fund_Types_Bool_Exp>;
};


export type Subscription_RootInsurance_Fund_Types_By_PkArgs = {
  id: Scalars['String'];
};


export type Subscription_RootInsurance_Fund_Types_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<Insurance_Fund_Types_Stream_Cursor_Input>>;
  where?: InputMaybe<Insurance_Fund_Types_Bool_Exp>;
};


export type Subscription_RootInsurance_FundsArgs = {
  distinct_on?: InputMaybe<Array<Insurance_Funds_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Insurance_Funds_Order_By>>;
  where?: InputMaybe<Insurance_Funds_Bool_Exp>;
};


export type Subscription_RootInsurance_Funds_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Insurance_Funds_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Insurance_Funds_Order_By>>;
  where?: InputMaybe<Insurance_Funds_Bool_Exp>;
};


export type Subscription_RootInsurance_Funds_By_PkArgs = {
  id: Scalars['String'];
};


export type Subscription_RootInsurance_Funds_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<Insurance_Funds_Stream_Cursor_Input>>;
  where?: InputMaybe<Insurance_Funds_Bool_Exp>;
};


export type Subscription_RootLeave_TypesArgs = {
  distinct_on?: InputMaybe<Array<Leave_Types_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Leave_Types_Order_By>>;
  where?: InputMaybe<Leave_Types_Bool_Exp>;
};


export type Subscription_RootLeave_Types_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Leave_Types_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Leave_Types_Order_By>>;
  where?: InputMaybe<Leave_Types_Bool_Exp>;
};


export type Subscription_RootLeave_Types_By_PkArgs = {
  id: Scalars['String'];
};


export type Subscription_RootLeave_Types_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<Leave_Types_Stream_Cursor_Input>>;
  where?: InputMaybe<Leave_Types_Bool_Exp>;
};


export type Subscription_RootMonthlysalaryArgs = {
  distinct_on?: InputMaybe<Array<Monthlysalary_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Monthlysalary_Order_By>>;
  where?: InputMaybe<Monthlysalary_Bool_Exp>;
};


export type Subscription_RootMonthlysalary_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Monthlysalary_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Monthlysalary_Order_By>>;
  where?: InputMaybe<Monthlysalary_Bool_Exp>;
};


export type Subscription_RootMonthlysalary_By_PkArgs = {
  attendance_department_id: Scalars['String'];
  employee_id: Scalars['String'];
  month: Scalars['date'];
};


export type Subscription_RootMonthlysalary_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<Monthlysalary_Stream_Cursor_Input>>;
  where?: InputMaybe<Monthlysalary_Bool_Exp>;
};


export type Subscription_RootNav_Bg_CategoriesArgs = {
  distinct_on?: InputMaybe<Array<Nav_Bg_Categories_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Nav_Bg_Categories_Order_By>>;
  where?: InputMaybe<Nav_Bg_Categories_Bool_Exp>;
};


export type Subscription_RootNav_Bg_Categories_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Nav_Bg_Categories_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Nav_Bg_Categories_Order_By>>;
  where?: InputMaybe<Nav_Bg_Categories_Bool_Exp>;
};


export type Subscription_RootNav_Bg_Categories_By_PkArgs = {
  id: Scalars['Int'];
};


export type Subscription_RootNav_Bg_Categories_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<Nav_Bg_Categories_Stream_Cursor_Input>>;
  where?: InputMaybe<Nav_Bg_Categories_Bool_Exp>;
};


export type Subscription_RootNav_Sm_CategoriesArgs = {
  distinct_on?: InputMaybe<Array<Nav_Sm_Categories_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Nav_Sm_Categories_Order_By>>;
  where?: InputMaybe<Nav_Sm_Categories_Bool_Exp>;
};


export type Subscription_RootNav_Sm_Categories_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Nav_Sm_Categories_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Nav_Sm_Categories_Order_By>>;
  where?: InputMaybe<Nav_Sm_Categories_Bool_Exp>;
};


export type Subscription_RootNav_Sm_Categories_By_PkArgs = {
  id: Scalars['Int'];
};


export type Subscription_RootNav_Sm_Categories_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<Nav_Sm_Categories_Stream_Cursor_Input>>;
  where?: InputMaybe<Nav_Sm_Categories_Bool_Exp>;
};


export type Subscription_RootNav_Xl_CategoriesArgs = {
  distinct_on?: InputMaybe<Array<Nav_Xl_Categories_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Nav_Xl_Categories_Order_By>>;
  where?: InputMaybe<Nav_Xl_Categories_Bool_Exp>;
};


export type Subscription_RootNav_Xl_Categories_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Nav_Xl_Categories_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Nav_Xl_Categories_Order_By>>;
  where?: InputMaybe<Nav_Xl_Categories_Bool_Exp>;
};


export type Subscription_RootNav_Xl_Categories_By_PkArgs = {
  id: Scalars['Int'];
};


export type Subscription_RootNav_Xl_Categories_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<Nav_Xl_Categories_Stream_Cursor_Input>>;
  where?: InputMaybe<Nav_Xl_Categories_Bool_Exp>;
};


export type Subscription_RootOrganstoresArgs = {
  distinct_on?: InputMaybe<Array<Organstores_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Organstores_Order_By>>;
  where?: InputMaybe<Organstores_Bool_Exp>;
};


export type Subscription_RootOrganstores_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Organstores_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Organstores_Order_By>>;
  where?: InputMaybe<Organstores_Bool_Exp>;
};


export type Subscription_RootOrganstores_By_PkArgs = {
  id: Scalars['String'];
};


export type Subscription_RootOrganstores_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<Organstores_Stream_Cursor_Input>>;
  where?: InputMaybe<Organstores_Bool_Exp>;
};


export type Subscription_RootRole_Nav_Sm_CategoriesArgs = {
  distinct_on?: InputMaybe<Array<Role_Nav_Sm_Categories_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Role_Nav_Sm_Categories_Order_By>>;
  where?: InputMaybe<Role_Nav_Sm_Categories_Bool_Exp>;
};


export type Subscription_RootRole_Nav_Sm_Categories_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Role_Nav_Sm_Categories_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Role_Nav_Sm_Categories_Order_By>>;
  where?: InputMaybe<Role_Nav_Sm_Categories_Bool_Exp>;
};


export type Subscription_RootRole_Nav_Sm_Categories_By_PkArgs = {
  nav_sm_category_id: Scalars['Int'];
  role_id: Scalars['String'];
};


export type Subscription_RootRole_Nav_Sm_Categories_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<Role_Nav_Sm_Categories_Stream_Cursor_Input>>;
  where?: InputMaybe<Role_Nav_Sm_Categories_Bool_Exp>;
};


export type Subscription_RootRole_ScopeArgs = {
  distinct_on?: InputMaybe<Array<Role_Scope_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Role_Scope_Order_By>>;
  where?: InputMaybe<Role_Scope_Bool_Exp>;
};


export type Subscription_RootRole_Scope_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Role_Scope_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Role_Scope_Order_By>>;
  where?: InputMaybe<Role_Scope_Bool_Exp>;
};


export type Subscription_RootRole_Scope_By_PkArgs = {
  id: Scalars['String'];
};


export type Subscription_RootRole_Scope_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<Role_Scope_Stream_Cursor_Input>>;
  where?: InputMaybe<Role_Scope_Bool_Exp>;
};


export type Subscription_RootRolesArgs = {
  distinct_on?: InputMaybe<Array<Roles_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Roles_Order_By>>;
  where?: InputMaybe<Roles_Bool_Exp>;
};


export type Subscription_RootRoles_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Roles_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Roles_Order_By>>;
  where?: InputMaybe<Roles_Bool_Exp>;
};


export type Subscription_RootRoles_By_PkArgs = {
  id: Scalars['String'];
};


export type Subscription_RootRoles_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<Roles_Stream_Cursor_Input>>;
  where?: InputMaybe<Roles_Bool_Exp>;
};


export type Subscription_RootSalary_AccountsArgs = {
  distinct_on?: InputMaybe<Array<Salary_Accounts_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Salary_Accounts_Order_By>>;
  where?: InputMaybe<Salary_Accounts_Bool_Exp>;
};


export type Subscription_RootSalary_Accounts_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Salary_Accounts_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Salary_Accounts_Order_By>>;
  where?: InputMaybe<Salary_Accounts_Bool_Exp>;
};


export type Subscription_RootSalary_Accounts_By_PkArgs = {
  id: Scalars['String'];
};


export type Subscription_RootSalary_Accounts_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<Salary_Accounts_Stream_Cursor_Input>>;
  where?: InputMaybe<Salary_Accounts_Bool_Exp>;
};


export type Subscription_RootSalary_TypesArgs = {
  distinct_on?: InputMaybe<Array<Salary_Types_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Salary_Types_Order_By>>;
  where?: InputMaybe<Salary_Types_Bool_Exp>;
};


export type Subscription_RootSalary_Types_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Salary_Types_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Salary_Types_Order_By>>;
  where?: InputMaybe<Salary_Types_Bool_Exp>;
};


export type Subscription_RootSalary_Types_By_PkArgs = {
  id: Scalars['String'];
};


export type Subscription_RootSalary_Types_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<Salary_Types_Stream_Cursor_Input>>;
  where?: InputMaybe<Salary_Types_Bool_Exp>;
};


export type Subscription_RootSalesitemsdataArgs = {
  distinct_on?: InputMaybe<Array<Salesitemsdata_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Salesitemsdata_Order_By>>;
  where?: InputMaybe<Salesitemsdata_Bool_Exp>;
};


export type Subscription_RootSalesitemsdata_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Salesitemsdata_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Salesitemsdata_Order_By>>;
  where?: InputMaybe<Salesitemsdata_Bool_Exp>;
};


export type Subscription_RootSalesitemsdata_By_PkArgs = {
  id: Scalars['String'];
};


export type Subscription_RootSalesitemsdata_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<Salesitemsdata_Stream_Cursor_Input>>;
  where?: InputMaybe<Salesitemsdata_Bool_Exp>;
};


export type Subscription_RootScope_Nav_Sm_CategoriesArgs = {
  distinct_on?: InputMaybe<Array<Scope_Nav_Sm_Categories_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Scope_Nav_Sm_Categories_Order_By>>;
  where?: InputMaybe<Scope_Nav_Sm_Categories_Bool_Exp>;
};


export type Subscription_RootScope_Nav_Sm_Categories_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Scope_Nav_Sm_Categories_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Scope_Nav_Sm_Categories_Order_By>>;
  where?: InputMaybe<Scope_Nav_Sm_Categories_Bool_Exp>;
};


export type Subscription_RootScope_Nav_Sm_Categories_By_PkArgs = {
  id: Scalars['Int'];
};


export type Subscription_RootScope_Nav_Sm_Categories_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<Scope_Nav_Sm_Categories_Stream_Cursor_Input>>;
  where?: InputMaybe<Scope_Nav_Sm_Categories_Bool_Exp>;
};


export type Subscription_RootScopesArgs = {
  distinct_on?: InputMaybe<Array<Scopes_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Scopes_Order_By>>;
  where?: InputMaybe<Scopes_Bool_Exp>;
};


export type Subscription_RootScopes_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Scopes_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Scopes_Order_By>>;
  where?: InputMaybe<Scopes_Bool_Exp>;
};


export type Subscription_RootScopes_By_PkArgs = {
  id: Scalars['String'];
};


export type Subscription_RootScopes_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<Scopes_Stream_Cursor_Input>>;
  where?: InputMaybe<Scopes_Bool_Exp>;
};


export type Subscription_RootService_EntitlementArgs = {
  distinct_on?: InputMaybe<Array<Service_Entitlement_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Service_Entitlement_Order_By>>;
  where?: InputMaybe<Service_Entitlement_Bool_Exp>;
};


export type Subscription_RootService_Entitlement_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Service_Entitlement_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Service_Entitlement_Order_By>>;
  where?: InputMaybe<Service_Entitlement_Bool_Exp>;
};


export type Subscription_RootService_Entitlement_By_PkArgs = {
  id: Scalars['String'];
};


export type Subscription_RootService_Entitlement_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<Service_Entitlement_Stream_Cursor_Input>>;
  where?: InputMaybe<Service_Entitlement_Bool_Exp>;
};


export type Subscription_RootSettledetailsArgs = {
  distinct_on?: InputMaybe<Array<Settledetails_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Settledetails_Order_By>>;
  where?: InputMaybe<Settledetails_Bool_Exp>;
};


export type Subscription_RootSettledetails_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Settledetails_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Settledetails_Order_By>>;
  where?: InputMaybe<Settledetails_Bool_Exp>;
};


export type Subscription_RootSettledetails_By_PkArgs = {
  pw_id: Scalars['bigint'];
};


export type Subscription_RootSettledetails_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<Settledetails_Stream_Cursor_Input>>;
  where?: InputMaybe<Settledetails_Bool_Exp>;
};


export type Subscription_RootShift_ListsArgs = {
  distinct_on?: InputMaybe<Array<Shift_Lists_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Shift_Lists_Order_By>>;
  where?: InputMaybe<Shift_Lists_Bool_Exp>;
};


export type Subscription_RootShift_Lists_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Shift_Lists_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Shift_Lists_Order_By>>;
  where?: InputMaybe<Shift_Lists_Bool_Exp>;
};


export type Subscription_RootShift_Lists_By_PkArgs = {
  id: Scalars['String'];
};


export type Subscription_RootShift_Lists_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<Shift_Lists_Stream_Cursor_Input>>;
  where?: InputMaybe<Shift_Lists_Bool_Exp>;
};


export type Subscription_RootSolditemsArgs = {
  distinct_on?: InputMaybe<Array<Solditems_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Solditems_Order_By>>;
  where?: InputMaybe<Solditems_Bool_Exp>;
};


export type Subscription_RootSolditems_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Solditems_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Solditems_Order_By>>;
  where?: InputMaybe<Solditems_Bool_Exp>;
};


export type Subscription_RootSolditems_By_PkArgs = {
  sc_id: Scalars['bigint'];
};


export type Subscription_RootSolditems_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<Solditems_Stream_Cursor_Input>>;
  where?: InputMaybe<Solditems_Bool_Exp>;
};


export type Subscription_RootSolditems_SummaryArgs = {
  distinct_on?: InputMaybe<Array<Solditems_Summary_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Solditems_Summary_Order_By>>;
  where?: InputMaybe<Solditems_Summary_Bool_Exp>;
};


export type Subscription_RootSolditems_Summary_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Solditems_Summary_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Solditems_Summary_Order_By>>;
  where?: InputMaybe<Solditems_Summary_Bool_Exp>;
};


export type Subscription_RootSolditems_Summary_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<Solditems_Summary_Stream_Cursor_Input>>;
  where?: InputMaybe<Solditems_Summary_Bool_Exp>;
};


export type Subscription_RootStore_EmployeeArgs = {
  distinct_on?: InputMaybe<Array<Store_Employee_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Store_Employee_Order_By>>;
  where?: InputMaybe<Store_Employee_Bool_Exp>;
};


export type Subscription_RootStore_Employee_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Store_Employee_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Store_Employee_Order_By>>;
  where?: InputMaybe<Store_Employee_Bool_Exp>;
};


export type Subscription_RootStore_Employee_By_PkArgs = {
  employee_id: Scalars['String'];
  store_id: Scalars['String'];
};


export type Subscription_RootStore_Employee_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<Store_Employee_Stream_Cursor_Input>>;
  where?: InputMaybe<Store_Employee_Bool_Exp>;
};


export type Subscription_RootStoresArgs = {
  distinct_on?: InputMaybe<Array<Stores_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Stores_Order_By>>;
  where?: InputMaybe<Stores_Bool_Exp>;
};


export type Subscription_RootStores_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Stores_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Stores_Order_By>>;
  where?: InputMaybe<Stores_Bool_Exp>;
};


export type Subscription_RootStores_By_PkArgs = {
  id: Scalars['String'];
};


export type Subscription_RootStores_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<Stores_Stream_Cursor_Input>>;
  where?: InputMaybe<Stores_Bool_Exp>;
};


export type Subscription_RootSuppliersArgs = {
  distinct_on?: InputMaybe<Array<Suppliers_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Suppliers_Order_By>>;
  where?: InputMaybe<Suppliers_Bool_Exp>;
};


export type Subscription_RootSuppliers_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Suppliers_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Suppliers_Order_By>>;
  where?: InputMaybe<Suppliers_Bool_Exp>;
};


export type Subscription_RootSuppliers_By_PkArgs = {
  supplierId: Scalars['String'];
};


export type Subscription_RootSuppliers_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<Suppliers_Stream_Cursor_Input>>;
  where?: InputMaybe<Suppliers_Bool_Exp>;
};


export type Subscription_RootSupplyitemsArgs = {
  distinct_on?: InputMaybe<Array<Supplyitems_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Supplyitems_Order_By>>;
  where?: InputMaybe<Supplyitems_Bool_Exp>;
};


export type Subscription_RootSupplyitems_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Supplyitems_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Supplyitems_Order_By>>;
  where?: InputMaybe<Supplyitems_Bool_Exp>;
};


export type Subscription_RootSupplyitems_By_PkArgs = {
  itemId: Scalars['String'];
};


export type Subscription_RootSupplyitems_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<Supplyitems_Stream_Cursor_Input>>;
  where?: InputMaybe<Supplyitems_Bool_Exp>;
};


export type Subscription_RootSupplyitemtypesArgs = {
  distinct_on?: InputMaybe<Array<Supplyitemtypes_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Supplyitemtypes_Order_By>>;
  where?: InputMaybe<Supplyitemtypes_Bool_Exp>;
};


export type Subscription_RootSupplyitemtypes_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Supplyitemtypes_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Supplyitemtypes_Order_By>>;
  where?: InputMaybe<Supplyitemtypes_Bool_Exp>;
};


export type Subscription_RootSupplyitemtypes_By_PkArgs = {
  itemTypeId: Scalars['String'];
};


export type Subscription_RootSupplyitemtypes_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<Supplyitemtypes_Stream_Cursor_Input>>;
  where?: InputMaybe<Supplyitemtypes_Bool_Exp>;
};


export type Subscription_RootSupplyitemunitsArgs = {
  distinct_on?: InputMaybe<Array<Supplyitemunits_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Supplyitemunits_Order_By>>;
  where?: InputMaybe<Supplyitemunits_Bool_Exp>;
};


export type Subscription_RootSupplyitemunits_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Supplyitemunits_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Supplyitemunits_Order_By>>;
  where?: InputMaybe<Supplyitemunits_Bool_Exp>;
};


export type Subscription_RootSupplyitemunits_By_PkArgs = {
  id: Scalars['bytea'];
};


export type Subscription_RootSupplyitemunits_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<Supplyitemunits_Stream_Cursor_Input>>;
  where?: InputMaybe<Supplyitemunits_Bool_Exp>;
};


export type Subscription_RootSupplyrdcArgs = {
  distinct_on?: InputMaybe<Array<Supplyrdc_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Supplyrdc_Order_By>>;
  where?: InputMaybe<Supplyrdc_Bool_Exp>;
};


export type Subscription_RootSupplyrdc_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Supplyrdc_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Supplyrdc_Order_By>>;
  where?: InputMaybe<Supplyrdc_Bool_Exp>;
};


export type Subscription_RootSupplyrdc_By_PkArgs = {
  rdcId: Scalars['String'];
};


export type Subscription_RootSupplyrdc_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<Supplyrdc_Stream_Cursor_Input>>;
  where?: InputMaybe<Supplyrdc_Bool_Exp>;
};


export type Subscription_RootView_Daily_Items_SoldArgs = {
  distinct_on?: InputMaybe<Array<View_Daily_Items_Sold_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<View_Daily_Items_Sold_Order_By>>;
  where?: InputMaybe<View_Daily_Items_Sold_Bool_Exp>;
};


export type Subscription_RootView_Daily_Items_Sold_AggregateArgs = {
  distinct_on?: InputMaybe<Array<View_Daily_Items_Sold_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<View_Daily_Items_Sold_Order_By>>;
  where?: InputMaybe<View_Daily_Items_Sold_Bool_Exp>;
};


export type Subscription_RootView_Daily_Items_Sold_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<View_Daily_Items_Sold_Stream_Cursor_Input>>;
  where?: InputMaybe<View_Daily_Items_Sold_Bool_Exp>;
};


export type Subscription_RootView_Monthly_SalaryArgs = {
  distinct_on?: InputMaybe<Array<View_Monthly_Salary_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<View_Monthly_Salary_Order_By>>;
  where?: InputMaybe<View_Monthly_Salary_Bool_Exp>;
};


export type Subscription_RootView_Monthly_Salary_2Args = {
  distinct_on?: InputMaybe<Array<View_Monthly_Salary_2_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<View_Monthly_Salary_2_Order_By>>;
  where?: InputMaybe<View_Monthly_Salary_2_Bool_Exp>;
};


export type Subscription_RootView_Monthly_Salary_2_AggregateArgs = {
  distinct_on?: InputMaybe<Array<View_Monthly_Salary_2_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<View_Monthly_Salary_2_Order_By>>;
  where?: InputMaybe<View_Monthly_Salary_2_Bool_Exp>;
};


export type Subscription_RootView_Monthly_Salary_2_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<View_Monthly_Salary_2_Stream_Cursor_Input>>;
  where?: InputMaybe<View_Monthly_Salary_2_Bool_Exp>;
};


export type Subscription_RootView_Monthly_Salary_AggregateArgs = {
  distinct_on?: InputMaybe<Array<View_Monthly_Salary_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<View_Monthly_Salary_Order_By>>;
  where?: InputMaybe<View_Monthly_Salary_Bool_Exp>;
};


export type Subscription_RootView_Monthly_Salary_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<View_Monthly_Salary_Stream_Cursor_Input>>;
  where?: InputMaybe<View_Monthly_Salary_Bool_Exp>;
};


export type Subscription_RootView_SolditemsArgs = {
  distinct_on?: InputMaybe<Array<View_Solditems_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<View_Solditems_Order_By>>;
  where?: InputMaybe<View_Solditems_Bool_Exp>;
};


export type Subscription_RootView_Solditems_AggregateArgs = {
  distinct_on?: InputMaybe<Array<View_Solditems_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<View_Solditems_Order_By>>;
  where?: InputMaybe<View_Solditems_Bool_Exp>;
};


export type Subscription_RootView_Solditems_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<View_Solditems_Stream_Cursor_Input>>;
  where?: InputMaybe<View_Solditems_Bool_Exp>;
};

/** columns and relationships of "suppliers" */
export type Suppliers = {
  __typename?: 'suppliers';
  modifyDate?: Maybe<Scalars['timestamp']>;
  supplierCode?: Maybe<Scalars['String']>;
  supplierId: Scalars['String'];
  supplierName?: Maybe<Scalars['String']>;
  supplierState?: Maybe<Scalars['Int']>;
  supplierTypeID?: Maybe<Scalars['String']>;
};

/** aggregated selection of "suppliers" */
export type Suppliers_Aggregate = {
  __typename?: 'suppliers_aggregate';
  aggregate?: Maybe<Suppliers_Aggregate_Fields>;
  nodes: Array<Suppliers>;
};

/** aggregate fields of "suppliers" */
export type Suppliers_Aggregate_Fields = {
  __typename?: 'suppliers_aggregate_fields';
  avg?: Maybe<Suppliers_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Suppliers_Max_Fields>;
  min?: Maybe<Suppliers_Min_Fields>;
  stddev?: Maybe<Suppliers_Stddev_Fields>;
  stddev_pop?: Maybe<Suppliers_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Suppliers_Stddev_Samp_Fields>;
  sum?: Maybe<Suppliers_Sum_Fields>;
  var_pop?: Maybe<Suppliers_Var_Pop_Fields>;
  var_samp?: Maybe<Suppliers_Var_Samp_Fields>;
  variance?: Maybe<Suppliers_Variance_Fields>;
};


/** aggregate fields of "suppliers" */
export type Suppliers_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Suppliers_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** aggregate avg on columns */
export type Suppliers_Avg_Fields = {
  __typename?: 'suppliers_avg_fields';
  supplierState?: Maybe<Scalars['Float']>;
};

/** Boolean expression to filter rows from the table "suppliers". All fields are combined with a logical 'AND'. */
export type Suppliers_Bool_Exp = {
  _and?: InputMaybe<Array<Suppliers_Bool_Exp>>;
  _not?: InputMaybe<Suppliers_Bool_Exp>;
  _or?: InputMaybe<Array<Suppliers_Bool_Exp>>;
  modifyDate?: InputMaybe<Timestamp_Comparison_Exp>;
  supplierCode?: InputMaybe<String_Comparison_Exp>;
  supplierId?: InputMaybe<String_Comparison_Exp>;
  supplierName?: InputMaybe<String_Comparison_Exp>;
  supplierState?: InputMaybe<Int_Comparison_Exp>;
  supplierTypeID?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "suppliers" */
export enum Suppliers_Constraint {
  /** unique or primary key constraint on columns "supplierId" */
  SuppliersPrimary48 = 'suppliersPRIMARY48'
}

/** input type for incrementing numeric columns in table "suppliers" */
export type Suppliers_Inc_Input = {
  supplierState?: InputMaybe<Scalars['Int']>;
};

/** input type for inserting data into table "suppliers" */
export type Suppliers_Insert_Input = {
  modifyDate?: InputMaybe<Scalars['timestamp']>;
  supplierCode?: InputMaybe<Scalars['String']>;
  supplierId?: InputMaybe<Scalars['String']>;
  supplierName?: InputMaybe<Scalars['String']>;
  supplierState?: InputMaybe<Scalars['Int']>;
  supplierTypeID?: InputMaybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Suppliers_Max_Fields = {
  __typename?: 'suppliers_max_fields';
  modifyDate?: Maybe<Scalars['timestamp']>;
  supplierCode?: Maybe<Scalars['String']>;
  supplierId?: Maybe<Scalars['String']>;
  supplierName?: Maybe<Scalars['String']>;
  supplierState?: Maybe<Scalars['Int']>;
  supplierTypeID?: Maybe<Scalars['String']>;
};

/** aggregate min on columns */
export type Suppliers_Min_Fields = {
  __typename?: 'suppliers_min_fields';
  modifyDate?: Maybe<Scalars['timestamp']>;
  supplierCode?: Maybe<Scalars['String']>;
  supplierId?: Maybe<Scalars['String']>;
  supplierName?: Maybe<Scalars['String']>;
  supplierState?: Maybe<Scalars['Int']>;
  supplierTypeID?: Maybe<Scalars['String']>;
};

/** response of any mutation on the table "suppliers" */
export type Suppliers_Mutation_Response = {
  __typename?: 'suppliers_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Suppliers>;
};

/** on_conflict condition type for table "suppliers" */
export type Suppliers_On_Conflict = {
  constraint: Suppliers_Constraint;
  update_columns?: Array<Suppliers_Update_Column>;
  where?: InputMaybe<Suppliers_Bool_Exp>;
};

/** Ordering options when selecting data from "suppliers". */
export type Suppliers_Order_By = {
  modifyDate?: InputMaybe<Order_By>;
  supplierCode?: InputMaybe<Order_By>;
  supplierId?: InputMaybe<Order_By>;
  supplierName?: InputMaybe<Order_By>;
  supplierState?: InputMaybe<Order_By>;
  supplierTypeID?: InputMaybe<Order_By>;
};

/** primary key columns input for table: suppliers */
export type Suppliers_Pk_Columns_Input = {
  supplierId: Scalars['String'];
};

/** select columns of table "suppliers" */
export enum Suppliers_Select_Column {
  /** column name */
  ModifyDate = 'modifyDate',
  /** column name */
  SupplierCode = 'supplierCode',
  /** column name */
  SupplierId = 'supplierId',
  /** column name */
  SupplierName = 'supplierName',
  /** column name */
  SupplierState = 'supplierState',
  /** column name */
  SupplierTypeId = 'supplierTypeID'
}

/** input type for updating data in table "suppliers" */
export type Suppliers_Set_Input = {
  modifyDate?: InputMaybe<Scalars['timestamp']>;
  supplierCode?: InputMaybe<Scalars['String']>;
  supplierId?: InputMaybe<Scalars['String']>;
  supplierName?: InputMaybe<Scalars['String']>;
  supplierState?: InputMaybe<Scalars['Int']>;
  supplierTypeID?: InputMaybe<Scalars['String']>;
};

/** aggregate stddev on columns */
export type Suppliers_Stddev_Fields = {
  __typename?: 'suppliers_stddev_fields';
  supplierState?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_pop on columns */
export type Suppliers_Stddev_Pop_Fields = {
  __typename?: 'suppliers_stddev_pop_fields';
  supplierState?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_samp on columns */
export type Suppliers_Stddev_Samp_Fields = {
  __typename?: 'suppliers_stddev_samp_fields';
  supplierState?: Maybe<Scalars['Float']>;
};

/** Streaming cursor of the table "suppliers" */
export type Suppliers_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Suppliers_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Suppliers_Stream_Cursor_Value_Input = {
  modifyDate?: InputMaybe<Scalars['timestamp']>;
  supplierCode?: InputMaybe<Scalars['String']>;
  supplierId?: InputMaybe<Scalars['String']>;
  supplierName?: InputMaybe<Scalars['String']>;
  supplierState?: InputMaybe<Scalars['Int']>;
  supplierTypeID?: InputMaybe<Scalars['String']>;
};

/** aggregate sum on columns */
export type Suppliers_Sum_Fields = {
  __typename?: 'suppliers_sum_fields';
  supplierState?: Maybe<Scalars['Int']>;
};

/** update columns of table "suppliers" */
export enum Suppliers_Update_Column {
  /** column name */
  ModifyDate = 'modifyDate',
  /** column name */
  SupplierCode = 'supplierCode',
  /** column name */
  SupplierId = 'supplierId',
  /** column name */
  SupplierName = 'supplierName',
  /** column name */
  SupplierState = 'supplierState',
  /** column name */
  SupplierTypeId = 'supplierTypeID'
}

export type Suppliers_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: InputMaybe<Suppliers_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Suppliers_Set_Input>;
  /** filter the rows which have to be updated */
  where: Suppliers_Bool_Exp;
};

/** aggregate var_pop on columns */
export type Suppliers_Var_Pop_Fields = {
  __typename?: 'suppliers_var_pop_fields';
  supplierState?: Maybe<Scalars['Float']>;
};

/** aggregate var_samp on columns */
export type Suppliers_Var_Samp_Fields = {
  __typename?: 'suppliers_var_samp_fields';
  supplierState?: Maybe<Scalars['Float']>;
};

/** aggregate variance on columns */
export type Suppliers_Variance_Fields = {
  __typename?: 'suppliers_variance_fields';
  supplierState?: Maybe<Scalars['Float']>;
};

/** columns and relationships of "supplyitems" */
export type Supplyitems = {
  __typename?: 'supplyitems';
  abc?: Maybe<Scalars['String']>;
  assistNo?: Maybe<Scalars['String']>;
  assistUnitFlag?: Maybe<Scalars['Int']>;
  assistUnitRatio?: Maybe<Scalars['numeric']>;
  costType?: Maybe<Scalars['Int']>;
  createDate?: Maybe<Scalars['timestamp']>;
  /** An array relationship */
  dsstorebills: Array<Dsstorebills>;
  /** An aggregate relationship */
  dsstorebills_aggregate: Dsstorebills_Aggregate;
  enableFlag?: Maybe<Scalars['Int']>;
  expDays?: Maybe<Scalars['Int']>;
  expFlag?: Maybe<Scalars['Int']>;
  /** An array relationship */
  ingredients: Array<Ingredients>;
  /** An aggregate relationship */
  ingredients_aggregate: Ingredients_Aggregate;
  itemBigTypeCode?: Maybe<Scalars['String']>;
  itemBigTypeID?: Maybe<Scalars['String']>;
  itemBigTypeName?: Maybe<Scalars['String']>;
  itemCode?: Maybe<Scalars['String']>;
  itemId: Scalars['String'];
  itemImage?: Maybe<Scalars['String']>;
  itemName?: Maybe<Scalars['String']>;
  itemTypeCode?: Maybe<Scalars['String']>;
  itemTypeID?: Maybe<Scalars['String']>;
  itemTypeName?: Maybe<Scalars['String']>;
  mainUnit?: Maybe<Scalars['String']>;
  modifyDate?: Maybe<Scalars['timestamp']>;
  mrpExcuteType?: Maybe<Scalars['Int']>;
  netRate?: Maybe<Scalars['numeric']>;
  origin_place?: Maybe<Scalars['String']>;
  packFlag?: Maybe<Scalars['Int']>;
  referCost?: Maybe<Scalars['numeric']>;
  referPrice?: Maybe<Scalars['numeric']>;
  reportUnit?: Maybe<Scalars['String']>;
  reportUnitRatio?: Maybe<Scalars['numeric']>;
  sign?: Maybe<Scalars['String']>;
  spec?: Maybe<Scalars['String']>;
  storeAgeFlag?: Maybe<Scalars['Int']>;
  /** An object relationship */
  supplyitemtype?: Maybe<Supplyitemtypes>;
  /** An object relationship */
  supplyitemtypeByItemtypeid?: Maybe<Supplyitemtypes>;
};


/** columns and relationships of "supplyitems" */
export type SupplyitemsDsstorebillsArgs = {
  distinct_on?: InputMaybe<Array<Dsstorebills_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Dsstorebills_Order_By>>;
  where?: InputMaybe<Dsstorebills_Bool_Exp>;
};


/** columns and relationships of "supplyitems" */
export type SupplyitemsDsstorebills_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Dsstorebills_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Dsstorebills_Order_By>>;
  where?: InputMaybe<Dsstorebills_Bool_Exp>;
};


/** columns and relationships of "supplyitems" */
export type SupplyitemsIngredientsArgs = {
  distinct_on?: InputMaybe<Array<Ingredients_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Ingredients_Order_By>>;
  where?: InputMaybe<Ingredients_Bool_Exp>;
};


/** columns and relationships of "supplyitems" */
export type SupplyitemsIngredients_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Ingredients_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Ingredients_Order_By>>;
  where?: InputMaybe<Ingredients_Bool_Exp>;
};

/** aggregated selection of "supplyitems" */
export type Supplyitems_Aggregate = {
  __typename?: 'supplyitems_aggregate';
  aggregate?: Maybe<Supplyitems_Aggregate_Fields>;
  nodes: Array<Supplyitems>;
};

export type Supplyitems_Aggregate_Bool_Exp = {
  count?: InputMaybe<Supplyitems_Aggregate_Bool_Exp_Count>;
};

export type Supplyitems_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<Supplyitems_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<Supplyitems_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "supplyitems" */
export type Supplyitems_Aggregate_Fields = {
  __typename?: 'supplyitems_aggregate_fields';
  avg?: Maybe<Supplyitems_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Supplyitems_Max_Fields>;
  min?: Maybe<Supplyitems_Min_Fields>;
  stddev?: Maybe<Supplyitems_Stddev_Fields>;
  stddev_pop?: Maybe<Supplyitems_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Supplyitems_Stddev_Samp_Fields>;
  sum?: Maybe<Supplyitems_Sum_Fields>;
  var_pop?: Maybe<Supplyitems_Var_Pop_Fields>;
  var_samp?: Maybe<Supplyitems_Var_Samp_Fields>;
  variance?: Maybe<Supplyitems_Variance_Fields>;
};


/** aggregate fields of "supplyitems" */
export type Supplyitems_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Supplyitems_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "supplyitems" */
export type Supplyitems_Aggregate_Order_By = {
  avg?: InputMaybe<Supplyitems_Avg_Order_By>;
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<Supplyitems_Max_Order_By>;
  min?: InputMaybe<Supplyitems_Min_Order_By>;
  stddev?: InputMaybe<Supplyitems_Stddev_Order_By>;
  stddev_pop?: InputMaybe<Supplyitems_Stddev_Pop_Order_By>;
  stddev_samp?: InputMaybe<Supplyitems_Stddev_Samp_Order_By>;
  sum?: InputMaybe<Supplyitems_Sum_Order_By>;
  var_pop?: InputMaybe<Supplyitems_Var_Pop_Order_By>;
  var_samp?: InputMaybe<Supplyitems_Var_Samp_Order_By>;
  variance?: InputMaybe<Supplyitems_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "supplyitems" */
export type Supplyitems_Arr_Rel_Insert_Input = {
  data: Array<Supplyitems_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<Supplyitems_On_Conflict>;
};

/** aggregate avg on columns */
export type Supplyitems_Avg_Fields = {
  __typename?: 'supplyitems_avg_fields';
  assistUnitFlag?: Maybe<Scalars['Float']>;
  assistUnitRatio?: Maybe<Scalars['Float']>;
  costType?: Maybe<Scalars['Float']>;
  enableFlag?: Maybe<Scalars['Float']>;
  expDays?: Maybe<Scalars['Float']>;
  expFlag?: Maybe<Scalars['Float']>;
  mrpExcuteType?: Maybe<Scalars['Float']>;
  netRate?: Maybe<Scalars['Float']>;
  packFlag?: Maybe<Scalars['Float']>;
  referCost?: Maybe<Scalars['Float']>;
  referPrice?: Maybe<Scalars['Float']>;
  reportUnitRatio?: Maybe<Scalars['Float']>;
  storeAgeFlag?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "supplyitems" */
export type Supplyitems_Avg_Order_By = {
  assistUnitFlag?: InputMaybe<Order_By>;
  assistUnitRatio?: InputMaybe<Order_By>;
  costType?: InputMaybe<Order_By>;
  enableFlag?: InputMaybe<Order_By>;
  expDays?: InputMaybe<Order_By>;
  expFlag?: InputMaybe<Order_By>;
  mrpExcuteType?: InputMaybe<Order_By>;
  netRate?: InputMaybe<Order_By>;
  packFlag?: InputMaybe<Order_By>;
  referCost?: InputMaybe<Order_By>;
  referPrice?: InputMaybe<Order_By>;
  reportUnitRatio?: InputMaybe<Order_By>;
  storeAgeFlag?: InputMaybe<Order_By>;
};

/** Boolean expression to filter rows from the table "supplyitems". All fields are combined with a logical 'AND'. */
export type Supplyitems_Bool_Exp = {
  _and?: InputMaybe<Array<Supplyitems_Bool_Exp>>;
  _not?: InputMaybe<Supplyitems_Bool_Exp>;
  _or?: InputMaybe<Array<Supplyitems_Bool_Exp>>;
  abc?: InputMaybe<String_Comparison_Exp>;
  assistNo?: InputMaybe<String_Comparison_Exp>;
  assistUnitFlag?: InputMaybe<Int_Comparison_Exp>;
  assistUnitRatio?: InputMaybe<Numeric_Comparison_Exp>;
  costType?: InputMaybe<Int_Comparison_Exp>;
  createDate?: InputMaybe<Timestamp_Comparison_Exp>;
  dsstorebills?: InputMaybe<Dsstorebills_Bool_Exp>;
  dsstorebills_aggregate?: InputMaybe<Dsstorebills_Aggregate_Bool_Exp>;
  enableFlag?: InputMaybe<Int_Comparison_Exp>;
  expDays?: InputMaybe<Int_Comparison_Exp>;
  expFlag?: InputMaybe<Int_Comparison_Exp>;
  ingredients?: InputMaybe<Ingredients_Bool_Exp>;
  ingredients_aggregate?: InputMaybe<Ingredients_Aggregate_Bool_Exp>;
  itemBigTypeCode?: InputMaybe<String_Comparison_Exp>;
  itemBigTypeID?: InputMaybe<String_Comparison_Exp>;
  itemBigTypeName?: InputMaybe<String_Comparison_Exp>;
  itemCode?: InputMaybe<String_Comparison_Exp>;
  itemId?: InputMaybe<String_Comparison_Exp>;
  itemImage?: InputMaybe<String_Comparison_Exp>;
  itemName?: InputMaybe<String_Comparison_Exp>;
  itemTypeCode?: InputMaybe<String_Comparison_Exp>;
  itemTypeID?: InputMaybe<String_Comparison_Exp>;
  itemTypeName?: InputMaybe<String_Comparison_Exp>;
  mainUnit?: InputMaybe<String_Comparison_Exp>;
  modifyDate?: InputMaybe<Timestamp_Comparison_Exp>;
  mrpExcuteType?: InputMaybe<Int_Comparison_Exp>;
  netRate?: InputMaybe<Numeric_Comparison_Exp>;
  origin_place?: InputMaybe<String_Comparison_Exp>;
  packFlag?: InputMaybe<Int_Comparison_Exp>;
  referCost?: InputMaybe<Numeric_Comparison_Exp>;
  referPrice?: InputMaybe<Numeric_Comparison_Exp>;
  reportUnit?: InputMaybe<String_Comparison_Exp>;
  reportUnitRatio?: InputMaybe<Numeric_Comparison_Exp>;
  sign?: InputMaybe<String_Comparison_Exp>;
  spec?: InputMaybe<String_Comparison_Exp>;
  storeAgeFlag?: InputMaybe<Int_Comparison_Exp>;
  supplyitemtype?: InputMaybe<Supplyitemtypes_Bool_Exp>;
  supplyitemtypeByItemtypeid?: InputMaybe<Supplyitemtypes_Bool_Exp>;
};

/** unique or primary key constraints on table "supplyitems" */
export enum Supplyitems_Constraint {
  /** unique or primary key constraint on columns "itemId" */
  SupplyitemsPrimary49 = 'supplyitemsPRIMARY49'
}

/** input type for incrementing numeric columns in table "supplyitems" */
export type Supplyitems_Inc_Input = {
  assistUnitFlag?: InputMaybe<Scalars['Int']>;
  assistUnitRatio?: InputMaybe<Scalars['numeric']>;
  costType?: InputMaybe<Scalars['Int']>;
  enableFlag?: InputMaybe<Scalars['Int']>;
  expDays?: InputMaybe<Scalars['Int']>;
  expFlag?: InputMaybe<Scalars['Int']>;
  mrpExcuteType?: InputMaybe<Scalars['Int']>;
  netRate?: InputMaybe<Scalars['numeric']>;
  packFlag?: InputMaybe<Scalars['Int']>;
  referCost?: InputMaybe<Scalars['numeric']>;
  referPrice?: InputMaybe<Scalars['numeric']>;
  reportUnitRatio?: InputMaybe<Scalars['numeric']>;
  storeAgeFlag?: InputMaybe<Scalars['Int']>;
};

/** input type for inserting data into table "supplyitems" */
export type Supplyitems_Insert_Input = {
  abc?: InputMaybe<Scalars['String']>;
  assistNo?: InputMaybe<Scalars['String']>;
  assistUnitFlag?: InputMaybe<Scalars['Int']>;
  assistUnitRatio?: InputMaybe<Scalars['numeric']>;
  costType?: InputMaybe<Scalars['Int']>;
  createDate?: InputMaybe<Scalars['timestamp']>;
  dsstorebills?: InputMaybe<Dsstorebills_Arr_Rel_Insert_Input>;
  enableFlag?: InputMaybe<Scalars['Int']>;
  expDays?: InputMaybe<Scalars['Int']>;
  expFlag?: InputMaybe<Scalars['Int']>;
  ingredients?: InputMaybe<Ingredients_Arr_Rel_Insert_Input>;
  itemBigTypeCode?: InputMaybe<Scalars['String']>;
  itemBigTypeID?: InputMaybe<Scalars['String']>;
  itemBigTypeName?: InputMaybe<Scalars['String']>;
  itemCode?: InputMaybe<Scalars['String']>;
  itemId?: InputMaybe<Scalars['String']>;
  itemImage?: InputMaybe<Scalars['String']>;
  itemName?: InputMaybe<Scalars['String']>;
  itemTypeCode?: InputMaybe<Scalars['String']>;
  itemTypeID?: InputMaybe<Scalars['String']>;
  itemTypeName?: InputMaybe<Scalars['String']>;
  mainUnit?: InputMaybe<Scalars['String']>;
  modifyDate?: InputMaybe<Scalars['timestamp']>;
  mrpExcuteType?: InputMaybe<Scalars['Int']>;
  netRate?: InputMaybe<Scalars['numeric']>;
  origin_place?: InputMaybe<Scalars['String']>;
  packFlag?: InputMaybe<Scalars['Int']>;
  referCost?: InputMaybe<Scalars['numeric']>;
  referPrice?: InputMaybe<Scalars['numeric']>;
  reportUnit?: InputMaybe<Scalars['String']>;
  reportUnitRatio?: InputMaybe<Scalars['numeric']>;
  sign?: InputMaybe<Scalars['String']>;
  spec?: InputMaybe<Scalars['String']>;
  storeAgeFlag?: InputMaybe<Scalars['Int']>;
  supplyitemtype?: InputMaybe<Supplyitemtypes_Obj_Rel_Insert_Input>;
  supplyitemtypeByItemtypeid?: InputMaybe<Supplyitemtypes_Obj_Rel_Insert_Input>;
};

/** aggregate max on columns */
export type Supplyitems_Max_Fields = {
  __typename?: 'supplyitems_max_fields';
  abc?: Maybe<Scalars['String']>;
  assistNo?: Maybe<Scalars['String']>;
  assistUnitFlag?: Maybe<Scalars['Int']>;
  assistUnitRatio?: Maybe<Scalars['numeric']>;
  costType?: Maybe<Scalars['Int']>;
  createDate?: Maybe<Scalars['timestamp']>;
  enableFlag?: Maybe<Scalars['Int']>;
  expDays?: Maybe<Scalars['Int']>;
  expFlag?: Maybe<Scalars['Int']>;
  itemBigTypeCode?: Maybe<Scalars['String']>;
  itemBigTypeID?: Maybe<Scalars['String']>;
  itemBigTypeName?: Maybe<Scalars['String']>;
  itemCode?: Maybe<Scalars['String']>;
  itemId?: Maybe<Scalars['String']>;
  itemImage?: Maybe<Scalars['String']>;
  itemName?: Maybe<Scalars['String']>;
  itemTypeCode?: Maybe<Scalars['String']>;
  itemTypeID?: Maybe<Scalars['String']>;
  itemTypeName?: Maybe<Scalars['String']>;
  mainUnit?: Maybe<Scalars['String']>;
  modifyDate?: Maybe<Scalars['timestamp']>;
  mrpExcuteType?: Maybe<Scalars['Int']>;
  netRate?: Maybe<Scalars['numeric']>;
  origin_place?: Maybe<Scalars['String']>;
  packFlag?: Maybe<Scalars['Int']>;
  referCost?: Maybe<Scalars['numeric']>;
  referPrice?: Maybe<Scalars['numeric']>;
  reportUnit?: Maybe<Scalars['String']>;
  reportUnitRatio?: Maybe<Scalars['numeric']>;
  sign?: Maybe<Scalars['String']>;
  spec?: Maybe<Scalars['String']>;
  storeAgeFlag?: Maybe<Scalars['Int']>;
};

/** order by max() on columns of table "supplyitems" */
export type Supplyitems_Max_Order_By = {
  abc?: InputMaybe<Order_By>;
  assistNo?: InputMaybe<Order_By>;
  assistUnitFlag?: InputMaybe<Order_By>;
  assistUnitRatio?: InputMaybe<Order_By>;
  costType?: InputMaybe<Order_By>;
  createDate?: InputMaybe<Order_By>;
  enableFlag?: InputMaybe<Order_By>;
  expDays?: InputMaybe<Order_By>;
  expFlag?: InputMaybe<Order_By>;
  itemBigTypeCode?: InputMaybe<Order_By>;
  itemBigTypeID?: InputMaybe<Order_By>;
  itemBigTypeName?: InputMaybe<Order_By>;
  itemCode?: InputMaybe<Order_By>;
  itemId?: InputMaybe<Order_By>;
  itemImage?: InputMaybe<Order_By>;
  itemName?: InputMaybe<Order_By>;
  itemTypeCode?: InputMaybe<Order_By>;
  itemTypeID?: InputMaybe<Order_By>;
  itemTypeName?: InputMaybe<Order_By>;
  mainUnit?: InputMaybe<Order_By>;
  modifyDate?: InputMaybe<Order_By>;
  mrpExcuteType?: InputMaybe<Order_By>;
  netRate?: InputMaybe<Order_By>;
  origin_place?: InputMaybe<Order_By>;
  packFlag?: InputMaybe<Order_By>;
  referCost?: InputMaybe<Order_By>;
  referPrice?: InputMaybe<Order_By>;
  reportUnit?: InputMaybe<Order_By>;
  reportUnitRatio?: InputMaybe<Order_By>;
  sign?: InputMaybe<Order_By>;
  spec?: InputMaybe<Order_By>;
  storeAgeFlag?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type Supplyitems_Min_Fields = {
  __typename?: 'supplyitems_min_fields';
  abc?: Maybe<Scalars['String']>;
  assistNo?: Maybe<Scalars['String']>;
  assistUnitFlag?: Maybe<Scalars['Int']>;
  assistUnitRatio?: Maybe<Scalars['numeric']>;
  costType?: Maybe<Scalars['Int']>;
  createDate?: Maybe<Scalars['timestamp']>;
  enableFlag?: Maybe<Scalars['Int']>;
  expDays?: Maybe<Scalars['Int']>;
  expFlag?: Maybe<Scalars['Int']>;
  itemBigTypeCode?: Maybe<Scalars['String']>;
  itemBigTypeID?: Maybe<Scalars['String']>;
  itemBigTypeName?: Maybe<Scalars['String']>;
  itemCode?: Maybe<Scalars['String']>;
  itemId?: Maybe<Scalars['String']>;
  itemImage?: Maybe<Scalars['String']>;
  itemName?: Maybe<Scalars['String']>;
  itemTypeCode?: Maybe<Scalars['String']>;
  itemTypeID?: Maybe<Scalars['String']>;
  itemTypeName?: Maybe<Scalars['String']>;
  mainUnit?: Maybe<Scalars['String']>;
  modifyDate?: Maybe<Scalars['timestamp']>;
  mrpExcuteType?: Maybe<Scalars['Int']>;
  netRate?: Maybe<Scalars['numeric']>;
  origin_place?: Maybe<Scalars['String']>;
  packFlag?: Maybe<Scalars['Int']>;
  referCost?: Maybe<Scalars['numeric']>;
  referPrice?: Maybe<Scalars['numeric']>;
  reportUnit?: Maybe<Scalars['String']>;
  reportUnitRatio?: Maybe<Scalars['numeric']>;
  sign?: Maybe<Scalars['String']>;
  spec?: Maybe<Scalars['String']>;
  storeAgeFlag?: Maybe<Scalars['Int']>;
};

/** order by min() on columns of table "supplyitems" */
export type Supplyitems_Min_Order_By = {
  abc?: InputMaybe<Order_By>;
  assistNo?: InputMaybe<Order_By>;
  assistUnitFlag?: InputMaybe<Order_By>;
  assistUnitRatio?: InputMaybe<Order_By>;
  costType?: InputMaybe<Order_By>;
  createDate?: InputMaybe<Order_By>;
  enableFlag?: InputMaybe<Order_By>;
  expDays?: InputMaybe<Order_By>;
  expFlag?: InputMaybe<Order_By>;
  itemBigTypeCode?: InputMaybe<Order_By>;
  itemBigTypeID?: InputMaybe<Order_By>;
  itemBigTypeName?: InputMaybe<Order_By>;
  itemCode?: InputMaybe<Order_By>;
  itemId?: InputMaybe<Order_By>;
  itemImage?: InputMaybe<Order_By>;
  itemName?: InputMaybe<Order_By>;
  itemTypeCode?: InputMaybe<Order_By>;
  itemTypeID?: InputMaybe<Order_By>;
  itemTypeName?: InputMaybe<Order_By>;
  mainUnit?: InputMaybe<Order_By>;
  modifyDate?: InputMaybe<Order_By>;
  mrpExcuteType?: InputMaybe<Order_By>;
  netRate?: InputMaybe<Order_By>;
  origin_place?: InputMaybe<Order_By>;
  packFlag?: InputMaybe<Order_By>;
  referCost?: InputMaybe<Order_By>;
  referPrice?: InputMaybe<Order_By>;
  reportUnit?: InputMaybe<Order_By>;
  reportUnitRatio?: InputMaybe<Order_By>;
  sign?: InputMaybe<Order_By>;
  spec?: InputMaybe<Order_By>;
  storeAgeFlag?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "supplyitems" */
export type Supplyitems_Mutation_Response = {
  __typename?: 'supplyitems_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Supplyitems>;
};

/** input type for inserting object relation for remote table "supplyitems" */
export type Supplyitems_Obj_Rel_Insert_Input = {
  data: Supplyitems_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<Supplyitems_On_Conflict>;
};

/** on_conflict condition type for table "supplyitems" */
export type Supplyitems_On_Conflict = {
  constraint: Supplyitems_Constraint;
  update_columns?: Array<Supplyitems_Update_Column>;
  where?: InputMaybe<Supplyitems_Bool_Exp>;
};

/** Ordering options when selecting data from "supplyitems". */
export type Supplyitems_Order_By = {
  abc?: InputMaybe<Order_By>;
  assistNo?: InputMaybe<Order_By>;
  assistUnitFlag?: InputMaybe<Order_By>;
  assistUnitRatio?: InputMaybe<Order_By>;
  costType?: InputMaybe<Order_By>;
  createDate?: InputMaybe<Order_By>;
  dsstorebills_aggregate?: InputMaybe<Dsstorebills_Aggregate_Order_By>;
  enableFlag?: InputMaybe<Order_By>;
  expDays?: InputMaybe<Order_By>;
  expFlag?: InputMaybe<Order_By>;
  ingredients_aggregate?: InputMaybe<Ingredients_Aggregate_Order_By>;
  itemBigTypeCode?: InputMaybe<Order_By>;
  itemBigTypeID?: InputMaybe<Order_By>;
  itemBigTypeName?: InputMaybe<Order_By>;
  itemCode?: InputMaybe<Order_By>;
  itemId?: InputMaybe<Order_By>;
  itemImage?: InputMaybe<Order_By>;
  itemName?: InputMaybe<Order_By>;
  itemTypeCode?: InputMaybe<Order_By>;
  itemTypeID?: InputMaybe<Order_By>;
  itemTypeName?: InputMaybe<Order_By>;
  mainUnit?: InputMaybe<Order_By>;
  modifyDate?: InputMaybe<Order_By>;
  mrpExcuteType?: InputMaybe<Order_By>;
  netRate?: InputMaybe<Order_By>;
  origin_place?: InputMaybe<Order_By>;
  packFlag?: InputMaybe<Order_By>;
  referCost?: InputMaybe<Order_By>;
  referPrice?: InputMaybe<Order_By>;
  reportUnit?: InputMaybe<Order_By>;
  reportUnitRatio?: InputMaybe<Order_By>;
  sign?: InputMaybe<Order_By>;
  spec?: InputMaybe<Order_By>;
  storeAgeFlag?: InputMaybe<Order_By>;
  supplyitemtype?: InputMaybe<Supplyitemtypes_Order_By>;
  supplyitemtypeByItemtypeid?: InputMaybe<Supplyitemtypes_Order_By>;
};

/** primary key columns input for table: supplyitems */
export type Supplyitems_Pk_Columns_Input = {
  itemId: Scalars['String'];
};

/** select columns of table "supplyitems" */
export enum Supplyitems_Select_Column {
  /** column name */
  Abc = 'abc',
  /** column name */
  AssistNo = 'assistNo',
  /** column name */
  AssistUnitFlag = 'assistUnitFlag',
  /** column name */
  AssistUnitRatio = 'assistUnitRatio',
  /** column name */
  CostType = 'costType',
  /** column name */
  CreateDate = 'createDate',
  /** column name */
  EnableFlag = 'enableFlag',
  /** column name */
  ExpDays = 'expDays',
  /** column name */
  ExpFlag = 'expFlag',
  /** column name */
  ItemBigTypeCode = 'itemBigTypeCode',
  /** column name */
  ItemBigTypeId = 'itemBigTypeID',
  /** column name */
  ItemBigTypeName = 'itemBigTypeName',
  /** column name */
  ItemCode = 'itemCode',
  /** column name */
  ItemId = 'itemId',
  /** column name */
  ItemImage = 'itemImage',
  /** column name */
  ItemName = 'itemName',
  /** column name */
  ItemTypeCode = 'itemTypeCode',
  /** column name */
  ItemTypeId = 'itemTypeID',
  /** column name */
  ItemTypeName = 'itemTypeName',
  /** column name */
  MainUnit = 'mainUnit',
  /** column name */
  ModifyDate = 'modifyDate',
  /** column name */
  MrpExcuteType = 'mrpExcuteType',
  /** column name */
  NetRate = 'netRate',
  /** column name */
  OriginPlace = 'origin_place',
  /** column name */
  PackFlag = 'packFlag',
  /** column name */
  ReferCost = 'referCost',
  /** column name */
  ReferPrice = 'referPrice',
  /** column name */
  ReportUnit = 'reportUnit',
  /** column name */
  ReportUnitRatio = 'reportUnitRatio',
  /** column name */
  Sign = 'sign',
  /** column name */
  Spec = 'spec',
  /** column name */
  StoreAgeFlag = 'storeAgeFlag'
}

/** input type for updating data in table "supplyitems" */
export type Supplyitems_Set_Input = {
  abc?: InputMaybe<Scalars['String']>;
  assistNo?: InputMaybe<Scalars['String']>;
  assistUnitFlag?: InputMaybe<Scalars['Int']>;
  assistUnitRatio?: InputMaybe<Scalars['numeric']>;
  costType?: InputMaybe<Scalars['Int']>;
  createDate?: InputMaybe<Scalars['timestamp']>;
  enableFlag?: InputMaybe<Scalars['Int']>;
  expDays?: InputMaybe<Scalars['Int']>;
  expFlag?: InputMaybe<Scalars['Int']>;
  itemBigTypeCode?: InputMaybe<Scalars['String']>;
  itemBigTypeID?: InputMaybe<Scalars['String']>;
  itemBigTypeName?: InputMaybe<Scalars['String']>;
  itemCode?: InputMaybe<Scalars['String']>;
  itemId?: InputMaybe<Scalars['String']>;
  itemImage?: InputMaybe<Scalars['String']>;
  itemName?: InputMaybe<Scalars['String']>;
  itemTypeCode?: InputMaybe<Scalars['String']>;
  itemTypeID?: InputMaybe<Scalars['String']>;
  itemTypeName?: InputMaybe<Scalars['String']>;
  mainUnit?: InputMaybe<Scalars['String']>;
  modifyDate?: InputMaybe<Scalars['timestamp']>;
  mrpExcuteType?: InputMaybe<Scalars['Int']>;
  netRate?: InputMaybe<Scalars['numeric']>;
  origin_place?: InputMaybe<Scalars['String']>;
  packFlag?: InputMaybe<Scalars['Int']>;
  referCost?: InputMaybe<Scalars['numeric']>;
  referPrice?: InputMaybe<Scalars['numeric']>;
  reportUnit?: InputMaybe<Scalars['String']>;
  reportUnitRatio?: InputMaybe<Scalars['numeric']>;
  sign?: InputMaybe<Scalars['String']>;
  spec?: InputMaybe<Scalars['String']>;
  storeAgeFlag?: InputMaybe<Scalars['Int']>;
};

/** aggregate stddev on columns */
export type Supplyitems_Stddev_Fields = {
  __typename?: 'supplyitems_stddev_fields';
  assistUnitFlag?: Maybe<Scalars['Float']>;
  assistUnitRatio?: Maybe<Scalars['Float']>;
  costType?: Maybe<Scalars['Float']>;
  enableFlag?: Maybe<Scalars['Float']>;
  expDays?: Maybe<Scalars['Float']>;
  expFlag?: Maybe<Scalars['Float']>;
  mrpExcuteType?: Maybe<Scalars['Float']>;
  netRate?: Maybe<Scalars['Float']>;
  packFlag?: Maybe<Scalars['Float']>;
  referCost?: Maybe<Scalars['Float']>;
  referPrice?: Maybe<Scalars['Float']>;
  reportUnitRatio?: Maybe<Scalars['Float']>;
  storeAgeFlag?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "supplyitems" */
export type Supplyitems_Stddev_Order_By = {
  assistUnitFlag?: InputMaybe<Order_By>;
  assistUnitRatio?: InputMaybe<Order_By>;
  costType?: InputMaybe<Order_By>;
  enableFlag?: InputMaybe<Order_By>;
  expDays?: InputMaybe<Order_By>;
  expFlag?: InputMaybe<Order_By>;
  mrpExcuteType?: InputMaybe<Order_By>;
  netRate?: InputMaybe<Order_By>;
  packFlag?: InputMaybe<Order_By>;
  referCost?: InputMaybe<Order_By>;
  referPrice?: InputMaybe<Order_By>;
  reportUnitRatio?: InputMaybe<Order_By>;
  storeAgeFlag?: InputMaybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Supplyitems_Stddev_Pop_Fields = {
  __typename?: 'supplyitems_stddev_pop_fields';
  assistUnitFlag?: Maybe<Scalars['Float']>;
  assistUnitRatio?: Maybe<Scalars['Float']>;
  costType?: Maybe<Scalars['Float']>;
  enableFlag?: Maybe<Scalars['Float']>;
  expDays?: Maybe<Scalars['Float']>;
  expFlag?: Maybe<Scalars['Float']>;
  mrpExcuteType?: Maybe<Scalars['Float']>;
  netRate?: Maybe<Scalars['Float']>;
  packFlag?: Maybe<Scalars['Float']>;
  referCost?: Maybe<Scalars['Float']>;
  referPrice?: Maybe<Scalars['Float']>;
  reportUnitRatio?: Maybe<Scalars['Float']>;
  storeAgeFlag?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "supplyitems" */
export type Supplyitems_Stddev_Pop_Order_By = {
  assistUnitFlag?: InputMaybe<Order_By>;
  assistUnitRatio?: InputMaybe<Order_By>;
  costType?: InputMaybe<Order_By>;
  enableFlag?: InputMaybe<Order_By>;
  expDays?: InputMaybe<Order_By>;
  expFlag?: InputMaybe<Order_By>;
  mrpExcuteType?: InputMaybe<Order_By>;
  netRate?: InputMaybe<Order_By>;
  packFlag?: InputMaybe<Order_By>;
  referCost?: InputMaybe<Order_By>;
  referPrice?: InputMaybe<Order_By>;
  reportUnitRatio?: InputMaybe<Order_By>;
  storeAgeFlag?: InputMaybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Supplyitems_Stddev_Samp_Fields = {
  __typename?: 'supplyitems_stddev_samp_fields';
  assistUnitFlag?: Maybe<Scalars['Float']>;
  assistUnitRatio?: Maybe<Scalars['Float']>;
  costType?: Maybe<Scalars['Float']>;
  enableFlag?: Maybe<Scalars['Float']>;
  expDays?: Maybe<Scalars['Float']>;
  expFlag?: Maybe<Scalars['Float']>;
  mrpExcuteType?: Maybe<Scalars['Float']>;
  netRate?: Maybe<Scalars['Float']>;
  packFlag?: Maybe<Scalars['Float']>;
  referCost?: Maybe<Scalars['Float']>;
  referPrice?: Maybe<Scalars['Float']>;
  reportUnitRatio?: Maybe<Scalars['Float']>;
  storeAgeFlag?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "supplyitems" */
export type Supplyitems_Stddev_Samp_Order_By = {
  assistUnitFlag?: InputMaybe<Order_By>;
  assistUnitRatio?: InputMaybe<Order_By>;
  costType?: InputMaybe<Order_By>;
  enableFlag?: InputMaybe<Order_By>;
  expDays?: InputMaybe<Order_By>;
  expFlag?: InputMaybe<Order_By>;
  mrpExcuteType?: InputMaybe<Order_By>;
  netRate?: InputMaybe<Order_By>;
  packFlag?: InputMaybe<Order_By>;
  referCost?: InputMaybe<Order_By>;
  referPrice?: InputMaybe<Order_By>;
  reportUnitRatio?: InputMaybe<Order_By>;
  storeAgeFlag?: InputMaybe<Order_By>;
};

/** Streaming cursor of the table "supplyitems" */
export type Supplyitems_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Supplyitems_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Supplyitems_Stream_Cursor_Value_Input = {
  abc?: InputMaybe<Scalars['String']>;
  assistNo?: InputMaybe<Scalars['String']>;
  assistUnitFlag?: InputMaybe<Scalars['Int']>;
  assistUnitRatio?: InputMaybe<Scalars['numeric']>;
  costType?: InputMaybe<Scalars['Int']>;
  createDate?: InputMaybe<Scalars['timestamp']>;
  enableFlag?: InputMaybe<Scalars['Int']>;
  expDays?: InputMaybe<Scalars['Int']>;
  expFlag?: InputMaybe<Scalars['Int']>;
  itemBigTypeCode?: InputMaybe<Scalars['String']>;
  itemBigTypeID?: InputMaybe<Scalars['String']>;
  itemBigTypeName?: InputMaybe<Scalars['String']>;
  itemCode?: InputMaybe<Scalars['String']>;
  itemId?: InputMaybe<Scalars['String']>;
  itemImage?: InputMaybe<Scalars['String']>;
  itemName?: InputMaybe<Scalars['String']>;
  itemTypeCode?: InputMaybe<Scalars['String']>;
  itemTypeID?: InputMaybe<Scalars['String']>;
  itemTypeName?: InputMaybe<Scalars['String']>;
  mainUnit?: InputMaybe<Scalars['String']>;
  modifyDate?: InputMaybe<Scalars['timestamp']>;
  mrpExcuteType?: InputMaybe<Scalars['Int']>;
  netRate?: InputMaybe<Scalars['numeric']>;
  origin_place?: InputMaybe<Scalars['String']>;
  packFlag?: InputMaybe<Scalars['Int']>;
  referCost?: InputMaybe<Scalars['numeric']>;
  referPrice?: InputMaybe<Scalars['numeric']>;
  reportUnit?: InputMaybe<Scalars['String']>;
  reportUnitRatio?: InputMaybe<Scalars['numeric']>;
  sign?: InputMaybe<Scalars['String']>;
  spec?: InputMaybe<Scalars['String']>;
  storeAgeFlag?: InputMaybe<Scalars['Int']>;
};

/** aggregate sum on columns */
export type Supplyitems_Sum_Fields = {
  __typename?: 'supplyitems_sum_fields';
  assistUnitFlag?: Maybe<Scalars['Int']>;
  assistUnitRatio?: Maybe<Scalars['numeric']>;
  costType?: Maybe<Scalars['Int']>;
  enableFlag?: Maybe<Scalars['Int']>;
  expDays?: Maybe<Scalars['Int']>;
  expFlag?: Maybe<Scalars['Int']>;
  mrpExcuteType?: Maybe<Scalars['Int']>;
  netRate?: Maybe<Scalars['numeric']>;
  packFlag?: Maybe<Scalars['Int']>;
  referCost?: Maybe<Scalars['numeric']>;
  referPrice?: Maybe<Scalars['numeric']>;
  reportUnitRatio?: Maybe<Scalars['numeric']>;
  storeAgeFlag?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "supplyitems" */
export type Supplyitems_Sum_Order_By = {
  assistUnitFlag?: InputMaybe<Order_By>;
  assistUnitRatio?: InputMaybe<Order_By>;
  costType?: InputMaybe<Order_By>;
  enableFlag?: InputMaybe<Order_By>;
  expDays?: InputMaybe<Order_By>;
  expFlag?: InputMaybe<Order_By>;
  mrpExcuteType?: InputMaybe<Order_By>;
  netRate?: InputMaybe<Order_By>;
  packFlag?: InputMaybe<Order_By>;
  referCost?: InputMaybe<Order_By>;
  referPrice?: InputMaybe<Order_By>;
  reportUnitRatio?: InputMaybe<Order_By>;
  storeAgeFlag?: InputMaybe<Order_By>;
};

/** update columns of table "supplyitems" */
export enum Supplyitems_Update_Column {
  /** column name */
  Abc = 'abc',
  /** column name */
  AssistNo = 'assistNo',
  /** column name */
  AssistUnitFlag = 'assistUnitFlag',
  /** column name */
  AssistUnitRatio = 'assistUnitRatio',
  /** column name */
  CostType = 'costType',
  /** column name */
  CreateDate = 'createDate',
  /** column name */
  EnableFlag = 'enableFlag',
  /** column name */
  ExpDays = 'expDays',
  /** column name */
  ExpFlag = 'expFlag',
  /** column name */
  ItemBigTypeCode = 'itemBigTypeCode',
  /** column name */
  ItemBigTypeId = 'itemBigTypeID',
  /** column name */
  ItemBigTypeName = 'itemBigTypeName',
  /** column name */
  ItemCode = 'itemCode',
  /** column name */
  ItemId = 'itemId',
  /** column name */
  ItemImage = 'itemImage',
  /** column name */
  ItemName = 'itemName',
  /** column name */
  ItemTypeCode = 'itemTypeCode',
  /** column name */
  ItemTypeId = 'itemTypeID',
  /** column name */
  ItemTypeName = 'itemTypeName',
  /** column name */
  MainUnit = 'mainUnit',
  /** column name */
  ModifyDate = 'modifyDate',
  /** column name */
  MrpExcuteType = 'mrpExcuteType',
  /** column name */
  NetRate = 'netRate',
  /** column name */
  OriginPlace = 'origin_place',
  /** column name */
  PackFlag = 'packFlag',
  /** column name */
  ReferCost = 'referCost',
  /** column name */
  ReferPrice = 'referPrice',
  /** column name */
  ReportUnit = 'reportUnit',
  /** column name */
  ReportUnitRatio = 'reportUnitRatio',
  /** column name */
  Sign = 'sign',
  /** column name */
  Spec = 'spec',
  /** column name */
  StoreAgeFlag = 'storeAgeFlag'
}

export type Supplyitems_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: InputMaybe<Supplyitems_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Supplyitems_Set_Input>;
  /** filter the rows which have to be updated */
  where: Supplyitems_Bool_Exp;
};

/** aggregate var_pop on columns */
export type Supplyitems_Var_Pop_Fields = {
  __typename?: 'supplyitems_var_pop_fields';
  assistUnitFlag?: Maybe<Scalars['Float']>;
  assistUnitRatio?: Maybe<Scalars['Float']>;
  costType?: Maybe<Scalars['Float']>;
  enableFlag?: Maybe<Scalars['Float']>;
  expDays?: Maybe<Scalars['Float']>;
  expFlag?: Maybe<Scalars['Float']>;
  mrpExcuteType?: Maybe<Scalars['Float']>;
  netRate?: Maybe<Scalars['Float']>;
  packFlag?: Maybe<Scalars['Float']>;
  referCost?: Maybe<Scalars['Float']>;
  referPrice?: Maybe<Scalars['Float']>;
  reportUnitRatio?: Maybe<Scalars['Float']>;
  storeAgeFlag?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "supplyitems" */
export type Supplyitems_Var_Pop_Order_By = {
  assistUnitFlag?: InputMaybe<Order_By>;
  assistUnitRatio?: InputMaybe<Order_By>;
  costType?: InputMaybe<Order_By>;
  enableFlag?: InputMaybe<Order_By>;
  expDays?: InputMaybe<Order_By>;
  expFlag?: InputMaybe<Order_By>;
  mrpExcuteType?: InputMaybe<Order_By>;
  netRate?: InputMaybe<Order_By>;
  packFlag?: InputMaybe<Order_By>;
  referCost?: InputMaybe<Order_By>;
  referPrice?: InputMaybe<Order_By>;
  reportUnitRatio?: InputMaybe<Order_By>;
  storeAgeFlag?: InputMaybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Supplyitems_Var_Samp_Fields = {
  __typename?: 'supplyitems_var_samp_fields';
  assistUnitFlag?: Maybe<Scalars['Float']>;
  assistUnitRatio?: Maybe<Scalars['Float']>;
  costType?: Maybe<Scalars['Float']>;
  enableFlag?: Maybe<Scalars['Float']>;
  expDays?: Maybe<Scalars['Float']>;
  expFlag?: Maybe<Scalars['Float']>;
  mrpExcuteType?: Maybe<Scalars['Float']>;
  netRate?: Maybe<Scalars['Float']>;
  packFlag?: Maybe<Scalars['Float']>;
  referCost?: Maybe<Scalars['Float']>;
  referPrice?: Maybe<Scalars['Float']>;
  reportUnitRatio?: Maybe<Scalars['Float']>;
  storeAgeFlag?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "supplyitems" */
export type Supplyitems_Var_Samp_Order_By = {
  assistUnitFlag?: InputMaybe<Order_By>;
  assistUnitRatio?: InputMaybe<Order_By>;
  costType?: InputMaybe<Order_By>;
  enableFlag?: InputMaybe<Order_By>;
  expDays?: InputMaybe<Order_By>;
  expFlag?: InputMaybe<Order_By>;
  mrpExcuteType?: InputMaybe<Order_By>;
  netRate?: InputMaybe<Order_By>;
  packFlag?: InputMaybe<Order_By>;
  referCost?: InputMaybe<Order_By>;
  referPrice?: InputMaybe<Order_By>;
  reportUnitRatio?: InputMaybe<Order_By>;
  storeAgeFlag?: InputMaybe<Order_By>;
};

/** aggregate variance on columns */
export type Supplyitems_Variance_Fields = {
  __typename?: 'supplyitems_variance_fields';
  assistUnitFlag?: Maybe<Scalars['Float']>;
  assistUnitRatio?: Maybe<Scalars['Float']>;
  costType?: Maybe<Scalars['Float']>;
  enableFlag?: Maybe<Scalars['Float']>;
  expDays?: Maybe<Scalars['Float']>;
  expFlag?: Maybe<Scalars['Float']>;
  mrpExcuteType?: Maybe<Scalars['Float']>;
  netRate?: Maybe<Scalars['Float']>;
  packFlag?: Maybe<Scalars['Float']>;
  referCost?: Maybe<Scalars['Float']>;
  referPrice?: Maybe<Scalars['Float']>;
  reportUnitRatio?: Maybe<Scalars['Float']>;
  storeAgeFlag?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "supplyitems" */
export type Supplyitems_Variance_Order_By = {
  assistUnitFlag?: InputMaybe<Order_By>;
  assistUnitRatio?: InputMaybe<Order_By>;
  costType?: InputMaybe<Order_By>;
  enableFlag?: InputMaybe<Order_By>;
  expDays?: InputMaybe<Order_By>;
  expFlag?: InputMaybe<Order_By>;
  mrpExcuteType?: InputMaybe<Order_By>;
  netRate?: InputMaybe<Order_By>;
  packFlag?: InputMaybe<Order_By>;
  referCost?: InputMaybe<Order_By>;
  referPrice?: InputMaybe<Order_By>;
  reportUnitRatio?: InputMaybe<Order_By>;
  storeAgeFlag?: InputMaybe<Order_By>;
};

/** columns and relationships of "supplyitemtypes" */
export type Supplyitemtypes = {
  __typename?: 'supplyitemtypes';
  itemTypeCode?: Maybe<Scalars['String']>;
  itemTypeId: Scalars['String'];
  itemTypeName?: Maybe<Scalars['String']>;
  modifyDate?: Maybe<Scalars['timestamp']>;
  parentTypeID?: Maybe<Scalars['String']>;
  /** An array relationship */
  supplyitems: Array<Supplyitems>;
  /** An array relationship */
  supplyitemsByItemtypeid: Array<Supplyitems>;
  /** An aggregate relationship */
  supplyitemsByItemtypeid_aggregate: Supplyitems_Aggregate;
  /** An aggregate relationship */
  supplyitems_aggregate: Supplyitems_Aggregate;
};


/** columns and relationships of "supplyitemtypes" */
export type SupplyitemtypesSupplyitemsArgs = {
  distinct_on?: InputMaybe<Array<Supplyitems_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Supplyitems_Order_By>>;
  where?: InputMaybe<Supplyitems_Bool_Exp>;
};


/** columns and relationships of "supplyitemtypes" */
export type SupplyitemtypesSupplyitemsByItemtypeidArgs = {
  distinct_on?: InputMaybe<Array<Supplyitems_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Supplyitems_Order_By>>;
  where?: InputMaybe<Supplyitems_Bool_Exp>;
};


/** columns and relationships of "supplyitemtypes" */
export type SupplyitemtypesSupplyitemsByItemtypeid_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Supplyitems_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Supplyitems_Order_By>>;
  where?: InputMaybe<Supplyitems_Bool_Exp>;
};


/** columns and relationships of "supplyitemtypes" */
export type SupplyitemtypesSupplyitems_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Supplyitems_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Supplyitems_Order_By>>;
  where?: InputMaybe<Supplyitems_Bool_Exp>;
};

/** aggregated selection of "supplyitemtypes" */
export type Supplyitemtypes_Aggregate = {
  __typename?: 'supplyitemtypes_aggregate';
  aggregate?: Maybe<Supplyitemtypes_Aggregate_Fields>;
  nodes: Array<Supplyitemtypes>;
};

/** aggregate fields of "supplyitemtypes" */
export type Supplyitemtypes_Aggregate_Fields = {
  __typename?: 'supplyitemtypes_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Supplyitemtypes_Max_Fields>;
  min?: Maybe<Supplyitemtypes_Min_Fields>;
};


/** aggregate fields of "supplyitemtypes" */
export type Supplyitemtypes_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Supplyitemtypes_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** Boolean expression to filter rows from the table "supplyitemtypes". All fields are combined with a logical 'AND'. */
export type Supplyitemtypes_Bool_Exp = {
  _and?: InputMaybe<Array<Supplyitemtypes_Bool_Exp>>;
  _not?: InputMaybe<Supplyitemtypes_Bool_Exp>;
  _or?: InputMaybe<Array<Supplyitemtypes_Bool_Exp>>;
  itemTypeCode?: InputMaybe<String_Comparison_Exp>;
  itemTypeId?: InputMaybe<String_Comparison_Exp>;
  itemTypeName?: InputMaybe<String_Comparison_Exp>;
  modifyDate?: InputMaybe<Timestamp_Comparison_Exp>;
  parentTypeID?: InputMaybe<String_Comparison_Exp>;
  supplyitems?: InputMaybe<Supplyitems_Bool_Exp>;
  supplyitemsByItemtypeid?: InputMaybe<Supplyitems_Bool_Exp>;
  supplyitemsByItemtypeid_aggregate?: InputMaybe<Supplyitems_Aggregate_Bool_Exp>;
  supplyitems_aggregate?: InputMaybe<Supplyitems_Aggregate_Bool_Exp>;
};

/** unique or primary key constraints on table "supplyitemtypes" */
export enum Supplyitemtypes_Constraint {
  /** unique or primary key constraint on columns "itemTypeId" */
  SupplyitemtypesPkey = 'supplyitemtypes_pkey'
}

/** input type for inserting data into table "supplyitemtypes" */
export type Supplyitemtypes_Insert_Input = {
  itemTypeCode?: InputMaybe<Scalars['String']>;
  itemTypeId?: InputMaybe<Scalars['String']>;
  itemTypeName?: InputMaybe<Scalars['String']>;
  modifyDate?: InputMaybe<Scalars['timestamp']>;
  parentTypeID?: InputMaybe<Scalars['String']>;
  supplyitems?: InputMaybe<Supplyitems_Arr_Rel_Insert_Input>;
  supplyitemsByItemtypeid?: InputMaybe<Supplyitems_Arr_Rel_Insert_Input>;
};

/** aggregate max on columns */
export type Supplyitemtypes_Max_Fields = {
  __typename?: 'supplyitemtypes_max_fields';
  itemTypeCode?: Maybe<Scalars['String']>;
  itemTypeId?: Maybe<Scalars['String']>;
  itemTypeName?: Maybe<Scalars['String']>;
  modifyDate?: Maybe<Scalars['timestamp']>;
  parentTypeID?: Maybe<Scalars['String']>;
};

/** aggregate min on columns */
export type Supplyitemtypes_Min_Fields = {
  __typename?: 'supplyitemtypes_min_fields';
  itemTypeCode?: Maybe<Scalars['String']>;
  itemTypeId?: Maybe<Scalars['String']>;
  itemTypeName?: Maybe<Scalars['String']>;
  modifyDate?: Maybe<Scalars['timestamp']>;
  parentTypeID?: Maybe<Scalars['String']>;
};

/** response of any mutation on the table "supplyitemtypes" */
export type Supplyitemtypes_Mutation_Response = {
  __typename?: 'supplyitemtypes_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Supplyitemtypes>;
};

/** input type for inserting object relation for remote table "supplyitemtypes" */
export type Supplyitemtypes_Obj_Rel_Insert_Input = {
  data: Supplyitemtypes_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<Supplyitemtypes_On_Conflict>;
};

/** on_conflict condition type for table "supplyitemtypes" */
export type Supplyitemtypes_On_Conflict = {
  constraint: Supplyitemtypes_Constraint;
  update_columns?: Array<Supplyitemtypes_Update_Column>;
  where?: InputMaybe<Supplyitemtypes_Bool_Exp>;
};

/** Ordering options when selecting data from "supplyitemtypes". */
export type Supplyitemtypes_Order_By = {
  itemTypeCode?: InputMaybe<Order_By>;
  itemTypeId?: InputMaybe<Order_By>;
  itemTypeName?: InputMaybe<Order_By>;
  modifyDate?: InputMaybe<Order_By>;
  parentTypeID?: InputMaybe<Order_By>;
  supplyitemsByItemtypeid_aggregate?: InputMaybe<Supplyitems_Aggregate_Order_By>;
  supplyitems_aggregate?: InputMaybe<Supplyitems_Aggregate_Order_By>;
};

/** primary key columns input for table: supplyitemtypes */
export type Supplyitemtypes_Pk_Columns_Input = {
  itemTypeId: Scalars['String'];
};

/** select columns of table "supplyitemtypes" */
export enum Supplyitemtypes_Select_Column {
  /** column name */
  ItemTypeCode = 'itemTypeCode',
  /** column name */
  ItemTypeId = 'itemTypeId',
  /** column name */
  ItemTypeName = 'itemTypeName',
  /** column name */
  ModifyDate = 'modifyDate',
  /** column name */
  ParentTypeId = 'parentTypeID'
}

/** input type for updating data in table "supplyitemtypes" */
export type Supplyitemtypes_Set_Input = {
  itemTypeCode?: InputMaybe<Scalars['String']>;
  itemTypeId?: InputMaybe<Scalars['String']>;
  itemTypeName?: InputMaybe<Scalars['String']>;
  modifyDate?: InputMaybe<Scalars['timestamp']>;
  parentTypeID?: InputMaybe<Scalars['String']>;
};

/** Streaming cursor of the table "supplyitemtypes" */
export type Supplyitemtypes_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Supplyitemtypes_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Supplyitemtypes_Stream_Cursor_Value_Input = {
  itemTypeCode?: InputMaybe<Scalars['String']>;
  itemTypeId?: InputMaybe<Scalars['String']>;
  itemTypeName?: InputMaybe<Scalars['String']>;
  modifyDate?: InputMaybe<Scalars['timestamp']>;
  parentTypeID?: InputMaybe<Scalars['String']>;
};

/** update columns of table "supplyitemtypes" */
export enum Supplyitemtypes_Update_Column {
  /** column name */
  ItemTypeCode = 'itemTypeCode',
  /** column name */
  ItemTypeId = 'itemTypeId',
  /** column name */
  ItemTypeName = 'itemTypeName',
  /** column name */
  ModifyDate = 'modifyDate',
  /** column name */
  ParentTypeId = 'parentTypeID'
}

export type Supplyitemtypes_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Supplyitemtypes_Set_Input>;
  /** filter the rows which have to be updated */
  where: Supplyitemtypes_Bool_Exp;
};

/** columns and relationships of "supplyitemunits" */
export type Supplyitemunits = {
  __typename?: 'supplyitemunits';
  UnitRation?: Maybe<Scalars['numeric']>;
  checkFlag?: Maybe<Scalars['Int']>;
  enableFlag?: Maybe<Scalars['Int']>;
  id: Scalars['bytea'];
  itemId?: Maybe<Scalars['String']>;
  itemUnitID?: Maybe<Scalars['String']>;
  itemUnitName?: Maybe<Scalars['String']>;
  modifyDate?: Maybe<Scalars['timestamp']>;
  pickFlag?: Maybe<Scalars['Int']>;
  reportFlag?: Maybe<Scalars['Int']>;
  sendFlag?: Maybe<Scalars['Int']>;
  uid: Scalars['bytea'];
};

/** aggregated selection of "supplyitemunits" */
export type Supplyitemunits_Aggregate = {
  __typename?: 'supplyitemunits_aggregate';
  aggregate?: Maybe<Supplyitemunits_Aggregate_Fields>;
  nodes: Array<Supplyitemunits>;
};

/** aggregate fields of "supplyitemunits" */
export type Supplyitemunits_Aggregate_Fields = {
  __typename?: 'supplyitemunits_aggregate_fields';
  avg?: Maybe<Supplyitemunits_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Supplyitemunits_Max_Fields>;
  min?: Maybe<Supplyitemunits_Min_Fields>;
  stddev?: Maybe<Supplyitemunits_Stddev_Fields>;
  stddev_pop?: Maybe<Supplyitemunits_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Supplyitemunits_Stddev_Samp_Fields>;
  sum?: Maybe<Supplyitemunits_Sum_Fields>;
  var_pop?: Maybe<Supplyitemunits_Var_Pop_Fields>;
  var_samp?: Maybe<Supplyitemunits_Var_Samp_Fields>;
  variance?: Maybe<Supplyitemunits_Variance_Fields>;
};


/** aggregate fields of "supplyitemunits" */
export type Supplyitemunits_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Supplyitemunits_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** aggregate avg on columns */
export type Supplyitemunits_Avg_Fields = {
  __typename?: 'supplyitemunits_avg_fields';
  UnitRation?: Maybe<Scalars['Float']>;
  checkFlag?: Maybe<Scalars['Float']>;
  enableFlag?: Maybe<Scalars['Float']>;
  pickFlag?: Maybe<Scalars['Float']>;
  reportFlag?: Maybe<Scalars['Float']>;
  sendFlag?: Maybe<Scalars['Float']>;
};

/** Boolean expression to filter rows from the table "supplyitemunits". All fields are combined with a logical 'AND'. */
export type Supplyitemunits_Bool_Exp = {
  UnitRation?: InputMaybe<Numeric_Comparison_Exp>;
  _and?: InputMaybe<Array<Supplyitemunits_Bool_Exp>>;
  _not?: InputMaybe<Supplyitemunits_Bool_Exp>;
  _or?: InputMaybe<Array<Supplyitemunits_Bool_Exp>>;
  checkFlag?: InputMaybe<Int_Comparison_Exp>;
  enableFlag?: InputMaybe<Int_Comparison_Exp>;
  id?: InputMaybe<Bytea_Comparison_Exp>;
  itemId?: InputMaybe<String_Comparison_Exp>;
  itemUnitID?: InputMaybe<String_Comparison_Exp>;
  itemUnitName?: InputMaybe<String_Comparison_Exp>;
  modifyDate?: InputMaybe<Timestamp_Comparison_Exp>;
  pickFlag?: InputMaybe<Int_Comparison_Exp>;
  reportFlag?: InputMaybe<Int_Comparison_Exp>;
  sendFlag?: InputMaybe<Int_Comparison_Exp>;
  uid?: InputMaybe<Bytea_Comparison_Exp>;
};

/** unique or primary key constraints on table "supplyitemunits" */
export enum Supplyitemunits_Constraint {
  /** unique or primary key constraint on columns "id" */
  SupplyitemunitsPrimary51 = 'supplyitemunitsPRIMARY51'
}

/** input type for incrementing numeric columns in table "supplyitemunits" */
export type Supplyitemunits_Inc_Input = {
  UnitRation?: InputMaybe<Scalars['numeric']>;
  checkFlag?: InputMaybe<Scalars['Int']>;
  enableFlag?: InputMaybe<Scalars['Int']>;
  pickFlag?: InputMaybe<Scalars['Int']>;
  reportFlag?: InputMaybe<Scalars['Int']>;
  sendFlag?: InputMaybe<Scalars['Int']>;
};

/** input type for inserting data into table "supplyitemunits" */
export type Supplyitemunits_Insert_Input = {
  UnitRation?: InputMaybe<Scalars['numeric']>;
  checkFlag?: InputMaybe<Scalars['Int']>;
  enableFlag?: InputMaybe<Scalars['Int']>;
  id?: InputMaybe<Scalars['bytea']>;
  itemId?: InputMaybe<Scalars['String']>;
  itemUnitID?: InputMaybe<Scalars['String']>;
  itemUnitName?: InputMaybe<Scalars['String']>;
  modifyDate?: InputMaybe<Scalars['timestamp']>;
  pickFlag?: InputMaybe<Scalars['Int']>;
  reportFlag?: InputMaybe<Scalars['Int']>;
  sendFlag?: InputMaybe<Scalars['Int']>;
  uid?: InputMaybe<Scalars['bytea']>;
};

/** aggregate max on columns */
export type Supplyitemunits_Max_Fields = {
  __typename?: 'supplyitemunits_max_fields';
  UnitRation?: Maybe<Scalars['numeric']>;
  checkFlag?: Maybe<Scalars['Int']>;
  enableFlag?: Maybe<Scalars['Int']>;
  itemId?: Maybe<Scalars['String']>;
  itemUnitID?: Maybe<Scalars['String']>;
  itemUnitName?: Maybe<Scalars['String']>;
  modifyDate?: Maybe<Scalars['timestamp']>;
  pickFlag?: Maybe<Scalars['Int']>;
  reportFlag?: Maybe<Scalars['Int']>;
  sendFlag?: Maybe<Scalars['Int']>;
};

/** aggregate min on columns */
export type Supplyitemunits_Min_Fields = {
  __typename?: 'supplyitemunits_min_fields';
  UnitRation?: Maybe<Scalars['numeric']>;
  checkFlag?: Maybe<Scalars['Int']>;
  enableFlag?: Maybe<Scalars['Int']>;
  itemId?: Maybe<Scalars['String']>;
  itemUnitID?: Maybe<Scalars['String']>;
  itemUnitName?: Maybe<Scalars['String']>;
  modifyDate?: Maybe<Scalars['timestamp']>;
  pickFlag?: Maybe<Scalars['Int']>;
  reportFlag?: Maybe<Scalars['Int']>;
  sendFlag?: Maybe<Scalars['Int']>;
};

/** response of any mutation on the table "supplyitemunits" */
export type Supplyitemunits_Mutation_Response = {
  __typename?: 'supplyitemunits_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Supplyitemunits>;
};

/** on_conflict condition type for table "supplyitemunits" */
export type Supplyitemunits_On_Conflict = {
  constraint: Supplyitemunits_Constraint;
  update_columns?: Array<Supplyitemunits_Update_Column>;
  where?: InputMaybe<Supplyitemunits_Bool_Exp>;
};

/** Ordering options when selecting data from "supplyitemunits". */
export type Supplyitemunits_Order_By = {
  UnitRation?: InputMaybe<Order_By>;
  checkFlag?: InputMaybe<Order_By>;
  enableFlag?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  itemId?: InputMaybe<Order_By>;
  itemUnitID?: InputMaybe<Order_By>;
  itemUnitName?: InputMaybe<Order_By>;
  modifyDate?: InputMaybe<Order_By>;
  pickFlag?: InputMaybe<Order_By>;
  reportFlag?: InputMaybe<Order_By>;
  sendFlag?: InputMaybe<Order_By>;
  uid?: InputMaybe<Order_By>;
};

/** primary key columns input for table: supplyitemunits */
export type Supplyitemunits_Pk_Columns_Input = {
  id: Scalars['bytea'];
};

/** select columns of table "supplyitemunits" */
export enum Supplyitemunits_Select_Column {
  /** column name */
  UnitRation = 'UnitRation',
  /** column name */
  CheckFlag = 'checkFlag',
  /** column name */
  EnableFlag = 'enableFlag',
  /** column name */
  Id = 'id',
  /** column name */
  ItemId = 'itemId',
  /** column name */
  ItemUnitId = 'itemUnitID',
  /** column name */
  ItemUnitName = 'itemUnitName',
  /** column name */
  ModifyDate = 'modifyDate',
  /** column name */
  PickFlag = 'pickFlag',
  /** column name */
  ReportFlag = 'reportFlag',
  /** column name */
  SendFlag = 'sendFlag',
  /** column name */
  Uid = 'uid'
}

/** input type for updating data in table "supplyitemunits" */
export type Supplyitemunits_Set_Input = {
  UnitRation?: InputMaybe<Scalars['numeric']>;
  checkFlag?: InputMaybe<Scalars['Int']>;
  enableFlag?: InputMaybe<Scalars['Int']>;
  id?: InputMaybe<Scalars['bytea']>;
  itemId?: InputMaybe<Scalars['String']>;
  itemUnitID?: InputMaybe<Scalars['String']>;
  itemUnitName?: InputMaybe<Scalars['String']>;
  modifyDate?: InputMaybe<Scalars['timestamp']>;
  pickFlag?: InputMaybe<Scalars['Int']>;
  reportFlag?: InputMaybe<Scalars['Int']>;
  sendFlag?: InputMaybe<Scalars['Int']>;
  uid?: InputMaybe<Scalars['bytea']>;
};

/** aggregate stddev on columns */
export type Supplyitemunits_Stddev_Fields = {
  __typename?: 'supplyitemunits_stddev_fields';
  UnitRation?: Maybe<Scalars['Float']>;
  checkFlag?: Maybe<Scalars['Float']>;
  enableFlag?: Maybe<Scalars['Float']>;
  pickFlag?: Maybe<Scalars['Float']>;
  reportFlag?: Maybe<Scalars['Float']>;
  sendFlag?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_pop on columns */
export type Supplyitemunits_Stddev_Pop_Fields = {
  __typename?: 'supplyitemunits_stddev_pop_fields';
  UnitRation?: Maybe<Scalars['Float']>;
  checkFlag?: Maybe<Scalars['Float']>;
  enableFlag?: Maybe<Scalars['Float']>;
  pickFlag?: Maybe<Scalars['Float']>;
  reportFlag?: Maybe<Scalars['Float']>;
  sendFlag?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_samp on columns */
export type Supplyitemunits_Stddev_Samp_Fields = {
  __typename?: 'supplyitemunits_stddev_samp_fields';
  UnitRation?: Maybe<Scalars['Float']>;
  checkFlag?: Maybe<Scalars['Float']>;
  enableFlag?: Maybe<Scalars['Float']>;
  pickFlag?: Maybe<Scalars['Float']>;
  reportFlag?: Maybe<Scalars['Float']>;
  sendFlag?: Maybe<Scalars['Float']>;
};

/** Streaming cursor of the table "supplyitemunits" */
export type Supplyitemunits_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Supplyitemunits_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Supplyitemunits_Stream_Cursor_Value_Input = {
  UnitRation?: InputMaybe<Scalars['numeric']>;
  checkFlag?: InputMaybe<Scalars['Int']>;
  enableFlag?: InputMaybe<Scalars['Int']>;
  id?: InputMaybe<Scalars['bytea']>;
  itemId?: InputMaybe<Scalars['String']>;
  itemUnitID?: InputMaybe<Scalars['String']>;
  itemUnitName?: InputMaybe<Scalars['String']>;
  modifyDate?: InputMaybe<Scalars['timestamp']>;
  pickFlag?: InputMaybe<Scalars['Int']>;
  reportFlag?: InputMaybe<Scalars['Int']>;
  sendFlag?: InputMaybe<Scalars['Int']>;
  uid?: InputMaybe<Scalars['bytea']>;
};

/** aggregate sum on columns */
export type Supplyitemunits_Sum_Fields = {
  __typename?: 'supplyitemunits_sum_fields';
  UnitRation?: Maybe<Scalars['numeric']>;
  checkFlag?: Maybe<Scalars['Int']>;
  enableFlag?: Maybe<Scalars['Int']>;
  pickFlag?: Maybe<Scalars['Int']>;
  reportFlag?: Maybe<Scalars['Int']>;
  sendFlag?: Maybe<Scalars['Int']>;
};

/** update columns of table "supplyitemunits" */
export enum Supplyitemunits_Update_Column {
  /** column name */
  UnitRation = 'UnitRation',
  /** column name */
  CheckFlag = 'checkFlag',
  /** column name */
  EnableFlag = 'enableFlag',
  /** column name */
  Id = 'id',
  /** column name */
  ItemId = 'itemId',
  /** column name */
  ItemUnitId = 'itemUnitID',
  /** column name */
  ItemUnitName = 'itemUnitName',
  /** column name */
  ModifyDate = 'modifyDate',
  /** column name */
  PickFlag = 'pickFlag',
  /** column name */
  ReportFlag = 'reportFlag',
  /** column name */
  SendFlag = 'sendFlag',
  /** column name */
  Uid = 'uid'
}

export type Supplyitemunits_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: InputMaybe<Supplyitemunits_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Supplyitemunits_Set_Input>;
  /** filter the rows which have to be updated */
  where: Supplyitemunits_Bool_Exp;
};

/** aggregate var_pop on columns */
export type Supplyitemunits_Var_Pop_Fields = {
  __typename?: 'supplyitemunits_var_pop_fields';
  UnitRation?: Maybe<Scalars['Float']>;
  checkFlag?: Maybe<Scalars['Float']>;
  enableFlag?: Maybe<Scalars['Float']>;
  pickFlag?: Maybe<Scalars['Float']>;
  reportFlag?: Maybe<Scalars['Float']>;
  sendFlag?: Maybe<Scalars['Float']>;
};

/** aggregate var_samp on columns */
export type Supplyitemunits_Var_Samp_Fields = {
  __typename?: 'supplyitemunits_var_samp_fields';
  UnitRation?: Maybe<Scalars['Float']>;
  checkFlag?: Maybe<Scalars['Float']>;
  enableFlag?: Maybe<Scalars['Float']>;
  pickFlag?: Maybe<Scalars['Float']>;
  reportFlag?: Maybe<Scalars['Float']>;
  sendFlag?: Maybe<Scalars['Float']>;
};

/** aggregate variance on columns */
export type Supplyitemunits_Variance_Fields = {
  __typename?: 'supplyitemunits_variance_fields';
  UnitRation?: Maybe<Scalars['Float']>;
  checkFlag?: Maybe<Scalars['Float']>;
  enableFlag?: Maybe<Scalars['Float']>;
  pickFlag?: Maybe<Scalars['Float']>;
  reportFlag?: Maybe<Scalars['Float']>;
  sendFlag?: Maybe<Scalars['Float']>;
};

/** columns and relationships of "supplyrdc" */
export type Supplyrdc = {
  __typename?: 'supplyrdc';
  enableFlag?: Maybe<Scalars['Int']>;
  modifyDate?: Maybe<Scalars['timestamp']>;
  parentid?: Maybe<Scalars['String']>;
  rdcCode?: Maybe<Scalars['String']>;
  rdcId: Scalars['String'];
  rdcName?: Maybe<Scalars['String']>;
};

/** aggregated selection of "supplyrdc" */
export type Supplyrdc_Aggregate = {
  __typename?: 'supplyrdc_aggregate';
  aggregate?: Maybe<Supplyrdc_Aggregate_Fields>;
  nodes: Array<Supplyrdc>;
};

/** aggregate fields of "supplyrdc" */
export type Supplyrdc_Aggregate_Fields = {
  __typename?: 'supplyrdc_aggregate_fields';
  avg?: Maybe<Supplyrdc_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Supplyrdc_Max_Fields>;
  min?: Maybe<Supplyrdc_Min_Fields>;
  stddev?: Maybe<Supplyrdc_Stddev_Fields>;
  stddev_pop?: Maybe<Supplyrdc_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Supplyrdc_Stddev_Samp_Fields>;
  sum?: Maybe<Supplyrdc_Sum_Fields>;
  var_pop?: Maybe<Supplyrdc_Var_Pop_Fields>;
  var_samp?: Maybe<Supplyrdc_Var_Samp_Fields>;
  variance?: Maybe<Supplyrdc_Variance_Fields>;
};


/** aggregate fields of "supplyrdc" */
export type Supplyrdc_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Supplyrdc_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** aggregate avg on columns */
export type Supplyrdc_Avg_Fields = {
  __typename?: 'supplyrdc_avg_fields';
  enableFlag?: Maybe<Scalars['Float']>;
};

/** Boolean expression to filter rows from the table "supplyrdc". All fields are combined with a logical 'AND'. */
export type Supplyrdc_Bool_Exp = {
  _and?: InputMaybe<Array<Supplyrdc_Bool_Exp>>;
  _not?: InputMaybe<Supplyrdc_Bool_Exp>;
  _or?: InputMaybe<Array<Supplyrdc_Bool_Exp>>;
  enableFlag?: InputMaybe<Int_Comparison_Exp>;
  modifyDate?: InputMaybe<Timestamp_Comparison_Exp>;
  parentid?: InputMaybe<String_Comparison_Exp>;
  rdcCode?: InputMaybe<String_Comparison_Exp>;
  rdcId?: InputMaybe<String_Comparison_Exp>;
  rdcName?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "supplyrdc" */
export enum Supplyrdc_Constraint {
  /** unique or primary key constraint on columns "rdcId" */
  SupplyrdcPrimary52 = 'supplyrdcPRIMARY52'
}

/** input type for incrementing numeric columns in table "supplyrdc" */
export type Supplyrdc_Inc_Input = {
  enableFlag?: InputMaybe<Scalars['Int']>;
};

/** input type for inserting data into table "supplyrdc" */
export type Supplyrdc_Insert_Input = {
  enableFlag?: InputMaybe<Scalars['Int']>;
  modifyDate?: InputMaybe<Scalars['timestamp']>;
  parentid?: InputMaybe<Scalars['String']>;
  rdcCode?: InputMaybe<Scalars['String']>;
  rdcId?: InputMaybe<Scalars['String']>;
  rdcName?: InputMaybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Supplyrdc_Max_Fields = {
  __typename?: 'supplyrdc_max_fields';
  enableFlag?: Maybe<Scalars['Int']>;
  modifyDate?: Maybe<Scalars['timestamp']>;
  parentid?: Maybe<Scalars['String']>;
  rdcCode?: Maybe<Scalars['String']>;
  rdcId?: Maybe<Scalars['String']>;
  rdcName?: Maybe<Scalars['String']>;
};

/** aggregate min on columns */
export type Supplyrdc_Min_Fields = {
  __typename?: 'supplyrdc_min_fields';
  enableFlag?: Maybe<Scalars['Int']>;
  modifyDate?: Maybe<Scalars['timestamp']>;
  parentid?: Maybe<Scalars['String']>;
  rdcCode?: Maybe<Scalars['String']>;
  rdcId?: Maybe<Scalars['String']>;
  rdcName?: Maybe<Scalars['String']>;
};

/** response of any mutation on the table "supplyrdc" */
export type Supplyrdc_Mutation_Response = {
  __typename?: 'supplyrdc_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Supplyrdc>;
};

/** on_conflict condition type for table "supplyrdc" */
export type Supplyrdc_On_Conflict = {
  constraint: Supplyrdc_Constraint;
  update_columns?: Array<Supplyrdc_Update_Column>;
  where?: InputMaybe<Supplyrdc_Bool_Exp>;
};

/** Ordering options when selecting data from "supplyrdc". */
export type Supplyrdc_Order_By = {
  enableFlag?: InputMaybe<Order_By>;
  modifyDate?: InputMaybe<Order_By>;
  parentid?: InputMaybe<Order_By>;
  rdcCode?: InputMaybe<Order_By>;
  rdcId?: InputMaybe<Order_By>;
  rdcName?: InputMaybe<Order_By>;
};

/** primary key columns input for table: supplyrdc */
export type Supplyrdc_Pk_Columns_Input = {
  rdcId: Scalars['String'];
};

/** select columns of table "supplyrdc" */
export enum Supplyrdc_Select_Column {
  /** column name */
  EnableFlag = 'enableFlag',
  /** column name */
  ModifyDate = 'modifyDate',
  /** column name */
  Parentid = 'parentid',
  /** column name */
  RdcCode = 'rdcCode',
  /** column name */
  RdcId = 'rdcId',
  /** column name */
  RdcName = 'rdcName'
}

/** input type for updating data in table "supplyrdc" */
export type Supplyrdc_Set_Input = {
  enableFlag?: InputMaybe<Scalars['Int']>;
  modifyDate?: InputMaybe<Scalars['timestamp']>;
  parentid?: InputMaybe<Scalars['String']>;
  rdcCode?: InputMaybe<Scalars['String']>;
  rdcId?: InputMaybe<Scalars['String']>;
  rdcName?: InputMaybe<Scalars['String']>;
};

/** aggregate stddev on columns */
export type Supplyrdc_Stddev_Fields = {
  __typename?: 'supplyrdc_stddev_fields';
  enableFlag?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_pop on columns */
export type Supplyrdc_Stddev_Pop_Fields = {
  __typename?: 'supplyrdc_stddev_pop_fields';
  enableFlag?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_samp on columns */
export type Supplyrdc_Stddev_Samp_Fields = {
  __typename?: 'supplyrdc_stddev_samp_fields';
  enableFlag?: Maybe<Scalars['Float']>;
};

/** Streaming cursor of the table "supplyrdc" */
export type Supplyrdc_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Supplyrdc_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Supplyrdc_Stream_Cursor_Value_Input = {
  enableFlag?: InputMaybe<Scalars['Int']>;
  modifyDate?: InputMaybe<Scalars['timestamp']>;
  parentid?: InputMaybe<Scalars['String']>;
  rdcCode?: InputMaybe<Scalars['String']>;
  rdcId?: InputMaybe<Scalars['String']>;
  rdcName?: InputMaybe<Scalars['String']>;
};

/** aggregate sum on columns */
export type Supplyrdc_Sum_Fields = {
  __typename?: 'supplyrdc_sum_fields';
  enableFlag?: Maybe<Scalars['Int']>;
};

/** update columns of table "supplyrdc" */
export enum Supplyrdc_Update_Column {
  /** column name */
  EnableFlag = 'enableFlag',
  /** column name */
  ModifyDate = 'modifyDate',
  /** column name */
  Parentid = 'parentid',
  /** column name */
  RdcCode = 'rdcCode',
  /** column name */
  RdcId = 'rdcId',
  /** column name */
  RdcName = 'rdcName'
}

export type Supplyrdc_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: InputMaybe<Supplyrdc_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Supplyrdc_Set_Input>;
  /** filter the rows which have to be updated */
  where: Supplyrdc_Bool_Exp;
};

/** aggregate var_pop on columns */
export type Supplyrdc_Var_Pop_Fields = {
  __typename?: 'supplyrdc_var_pop_fields';
  enableFlag?: Maybe<Scalars['Float']>;
};

/** aggregate var_samp on columns */
export type Supplyrdc_Var_Samp_Fields = {
  __typename?: 'supplyrdc_var_samp_fields';
  enableFlag?: Maybe<Scalars['Float']>;
};

/** aggregate variance on columns */
export type Supplyrdc_Variance_Fields = {
  __typename?: 'supplyrdc_variance_fields';
  enableFlag?: Maybe<Scalars['Float']>;
};

/** Boolean expression to compare columns of type "time". All fields are combined with logical 'AND'. */
export type Time_Comparison_Exp = {
  _eq?: InputMaybe<Scalars['time']>;
  _gt?: InputMaybe<Scalars['time']>;
  _gte?: InputMaybe<Scalars['time']>;
  _in?: InputMaybe<Array<Scalars['time']>>;
  _is_null?: InputMaybe<Scalars['Boolean']>;
  _lt?: InputMaybe<Scalars['time']>;
  _lte?: InputMaybe<Scalars['time']>;
  _neq?: InputMaybe<Scalars['time']>;
  _nin?: InputMaybe<Array<Scalars['time']>>;
};

/** Boolean expression to compare columns of type "timestamp". All fields are combined with logical 'AND'. */
export type Timestamp_Comparison_Exp = {
  _eq?: InputMaybe<Scalars['timestamp']>;
  _gt?: InputMaybe<Scalars['timestamp']>;
  _gte?: InputMaybe<Scalars['timestamp']>;
  _in?: InputMaybe<Array<Scalars['timestamp']>>;
  _is_null?: InputMaybe<Scalars['Boolean']>;
  _lt?: InputMaybe<Scalars['timestamp']>;
  _lte?: InputMaybe<Scalars['timestamp']>;
  _neq?: InputMaybe<Scalars['timestamp']>;
  _nin?: InputMaybe<Array<Scalars['timestamp']>>;
};

/** Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'. */
export type Timestamptz_Comparison_Exp = {
  _eq?: InputMaybe<Scalars['timestamptz']>;
  _gt?: InputMaybe<Scalars['timestamptz']>;
  _gte?: InputMaybe<Scalars['timestamptz']>;
  _in?: InputMaybe<Array<Scalars['timestamptz']>>;
  _is_null?: InputMaybe<Scalars['Boolean']>;
  _lt?: InputMaybe<Scalars['timestamptz']>;
  _lte?: InputMaybe<Scalars['timestamptz']>;
  _neq?: InputMaybe<Scalars['timestamptz']>;
  _nin?: InputMaybe<Array<Scalars['timestamptz']>>;
};

/** columns and relationships of "view_daily_items_sold" */
export type View_Daily_Items_Sold = {
  __typename?: 'view_daily_items_sold';
  /** An object relationship */
  fooditem?: Maybe<Fooditems>;
  item_id?: Maybe<Scalars['String']>;
  settle_biz_date?: Maybe<Scalars['date']>;
  shop_id?: Maybe<Scalars['String']>;
  /** An object relationship */
  store?: Maybe<Stores>;
  total_income_money?: Maybe<Scalars['numeric']>;
  total_last_total?: Maybe<Scalars['numeric']>;
  total_qty?: Maybe<Scalars['numeric']>;
};

/** aggregated selection of "view_daily_items_sold" */
export type View_Daily_Items_Sold_Aggregate = {
  __typename?: 'view_daily_items_sold_aggregate';
  aggregate?: Maybe<View_Daily_Items_Sold_Aggregate_Fields>;
  nodes: Array<View_Daily_Items_Sold>;
};

/** aggregate fields of "view_daily_items_sold" */
export type View_Daily_Items_Sold_Aggregate_Fields = {
  __typename?: 'view_daily_items_sold_aggregate_fields';
  avg?: Maybe<View_Daily_Items_Sold_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<View_Daily_Items_Sold_Max_Fields>;
  min?: Maybe<View_Daily_Items_Sold_Min_Fields>;
  stddev?: Maybe<View_Daily_Items_Sold_Stddev_Fields>;
  stddev_pop?: Maybe<View_Daily_Items_Sold_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<View_Daily_Items_Sold_Stddev_Samp_Fields>;
  sum?: Maybe<View_Daily_Items_Sold_Sum_Fields>;
  var_pop?: Maybe<View_Daily_Items_Sold_Var_Pop_Fields>;
  var_samp?: Maybe<View_Daily_Items_Sold_Var_Samp_Fields>;
  variance?: Maybe<View_Daily_Items_Sold_Variance_Fields>;
};


/** aggregate fields of "view_daily_items_sold" */
export type View_Daily_Items_Sold_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<View_Daily_Items_Sold_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** aggregate avg on columns */
export type View_Daily_Items_Sold_Avg_Fields = {
  __typename?: 'view_daily_items_sold_avg_fields';
  total_income_money?: Maybe<Scalars['Float']>;
  total_last_total?: Maybe<Scalars['Float']>;
  total_qty?: Maybe<Scalars['Float']>;
};

/** Boolean expression to filter rows from the table "view_daily_items_sold". All fields are combined with a logical 'AND'. */
export type View_Daily_Items_Sold_Bool_Exp = {
  _and?: InputMaybe<Array<View_Daily_Items_Sold_Bool_Exp>>;
  _not?: InputMaybe<View_Daily_Items_Sold_Bool_Exp>;
  _or?: InputMaybe<Array<View_Daily_Items_Sold_Bool_Exp>>;
  fooditem?: InputMaybe<Fooditems_Bool_Exp>;
  item_id?: InputMaybe<String_Comparison_Exp>;
  settle_biz_date?: InputMaybe<Date_Comparison_Exp>;
  shop_id?: InputMaybe<String_Comparison_Exp>;
  store?: InputMaybe<Stores_Bool_Exp>;
  total_income_money?: InputMaybe<Numeric_Comparison_Exp>;
  total_last_total?: InputMaybe<Numeric_Comparison_Exp>;
  total_qty?: InputMaybe<Numeric_Comparison_Exp>;
};

/** aggregate max on columns */
export type View_Daily_Items_Sold_Max_Fields = {
  __typename?: 'view_daily_items_sold_max_fields';
  item_id?: Maybe<Scalars['String']>;
  settle_biz_date?: Maybe<Scalars['date']>;
  shop_id?: Maybe<Scalars['String']>;
  total_income_money?: Maybe<Scalars['numeric']>;
  total_last_total?: Maybe<Scalars['numeric']>;
  total_qty?: Maybe<Scalars['numeric']>;
};

/** aggregate min on columns */
export type View_Daily_Items_Sold_Min_Fields = {
  __typename?: 'view_daily_items_sold_min_fields';
  item_id?: Maybe<Scalars['String']>;
  settle_biz_date?: Maybe<Scalars['date']>;
  shop_id?: Maybe<Scalars['String']>;
  total_income_money?: Maybe<Scalars['numeric']>;
  total_last_total?: Maybe<Scalars['numeric']>;
  total_qty?: Maybe<Scalars['numeric']>;
};

/** Ordering options when selecting data from "view_daily_items_sold". */
export type View_Daily_Items_Sold_Order_By = {
  fooditem?: InputMaybe<Fooditems_Order_By>;
  item_id?: InputMaybe<Order_By>;
  settle_biz_date?: InputMaybe<Order_By>;
  shop_id?: InputMaybe<Order_By>;
  store?: InputMaybe<Stores_Order_By>;
  total_income_money?: InputMaybe<Order_By>;
  total_last_total?: InputMaybe<Order_By>;
  total_qty?: InputMaybe<Order_By>;
};

/** select columns of table "view_daily_items_sold" */
export enum View_Daily_Items_Sold_Select_Column {
  /** column name */
  ItemId = 'item_id',
  /** column name */
  SettleBizDate = 'settle_biz_date',
  /** column name */
  ShopId = 'shop_id',
  /** column name */
  TotalIncomeMoney = 'total_income_money',
  /** column name */
  TotalLastTotal = 'total_last_total',
  /** column name */
  TotalQty = 'total_qty'
}

/** aggregate stddev on columns */
export type View_Daily_Items_Sold_Stddev_Fields = {
  __typename?: 'view_daily_items_sold_stddev_fields';
  total_income_money?: Maybe<Scalars['Float']>;
  total_last_total?: Maybe<Scalars['Float']>;
  total_qty?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_pop on columns */
export type View_Daily_Items_Sold_Stddev_Pop_Fields = {
  __typename?: 'view_daily_items_sold_stddev_pop_fields';
  total_income_money?: Maybe<Scalars['Float']>;
  total_last_total?: Maybe<Scalars['Float']>;
  total_qty?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_samp on columns */
export type View_Daily_Items_Sold_Stddev_Samp_Fields = {
  __typename?: 'view_daily_items_sold_stddev_samp_fields';
  total_income_money?: Maybe<Scalars['Float']>;
  total_last_total?: Maybe<Scalars['Float']>;
  total_qty?: Maybe<Scalars['Float']>;
};

/** Streaming cursor of the table "view_daily_items_sold" */
export type View_Daily_Items_Sold_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: View_Daily_Items_Sold_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type View_Daily_Items_Sold_Stream_Cursor_Value_Input = {
  item_id?: InputMaybe<Scalars['String']>;
  settle_biz_date?: InputMaybe<Scalars['date']>;
  shop_id?: InputMaybe<Scalars['String']>;
  total_income_money?: InputMaybe<Scalars['numeric']>;
  total_last_total?: InputMaybe<Scalars['numeric']>;
  total_qty?: InputMaybe<Scalars['numeric']>;
};

/** aggregate sum on columns */
export type View_Daily_Items_Sold_Sum_Fields = {
  __typename?: 'view_daily_items_sold_sum_fields';
  total_income_money?: Maybe<Scalars['numeric']>;
  total_last_total?: Maybe<Scalars['numeric']>;
  total_qty?: Maybe<Scalars['numeric']>;
};

/** aggregate var_pop on columns */
export type View_Daily_Items_Sold_Var_Pop_Fields = {
  __typename?: 'view_daily_items_sold_var_pop_fields';
  total_income_money?: Maybe<Scalars['Float']>;
  total_last_total?: Maybe<Scalars['Float']>;
  total_qty?: Maybe<Scalars['Float']>;
};

/** aggregate var_samp on columns */
export type View_Daily_Items_Sold_Var_Samp_Fields = {
  __typename?: 'view_daily_items_sold_var_samp_fields';
  total_income_money?: Maybe<Scalars['Float']>;
  total_last_total?: Maybe<Scalars['Float']>;
  total_qty?: Maybe<Scalars['Float']>;
};

/** aggregate variance on columns */
export type View_Daily_Items_Sold_Variance_Fields = {
  __typename?: 'view_daily_items_sold_variance_fields';
  total_income_money?: Maybe<Scalars['Float']>;
  total_last_total?: Maybe<Scalars['Float']>;
  total_qty?: Maybe<Scalars['Float']>;
};

/** columns and relationships of "view_monthly_salary" */
export type View_Monthly_Salary = {
  __typename?: 'view_monthly_salary';
  /** An object relationship */
  attendance_department?: Maybe<Departments>;
  attendance_department_id?: Maybe<Scalars['String']>;
  basic_salary?: Maybe<Scalars['numeric']>;
  basic_salary_base?: Maybe<Scalars['numeric']>;
  basic_salary_monthly?: Maybe<Scalars['numeric']>;
  bonus_deduction?: Maybe<Scalars['numeric']>;
  corp_insurance_funds?: Maybe<Scalars['numeric']>;
  corp_salary_cost?: Maybe<Scalars['numeric']>;
  /** An object relationship */
  employee?: Maybe<Employees>;
  /** An object relationship */
  employee_department?: Maybe<Departments>;
  employee_department_id?: Maybe<Scalars['String']>;
  employee_id?: Maybe<Scalars['String']>;
  gross_salary?: Maybe<Scalars['numeric']>;
  hire_date?: Maybe<Scalars['date']>;
  insurance_subsidy?: Maybe<Scalars['numeric']>;
  month?: Maybe<Scalars['timestamptz']>;
  net_salary?: Maybe<Scalars['numeric']>;
  overtime_pay?: Maybe<Scalars['numeric']>;
  personal_insurance_funds?: Maybe<Scalars['numeric']>;
  position_pay?: Maybe<Scalars['numeric']>;
  salary_type?: Maybe<Scalars['String']>;
  total_length_day?: Maybe<Scalars['Float']>;
  total_length_hour?: Maybe<Scalars['Float']>;
  work_age?: Maybe<Scalars['Int']>;
  work_age_bonus?: Maybe<Scalars['Float']>;
  work_age_type?: Maybe<Scalars['String']>;
};

/** columns and relationships of "view_monthly_salary_2" */
export type View_Monthly_Salary_2 = {
  __typename?: 'view_monthly_salary_2';
  attendance_department_id?: Maybe<Scalars['String']>;
  basic_salary?: Maybe<Scalars['numeric']>;
  basic_salary_base?: Maybe<Scalars['numeric']>;
  basic_salary_monthly?: Maybe<Scalars['numeric']>;
  bonus_deduction?: Maybe<Scalars['numeric']>;
  corp_insurance_funds?: Maybe<Scalars['numeric']>;
  corp_salary_cost?: Maybe<Scalars['numeric']>;
  employee_department_id?: Maybe<Scalars['String']>;
  employee_id?: Maybe<Scalars['String']>;
  gross_salary?: Maybe<Scalars['numeric']>;
  hire_date?: Maybe<Scalars['date']>;
  insurance_subsidy?: Maybe<Scalars['numeric']>;
  month?: Maybe<Scalars['timestamptz']>;
  monthly_insurance_subsidy?: Maybe<Scalars['numeric']>;
  monthly_overtime_pay?: Maybe<Scalars['numeric']>;
  monthly_position_pay?: Maybe<Scalars['numeric']>;
  net_salary?: Maybe<Scalars['numeric']>;
  overtime_pay?: Maybe<Scalars['numeric']>;
  personal_insurance_funds?: Maybe<Scalars['numeric']>;
  position_pay?: Maybe<Scalars['numeric']>;
  salary_type?: Maybe<Scalars['String']>;
  total_length_day?: Maybe<Scalars['Float']>;
  total_length_hour?: Maybe<Scalars['Float']>;
  work_age?: Maybe<Scalars['Int']>;
  work_age_bonus?: Maybe<Scalars['Float']>;
  work_age_type?: Maybe<Scalars['String']>;
};

/** aggregated selection of "view_monthly_salary_2" */
export type View_Monthly_Salary_2_Aggregate = {
  __typename?: 'view_monthly_salary_2_aggregate';
  aggregate?: Maybe<View_Monthly_Salary_2_Aggregate_Fields>;
  nodes: Array<View_Monthly_Salary_2>;
};

/** aggregate fields of "view_monthly_salary_2" */
export type View_Monthly_Salary_2_Aggregate_Fields = {
  __typename?: 'view_monthly_salary_2_aggregate_fields';
  avg?: Maybe<View_Monthly_Salary_2_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<View_Monthly_Salary_2_Max_Fields>;
  min?: Maybe<View_Monthly_Salary_2_Min_Fields>;
  stddev?: Maybe<View_Monthly_Salary_2_Stddev_Fields>;
  stddev_pop?: Maybe<View_Monthly_Salary_2_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<View_Monthly_Salary_2_Stddev_Samp_Fields>;
  sum?: Maybe<View_Monthly_Salary_2_Sum_Fields>;
  var_pop?: Maybe<View_Monthly_Salary_2_Var_Pop_Fields>;
  var_samp?: Maybe<View_Monthly_Salary_2_Var_Samp_Fields>;
  variance?: Maybe<View_Monthly_Salary_2_Variance_Fields>;
};


/** aggregate fields of "view_monthly_salary_2" */
export type View_Monthly_Salary_2_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<View_Monthly_Salary_2_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** aggregate avg on columns */
export type View_Monthly_Salary_2_Avg_Fields = {
  __typename?: 'view_monthly_salary_2_avg_fields';
  basic_salary?: Maybe<Scalars['Float']>;
  basic_salary_base?: Maybe<Scalars['Float']>;
  basic_salary_monthly?: Maybe<Scalars['Float']>;
  bonus_deduction?: Maybe<Scalars['Float']>;
  corp_insurance_funds?: Maybe<Scalars['Float']>;
  corp_salary_cost?: Maybe<Scalars['Float']>;
  gross_salary?: Maybe<Scalars['Float']>;
  insurance_subsidy?: Maybe<Scalars['Float']>;
  monthly_insurance_subsidy?: Maybe<Scalars['Float']>;
  monthly_overtime_pay?: Maybe<Scalars['Float']>;
  monthly_position_pay?: Maybe<Scalars['Float']>;
  net_salary?: Maybe<Scalars['Float']>;
  overtime_pay?: Maybe<Scalars['Float']>;
  personal_insurance_funds?: Maybe<Scalars['Float']>;
  position_pay?: Maybe<Scalars['Float']>;
  total_length_day?: Maybe<Scalars['Float']>;
  total_length_hour?: Maybe<Scalars['Float']>;
  work_age?: Maybe<Scalars['Float']>;
  work_age_bonus?: Maybe<Scalars['Float']>;
};

/** Boolean expression to filter rows from the table "view_monthly_salary_2". All fields are combined with a logical 'AND'. */
export type View_Monthly_Salary_2_Bool_Exp = {
  _and?: InputMaybe<Array<View_Monthly_Salary_2_Bool_Exp>>;
  _not?: InputMaybe<View_Monthly_Salary_2_Bool_Exp>;
  _or?: InputMaybe<Array<View_Monthly_Salary_2_Bool_Exp>>;
  attendance_department_id?: InputMaybe<String_Comparison_Exp>;
  basic_salary?: InputMaybe<Numeric_Comparison_Exp>;
  basic_salary_base?: InputMaybe<Numeric_Comparison_Exp>;
  basic_salary_monthly?: InputMaybe<Numeric_Comparison_Exp>;
  bonus_deduction?: InputMaybe<Numeric_Comparison_Exp>;
  corp_insurance_funds?: InputMaybe<Numeric_Comparison_Exp>;
  corp_salary_cost?: InputMaybe<Numeric_Comparison_Exp>;
  employee_department_id?: InputMaybe<String_Comparison_Exp>;
  employee_id?: InputMaybe<String_Comparison_Exp>;
  gross_salary?: InputMaybe<Numeric_Comparison_Exp>;
  hire_date?: InputMaybe<Date_Comparison_Exp>;
  insurance_subsidy?: InputMaybe<Numeric_Comparison_Exp>;
  month?: InputMaybe<Timestamptz_Comparison_Exp>;
  monthly_insurance_subsidy?: InputMaybe<Numeric_Comparison_Exp>;
  monthly_overtime_pay?: InputMaybe<Numeric_Comparison_Exp>;
  monthly_position_pay?: InputMaybe<Numeric_Comparison_Exp>;
  net_salary?: InputMaybe<Numeric_Comparison_Exp>;
  overtime_pay?: InputMaybe<Numeric_Comparison_Exp>;
  personal_insurance_funds?: InputMaybe<Numeric_Comparison_Exp>;
  position_pay?: InputMaybe<Numeric_Comparison_Exp>;
  salary_type?: InputMaybe<String_Comparison_Exp>;
  total_length_day?: InputMaybe<Float_Comparison_Exp>;
  total_length_hour?: InputMaybe<Float_Comparison_Exp>;
  work_age?: InputMaybe<Int_Comparison_Exp>;
  work_age_bonus?: InputMaybe<Float_Comparison_Exp>;
  work_age_type?: InputMaybe<String_Comparison_Exp>;
};

/** aggregate max on columns */
export type View_Monthly_Salary_2_Max_Fields = {
  __typename?: 'view_monthly_salary_2_max_fields';
  attendance_department_id?: Maybe<Scalars['String']>;
  basic_salary?: Maybe<Scalars['numeric']>;
  basic_salary_base?: Maybe<Scalars['numeric']>;
  basic_salary_monthly?: Maybe<Scalars['numeric']>;
  bonus_deduction?: Maybe<Scalars['numeric']>;
  corp_insurance_funds?: Maybe<Scalars['numeric']>;
  corp_salary_cost?: Maybe<Scalars['numeric']>;
  employee_department_id?: Maybe<Scalars['String']>;
  employee_id?: Maybe<Scalars['String']>;
  gross_salary?: Maybe<Scalars['numeric']>;
  hire_date?: Maybe<Scalars['date']>;
  insurance_subsidy?: Maybe<Scalars['numeric']>;
  month?: Maybe<Scalars['timestamptz']>;
  monthly_insurance_subsidy?: Maybe<Scalars['numeric']>;
  monthly_overtime_pay?: Maybe<Scalars['numeric']>;
  monthly_position_pay?: Maybe<Scalars['numeric']>;
  net_salary?: Maybe<Scalars['numeric']>;
  overtime_pay?: Maybe<Scalars['numeric']>;
  personal_insurance_funds?: Maybe<Scalars['numeric']>;
  position_pay?: Maybe<Scalars['numeric']>;
  salary_type?: Maybe<Scalars['String']>;
  total_length_day?: Maybe<Scalars['Float']>;
  total_length_hour?: Maybe<Scalars['Float']>;
  work_age?: Maybe<Scalars['Int']>;
  work_age_bonus?: Maybe<Scalars['Float']>;
  work_age_type?: Maybe<Scalars['String']>;
};

/** aggregate min on columns */
export type View_Monthly_Salary_2_Min_Fields = {
  __typename?: 'view_monthly_salary_2_min_fields';
  attendance_department_id?: Maybe<Scalars['String']>;
  basic_salary?: Maybe<Scalars['numeric']>;
  basic_salary_base?: Maybe<Scalars['numeric']>;
  basic_salary_monthly?: Maybe<Scalars['numeric']>;
  bonus_deduction?: Maybe<Scalars['numeric']>;
  corp_insurance_funds?: Maybe<Scalars['numeric']>;
  corp_salary_cost?: Maybe<Scalars['numeric']>;
  employee_department_id?: Maybe<Scalars['String']>;
  employee_id?: Maybe<Scalars['String']>;
  gross_salary?: Maybe<Scalars['numeric']>;
  hire_date?: Maybe<Scalars['date']>;
  insurance_subsidy?: Maybe<Scalars['numeric']>;
  month?: Maybe<Scalars['timestamptz']>;
  monthly_insurance_subsidy?: Maybe<Scalars['numeric']>;
  monthly_overtime_pay?: Maybe<Scalars['numeric']>;
  monthly_position_pay?: Maybe<Scalars['numeric']>;
  net_salary?: Maybe<Scalars['numeric']>;
  overtime_pay?: Maybe<Scalars['numeric']>;
  personal_insurance_funds?: Maybe<Scalars['numeric']>;
  position_pay?: Maybe<Scalars['numeric']>;
  salary_type?: Maybe<Scalars['String']>;
  total_length_day?: Maybe<Scalars['Float']>;
  total_length_hour?: Maybe<Scalars['Float']>;
  work_age?: Maybe<Scalars['Int']>;
  work_age_bonus?: Maybe<Scalars['Float']>;
  work_age_type?: Maybe<Scalars['String']>;
};

/** Ordering options when selecting data from "view_monthly_salary_2". */
export type View_Monthly_Salary_2_Order_By = {
  attendance_department_id?: InputMaybe<Order_By>;
  basic_salary?: InputMaybe<Order_By>;
  basic_salary_base?: InputMaybe<Order_By>;
  basic_salary_monthly?: InputMaybe<Order_By>;
  bonus_deduction?: InputMaybe<Order_By>;
  corp_insurance_funds?: InputMaybe<Order_By>;
  corp_salary_cost?: InputMaybe<Order_By>;
  employee_department_id?: InputMaybe<Order_By>;
  employee_id?: InputMaybe<Order_By>;
  gross_salary?: InputMaybe<Order_By>;
  hire_date?: InputMaybe<Order_By>;
  insurance_subsidy?: InputMaybe<Order_By>;
  month?: InputMaybe<Order_By>;
  monthly_insurance_subsidy?: InputMaybe<Order_By>;
  monthly_overtime_pay?: InputMaybe<Order_By>;
  monthly_position_pay?: InputMaybe<Order_By>;
  net_salary?: InputMaybe<Order_By>;
  overtime_pay?: InputMaybe<Order_By>;
  personal_insurance_funds?: InputMaybe<Order_By>;
  position_pay?: InputMaybe<Order_By>;
  salary_type?: InputMaybe<Order_By>;
  total_length_day?: InputMaybe<Order_By>;
  total_length_hour?: InputMaybe<Order_By>;
  work_age?: InputMaybe<Order_By>;
  work_age_bonus?: InputMaybe<Order_By>;
  work_age_type?: InputMaybe<Order_By>;
};

/** select columns of table "view_monthly_salary_2" */
export enum View_Monthly_Salary_2_Select_Column {
  /** column name */
  AttendanceDepartmentId = 'attendance_department_id',
  /** column name */
  BasicSalary = 'basic_salary',
  /** column name */
  BasicSalaryBase = 'basic_salary_base',
  /** column name */
  BasicSalaryMonthly = 'basic_salary_monthly',
  /** column name */
  BonusDeduction = 'bonus_deduction',
  /** column name */
  CorpInsuranceFunds = 'corp_insurance_funds',
  /** column name */
  CorpSalaryCost = 'corp_salary_cost',
  /** column name */
  EmployeeDepartmentId = 'employee_department_id',
  /** column name */
  EmployeeId = 'employee_id',
  /** column name */
  GrossSalary = 'gross_salary',
  /** column name */
  HireDate = 'hire_date',
  /** column name */
  InsuranceSubsidy = 'insurance_subsidy',
  /** column name */
  Month = 'month',
  /** column name */
  MonthlyInsuranceSubsidy = 'monthly_insurance_subsidy',
  /** column name */
  MonthlyOvertimePay = 'monthly_overtime_pay',
  /** column name */
  MonthlyPositionPay = 'monthly_position_pay',
  /** column name */
  NetSalary = 'net_salary',
  /** column name */
  OvertimePay = 'overtime_pay',
  /** column name */
  PersonalInsuranceFunds = 'personal_insurance_funds',
  /** column name */
  PositionPay = 'position_pay',
  /** column name */
  SalaryType = 'salary_type',
  /** column name */
  TotalLengthDay = 'total_length_day',
  /** column name */
  TotalLengthHour = 'total_length_hour',
  /** column name */
  WorkAge = 'work_age',
  /** column name */
  WorkAgeBonus = 'work_age_bonus',
  /** column name */
  WorkAgeType = 'work_age_type'
}

/** aggregate stddev on columns */
export type View_Monthly_Salary_2_Stddev_Fields = {
  __typename?: 'view_monthly_salary_2_stddev_fields';
  basic_salary?: Maybe<Scalars['Float']>;
  basic_salary_base?: Maybe<Scalars['Float']>;
  basic_salary_monthly?: Maybe<Scalars['Float']>;
  bonus_deduction?: Maybe<Scalars['Float']>;
  corp_insurance_funds?: Maybe<Scalars['Float']>;
  corp_salary_cost?: Maybe<Scalars['Float']>;
  gross_salary?: Maybe<Scalars['Float']>;
  insurance_subsidy?: Maybe<Scalars['Float']>;
  monthly_insurance_subsidy?: Maybe<Scalars['Float']>;
  monthly_overtime_pay?: Maybe<Scalars['Float']>;
  monthly_position_pay?: Maybe<Scalars['Float']>;
  net_salary?: Maybe<Scalars['Float']>;
  overtime_pay?: Maybe<Scalars['Float']>;
  personal_insurance_funds?: Maybe<Scalars['Float']>;
  position_pay?: Maybe<Scalars['Float']>;
  total_length_day?: Maybe<Scalars['Float']>;
  total_length_hour?: Maybe<Scalars['Float']>;
  work_age?: Maybe<Scalars['Float']>;
  work_age_bonus?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_pop on columns */
export type View_Monthly_Salary_2_Stddev_Pop_Fields = {
  __typename?: 'view_monthly_salary_2_stddev_pop_fields';
  basic_salary?: Maybe<Scalars['Float']>;
  basic_salary_base?: Maybe<Scalars['Float']>;
  basic_salary_monthly?: Maybe<Scalars['Float']>;
  bonus_deduction?: Maybe<Scalars['Float']>;
  corp_insurance_funds?: Maybe<Scalars['Float']>;
  corp_salary_cost?: Maybe<Scalars['Float']>;
  gross_salary?: Maybe<Scalars['Float']>;
  insurance_subsidy?: Maybe<Scalars['Float']>;
  monthly_insurance_subsidy?: Maybe<Scalars['Float']>;
  monthly_overtime_pay?: Maybe<Scalars['Float']>;
  monthly_position_pay?: Maybe<Scalars['Float']>;
  net_salary?: Maybe<Scalars['Float']>;
  overtime_pay?: Maybe<Scalars['Float']>;
  personal_insurance_funds?: Maybe<Scalars['Float']>;
  position_pay?: Maybe<Scalars['Float']>;
  total_length_day?: Maybe<Scalars['Float']>;
  total_length_hour?: Maybe<Scalars['Float']>;
  work_age?: Maybe<Scalars['Float']>;
  work_age_bonus?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_samp on columns */
export type View_Monthly_Salary_2_Stddev_Samp_Fields = {
  __typename?: 'view_monthly_salary_2_stddev_samp_fields';
  basic_salary?: Maybe<Scalars['Float']>;
  basic_salary_base?: Maybe<Scalars['Float']>;
  basic_salary_monthly?: Maybe<Scalars['Float']>;
  bonus_deduction?: Maybe<Scalars['Float']>;
  corp_insurance_funds?: Maybe<Scalars['Float']>;
  corp_salary_cost?: Maybe<Scalars['Float']>;
  gross_salary?: Maybe<Scalars['Float']>;
  insurance_subsidy?: Maybe<Scalars['Float']>;
  monthly_insurance_subsidy?: Maybe<Scalars['Float']>;
  monthly_overtime_pay?: Maybe<Scalars['Float']>;
  monthly_position_pay?: Maybe<Scalars['Float']>;
  net_salary?: Maybe<Scalars['Float']>;
  overtime_pay?: Maybe<Scalars['Float']>;
  personal_insurance_funds?: Maybe<Scalars['Float']>;
  position_pay?: Maybe<Scalars['Float']>;
  total_length_day?: Maybe<Scalars['Float']>;
  total_length_hour?: Maybe<Scalars['Float']>;
  work_age?: Maybe<Scalars['Float']>;
  work_age_bonus?: Maybe<Scalars['Float']>;
};

/** Streaming cursor of the table "view_monthly_salary_2" */
export type View_Monthly_Salary_2_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: View_Monthly_Salary_2_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type View_Monthly_Salary_2_Stream_Cursor_Value_Input = {
  attendance_department_id?: InputMaybe<Scalars['String']>;
  basic_salary?: InputMaybe<Scalars['numeric']>;
  basic_salary_base?: InputMaybe<Scalars['numeric']>;
  basic_salary_monthly?: InputMaybe<Scalars['numeric']>;
  bonus_deduction?: InputMaybe<Scalars['numeric']>;
  corp_insurance_funds?: InputMaybe<Scalars['numeric']>;
  corp_salary_cost?: InputMaybe<Scalars['numeric']>;
  employee_department_id?: InputMaybe<Scalars['String']>;
  employee_id?: InputMaybe<Scalars['String']>;
  gross_salary?: InputMaybe<Scalars['numeric']>;
  hire_date?: InputMaybe<Scalars['date']>;
  insurance_subsidy?: InputMaybe<Scalars['numeric']>;
  month?: InputMaybe<Scalars['timestamptz']>;
  monthly_insurance_subsidy?: InputMaybe<Scalars['numeric']>;
  monthly_overtime_pay?: InputMaybe<Scalars['numeric']>;
  monthly_position_pay?: InputMaybe<Scalars['numeric']>;
  net_salary?: InputMaybe<Scalars['numeric']>;
  overtime_pay?: InputMaybe<Scalars['numeric']>;
  personal_insurance_funds?: InputMaybe<Scalars['numeric']>;
  position_pay?: InputMaybe<Scalars['numeric']>;
  salary_type?: InputMaybe<Scalars['String']>;
  total_length_day?: InputMaybe<Scalars['Float']>;
  total_length_hour?: InputMaybe<Scalars['Float']>;
  work_age?: InputMaybe<Scalars['Int']>;
  work_age_bonus?: InputMaybe<Scalars['Float']>;
  work_age_type?: InputMaybe<Scalars['String']>;
};

/** aggregate sum on columns */
export type View_Monthly_Salary_2_Sum_Fields = {
  __typename?: 'view_monthly_salary_2_sum_fields';
  basic_salary?: Maybe<Scalars['numeric']>;
  basic_salary_base?: Maybe<Scalars['numeric']>;
  basic_salary_monthly?: Maybe<Scalars['numeric']>;
  bonus_deduction?: Maybe<Scalars['numeric']>;
  corp_insurance_funds?: Maybe<Scalars['numeric']>;
  corp_salary_cost?: Maybe<Scalars['numeric']>;
  gross_salary?: Maybe<Scalars['numeric']>;
  insurance_subsidy?: Maybe<Scalars['numeric']>;
  monthly_insurance_subsidy?: Maybe<Scalars['numeric']>;
  monthly_overtime_pay?: Maybe<Scalars['numeric']>;
  monthly_position_pay?: Maybe<Scalars['numeric']>;
  net_salary?: Maybe<Scalars['numeric']>;
  overtime_pay?: Maybe<Scalars['numeric']>;
  personal_insurance_funds?: Maybe<Scalars['numeric']>;
  position_pay?: Maybe<Scalars['numeric']>;
  total_length_day?: Maybe<Scalars['Float']>;
  total_length_hour?: Maybe<Scalars['Float']>;
  work_age?: Maybe<Scalars['Int']>;
  work_age_bonus?: Maybe<Scalars['Float']>;
};

/** aggregate var_pop on columns */
export type View_Monthly_Salary_2_Var_Pop_Fields = {
  __typename?: 'view_monthly_salary_2_var_pop_fields';
  basic_salary?: Maybe<Scalars['Float']>;
  basic_salary_base?: Maybe<Scalars['Float']>;
  basic_salary_monthly?: Maybe<Scalars['Float']>;
  bonus_deduction?: Maybe<Scalars['Float']>;
  corp_insurance_funds?: Maybe<Scalars['Float']>;
  corp_salary_cost?: Maybe<Scalars['Float']>;
  gross_salary?: Maybe<Scalars['Float']>;
  insurance_subsidy?: Maybe<Scalars['Float']>;
  monthly_insurance_subsidy?: Maybe<Scalars['Float']>;
  monthly_overtime_pay?: Maybe<Scalars['Float']>;
  monthly_position_pay?: Maybe<Scalars['Float']>;
  net_salary?: Maybe<Scalars['Float']>;
  overtime_pay?: Maybe<Scalars['Float']>;
  personal_insurance_funds?: Maybe<Scalars['Float']>;
  position_pay?: Maybe<Scalars['Float']>;
  total_length_day?: Maybe<Scalars['Float']>;
  total_length_hour?: Maybe<Scalars['Float']>;
  work_age?: Maybe<Scalars['Float']>;
  work_age_bonus?: Maybe<Scalars['Float']>;
};

/** aggregate var_samp on columns */
export type View_Monthly_Salary_2_Var_Samp_Fields = {
  __typename?: 'view_monthly_salary_2_var_samp_fields';
  basic_salary?: Maybe<Scalars['Float']>;
  basic_salary_base?: Maybe<Scalars['Float']>;
  basic_salary_monthly?: Maybe<Scalars['Float']>;
  bonus_deduction?: Maybe<Scalars['Float']>;
  corp_insurance_funds?: Maybe<Scalars['Float']>;
  corp_salary_cost?: Maybe<Scalars['Float']>;
  gross_salary?: Maybe<Scalars['Float']>;
  insurance_subsidy?: Maybe<Scalars['Float']>;
  monthly_insurance_subsidy?: Maybe<Scalars['Float']>;
  monthly_overtime_pay?: Maybe<Scalars['Float']>;
  monthly_position_pay?: Maybe<Scalars['Float']>;
  net_salary?: Maybe<Scalars['Float']>;
  overtime_pay?: Maybe<Scalars['Float']>;
  personal_insurance_funds?: Maybe<Scalars['Float']>;
  position_pay?: Maybe<Scalars['Float']>;
  total_length_day?: Maybe<Scalars['Float']>;
  total_length_hour?: Maybe<Scalars['Float']>;
  work_age?: Maybe<Scalars['Float']>;
  work_age_bonus?: Maybe<Scalars['Float']>;
};

/** aggregate variance on columns */
export type View_Monthly_Salary_2_Variance_Fields = {
  __typename?: 'view_monthly_salary_2_variance_fields';
  basic_salary?: Maybe<Scalars['Float']>;
  basic_salary_base?: Maybe<Scalars['Float']>;
  basic_salary_monthly?: Maybe<Scalars['Float']>;
  bonus_deduction?: Maybe<Scalars['Float']>;
  corp_insurance_funds?: Maybe<Scalars['Float']>;
  corp_salary_cost?: Maybe<Scalars['Float']>;
  gross_salary?: Maybe<Scalars['Float']>;
  insurance_subsidy?: Maybe<Scalars['Float']>;
  monthly_insurance_subsidy?: Maybe<Scalars['Float']>;
  monthly_overtime_pay?: Maybe<Scalars['Float']>;
  monthly_position_pay?: Maybe<Scalars['Float']>;
  net_salary?: Maybe<Scalars['Float']>;
  overtime_pay?: Maybe<Scalars['Float']>;
  personal_insurance_funds?: Maybe<Scalars['Float']>;
  position_pay?: Maybe<Scalars['Float']>;
  total_length_day?: Maybe<Scalars['Float']>;
  total_length_hour?: Maybe<Scalars['Float']>;
  work_age?: Maybe<Scalars['Float']>;
  work_age_bonus?: Maybe<Scalars['Float']>;
};

/** aggregated selection of "view_monthly_salary" */
export type View_Monthly_Salary_Aggregate = {
  __typename?: 'view_monthly_salary_aggregate';
  aggregate?: Maybe<View_Monthly_Salary_Aggregate_Fields>;
  nodes: Array<View_Monthly_Salary>;
};

/** aggregate fields of "view_monthly_salary" */
export type View_Monthly_Salary_Aggregate_Fields = {
  __typename?: 'view_monthly_salary_aggregate_fields';
  avg?: Maybe<View_Monthly_Salary_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<View_Monthly_Salary_Max_Fields>;
  min?: Maybe<View_Monthly_Salary_Min_Fields>;
  stddev?: Maybe<View_Monthly_Salary_Stddev_Fields>;
  stddev_pop?: Maybe<View_Monthly_Salary_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<View_Monthly_Salary_Stddev_Samp_Fields>;
  sum?: Maybe<View_Monthly_Salary_Sum_Fields>;
  var_pop?: Maybe<View_Monthly_Salary_Var_Pop_Fields>;
  var_samp?: Maybe<View_Monthly_Salary_Var_Samp_Fields>;
  variance?: Maybe<View_Monthly_Salary_Variance_Fields>;
};


/** aggregate fields of "view_monthly_salary" */
export type View_Monthly_Salary_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<View_Monthly_Salary_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** aggregate avg on columns */
export type View_Monthly_Salary_Avg_Fields = {
  __typename?: 'view_monthly_salary_avg_fields';
  basic_salary?: Maybe<Scalars['Float']>;
  basic_salary_base?: Maybe<Scalars['Float']>;
  basic_salary_monthly?: Maybe<Scalars['Float']>;
  bonus_deduction?: Maybe<Scalars['Float']>;
  corp_insurance_funds?: Maybe<Scalars['Float']>;
  corp_salary_cost?: Maybe<Scalars['Float']>;
  gross_salary?: Maybe<Scalars['Float']>;
  insurance_subsidy?: Maybe<Scalars['Float']>;
  net_salary?: Maybe<Scalars['Float']>;
  overtime_pay?: Maybe<Scalars['Float']>;
  personal_insurance_funds?: Maybe<Scalars['Float']>;
  position_pay?: Maybe<Scalars['Float']>;
  total_length_day?: Maybe<Scalars['Float']>;
  total_length_hour?: Maybe<Scalars['Float']>;
  work_age?: Maybe<Scalars['Float']>;
  work_age_bonus?: Maybe<Scalars['Float']>;
};

/** Boolean expression to filter rows from the table "view_monthly_salary". All fields are combined with a logical 'AND'. */
export type View_Monthly_Salary_Bool_Exp = {
  _and?: InputMaybe<Array<View_Monthly_Salary_Bool_Exp>>;
  _not?: InputMaybe<View_Monthly_Salary_Bool_Exp>;
  _or?: InputMaybe<Array<View_Monthly_Salary_Bool_Exp>>;
  attendance_department?: InputMaybe<Departments_Bool_Exp>;
  attendance_department_id?: InputMaybe<String_Comparison_Exp>;
  basic_salary?: InputMaybe<Numeric_Comparison_Exp>;
  basic_salary_base?: InputMaybe<Numeric_Comparison_Exp>;
  basic_salary_monthly?: InputMaybe<Numeric_Comparison_Exp>;
  bonus_deduction?: InputMaybe<Numeric_Comparison_Exp>;
  corp_insurance_funds?: InputMaybe<Numeric_Comparison_Exp>;
  corp_salary_cost?: InputMaybe<Numeric_Comparison_Exp>;
  employee?: InputMaybe<Employees_Bool_Exp>;
  employee_department?: InputMaybe<Departments_Bool_Exp>;
  employee_department_id?: InputMaybe<String_Comparison_Exp>;
  employee_id?: InputMaybe<String_Comparison_Exp>;
  gross_salary?: InputMaybe<Numeric_Comparison_Exp>;
  hire_date?: InputMaybe<Date_Comparison_Exp>;
  insurance_subsidy?: InputMaybe<Numeric_Comparison_Exp>;
  month?: InputMaybe<Timestamptz_Comparison_Exp>;
  net_salary?: InputMaybe<Numeric_Comparison_Exp>;
  overtime_pay?: InputMaybe<Numeric_Comparison_Exp>;
  personal_insurance_funds?: InputMaybe<Numeric_Comparison_Exp>;
  position_pay?: InputMaybe<Numeric_Comparison_Exp>;
  salary_type?: InputMaybe<String_Comparison_Exp>;
  total_length_day?: InputMaybe<Float_Comparison_Exp>;
  total_length_hour?: InputMaybe<Float_Comparison_Exp>;
  work_age?: InputMaybe<Int_Comparison_Exp>;
  work_age_bonus?: InputMaybe<Float_Comparison_Exp>;
  work_age_type?: InputMaybe<String_Comparison_Exp>;
};

/** aggregate max on columns */
export type View_Monthly_Salary_Max_Fields = {
  __typename?: 'view_monthly_salary_max_fields';
  attendance_department_id?: Maybe<Scalars['String']>;
  basic_salary?: Maybe<Scalars['numeric']>;
  basic_salary_base?: Maybe<Scalars['numeric']>;
  basic_salary_monthly?: Maybe<Scalars['numeric']>;
  bonus_deduction?: Maybe<Scalars['numeric']>;
  corp_insurance_funds?: Maybe<Scalars['numeric']>;
  corp_salary_cost?: Maybe<Scalars['numeric']>;
  employee_department_id?: Maybe<Scalars['String']>;
  employee_id?: Maybe<Scalars['String']>;
  gross_salary?: Maybe<Scalars['numeric']>;
  hire_date?: Maybe<Scalars['date']>;
  insurance_subsidy?: Maybe<Scalars['numeric']>;
  month?: Maybe<Scalars['timestamptz']>;
  net_salary?: Maybe<Scalars['numeric']>;
  overtime_pay?: Maybe<Scalars['numeric']>;
  personal_insurance_funds?: Maybe<Scalars['numeric']>;
  position_pay?: Maybe<Scalars['numeric']>;
  salary_type?: Maybe<Scalars['String']>;
  total_length_day?: Maybe<Scalars['Float']>;
  total_length_hour?: Maybe<Scalars['Float']>;
  work_age?: Maybe<Scalars['Int']>;
  work_age_bonus?: Maybe<Scalars['Float']>;
  work_age_type?: Maybe<Scalars['String']>;
};

/** aggregate min on columns */
export type View_Monthly_Salary_Min_Fields = {
  __typename?: 'view_monthly_salary_min_fields';
  attendance_department_id?: Maybe<Scalars['String']>;
  basic_salary?: Maybe<Scalars['numeric']>;
  basic_salary_base?: Maybe<Scalars['numeric']>;
  basic_salary_monthly?: Maybe<Scalars['numeric']>;
  bonus_deduction?: Maybe<Scalars['numeric']>;
  corp_insurance_funds?: Maybe<Scalars['numeric']>;
  corp_salary_cost?: Maybe<Scalars['numeric']>;
  employee_department_id?: Maybe<Scalars['String']>;
  employee_id?: Maybe<Scalars['String']>;
  gross_salary?: Maybe<Scalars['numeric']>;
  hire_date?: Maybe<Scalars['date']>;
  insurance_subsidy?: Maybe<Scalars['numeric']>;
  month?: Maybe<Scalars['timestamptz']>;
  net_salary?: Maybe<Scalars['numeric']>;
  overtime_pay?: Maybe<Scalars['numeric']>;
  personal_insurance_funds?: Maybe<Scalars['numeric']>;
  position_pay?: Maybe<Scalars['numeric']>;
  salary_type?: Maybe<Scalars['String']>;
  total_length_day?: Maybe<Scalars['Float']>;
  total_length_hour?: Maybe<Scalars['Float']>;
  work_age?: Maybe<Scalars['Int']>;
  work_age_bonus?: Maybe<Scalars['Float']>;
  work_age_type?: Maybe<Scalars['String']>;
};

/** Ordering options when selecting data from "view_monthly_salary". */
export type View_Monthly_Salary_Order_By = {
  attendance_department?: InputMaybe<Departments_Order_By>;
  attendance_department_id?: InputMaybe<Order_By>;
  basic_salary?: InputMaybe<Order_By>;
  basic_salary_base?: InputMaybe<Order_By>;
  basic_salary_monthly?: InputMaybe<Order_By>;
  bonus_deduction?: InputMaybe<Order_By>;
  corp_insurance_funds?: InputMaybe<Order_By>;
  corp_salary_cost?: InputMaybe<Order_By>;
  employee?: InputMaybe<Employees_Order_By>;
  employee_department?: InputMaybe<Departments_Order_By>;
  employee_department_id?: InputMaybe<Order_By>;
  employee_id?: InputMaybe<Order_By>;
  gross_salary?: InputMaybe<Order_By>;
  hire_date?: InputMaybe<Order_By>;
  insurance_subsidy?: InputMaybe<Order_By>;
  month?: InputMaybe<Order_By>;
  net_salary?: InputMaybe<Order_By>;
  overtime_pay?: InputMaybe<Order_By>;
  personal_insurance_funds?: InputMaybe<Order_By>;
  position_pay?: InputMaybe<Order_By>;
  salary_type?: InputMaybe<Order_By>;
  total_length_day?: InputMaybe<Order_By>;
  total_length_hour?: InputMaybe<Order_By>;
  work_age?: InputMaybe<Order_By>;
  work_age_bonus?: InputMaybe<Order_By>;
  work_age_type?: InputMaybe<Order_By>;
};

/** select columns of table "view_monthly_salary" */
export enum View_Monthly_Salary_Select_Column {
  /** column name */
  AttendanceDepartmentId = 'attendance_department_id',
  /** column name */
  BasicSalary = 'basic_salary',
  /** column name */
  BasicSalaryBase = 'basic_salary_base',
  /** column name */
  BasicSalaryMonthly = 'basic_salary_monthly',
  /** column name */
  BonusDeduction = 'bonus_deduction',
  /** column name */
  CorpInsuranceFunds = 'corp_insurance_funds',
  /** column name */
  CorpSalaryCost = 'corp_salary_cost',
  /** column name */
  EmployeeDepartmentId = 'employee_department_id',
  /** column name */
  EmployeeId = 'employee_id',
  /** column name */
  GrossSalary = 'gross_salary',
  /** column name */
  HireDate = 'hire_date',
  /** column name */
  InsuranceSubsidy = 'insurance_subsidy',
  /** column name */
  Month = 'month',
  /** column name */
  NetSalary = 'net_salary',
  /** column name */
  OvertimePay = 'overtime_pay',
  /** column name */
  PersonalInsuranceFunds = 'personal_insurance_funds',
  /** column name */
  PositionPay = 'position_pay',
  /** column name */
  SalaryType = 'salary_type',
  /** column name */
  TotalLengthDay = 'total_length_day',
  /** column name */
  TotalLengthHour = 'total_length_hour',
  /** column name */
  WorkAge = 'work_age',
  /** column name */
  WorkAgeBonus = 'work_age_bonus',
  /** column name */
  WorkAgeType = 'work_age_type'
}

/** aggregate stddev on columns */
export type View_Monthly_Salary_Stddev_Fields = {
  __typename?: 'view_monthly_salary_stddev_fields';
  basic_salary?: Maybe<Scalars['Float']>;
  basic_salary_base?: Maybe<Scalars['Float']>;
  basic_salary_monthly?: Maybe<Scalars['Float']>;
  bonus_deduction?: Maybe<Scalars['Float']>;
  corp_insurance_funds?: Maybe<Scalars['Float']>;
  corp_salary_cost?: Maybe<Scalars['Float']>;
  gross_salary?: Maybe<Scalars['Float']>;
  insurance_subsidy?: Maybe<Scalars['Float']>;
  net_salary?: Maybe<Scalars['Float']>;
  overtime_pay?: Maybe<Scalars['Float']>;
  personal_insurance_funds?: Maybe<Scalars['Float']>;
  position_pay?: Maybe<Scalars['Float']>;
  total_length_day?: Maybe<Scalars['Float']>;
  total_length_hour?: Maybe<Scalars['Float']>;
  work_age?: Maybe<Scalars['Float']>;
  work_age_bonus?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_pop on columns */
export type View_Monthly_Salary_Stddev_Pop_Fields = {
  __typename?: 'view_monthly_salary_stddev_pop_fields';
  basic_salary?: Maybe<Scalars['Float']>;
  basic_salary_base?: Maybe<Scalars['Float']>;
  basic_salary_monthly?: Maybe<Scalars['Float']>;
  bonus_deduction?: Maybe<Scalars['Float']>;
  corp_insurance_funds?: Maybe<Scalars['Float']>;
  corp_salary_cost?: Maybe<Scalars['Float']>;
  gross_salary?: Maybe<Scalars['Float']>;
  insurance_subsidy?: Maybe<Scalars['Float']>;
  net_salary?: Maybe<Scalars['Float']>;
  overtime_pay?: Maybe<Scalars['Float']>;
  personal_insurance_funds?: Maybe<Scalars['Float']>;
  position_pay?: Maybe<Scalars['Float']>;
  total_length_day?: Maybe<Scalars['Float']>;
  total_length_hour?: Maybe<Scalars['Float']>;
  work_age?: Maybe<Scalars['Float']>;
  work_age_bonus?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_samp on columns */
export type View_Monthly_Salary_Stddev_Samp_Fields = {
  __typename?: 'view_monthly_salary_stddev_samp_fields';
  basic_salary?: Maybe<Scalars['Float']>;
  basic_salary_base?: Maybe<Scalars['Float']>;
  basic_salary_monthly?: Maybe<Scalars['Float']>;
  bonus_deduction?: Maybe<Scalars['Float']>;
  corp_insurance_funds?: Maybe<Scalars['Float']>;
  corp_salary_cost?: Maybe<Scalars['Float']>;
  gross_salary?: Maybe<Scalars['Float']>;
  insurance_subsidy?: Maybe<Scalars['Float']>;
  net_salary?: Maybe<Scalars['Float']>;
  overtime_pay?: Maybe<Scalars['Float']>;
  personal_insurance_funds?: Maybe<Scalars['Float']>;
  position_pay?: Maybe<Scalars['Float']>;
  total_length_day?: Maybe<Scalars['Float']>;
  total_length_hour?: Maybe<Scalars['Float']>;
  work_age?: Maybe<Scalars['Float']>;
  work_age_bonus?: Maybe<Scalars['Float']>;
};

/** Streaming cursor of the table "view_monthly_salary" */
export type View_Monthly_Salary_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: View_Monthly_Salary_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type View_Monthly_Salary_Stream_Cursor_Value_Input = {
  attendance_department_id?: InputMaybe<Scalars['String']>;
  basic_salary?: InputMaybe<Scalars['numeric']>;
  basic_salary_base?: InputMaybe<Scalars['numeric']>;
  basic_salary_monthly?: InputMaybe<Scalars['numeric']>;
  bonus_deduction?: InputMaybe<Scalars['numeric']>;
  corp_insurance_funds?: InputMaybe<Scalars['numeric']>;
  corp_salary_cost?: InputMaybe<Scalars['numeric']>;
  employee_department_id?: InputMaybe<Scalars['String']>;
  employee_id?: InputMaybe<Scalars['String']>;
  gross_salary?: InputMaybe<Scalars['numeric']>;
  hire_date?: InputMaybe<Scalars['date']>;
  insurance_subsidy?: InputMaybe<Scalars['numeric']>;
  month?: InputMaybe<Scalars['timestamptz']>;
  net_salary?: InputMaybe<Scalars['numeric']>;
  overtime_pay?: InputMaybe<Scalars['numeric']>;
  personal_insurance_funds?: InputMaybe<Scalars['numeric']>;
  position_pay?: InputMaybe<Scalars['numeric']>;
  salary_type?: InputMaybe<Scalars['String']>;
  total_length_day?: InputMaybe<Scalars['Float']>;
  total_length_hour?: InputMaybe<Scalars['Float']>;
  work_age?: InputMaybe<Scalars['Int']>;
  work_age_bonus?: InputMaybe<Scalars['Float']>;
  work_age_type?: InputMaybe<Scalars['String']>;
};

/** aggregate sum on columns */
export type View_Monthly_Salary_Sum_Fields = {
  __typename?: 'view_monthly_salary_sum_fields';
  basic_salary?: Maybe<Scalars['numeric']>;
  basic_salary_base?: Maybe<Scalars['numeric']>;
  basic_salary_monthly?: Maybe<Scalars['numeric']>;
  bonus_deduction?: Maybe<Scalars['numeric']>;
  corp_insurance_funds?: Maybe<Scalars['numeric']>;
  corp_salary_cost?: Maybe<Scalars['numeric']>;
  gross_salary?: Maybe<Scalars['numeric']>;
  insurance_subsidy?: Maybe<Scalars['numeric']>;
  net_salary?: Maybe<Scalars['numeric']>;
  overtime_pay?: Maybe<Scalars['numeric']>;
  personal_insurance_funds?: Maybe<Scalars['numeric']>;
  position_pay?: Maybe<Scalars['numeric']>;
  total_length_day?: Maybe<Scalars['Float']>;
  total_length_hour?: Maybe<Scalars['Float']>;
  work_age?: Maybe<Scalars['Int']>;
  work_age_bonus?: Maybe<Scalars['Float']>;
};

/** aggregate var_pop on columns */
export type View_Monthly_Salary_Var_Pop_Fields = {
  __typename?: 'view_monthly_salary_var_pop_fields';
  basic_salary?: Maybe<Scalars['Float']>;
  basic_salary_base?: Maybe<Scalars['Float']>;
  basic_salary_monthly?: Maybe<Scalars['Float']>;
  bonus_deduction?: Maybe<Scalars['Float']>;
  corp_insurance_funds?: Maybe<Scalars['Float']>;
  corp_salary_cost?: Maybe<Scalars['Float']>;
  gross_salary?: Maybe<Scalars['Float']>;
  insurance_subsidy?: Maybe<Scalars['Float']>;
  net_salary?: Maybe<Scalars['Float']>;
  overtime_pay?: Maybe<Scalars['Float']>;
  personal_insurance_funds?: Maybe<Scalars['Float']>;
  position_pay?: Maybe<Scalars['Float']>;
  total_length_day?: Maybe<Scalars['Float']>;
  total_length_hour?: Maybe<Scalars['Float']>;
  work_age?: Maybe<Scalars['Float']>;
  work_age_bonus?: Maybe<Scalars['Float']>;
};

/** aggregate var_samp on columns */
export type View_Monthly_Salary_Var_Samp_Fields = {
  __typename?: 'view_monthly_salary_var_samp_fields';
  basic_salary?: Maybe<Scalars['Float']>;
  basic_salary_base?: Maybe<Scalars['Float']>;
  basic_salary_monthly?: Maybe<Scalars['Float']>;
  bonus_deduction?: Maybe<Scalars['Float']>;
  corp_insurance_funds?: Maybe<Scalars['Float']>;
  corp_salary_cost?: Maybe<Scalars['Float']>;
  gross_salary?: Maybe<Scalars['Float']>;
  insurance_subsidy?: Maybe<Scalars['Float']>;
  net_salary?: Maybe<Scalars['Float']>;
  overtime_pay?: Maybe<Scalars['Float']>;
  personal_insurance_funds?: Maybe<Scalars['Float']>;
  position_pay?: Maybe<Scalars['Float']>;
  total_length_day?: Maybe<Scalars['Float']>;
  total_length_hour?: Maybe<Scalars['Float']>;
  work_age?: Maybe<Scalars['Float']>;
  work_age_bonus?: Maybe<Scalars['Float']>;
};

/** aggregate variance on columns */
export type View_Monthly_Salary_Variance_Fields = {
  __typename?: 'view_monthly_salary_variance_fields';
  basic_salary?: Maybe<Scalars['Float']>;
  basic_salary_base?: Maybe<Scalars['Float']>;
  basic_salary_monthly?: Maybe<Scalars['Float']>;
  bonus_deduction?: Maybe<Scalars['Float']>;
  corp_insurance_funds?: Maybe<Scalars['Float']>;
  corp_salary_cost?: Maybe<Scalars['Float']>;
  gross_salary?: Maybe<Scalars['Float']>;
  insurance_subsidy?: Maybe<Scalars['Float']>;
  net_salary?: Maybe<Scalars['Float']>;
  overtime_pay?: Maybe<Scalars['Float']>;
  personal_insurance_funds?: Maybe<Scalars['Float']>;
  position_pay?: Maybe<Scalars['Float']>;
  total_length_day?: Maybe<Scalars['Float']>;
  total_length_hour?: Maybe<Scalars['Float']>;
  work_age?: Maybe<Scalars['Float']>;
  work_age_bonus?: Maybe<Scalars['Float']>;
};

/** columns and relationships of "view_solditems" */
export type View_Solditems = {
  __typename?: 'view_solditems';
  /** An object relationship */
  fooditem?: Maybe<Fooditems>;
  income_money?: Maybe<Scalars['numeric']>;
  item_id?: Maybe<Scalars['String']>;
  last_price?: Maybe<Scalars['numeric']>;
  last_qty?: Maybe<Scalars['numeric']>;
  settle_date?: Maybe<Scalars['date']>;
  shop_id?: Maybe<Scalars['String']>;
  /** An object relationship */
  store?: Maybe<Stores>;
};

/** aggregated selection of "view_solditems" */
export type View_Solditems_Aggregate = {
  __typename?: 'view_solditems_aggregate';
  aggregate?: Maybe<View_Solditems_Aggregate_Fields>;
  nodes: Array<View_Solditems>;
};

/** aggregate fields of "view_solditems" */
export type View_Solditems_Aggregate_Fields = {
  __typename?: 'view_solditems_aggregate_fields';
  avg?: Maybe<View_Solditems_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<View_Solditems_Max_Fields>;
  min?: Maybe<View_Solditems_Min_Fields>;
  stddev?: Maybe<View_Solditems_Stddev_Fields>;
  stddev_pop?: Maybe<View_Solditems_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<View_Solditems_Stddev_Samp_Fields>;
  sum?: Maybe<View_Solditems_Sum_Fields>;
  var_pop?: Maybe<View_Solditems_Var_Pop_Fields>;
  var_samp?: Maybe<View_Solditems_Var_Samp_Fields>;
  variance?: Maybe<View_Solditems_Variance_Fields>;
};


/** aggregate fields of "view_solditems" */
export type View_Solditems_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<View_Solditems_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** aggregate avg on columns */
export type View_Solditems_Avg_Fields = {
  __typename?: 'view_solditems_avg_fields';
  income_money?: Maybe<Scalars['Float']>;
  last_price?: Maybe<Scalars['Float']>;
  last_qty?: Maybe<Scalars['Float']>;
};

/** Boolean expression to filter rows from the table "view_solditems". All fields are combined with a logical 'AND'. */
export type View_Solditems_Bool_Exp = {
  _and?: InputMaybe<Array<View_Solditems_Bool_Exp>>;
  _not?: InputMaybe<View_Solditems_Bool_Exp>;
  _or?: InputMaybe<Array<View_Solditems_Bool_Exp>>;
  fooditem?: InputMaybe<Fooditems_Bool_Exp>;
  income_money?: InputMaybe<Numeric_Comparison_Exp>;
  item_id?: InputMaybe<String_Comparison_Exp>;
  last_price?: InputMaybe<Numeric_Comparison_Exp>;
  last_qty?: InputMaybe<Numeric_Comparison_Exp>;
  settle_date?: InputMaybe<Date_Comparison_Exp>;
  shop_id?: InputMaybe<String_Comparison_Exp>;
  store?: InputMaybe<Stores_Bool_Exp>;
};

/** aggregate max on columns */
export type View_Solditems_Max_Fields = {
  __typename?: 'view_solditems_max_fields';
  income_money?: Maybe<Scalars['numeric']>;
  item_id?: Maybe<Scalars['String']>;
  last_price?: Maybe<Scalars['numeric']>;
  last_qty?: Maybe<Scalars['numeric']>;
  settle_date?: Maybe<Scalars['date']>;
  shop_id?: Maybe<Scalars['String']>;
};

/** aggregate min on columns */
export type View_Solditems_Min_Fields = {
  __typename?: 'view_solditems_min_fields';
  income_money?: Maybe<Scalars['numeric']>;
  item_id?: Maybe<Scalars['String']>;
  last_price?: Maybe<Scalars['numeric']>;
  last_qty?: Maybe<Scalars['numeric']>;
  settle_date?: Maybe<Scalars['date']>;
  shop_id?: Maybe<Scalars['String']>;
};

/** Ordering options when selecting data from "view_solditems". */
export type View_Solditems_Order_By = {
  fooditem?: InputMaybe<Fooditems_Order_By>;
  income_money?: InputMaybe<Order_By>;
  item_id?: InputMaybe<Order_By>;
  last_price?: InputMaybe<Order_By>;
  last_qty?: InputMaybe<Order_By>;
  settle_date?: InputMaybe<Order_By>;
  shop_id?: InputMaybe<Order_By>;
  store?: InputMaybe<Stores_Order_By>;
};

/** select columns of table "view_solditems" */
export enum View_Solditems_Select_Column {
  /** column name */
  IncomeMoney = 'income_money',
  /** column name */
  ItemId = 'item_id',
  /** column name */
  LastPrice = 'last_price',
  /** column name */
  LastQty = 'last_qty',
  /** column name */
  SettleDate = 'settle_date',
  /** column name */
  ShopId = 'shop_id'
}

/** aggregate stddev on columns */
export type View_Solditems_Stddev_Fields = {
  __typename?: 'view_solditems_stddev_fields';
  income_money?: Maybe<Scalars['Float']>;
  last_price?: Maybe<Scalars['Float']>;
  last_qty?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_pop on columns */
export type View_Solditems_Stddev_Pop_Fields = {
  __typename?: 'view_solditems_stddev_pop_fields';
  income_money?: Maybe<Scalars['Float']>;
  last_price?: Maybe<Scalars['Float']>;
  last_qty?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_samp on columns */
export type View_Solditems_Stddev_Samp_Fields = {
  __typename?: 'view_solditems_stddev_samp_fields';
  income_money?: Maybe<Scalars['Float']>;
  last_price?: Maybe<Scalars['Float']>;
  last_qty?: Maybe<Scalars['Float']>;
};

/** Streaming cursor of the table "view_solditems" */
export type View_Solditems_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: View_Solditems_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type View_Solditems_Stream_Cursor_Value_Input = {
  income_money?: InputMaybe<Scalars['numeric']>;
  item_id?: InputMaybe<Scalars['String']>;
  last_price?: InputMaybe<Scalars['numeric']>;
  last_qty?: InputMaybe<Scalars['numeric']>;
  settle_date?: InputMaybe<Scalars['date']>;
  shop_id?: InputMaybe<Scalars['String']>;
};

/** aggregate sum on columns */
export type View_Solditems_Sum_Fields = {
  __typename?: 'view_solditems_sum_fields';
  income_money?: Maybe<Scalars['numeric']>;
  last_price?: Maybe<Scalars['numeric']>;
  last_qty?: Maybe<Scalars['numeric']>;
};

/** aggregate var_pop on columns */
export type View_Solditems_Var_Pop_Fields = {
  __typename?: 'view_solditems_var_pop_fields';
  income_money?: Maybe<Scalars['Float']>;
  last_price?: Maybe<Scalars['Float']>;
  last_qty?: Maybe<Scalars['Float']>;
};

/** aggregate var_samp on columns */
export type View_Solditems_Var_Samp_Fields = {
  __typename?: 'view_solditems_var_samp_fields';
  income_money?: Maybe<Scalars['Float']>;
  last_price?: Maybe<Scalars['Float']>;
  last_qty?: Maybe<Scalars['Float']>;
};

/** aggregate variance on columns */
export type View_Solditems_Variance_Fields = {
  __typename?: 'view_solditems_variance_fields';
  income_money?: Maybe<Scalars['Float']>;
  last_price?: Maybe<Scalars['Float']>;
  last_qty?: Maybe<Scalars['Float']>;
};

export type DeleteAttendanceGroupLeadersMutationVariables = Exact<{
  where: Attendance_Group_Leaders_Bool_Exp;
}>;


export type DeleteAttendanceGroupLeadersMutation = { __typename?: 'mutation_root', delete_attendance_group_leaders?: { __typename?: 'attendance_group_leaders_mutation_response', returning: Array<{ __typename?: 'attendance_group_leaders', attendance_group_id: string }> } | null };

export type CreateAttendanceGroupLeadersMutationVariables = Exact<{
  objects: Array<Attendance_Group_Leaders_Insert_Input> | Attendance_Group_Leaders_Insert_Input;
}>;


export type CreateAttendanceGroupLeadersMutation = { __typename?: 'mutation_root', insert_attendance_group_leaders?: { __typename?: 'attendance_group_leaders_mutation_response', returning: Array<{ __typename?: 'attendance_group_leaders', attendance_group_id: string }> } | null };

export type UpdateAttendanceLocationsMutationVariables = Exact<{
  updates: Array<Attendance_Locations_Updates> | Attendance_Locations_Updates;
}>;


export type UpdateAttendanceLocationsMutation = { __typename?: 'mutation_root', update_attendance_locations_many?: Array<{ __typename?: 'attendance_locations_mutation_response', returning: Array<{ __typename?: 'attendance_locations', id: string }> } | null> | null };

export type CreateAttendanceLocationsMutationVariables = Exact<{
  objects: Array<Attendance_Locations_Insert_Input> | Attendance_Locations_Insert_Input;
}>;


export type CreateAttendanceLocationsMutation = { __typename?: 'mutation_root', insert_attendance_locations?: { __typename?: 'attendance_locations_mutation_response', returning: Array<{ __typename?: 'attendance_locations', id: string }> } | null };

export type DeleteAttendanceLocationMutationVariables = Exact<{
  id: Scalars['String'];
}>;


export type DeleteAttendanceLocationMutation = { __typename?: 'mutation_root', delete_attendance_locations_by_pk?: { __typename?: 'attendance_locations', id: string } | null };

export type DeleteAttendanceGroupSubLeadersMutationVariables = Exact<{
  where: Attendance_Group_Subleaders_Bool_Exp;
}>;


export type DeleteAttendanceGroupSubLeadersMutation = { __typename?: 'mutation_root', delete_attendance_group_subleaders?: { __typename?: 'attendance_group_subleaders_mutation_response', returning: Array<{ __typename?: 'attendance_group_subleaders', attendance_group_id: string }> } | null };

export type CreateAttendanceGroupSubLeadersMutationVariables = Exact<{
  objects: Array<Attendance_Group_Subleaders_Insert_Input> | Attendance_Group_Subleaders_Insert_Input;
}>;


export type CreateAttendanceGroupSubLeadersMutation = { __typename?: 'mutation_root', insert_attendance_group_subleaders?: { __typename?: 'attendance_group_subleaders_mutation_response', returning: Array<{ __typename?: 'attendance_group_subleaders', attendance_group_id: string }> } | null };

export type DeleteAttendanchGroupByIdMutationVariables = Exact<{
  id: Scalars['String'];
}>;


export type DeleteAttendanchGroupByIdMutation = { __typename?: 'mutation_root', delete_attendance_groups_by_pk?: { __typename?: 'attendance_groups', id: string } | null };

export type CreateAttendanchGroupMutationVariables = Exact<{
  objects: Array<Attendance_Groups_Insert_Input> | Attendance_Groups_Insert_Input;
}>;


export type CreateAttendanchGroupMutation = { __typename?: 'mutation_root', insert_attendance_groups?: { __typename?: 'attendance_groups_mutation_response', returning: Array<{ __typename?: 'attendance_groups', id: string }> } | null };

export type UpdateAttendanceGroupMutationVariables = Exact<{
  id: Scalars['String'];
  _set: Attendance_Groups_Set_Input;
}>;


export type UpdateAttendanceGroupMutation = { __typename?: 'mutation_root', update_attendance_groups_by_pk?: { __typename?: 'attendance_groups', id: string } | null };

export type DeleteAttendanceGroupShiftsMutationVariables = Exact<{
  where: Attendance_Group_Shifts_Bool_Exp;
}>;


export type DeleteAttendanceGroupShiftsMutation = { __typename?: 'mutation_root', delete_attendance_group_shifts?: { __typename?: 'attendance_group_shifts_mutation_response', returning: Array<{ __typename?: 'attendance_group_shifts', attendance_group_id: string }> } | null };

export type CreateAttendanceGroupShiftsMutationVariables = Exact<{
  objects: Array<Attendance_Group_Shifts_Insert_Input> | Attendance_Group_Shifts_Insert_Input;
}>;


export type CreateAttendanceGroupShiftsMutation = { __typename?: 'mutation_root', insert_attendance_group_shifts?: { __typename?: 'attendance_group_shifts_mutation_response', returning: Array<{ __typename?: 'attendance_group_shifts', attendance_group_id: string }> } | null };

export type DeleteAttendanceMutationVariables = Exact<{
  where: Attendance_Bool_Exp;
}>;


export type DeleteAttendanceMutation = { __typename?: 'mutation_root', delete_attendance?: { __typename?: 'attendance_mutation_response', returning: Array<{ __typename?: 'attendance', id: string }> } | null };

export type CreateAttendanceMutationVariables = Exact<{
  objects: Array<Attendance_Insert_Input> | Attendance_Insert_Input;
}>;


export type CreateAttendanceMutation = { __typename?: 'mutation_root', insert_attendance?: { __typename?: 'attendance_mutation_response', returning: Array<{ __typename?: 'attendance', id: string }> } | null };

export type UpdateAttendanceMutationVariables = Exact<{
  updates: Array<Attendance_Updates> | Attendance_Updates;
}>;


export type UpdateAttendanceMutation = { __typename?: 'mutation_root', update_attendance_many?: Array<{ __typename?: 'attendance_mutation_response', returning: Array<{ __typename?: 'attendance', id: string }> } | null> | null };

export type UpdateAttendanceByIdMutationVariables = Exact<{
  id: Scalars['String'];
  _set: Attendance_Set_Input;
}>;


export type UpdateAttendanceByIdMutation = { __typename?: 'mutation_root', update_attendance_by_pk?: { __typename?: 'attendance', id: string } | null };

export type CreateBonusdeductionsMutationVariables = Exact<{
  object: Bonusdeductions_Insert_Input;
}>;


export type CreateBonusdeductionsMutation = { __typename?: 'mutation_root', insert_bonusdeductions_one?: { __typename?: 'bonusdeductions', id: string, employee_id: string, month: string, amount?: any | null, bonusdeductiontype_id: string, department_id: string } | null };

export type DeleteBonusdeductionsMutationVariables = Exact<{
  id: Scalars['String'];
}>;


export type DeleteBonusdeductionsMutation = { __typename?: 'mutation_root', delete_bonusdeductions_by_pk?: { __typename?: 'bonusdeductions', department_id: string, employee_id: string, id: string, month: string, amount?: any | null, bonusdeductiontype_id: string } | null };

export type InsertBrandsEmployeesOneMutationVariables = Exact<{
  brand_id?: InputMaybe<Scalars['String']>;
  employee_id?: InputMaybe<Scalars['String']>;
}>;


export type InsertBrandsEmployeesOneMutation = { __typename?: 'mutation_root', insert_brands_employees_one?: { __typename?: 'brands_employees', brand_id: string, employee_id: string } | null };

export type DeleteBrandsEmployeesByPkMutationVariables = Exact<{
  brand_id: Scalars['String'];
  employee_id: Scalars['String'];
}>;


export type DeleteBrandsEmployeesByPkMutation = { __typename?: 'mutation_root', delete_brands_employees_by_pk?: { __typename?: 'brands_employees', brand_id: string, employee_id: string } | null };

export type UpdateDepartmentMutationVariables = Exact<{
  _set?: InputMaybe<Departments_Set_Input>;
  where: Departments_Bool_Exp;
}>;


export type UpdateDepartmentMutation = { __typename?: 'mutation_root', update_departments?: { __typename?: 'departments_mutation_response', returning: Array<{ __typename?: 'departments', id: string }> } | null };

export type InsertDepartmentsEmployeesMutationVariables = Exact<{
  employee_id?: InputMaybe<Scalars['String']>;
  department_id?: InputMaybe<Scalars['String']>;
}>;


export type InsertDepartmentsEmployeesMutation = { __typename?: 'mutation_root', insert_departments_employees?: { __typename?: 'departments_employees_mutation_response', returning: Array<{ __typename?: 'departments_employees', employee: { __typename?: 'employees', id: string, avatar?: string | null, name: string } }> } | null };

export type DeleteDepartmentsEmployeesByPkMutationVariables = Exact<{
  department_id: Scalars['String'];
  employee_id: Scalars['String'];
}>;


export type DeleteDepartmentsEmployeesByPkMutation = { __typename?: 'mutation_root', delete_departments_employees_by_pk?: { __typename?: 'departments_employees', department_id: string, employee_id: string } | null };

export type CreateEmployeesMutationVariables = Exact<{
  id?: InputMaybe<Scalars['String']>;
  mobile?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  hire_date?: InputMaybe<Scalars['date']>;
  department_id?: InputMaybe<Scalars['String']>;
  status?: InputMaybe<Scalars['smallint']>;
  manager_id?: InputMaybe<Scalars['String']>;
}>;


export type CreateEmployeesMutation = { __typename?: 'mutation_root', insert_employees?: { __typename?: 'employees_mutation_response', returning: Array<{ __typename?: 'employees', id: string, name: string, mobile?: string | null, department: { __typename?: 'departments', id: string, name?: string | null } }> } | null };

export type UpdateEmployeeMutationVariables = Exact<{
  _set?: InputMaybe<Employees_Set_Input>;
  where: Employees_Bool_Exp;
}>;


export type UpdateEmployeeMutation = { __typename?: 'mutation_root', update_employees?: { __typename?: 'employees_mutation_response', returning: Array<{ __typename?: 'employees', id: string }> } | null };

export type DeleteEmployeeMutationVariables = Exact<{
  where: Employees_Bool_Exp;
}>;


export type DeleteEmployeeMutation = { __typename?: 'mutation_root', delete_employees?: { __typename?: 'employees_mutation_response', returning: Array<{ __typename?: 'employees', id: string }> } | null };

export type DeleteEmployeeAttachmentMutationVariables = Exact<{
  where: Employee_Attachments_Bool_Exp;
}>;


export type DeleteEmployeeAttachmentMutation = { __typename?: 'mutation_root', delete_employee_attachments?: { __typename?: 'employee_attachments_mutation_response', returning: Array<{ __typename?: 'employee_attachments', id: string }> } | null };

export type CreateLeaveTypesMutationVariables = Exact<{
  object: Leave_Types_Insert_Input;
}>;


export type CreateLeaveTypesMutation = { __typename?: 'mutation_root', insert_leave_types_one?: { __typename?: 'leave_types', id: string } | null };

export type DeleteRoleMutationVariables = Exact<{
  where: Roles_Bool_Exp;
}>;


export type DeleteRoleMutation = { __typename?: 'mutation_root', delete_roles?: { __typename?: 'roles_mutation_response', returning: Array<{ __typename?: 'roles', id: string }> } | null };

export type CreateRoleMutationVariables = Exact<{
  objects: Array<Roles_Insert_Input> | Roles_Insert_Input;
}>;


export type CreateRoleMutation = { __typename?: 'mutation_root', insert_roles?: { __typename?: 'roles_mutation_response', returning: Array<{ __typename?: 'roles', id: string }> } | null };

export type UpdateRoleMutationVariables = Exact<{
  where: Roles_Bool_Exp;
  _set: Roles_Set_Input;
}>;


export type UpdateRoleMutation = { __typename?: 'mutation_root', update_roles?: { __typename?: 'roles_mutation_response', returning: Array<{ __typename?: 'roles', id: string }> } | null };

export type CreateEmployeesRoleMutationVariables = Exact<{
  objects: Array<Employees_Roles_Insert_Input> | Employees_Roles_Insert_Input;
}>;


export type CreateEmployeesRoleMutation = { __typename?: 'mutation_root', insert_employees_roles?: { __typename?: 'employees_roles_mutation_response', returning: Array<{ __typename?: 'employees_roles', employee_id: string, role_id: string }> } | null };

export type DeleteEmployeesRoleMutationVariables = Exact<{
  where: Employees_Roles_Bool_Exp;
}>;


export type DeleteEmployeesRoleMutation = { __typename?: 'mutation_root', delete_employees_roles?: { __typename?: 'employees_roles_mutation_response', returning: Array<{ __typename?: 'employees_roles', employee_id: string, role_id: string }> } | null };

export type DeleteRoleNavMutationVariables = Exact<{
  where: Role_Nav_Sm_Categories_Bool_Exp;
}>;


export type DeleteRoleNavMutation = { __typename?: 'mutation_root', delete_role_nav_sm_categories?: { __typename?: 'role_nav_sm_categories_mutation_response', returning: Array<{ __typename?: 'role_nav_sm_categories', role_id: string }> } | null };

export type CreateRoleNavMutationVariables = Exact<{
  objects: Array<Role_Nav_Sm_Categories_Insert_Input> | Role_Nav_Sm_Categories_Insert_Input;
}>;


export type CreateRoleNavMutation = { __typename?: 'mutation_root', insert_role_nav_sm_categories?: { __typename?: 'role_nav_sm_categories_mutation_response', returning: Array<{ __typename?: 'role_nav_sm_categories', role_id: string }> } | null };

export type InsertServiceEntitlementOneMutationVariables = Exact<{
  object: Service_Entitlement_Insert_Input;
}>;


export type InsertServiceEntitlementOneMutation = { __typename?: 'mutation_root', insert_service_entitlement_one?: { __typename?: 'service_entitlement', id: string } | null };

export type UpdateServiceEntitlementMutationVariables = Exact<{
  id: Scalars['String'];
  _set: Service_Entitlement_Set_Input;
}>;


export type UpdateServiceEntitlementMutation = { __typename?: 'mutation_root', update_service_entitlement_by_pk?: { __typename?: 'service_entitlement', id: string } | null };

export type DeleteServiceEntitlementMutationVariables = Exact<{
  id: Scalars['String'];
}>;


export type DeleteServiceEntitlementMutation = { __typename?: 'mutation_root', delete_service_entitlement_by_pk?: { __typename?: 'service_entitlement', id: string } | null };

export type CreateShiftMutationVariables = Exact<{
  object: Shift_Lists_Insert_Input;
}>;


export type CreateShiftMutation = { __typename?: 'mutation_root', insert_shift_lists_one?: { __typename?: 'shift_lists', id: string } | null };

export type UpdateShiftByIdMutationVariables = Exact<{
  id: Scalars['String'];
  _set: Shift_Lists_Set_Input;
}>;


export type UpdateShiftByIdMutation = { __typename?: 'mutation_root', update_shift_lists_by_pk?: { __typename?: 'shift_lists', id: string } | null };

export type DeleteShiftMutationVariables = Exact<{
  id: Scalars['String'];
}>;


export type DeleteShiftMutation = { __typename?: 'mutation_root', delete_shift_lists_by_pk?: { __typename?: 'shift_lists', id: string } | null };

export type DeleteStoreEmployeeMutationVariables = Exact<{
  where: Store_Employee_Bool_Exp;
}>;


export type DeleteStoreEmployeeMutation = { __typename?: 'mutation_root', delete_store_employee?: { __typename?: 'store_employee_mutation_response', returning: Array<{ __typename?: 'store_employee', store_id: string, employee: { __typename?: 'employees', name: string, id: string } }> } | null };

export type CreateStoreEmployeeMutationVariables = Exact<{
  objects: Array<Store_Employee_Insert_Input> | Store_Employee_Insert_Input;
}>;


export type CreateStoreEmployeeMutation = { __typename?: 'mutation_root', insert_store_employee?: { __typename?: 'store_employee_mutation_response', returning: Array<{ __typename?: 'store_employee', employee_id: string, store_id: string }> } | null };

export type InsertStoreEmployeeMutationVariables = Exact<{
  objects: Array<Store_Employee_Insert_Input> | Store_Employee_Insert_Input;
}>;


export type InsertStoreEmployeeMutation = { __typename?: 'mutation_root', insert_store_employee?: { __typename?: 'store_employee_mutation_response', affected_rows: number, returning: Array<{ __typename?: 'store_employee', employee_id: string, store_id: string }> } | null };

export type AttdanceGroupsQueryVariables = Exact<{
  limit: Scalars['Int'];
  offset: Scalars['Int'];
  where?: InputMaybe<Attendance_Groups_Bool_Exp>;
  where1?: InputMaybe<Employees_Bool_Exp>;
}>;


export type AttdanceGroupsQuery = { __typename?: 'query_root', attendance_groups: Array<{ __typename?: 'attendance_groups', id: string, name?: string | null, group_type?: number | null, departments: Array<{ __typename?: 'departments', id: string, name?: string | null, employees: Array<{ __typename?: 'employees', id: string, name: string }>, employees_aggregate: { __typename?: 'employees_aggregate', aggregate?: { __typename?: 'employees_aggregate_fields', count: number } | null } }>, attendance_group_subleaders: Array<{ __typename?: 'attendance_group_subleaders', employee: { __typename?: 'employees', avatar?: string | null, id: string, name: string, department: { __typename?: 'departments', id: string, name?: string | null } } }>, attendance_group_leaders: Array<{ __typename?: 'attendance_group_leaders', employee: { __typename?: 'employees', avatar?: string | null, id: string, name: string, department: { __typename?: 'departments', id: string, name?: string | null } } }>, attendance_group_shifts: Array<{ __typename?: 'attendance_group_shifts', shift_list: { __typename?: 'shift_lists', id: string, on_time?: any | null, off_time?: any | null, shift_name?: string | null } }>, attendance_locations: Array<{ __typename?: 'attendance_locations', id: string, longitude?: any | null, latitude?: any | null, address?: string | null, gps_range?: number | null, name?: string | null }> }>, attendance_groups_aggregate: { __typename?: 'attendance_groups_aggregate', aggregate?: { __typename?: 'attendance_groups_aggregate_fields', count: number } | null } };

export type AttendanceGroupByIdQueryVariables = Exact<{
  id: Scalars['String'];
}>;


export type AttendanceGroupByIdQuery = { __typename?: 'query_root', attendance_groups_by_pk?: { __typename?: 'attendance_groups', id: string, name?: string | null, group_type?: number | null, departments: Array<{ __typename?: 'departments', id: string, name?: string | null, employees_aggregate: { __typename?: 'employees_aggregate', aggregate?: { __typename?: 'employees_aggregate_fields', count: number } | null } }>, attendance_group_subleaders: Array<{ __typename?: 'attendance_group_subleaders', employee: { __typename?: 'employees', avatar?: string | null, id: string, name: string, department: { __typename?: 'departments', id: string, name?: string | null } } }>, attendance_group_leaders: Array<{ __typename?: 'attendance_group_leaders', employee: { __typename?: 'employees', avatar?: string | null, id: string, name: string, department: { __typename?: 'departments', id: string, name?: string | null } } }>, attendance_group_shifts: Array<{ __typename?: 'attendance_group_shifts', shift_list: { __typename?: 'shift_lists', id: string, on_time?: any | null, off_time?: any | null, shift_name?: string | null } }>, attendance_locations: Array<{ __typename?: 'attendance_locations', id: string, longitude?: any | null, latitude?: any | null, address?: string | null, gps_range?: number | null, name?: string | null }> } | null };

export type AttendanceGroupShiftsQueryVariables = Exact<{
  id: Scalars['String'];
  where: Attendance_Bool_Exp;
}>;


export type AttendanceGroupShiftsQuery = { __typename?: 'query_root', attendance_groups_by_pk?: { __typename?: 'attendance_groups', name?: string | null, id: string, departments: Array<{ __typename?: 'departments', employees: Array<{ __typename?: 'employees', avatar?: string | null, id: string, name: string, status?: any | null, department_id: string, attendances: Array<{ __typename?: 'attendance', clock_in_result?: number | null, clock_in_time?: any | null, clock_out_location_id?: string | null, clock_out_result?: number | null, clock_in_location_id?: string | null, clock_out_time?: any | null, date: any, id: string, shift_id: string, shift_list: { __typename?: 'shift_lists', shift_name?: string | null, on_time?: any | null, off_time?: any | null, id: string } }>, attendances_aggregate: { __typename?: 'attendance_aggregate', aggregate?: { __typename?: 'attendance_aggregate_fields', count: number } | null } }> }>, attendance_group_shifts: Array<{ __typename?: 'attendance_group_shifts', shift_list: { __typename?: 'shift_lists', id: string, off_time?: any | null, on_time?: any | null, shift_name?: string | null } }> } | null };

export type AttendnceListQueryVariables = Exact<{
  where?: InputMaybe<Attendance_Bool_Exp>;
  limit: Scalars['Int'];
  offset?: InputMaybe<Scalars['Int']>;
}>;


export type AttendnceListQuery = { __typename?: 'query_root', attendance_aggregate: { __typename?: 'attendance_aggregate', aggregate?: { __typename?: 'attendance_aggregate_fields', count: number } | null }, attendance: Array<{ __typename?: 'attendance', id: string, clock_in_time?: any | null, clockInResult?: number | null, clock_in_location_id?: string | null, clock_out_location_id?: string | null, clockOutResult?: number | null, clock_out_time?: any | null, date: any, actual_length_hour?: number | null, department: { __typename?: 'departments', id: string, name?: string | null }, employee: { __typename?: 'employees', id: string, name: string, basic_salary?: any | null, salary_type?: string | null }, attendanceLocationByClockInLocationId?: { __typename?: 'attendance_locations', address?: string | null } | null, attendanceLocationByClockOutLocationId?: { __typename?: 'attendance_locations', address?: string | null } | null, shift_list: { __typename?: 'shift_lists', early_minutes_as_early?: number | null, shift_name?: string | null, early_minutes_as_lack?: number | null, late_minutes_as_lack?: number | null, late_minutes_as_late?: number | null, off_time?: any | null, on_time?: any | null } }> };

export type GetBonusDeductionsQueryVariables = Exact<{
  where?: InputMaybe<Bonusdeductions_Bool_Exp>;
}>;


export type GetBonusDeductionsQuery = { __typename?: 'query_root', bonusdeductions: Array<{ __typename?: 'bonusdeductions', id: string, amount?: any | null, bonusdeductiontype: { __typename?: 'bonusdeductiontypes', id: string, is_bonus: boolean, name: string }, department: { __typename?: 'departments', id: string, name?: string | null } }> };

export type GetBonusDeductionTypesQueryVariables = Exact<{ [key: string]: never; }>;


export type GetBonusDeductionTypesQuery = { __typename?: 'query_root', bonusdeductiontypes: Array<{ __typename?: 'bonusdeductiontypes', id: string, is_bonus: boolean, name: string }> };

export type BrandsQueryVariables = Exact<{
  where?: InputMaybe<Brands_Bool_Exp>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
}>;


export type BrandsQuery = { __typename?: 'query_root', brands: Array<{ __typename?: 'brands', id: string, name: string, stores: Array<{ __typename?: 'stores', id: string, name?: string | null, brand_id: string }> }>, brands_aggregate: { __typename?: 'brands_aggregate', aggregate?: { __typename?: 'brands_aggregate_fields', count: number } | null } };

export type BrandsStoresQueryVariables = Exact<{
  brandFilter?: InputMaybe<Brands_Bool_Exp>;
  storeFilter?: InputMaybe<Stores_Bool_Exp>;
}>;


export type BrandsStoresQuery = { __typename?: 'query_root', brands: Array<{ __typename?: 'brands', id: string, name: string, stores: Array<{ __typename?: 'stores', id: string, name?: string | null }> }> };

export type ViewDailyItemsSoldQueryVariables = Exact<{
  offset?: InputMaybe<Scalars['Int']>;
  limit?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<View_Daily_Items_Sold_Bool_Exp>;
}>;


export type ViewDailyItemsSoldQuery = { __typename?: 'query_root', view_daily_items_sold: Array<{ __typename?: 'view_daily_items_sold', item_id?: string | null, settle_biz_date?: any | null, total_qty?: any | null, total_last_total?: any | null, total_income_money?: any | null, store?: { __typename?: 'stores', id: string, name?: string | null } | null, fooditem?: { __typename?: 'fooditems', item_id: string, item_name?: string | null } | null }>, view_daily_items_sold_aggregate: { __typename?: 'view_daily_items_sold_aggregate', aggregate?: { __typename?: 'view_daily_items_sold_aggregate_fields', count: number } | null } };

export type DepartmentsEmployeesQueryVariables = Exact<{
  where?: InputMaybe<Departments_Employees_Bool_Exp>;
}>;


export type DepartmentsEmployeesQuery = { __typename?: 'query_root', departments_employees: Array<{ __typename?: 'departments_employees', employee: { __typename?: 'employees', id: string, name: string } }> };

export type DepartmentsQueryVariables = Exact<{
  limit: Scalars['Int'];
  offset: Scalars['Int'];
  where?: InputMaybe<Departments_Bool_Exp>;
}>;


export type DepartmentsQuery = { __typename?: 'query_root', departments_aggregate: { __typename?: 'departments_aggregate', aggregate?: { __typename?: 'departments_aggregate_fields', count: number } | null }, departments: Array<{ __typename?: 'departments', id: string, name?: string | null, parent_department_id?: string | null, employees_aggregate: { __typename?: 'employees_aggregate', aggregate?: { __typename?: 'employees_aggregate_fields', count: number } | null } }> };

export type DsStoreBillsQueryVariables = Exact<{
  where?: InputMaybe<Dsstorebills_Bool_Exp>;
}>;


export type DsStoreBillsQuery = { __typename?: 'query_root', dsstorebills: Array<{ __typename?: 'dsstorebills', ArriveMoney?: any | null, InBusAmount?: any | null, ItemSpec?: string | null, OtherSideName?: string | null, supplyitem?: { __typename?: 'supplyitems', itemName?: string | null, reportUnit?: string | null, mainUnit?: string | null, itemTypeName?: string | null } | null }> };

export type EmployeeInsuranceQueryVariables = Exact<{
  where?: InputMaybe<Employee_Insurance_Bool_Exp>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
}>;


export type EmployeeInsuranceQuery = { __typename?: 'query_root', employee_insurance: Array<{ __typename?: 'employee_insurance', corp_heating?: any | null, corp_major_medical?: any | null, corp_housing_fund?: any | null, corp_maternity_insurance?: any | null, corp_medical_insurance?: any | null, corp_pay?: any | null, corp_retirement_insurance?: any | null, corp_unemployment_insurance?: any | null, corp_work_injury?: any | null, id: string, heating_base?: any | null, medical_base?: any | null, month?: any | null, payment_start_date?: any | null, pension_base?: any | null, personal_fund_balance?: any | null, personal_housing_fund?: any | null, personal_major_medical?: any | null, personal_medical_insurance?: any | null, personal_pay?: any | null, personal_pension_insurance?: any | null, personal_unemployment_insurance?: any | null, unemployment_base?: any | null, work_injury_base?: any | null, employee: { __typename?: 'employees', name: string, avatar?: string | null, id: string, status?: any | null, department: { __typename?: 'departments', name?: string | null } } }>, employee_insurance_aggregate: { __typename?: 'employee_insurance_aggregate', aggregate?: { __typename?: 'employee_insurance_aggregate_fields', count: number } | null } };

export type EmployessQueryVariables = Exact<{
  offset: Scalars['Int'];
  limit: Scalars['Int'];
  where?: InputMaybe<Employees_Bool_Exp>;
}>;


export type EmployessQuery = { __typename?: 'query_root', employees_aggregate: { __typename?: 'employees_aggregate', aggregate?: { __typename?: 'employees_aggregate_fields', count: number } | null }, employees: Array<{ __typename?: 'employees', id: string, id_number?: string | null, status?: any | null, employee_form_status?: number | null, name: string, mobile?: string | null, avatar?: string | null, user_id?: string | null, hire_date?: any | null, job_title?: string | null, last_day?: any | null, departure_type?: number | null, birthday?: any | null, employee_type?: any | null, department_id: string, gender_id?: any | null, marital_status?: any | null, medical_insurance?: number | null, ethnicity?: number | null, application?: number | null, application_status?: number | null, native_region?: any | null, primary_emergency_contact?: any | null, probation_months?: number | null, provident_fund_account?: string | null, social_security_number?: number | null, bank_name?: string | null, bank_account_number?: string | null, salary_type?: string | null, salary_type_id?: string | null, basic_salary?: any | null, basic_salary_monthly?: any | null, manager_id?: string | null, work_age_type?: string | null, family_address?: string | null, hukou_type?: number | null, hukou_location?: string | null, actual_conversion_time?: any | null, actual_overboard_time?: any | null, overboard_note?: string | null, department: { __typename?: 'departments', name?: string | null, id: string }, salaryType?: { __typename?: 'salary_types', id: string, name: string } | null, store_employees: Array<{ __typename?: 'store_employee', store: { __typename?: 'stores', id: string, name?: string | null } }>, attendances: Array<{ __typename?: 'attendance', clockInResult?: number | null, clock_in_time?: any | null, clockOutResult?: number | null, clock_out_time?: any | null, date: any, shift_id: string, id: string, scheduled_length_day?: number | null, actual_length_hour?: number | null, actual_length_day?: number | null, shift_list: { __typename?: 'shift_lists', early_minutes_as_early?: number | null, early_minutes_as_lack?: number | null, late_minutes_as_lack?: number | null, late_minutes_as_late?: number | null, off_time?: any | null, on_time?: any | null } }> }> };

export type EmployeesStatusCountQueryVariables = Exact<{
  where?: InputMaybe<Employees_Bool_Exp>;
  todayDate?: InputMaybe<Scalars['date']>;
  thisWeekDateStart?: InputMaybe<Scalars['date']>;
  thisWeekDateEnd?: InputMaybe<Scalars['date']>;
  thisMonthDateStart?: InputMaybe<Scalars['date']>;
  thisMonthDateEnd?: InputMaybe<Scalars['date']>;
  nextMonthDateStart?: InputMaybe<Scalars['date']>;
  nextMonthDateEnd?: InputMaybe<Scalars['date']>;
  lastMonthDateStart?: InputMaybe<Scalars['date']>;
  lastMonthDateEnd?: InputMaybe<Scalars['date']>;
  todayDateMMDD?: InputMaybe<Scalars['String']>;
  thisWeekDateStartMMDD?: InputMaybe<Scalars['String']>;
  thisWeekDateEndMMDD?: InputMaybe<Scalars['String']>;
  thisMonthDateStartMMDD?: InputMaybe<Scalars['String']>;
  thisMonthDateEndMMDD?: InputMaybe<Scalars['String']>;
  nextMonthDateStartMMDD?: InputMaybe<Scalars['String']>;
  nextMonthDateEndMMDD?: InputMaybe<Scalars['String']>;
  lastMonthDateStartMMDD?: InputMaybe<Scalars['String']>;
  lastMonthDateEndMMDD?: InputMaybe<Scalars['String']>;
}>;


export type EmployeesStatusCountQuery = { __typename?: 'query_root', isEmployedCount: { __typename?: 'employees_aggregate', aggregate?: { __typename?: 'employees_aggregate_fields', count: number } | null }, informationNotFilled: { __typename?: 'employees_aggregate', aggregate?: { __typename?: 'employees_aggregate_fields', count: number } | null }, feishuIsReviewing: { __typename?: 'employees_aggregate', aggregate?: { __typename?: 'employees_aggregate_fields', count: number } | null }, feishuReviewRejected: { __typename?: 'employees_aggregate', aggregate?: { __typename?: 'employees_aggregate_fields', count: number } | null }, regularEmployeeCount: { __typename?: 'employees_aggregate', aggregate?: { __typename?: 'employees_aggregate_fields', count: number } | null }, internEmployeeCount: { __typename?: 'employees_aggregate', aggregate?: { __typename?: 'employees_aggregate_fields', count: number } | null }, outsourcedEmployeeCount: { __typename?: 'employees_aggregate', aggregate?: { __typename?: 'employees_aggregate_fields', count: number } | null }, trialEmployeeCount: { __typename?: 'employees_aggregate', aggregate?: { __typename?: 'employees_aggregate_fields', count: number } | null }, awaitUnemployCount: { __typename?: 'employees_aggregate', aggregate?: { __typename?: 'employees_aggregate_fields', count: number } | null }, notEmployedCount: { __typename?: 'employees_aggregate', aggregate?: { __typename?: 'employees_aggregate_fields', count: number } | null }, awaitOnboardingCount: { __typename?: 'employees_aggregate', aggregate?: { __typename?: 'employees_aggregate_fields', count: number } | null }, awaitRegularizedCount: { __typename?: 'employees_aggregate', aggregate?: { __typename?: 'employees_aggregate_fields', count: number } | null }, overdueRegularizedCount: { __typename?: 'employees_aggregate', aggregate?: { __typename?: 'employees_aggregate_fields', count: number } | null }, thisMonthAwaitRegularizedCount: { __typename?: 'employees_aggregate', aggregate?: { __typename?: 'employees_aggregate_fields', count: number } | null }, nextMonthAwaitRegularizedCount: { __typename?: 'employees_aggregate', aggregate?: { __typename?: 'employees_aggregate_fields', count: number } | null }, todayHireDateCount: { __typename?: 'employees_aggregate', aggregate?: { __typename?: 'employees_aggregate_fields', count: number } | null }, thisWeekHireDateCount: { __typename?: 'employees_aggregate', aggregate?: { __typename?: 'employees_aggregate_fields', count: number } | null }, thisMonthHireDateCount: { __typename?: 'employees_aggregate', aggregate?: { __typename?: 'employees_aggregate_fields', count: number } | null }, nextMonthHireDateCount: { __typename?: 'employees_aggregate', aggregate?: { __typename?: 'employees_aggregate_fields', count: number } | null }, lastMonthHireDateCount: { __typename?: 'employees_aggregate', aggregate?: { __typename?: 'employees_aggregate_fields', count: number } | null }, todayBirthdayCount: { __typename?: 'employees_aggregate', aggregate?: { __typename?: 'employees_aggregate_fields', count: number } | null }, thisWeekBirthdayCount: { __typename?: 'employees_aggregate', aggregate?: { __typename?: 'employees_aggregate_fields', count: number } | null }, thisMonthBirthdayCount: { __typename?: 'employees_aggregate', aggregate?: { __typename?: 'employees_aggregate_fields', count: number } | null }, nextMonthBirthdayCount: { __typename?: 'employees_aggregate', aggregate?: { __typename?: 'employees_aggregate_fields', count: number } | null }, lastMonthBirthdayCount: { __typename?: 'employees_aggregate', aggregate?: { __typename?: 'employees_aggregate_fields', count: number } | null } };

export type EmployeeAttachmentQueryVariables = Exact<{
  where?: InputMaybe<Employee_Attachments_Bool_Exp>;
}>;


export type EmployeeAttachmentQuery = { __typename?: 'query_root', employee_attachments: Array<{ __typename?: 'employee_attachments', employee_id?: string | null, file_name?: string | null, id: string, kind?: string | null, path?: string | null }> };

export type EmployeesByPkQueryVariables = Exact<{
  id: Scalars['String'];
}>;


export type EmployeesByPkQuery = { __typename?: 'query_root', employees_by_pk?: { __typename?: 'employees', id: string, id_number?: string | null, status?: any | null, employee_form_status?: number | null, name: string, mobile?: string | null, avatar?: string | null, hire_date?: any | null, job_title?: string | null, last_day?: any | null, departure_type?: number | null, birthday?: any | null, employee_type?: any | null, department_id: string, gender_id?: any | null, marital_status?: any | null, medical_insurance?: number | null, ethnicity?: number | null, application?: number | null, application_status?: number | null, native_region?: any | null, primary_emergency_contact?: any | null, probation_months?: number | null, provident_fund_account?: string | null, social_security_number?: number | null, bank_name?: string | null, bank_account_number?: string | null, salary_type_id?: string | null, basic_salary?: any | null, basic_salary_monthly?: any | null, manager_id?: string | null, work_age_type?: string | null, family_address?: string | null, hukou_type?: number | null, hukou_location?: string | null, actual_conversion_time?: any | null, actual_overboard_time?: any | null, overboard_note?: string | null, department: { __typename?: 'departments', name?: string | null, id: string }, employee_attachments: Array<{ __typename?: 'employee_attachments', id: string, kind?: string | null, path?: string | null, file_name?: string | null }> } | null };

export type EmployeeSalaryMonthlyQueryVariables = Exact<{
  offset?: InputMaybe<Scalars['Int']>;
  limit?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<Employees_Bool_Exp>;
  where1?: InputMaybe<Attendance_Bool_Exp>;
}>;


export type EmployeeSalaryMonthlyQuery = { __typename?: 'query_root', employees: Array<{ __typename?: 'employees', id: string, name: string, id_number?: string | null, job_title?: string | null, status?: any | null, avatar?: string | null, salary_type?: string | null, department: { __typename?: 'departments', id: string, name?: string | null }, attendances_aggregate: { __typename?: 'attendance_aggregate', aggregate?: { __typename?: 'attendance_aggregate_fields', count: number, sum?: { __typename?: 'attendance_sum_fields', actual_length_hour?: number | null, actual_length_day?: number | null, scheduled_length_day?: number | null, scheduled_length_hour?: number | null } | null } | null } }>, employees_aggregate: { __typename?: 'employees_aggregate', aggregate?: { __typename?: 'employees_aggregate_fields', count: number } | null } };

export type EmployeeByPkAttendancesQueryVariables = Exact<{
  id: Scalars['String'];
  where?: InputMaybe<Attendance_Bool_Exp>;
}>;


export type EmployeeByPkAttendancesQuery = { __typename?: 'query_root', employees_by_pk?: { __typename?: 'employees', id: string, department_id: string, name: string, status?: any | null, salary_type?: string | null, basic_salary?: any | null, basic_salary_monthly?: any | null, attendances: Array<{ __typename?: 'attendance', id: string, date: any, clock_in_time?: any | null, clock_in_result?: number | null, clock_out_time?: any | null, clock_out_result?: number | null, clockInResult?: number | null, clockOutResult?: number | null, department: { __typename?: 'departments', id: string, name?: string | null }, attendance_location?: { __typename?: 'attendance_locations', name?: string | null } | null, shift_list: { __typename?: 'shift_lists', shift_name?: string | null, on_time?: any | null, off_time?: any | null } }> } | null };

export type FoodItemsByPkQueryVariables = Exact<{
  item_id: Scalars['String'];
}>;


export type FoodItemsByPkQuery = { __typename?: 'query_root', fooditems_by_pk?: { __typename?: 'fooditems', item_id: string, item_name?: string | null, std_price?: any | null, big_pic_url?: string | null, brand?: { __typename?: 'brands', name: string } | null, ingredients: Array<{ __typename?: 'ingredients', qty?: any | null, supplyitem?: { __typename?: 'supplyitems', itemId: string, itemName?: string | null, mainUnit?: string | null, itemImage?: string | null, netRate?: any | null, dsstorebills: Array<{ __typename?: 'dsstorebills', ArriveMoney?: any | null, InBusAmount?: any | null }> } | null }> } | null };

export type GetLeaveTypesQueryVariables = Exact<{ [key: string]: never; }>;


export type GetLeaveTypesQuery = { __typename?: 'query_root', leave_types: Array<{ __typename?: 'leave_types', id: string, name: string, service_entitlements: Array<{ __typename?: 'service_entitlement', id: string, years_of_service: number, max_days: any, salary_type?: { __typename?: 'salary_types', id: string, name: string } | null }> }> };

export type GetLeaveTypesByPkQueryVariables = Exact<{
  id: Scalars['String'];
}>;


export type GetLeaveTypesByPkQuery = { __typename?: 'query_root', leave_types_by_pk?: { __typename?: 'leave_types', id: string, name: string } | null };

export type GetMonthlySalaryQueryVariables = Exact<{
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<Monthlysalary_Bool_Exp>;
  where1?: InputMaybe<Bonusdeductions_Bool_Exp>;
  where2?: InputMaybe<Insurance_Funds_Bool_Exp>;
}>;


export type GetMonthlySalaryQuery = { __typename?: 'query_root', monthlysalary: Array<{ __typename?: 'monthlysalary', employee_id: string, attendance_department_id: string, employee_department_id?: string | null, work_age?: number | null, work_age_type?: string | null, basic_salary?: any | null, basic_salary_base?: any | null, basic_salary_monthly?: any | null, insurance_subsidy?: any | null, overtime_pay?: any | null, position_pay?: any | null, work_age_bonus?: number | null, bonus_deduction?: any | null, personal_insurance_funds?: any | null, corp_insurance_funds?: any | null, net_salary?: any | null, corp_salary_cost?: any | null, gross_salary?: any | null, salary_type?: string | null, total_length_day?: number | null, total_length_hour?: number | null, employee_confirm: boolean, attendance_department: { __typename?: 'departments', name?: string | null }, employee_department?: { __typename?: 'departments', name?: string | null } | null, employee: { __typename?: 'employees', avatar?: string | null, name: string, status?: any | null, job_title?: string | null, birthday?: any | null, id_number?: string | null, bank_name?: string | null, bank_account_number?: string | null, hire_date?: any | null, basic_salary?: any | null, bonusdeductions: Array<{ __typename?: 'bonusdeductions', amount?: any | null, department_id: string, bonusdeductiontype: { __typename?: 'bonusdeductiontypes', name: string, is_bonus: boolean } }>, insurance_funds: Array<{ __typename?: 'insurance_funds', amount: any, department_id: string, insurance_fund_type: { __typename?: 'insurance_fund_types', name: string, is_personal: boolean } }>, department: { __typename?: 'departments', id: string, name?: string | null } } }>, monthlysalary_aggregate: { __typename?: 'monthlysalary_aggregate', aggregate?: { __typename?: 'monthlysalary_aggregate_fields', count: number, sum?: { __typename?: 'monthlysalary_sum_fields', corp_salary_cost?: any | null } | null } | null } };

export type RoleListsQueryVariables = Exact<{
  where?: InputMaybe<Roles_Bool_Exp>;
}>;


export type RoleListsQuery = { __typename?: 'query_root', roles: Array<{ __typename?: 'roles', id: string, name?: string | null, employees_roles: Array<{ __typename?: 'employees_roles', employee: { __typename?: 'employees', avatar?: string | null, id: string, name: string } }>, role_nav_sm_categories: Array<{ __typename?: 'role_nav_sm_categories', nav_sm_category: { __typename?: 'nav_sm_categories', id: number, name?: string | null } }>, role_scopes: Array<{ __typename?: 'role_scope', scope?: { __typename?: 'scopes', id: string, name?: string | null } | null }> }>, roles_aggregate: { __typename?: 'roles_aggregate', aggregate?: { __typename?: 'roles_aggregate_fields', count: number } | null } };

export type NavTreeListQueryVariables = Exact<{ [key: string]: never; }>;


export type NavTreeListQuery = { __typename?: 'query_root', nav_xl_categories: Array<{ __typename?: 'nav_xl_categories', id: number, name?: string | null, nav_bg_categories: Array<{ __typename?: 'nav_bg_categories', id: number, name?: string | null, nav_sm_categories: Array<{ __typename?: 'nav_sm_categories', id: number, name?: string | null, side_nav_visible?: any | null }> }> }> };

export type RolesByIdQueryVariables = Exact<{
  id: Scalars['String'];
  where?: InputMaybe<Employees_Roles_Bool_Exp>;
}>;


export type RolesByIdQuery = { __typename?: 'query_root', roles_by_pk?: { __typename?: 'roles', id: string, name?: string | null, employees_roles: Array<{ __typename?: 'employees_roles', employee: { __typename?: 'employees', avatar?: string | null, id: string, name: string, mobile?: string | null, department: { __typename?: 'departments', name?: string | null } } }>, role_nav_sm_categories: Array<{ __typename?: 'role_nav_sm_categories', nav_sm_category: { __typename?: 'nav_sm_categories', id: number, name?: string | null } }>, role_scopes: Array<{ __typename?: 'role_scope', scope?: { __typename?: 'scopes', id: string, name?: string | null } | null }> } | null };

export type GetSalaryTypesQueryVariables = Exact<{
  where?: InputMaybe<Service_Entitlement_Bool_Exp>;
}>;


export type GetSalaryTypesQuery = { __typename?: 'query_root', salary_types: Array<{ __typename?: 'salary_types', id: string, name: string, service_entitlements: Array<{ __typename?: 'service_entitlement', id: string, max_days: any, years_of_service: number }> }> };

export type GetSalaryTypesByPkQueryVariables = Exact<{
  id: Scalars['String'];
}>;


export type GetSalaryTypesByPkQuery = { __typename?: 'query_root', salary_types_by_pk?: { __typename?: 'salary_types', id: string, name: string } | null };

export type ShiftsListQueryVariables = Exact<{
  where?: InputMaybe<Shift_Lists_Bool_Exp>;
  limit: Scalars['Int'];
  offset: Scalars['Int'];
}>;


export type ShiftsListQuery = { __typename?: 'query_root', shift_lists: Array<{ __typename?: 'shift_lists', id: string, off_time?: any | null, on_time?: any | null, shift_name?: string | null, updated_at: any, created_by?: string | null, scheduled_length_day?: any | null, scheduled_length_hour?: any | null }>, shift_lists_aggregate: { __typename?: 'shift_lists_aggregate', aggregate?: { __typename?: 'shift_lists_aggregate_fields', count: number } | null } };

export type ShiftByIdQueryVariables = Exact<{
  id: Scalars['String'];
}>;


export type ShiftByIdQuery = { __typename?: 'query_root', shift_lists_by_pk?: { __typename?: 'shift_lists', punch_times?: number | null, shift_name?: string | null, no_need_off?: any | null, on_time?: any | null, off_time?: any | null, late_minutes_as_late?: number | null, late_minutes_as_lack?: number | null, early_minutes_as_early?: number | null, early_minutes_as_lack?: number | null, scheduled_length_day?: any | null, scheduled_length_hour?: any | null } | null };

export type SolditemsSummaryQueryVariables = Exact<{
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Solditems_Summary_Order_By> | Solditems_Summary_Order_By>;
  end_date?: InputMaybe<Scalars['date']>;
  shop_ids?: InputMaybe<Scalars['_text']>;
  start_date?: InputMaybe<Scalars['date']>;
}>;


export type SolditemsSummaryQuery = { __typename?: 'query_root', func_solditems_summary: Array<{ __typename?: 'solditems_summary', item_id?: string | null, income_money?: any | null, last_qty?: any | null, last_price?: any | null, fooditem?: { __typename?: 'fooditems', item_name?: string | null, brand?: { __typename?: 'brands', name: string, id: string } | null } | null }>, func_solditems_summary_aggregate: { __typename?: 'solditems_summary_aggregate', aggregate?: { __typename?: 'solditems_summary_aggregate_fields', count: number } | null } };

export type StoreDepartmentsTreeQueryVariables = Exact<{ [key: string]: never; }>;


export type StoreDepartmentsTreeQuery = { __typename?: 'query_root', storeDepartments?: Array<{ __typename?: 'StoreDepartments', title?: string | null, value: string, is_dept?: boolean | null, children?: Array<{ __typename?: 'Store', is_dept?: boolean | null, title?: string | null, value?: string | null, children?: Array<{ __typename?: 'Department', is_dept?: boolean | null, title?: string | null, value?: string | null } | null> | null } | null> | null } | null> | null };

export type StoresQueryVariables = Exact<{ [key: string]: never; }>;


export type StoresQuery = { __typename?: 'query_root', stores: Array<{ __typename?: 'stores', id: string, name?: string | null, brand_id: string, brand: { __typename?: 'brands', name: string } }> };

export type StoreListQueryVariables = Exact<{
  where: Store_Employee_Bool_Exp;
}>;


export type StoreListQuery = { __typename?: 'query_root', store_employee: Array<{ __typename?: 'store_employee', store: { __typename?: 'stores', id: string, name?: string | null, department?: { __typename?: 'departments', id: string, name?: string | null } | null } }> };

export type StoresEmployeesQueryVariables = Exact<{
  where?: InputMaybe<Employees_Bool_Exp>;
}>;


export type StoresEmployeesQuery = { __typename?: 'query_root', stores: Array<{ __typename?: 'stores', id: string, name?: string | null, department?: { __typename?: 'departments', child_departments: Array<{ __typename?: 'departments', id: string, name?: string | null, employees: Array<{ __typename?: 'employees', id: string, avatar?: string | null, status?: any | null, name: string, mobile?: string | null, job_title?: string | null, hire_date?: any | null, actual_overboard_time?: any | null, overboard_note?: string | null, department: { __typename?: 'departments', name?: string | null, id: string } }> }>, employees: Array<{ __typename?: 'employees', id: string, avatar?: string | null, status?: any | null, name: string, mobile?: string | null, job_title?: string | null, hire_date?: any | null, actual_overboard_time?: any | null, overboard_note?: string | null, department: { __typename?: 'departments', name?: string | null, id: string } }> } | null }> };

export type StoresEmployeesStatusCountQueryVariables = Exact<{ [key: string]: never; }>;


export type StoresEmployeesStatusCountQuery = { __typename?: 'query_root', isEmployedCount: Array<{ __typename?: 'stores', departments: Array<{ __typename?: 'departments', child_departments: Array<{ __typename?: 'departments', employees_aggregate: { __typename?: 'employees_aggregate', aggregate?: { __typename?: 'employees_aggregate_fields', count: number } | null } }>, employees_aggregate: { __typename?: 'employees_aggregate', aggregate?: { __typename?: 'employees_aggregate_fields', count: number } | null } }> }>, regularEmployeeCount: Array<{ __typename?: 'stores', departments: Array<{ __typename?: 'departments', child_departments: Array<{ __typename?: 'departments', employees_aggregate: { __typename?: 'employees_aggregate', aggregate?: { __typename?: 'employees_aggregate_fields', count: number } | null } }>, employees_aggregate: { __typename?: 'employees_aggregate', aggregate?: { __typename?: 'employees_aggregate_fields', count: number } | null } }> }>, internEmployeeCount: Array<{ __typename?: 'stores', departments: Array<{ __typename?: 'departments', child_departments: Array<{ __typename?: 'departments', employees_aggregate: { __typename?: 'employees_aggregate', aggregate?: { __typename?: 'employees_aggregate_fields', count: number } | null } }>, employees_aggregate: { __typename?: 'employees_aggregate', aggregate?: { __typename?: 'employees_aggregate_fields', count: number } | null } }> }>, awaitUnemployCount: Array<{ __typename?: 'stores', departments: Array<{ __typename?: 'departments', child_departments: Array<{ __typename?: 'departments', employees_aggregate: { __typename?: 'employees_aggregate', aggregate?: { __typename?: 'employees_aggregate_fields', count: number } | null } }>, employees_aggregate: { __typename?: 'employees_aggregate', aggregate?: { __typename?: 'employees_aggregate_fields', count: number } | null } }> }>, notEmployedCount: Array<{ __typename?: 'stores', departments: Array<{ __typename?: 'departments', child_departments: Array<{ __typename?: 'departments', employees_aggregate: { __typename?: 'employees_aggregate', aggregate?: { __typename?: 'employees_aggregate_fields', count: number } | null } }>, employees_aggregate: { __typename?: 'employees_aggregate', aggregate?: { __typename?: 'employees_aggregate_fields', count: number } | null } }> }>, awaitOnboardingCount: Array<{ __typename?: 'stores', departments: Array<{ __typename?: 'departments', child_departments: Array<{ __typename?: 'departments', employees_aggregate: { __typename?: 'employees_aggregate', aggregate?: { __typename?: 'employees_aggregate_fields', count: number } | null } }>, employees_aggregate: { __typename?: 'employees_aggregate', aggregate?: { __typename?: 'employees_aggregate_fields', count: number } | null } }> }> };

export type StoreDepartmentsQueryVariables = Exact<{ [key: string]: never; }>;


export type StoreDepartmentsQuery = { __typename?: 'query_root', stores: Array<{ __typename?: 'stores', id: string, name?: string | null, departments: Array<{ __typename?: 'departments', id: string, name?: string | null, child_departments: Array<{ __typename?: 'departments', id: string, name?: string | null }> }> }> };

export type StoreEmployeeQueryVariables = Exact<{
  where?: InputMaybe<Store_Employee_Bool_Exp>;
}>;


export type StoreEmployeeQuery = { __typename?: 'query_root', store_employee: Array<{ __typename?: 'store_employee', employee: { __typename?: 'employees', id: string, name: string, avatar?: string | null }, store: { __typename?: 'stores', id: string, name?: string | null } }> };

export type SupplyItemsByPkQueryVariables = Exact<{
  itemId: Scalars['String'];
}>;


export type SupplyItemsByPkQuery = { __typename?: 'query_root', supplyitems_by_pk?: { __typename?: 'supplyitems', itemId: string, itemName?: string | null, itemImage?: string | null, itemTypeName?: string | null, mainUnit?: string | null, reportUnit?: string | null, reportUnitRatio?: any | null, netRate?: any | null, dsstorebills: Array<{ __typename?: 'dsstorebills', ArriveMoney?: any | null, InBusAmount?: any | null }>, ingredients: Array<{ __typename?: 'ingredients', fooditem?: { __typename?: 'fooditems', item_name?: string | null, brand?: { __typename?: 'brands', name: string } | null } | null }> } | null };

export type VerifyEmployeeFieldsQueryVariables = Exact<{
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
}>;


export type VerifyEmployeeFieldsQuery = { __typename?: 'query_root', verifyEmployeeFields?: Array<{ __typename?: 'Employees_ActionType', id?: string | null, types?: Array<string | null> | null, name?: string | null, employee?: { __typename?: 'employees', avatar?: string | null, name: string, status?: any | null, department: { __typename?: 'departments', id: string, name?: string | null } } | null } | null> | null };

export type ViewMonthlySalaryQueryVariables = Exact<{
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<View_Monthly_Salary_Bool_Exp>;
  where1?: InputMaybe<Bonusdeductions_Bool_Exp>;
  where2?: InputMaybe<Insurance_Funds_Bool_Exp>;
}>;


export type ViewMonthlySalaryQuery = { __typename?: 'query_root', view_monthly_salary: Array<{ __typename?: 'view_monthly_salary', employee_id?: string | null, attendance_department_id?: string | null, work_age?: number | null, work_age_type?: string | null, basic_salary?: any | null, basic_salary_base?: any | null, basic_salary_monthly?: any | null, insurance_subsidy?: any | null, overtime_pay?: any | null, position_pay?: any | null, work_age_bonus?: number | null, bonus_deduction?: any | null, personal_insurance_funds?: any | null, corp_insurance_funds?: any | null, net_salary?: any | null, corp_salary_cost?: any | null, gross_salary?: any | null, salary_type?: string | null, total_length_day?: number | null, total_length_hour?: number | null, attendance_department?: { __typename?: 'departments', name?: string | null, id: string } | null, employee?: { __typename?: 'employees', avatar?: string | null, name: string, status?: any | null, job_title?: string | null, birthday?: any | null, id_number?: string | null, bank_name?: string | null, bank_account_number?: string | null, hire_date?: any | null, basic_salary?: any | null, bonusdeductions: Array<{ __typename?: 'bonusdeductions', amount?: any | null, department_id: string, bonusdeductiontype: { __typename?: 'bonusdeductiontypes', name: string, is_bonus: boolean } }>, insurance_funds: Array<{ __typename?: 'insurance_funds', amount: any, department_id: string, insurance_fund_type: { __typename?: 'insurance_fund_types', name: string, is_personal: boolean } }>, department: { __typename?: 'departments', id: string, name?: string | null } } | null, employee_department?: { __typename?: 'departments', id: string, name?: string | null } | null }>, view_monthly_salary_aggregate: { __typename?: 'view_monthly_salary_aggregate', aggregate?: { __typename?: 'view_monthly_salary_aggregate_fields', count: number, sum?: { __typename?: 'view_monthly_salary_sum_fields', corp_salary_cost?: any | null, net_salary?: any | null } | null } | null } };


export const DeleteAttendanceGroupLeadersDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DeleteAttendanceGroupLeaders"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"where"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"attendance_group_leaders_bool_exp"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"delete_attendance_group_leaders"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"Variable","name":{"kind":"Name","value":"where"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"returning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"attendance_group_id"}}]}}]}}]}}]} as unknown as DocumentNode<DeleteAttendanceGroupLeadersMutation, DeleteAttendanceGroupLeadersMutationVariables>;
export const CreateAttendanceGroupLeadersDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"CreateAttendanceGroupLeaders"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"objects"}},"type":{"kind":"NonNullType","type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"attendance_group_leaders_insert_input"}}}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"insert_attendance_group_leaders"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"objects"},"value":{"kind":"Variable","name":{"kind":"Name","value":"objects"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"returning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"attendance_group_id"}}]}}]}}]}}]} as unknown as DocumentNode<CreateAttendanceGroupLeadersMutation, CreateAttendanceGroupLeadersMutationVariables>;
export const UpdateAttendanceLocationsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateAttendanceLocations"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"updates"}},"type":{"kind":"NonNullType","type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"attendance_locations_updates"}}}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"update_attendance_locations_many"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"updates"},"value":{"kind":"Variable","name":{"kind":"Name","value":"updates"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"returning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]}}]} as unknown as DocumentNode<UpdateAttendanceLocationsMutation, UpdateAttendanceLocationsMutationVariables>;
export const CreateAttendanceLocationsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"CreateAttendanceLocations"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"objects"}},"type":{"kind":"NonNullType","type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"attendance_locations_insert_input"}}}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"insert_attendance_locations"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"objects"},"value":{"kind":"Variable","name":{"kind":"Name","value":"objects"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"returning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]}}]} as unknown as DocumentNode<CreateAttendanceLocationsMutation, CreateAttendanceLocationsMutationVariables>;
export const DeleteAttendanceLocationDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DeleteAttendanceLocation"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"delete_attendance_locations_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<DeleteAttendanceLocationMutation, DeleteAttendanceLocationMutationVariables>;
export const DeleteAttendanceGroupSubLeadersDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DeleteAttendanceGroupSubLeaders"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"where"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"attendance_group_subleaders_bool_exp"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"delete_attendance_group_subleaders"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"Variable","name":{"kind":"Name","value":"where"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"returning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"attendance_group_id"}}]}}]}}]}}]} as unknown as DocumentNode<DeleteAttendanceGroupSubLeadersMutation, DeleteAttendanceGroupSubLeadersMutationVariables>;
export const CreateAttendanceGroupSubLeadersDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"CreateAttendanceGroupSubLeaders"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"objects"}},"type":{"kind":"NonNullType","type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"attendance_group_subleaders_insert_input"}}}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"insert_attendance_group_subleaders"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"objects"},"value":{"kind":"Variable","name":{"kind":"Name","value":"objects"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"returning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"attendance_group_id"}}]}}]}}]}}]} as unknown as DocumentNode<CreateAttendanceGroupSubLeadersMutation, CreateAttendanceGroupSubLeadersMutationVariables>;
export const DeleteAttendanchGroupByIdDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DeleteAttendanchGroupById"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"delete_attendance_groups_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<DeleteAttendanchGroupByIdMutation, DeleteAttendanchGroupByIdMutationVariables>;
export const CreateAttendanchGroupDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"CreateAttendanchGroup"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"objects"}},"type":{"kind":"NonNullType","type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"attendance_groups_insert_input"}}}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"insert_attendance_groups"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"objects"},"value":{"kind":"Variable","name":{"kind":"Name","value":"objects"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"returning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]}}]} as unknown as DocumentNode<CreateAttendanchGroupMutation, CreateAttendanchGroupMutationVariables>;
export const UpdateAttendanceGroupDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateAttendanceGroup"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"_set"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"attendance_groups_set_input"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"update_attendance_groups_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"pk_columns"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"_set"},"value":{"kind":"Variable","name":{"kind":"Name","value":"_set"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<UpdateAttendanceGroupMutation, UpdateAttendanceGroupMutationVariables>;
export const DeleteAttendanceGroupShiftsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DeleteAttendanceGroupShifts"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"where"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"attendance_group_shifts_bool_exp"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"delete_attendance_group_shifts"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"Variable","name":{"kind":"Name","value":"where"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"returning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"attendance_group_id"}}]}}]}}]}}]} as unknown as DocumentNode<DeleteAttendanceGroupShiftsMutation, DeleteAttendanceGroupShiftsMutationVariables>;
export const CreateAttendanceGroupShiftsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"CreateAttendanceGroupShifts"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"objects"}},"type":{"kind":"NonNullType","type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"attendance_group_shifts_insert_input"}}}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"insert_attendance_group_shifts"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"objects"},"value":{"kind":"Variable","name":{"kind":"Name","value":"objects"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"returning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"attendance_group_id"}}]}}]}}]}}]} as unknown as DocumentNode<CreateAttendanceGroupShiftsMutation, CreateAttendanceGroupShiftsMutationVariables>;
export const DeleteAttendanceDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DeleteAttendance"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"where"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"attendance_bool_exp"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"delete_attendance"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"Variable","name":{"kind":"Name","value":"where"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"returning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]}}]} as unknown as DocumentNode<DeleteAttendanceMutation, DeleteAttendanceMutationVariables>;
export const CreateAttendanceDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"CreateAttendance"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"objects"}},"type":{"kind":"NonNullType","type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"attendance_insert_input"}}}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"insert_attendance"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"objects"},"value":{"kind":"Variable","name":{"kind":"Name","value":"objects"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"returning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]}}]} as unknown as DocumentNode<CreateAttendanceMutation, CreateAttendanceMutationVariables>;
export const UpdateAttendanceDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateAttendance"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"updates"}},"type":{"kind":"NonNullType","type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"attendance_updates"}}}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"update_attendance_many"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"updates"},"value":{"kind":"Variable","name":{"kind":"Name","value":"updates"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"returning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]}}]} as unknown as DocumentNode<UpdateAttendanceMutation, UpdateAttendanceMutationVariables>;
export const UpdateAttendanceByIdDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateAttendanceById"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"_set"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"attendance_set_input"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"update_attendance_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"pk_columns"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"_set"},"value":{"kind":"Variable","name":{"kind":"Name","value":"_set"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<UpdateAttendanceByIdMutation, UpdateAttendanceByIdMutationVariables>;
export const CreateBonusdeductionsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"CreateBonusdeductions"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"object"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"bonusdeductions_insert_input"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"insert_bonusdeductions_one"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"object"},"value":{"kind":"Variable","name":{"kind":"Name","value":"object"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"employee_id"}},{"kind":"Field","name":{"kind":"Name","value":"month"}},{"kind":"Field","name":{"kind":"Name","value":"amount"}},{"kind":"Field","name":{"kind":"Name","value":"bonusdeductiontype_id"}},{"kind":"Field","name":{"kind":"Name","value":"department_id"}}]}}]}}]} as unknown as DocumentNode<CreateBonusdeductionsMutation, CreateBonusdeductionsMutationVariables>;
export const DeleteBonusdeductionsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DeleteBonusdeductions"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"delete_bonusdeductions_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"department_id"}},{"kind":"Field","name":{"kind":"Name","value":"employee_id"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"month"}},{"kind":"Field","name":{"kind":"Name","value":"amount"}},{"kind":"Field","name":{"kind":"Name","value":"bonusdeductiontype_id"}}]}}]}}]} as unknown as DocumentNode<DeleteBonusdeductionsMutation, DeleteBonusdeductionsMutationVariables>;
export const InsertBrandsEmployeesOneDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"InsertBrandsEmployeesOne"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"brand_id"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"employee_id"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"insert_brands_employees_one"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"object"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"brand_id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"brand_id"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"employee_id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"employee_id"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"brand_id"}},{"kind":"Field","name":{"kind":"Name","value":"employee_id"}}]}}]}}]} as unknown as DocumentNode<InsertBrandsEmployeesOneMutation, InsertBrandsEmployeesOneMutationVariables>;
export const DeleteBrandsEmployeesByPkDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DeleteBrandsEmployeesByPk"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"brand_id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"employee_id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"delete_brands_employees_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"brand_id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"brand_id"}}},{"kind":"Argument","name":{"kind":"Name","value":"employee_id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"employee_id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"brand_id"}},{"kind":"Field","name":{"kind":"Name","value":"employee_id"}}]}}]}}]} as unknown as DocumentNode<DeleteBrandsEmployeesByPkMutation, DeleteBrandsEmployeesByPkMutationVariables>;
export const UpdateDepartmentDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateDepartment"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"_set"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"departments_set_input"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"where"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"departments_bool_exp"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"update_departments"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"Variable","name":{"kind":"Name","value":"where"}}},{"kind":"Argument","name":{"kind":"Name","value":"_set"},"value":{"kind":"Variable","name":{"kind":"Name","value":"_set"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"returning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]}}]} as unknown as DocumentNode<UpdateDepartmentMutation, UpdateDepartmentMutationVariables>;
export const InsertDepartmentsEmployeesDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"InsertDepartmentsEmployees"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"employee_id"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"department_id"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"insert_departments_employees"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"objects"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"department_id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"department_id"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"employee_id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"employee_id"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"returning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"employee"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"avatar"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]}}]}}]} as unknown as DocumentNode<InsertDepartmentsEmployeesMutation, InsertDepartmentsEmployeesMutationVariables>;
export const DeleteDepartmentsEmployeesByPkDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DeleteDepartmentsEmployeesByPk"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"department_id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"employee_id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"delete_departments_employees_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"department_id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"department_id"}}},{"kind":"Argument","name":{"kind":"Name","value":"employee_id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"employee_id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"department_id"}},{"kind":"Field","name":{"kind":"Name","value":"employee_id"}}]}}]}}]} as unknown as DocumentNode<DeleteDepartmentsEmployeesByPkMutation, DeleteDepartmentsEmployeesByPkMutationVariables>;
export const CreateEmployeesDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"CreateEmployees"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"mobile"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"name"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"hire_date"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"date"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"department_id"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"status"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"smallint"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"manager_id"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"insert_employees"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"objects"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"name"},"value":{"kind":"Variable","name":{"kind":"Name","value":"name"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"mobile"},"value":{"kind":"Variable","name":{"kind":"Name","value":"mobile"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"hire_date"},"value":{"kind":"Variable","name":{"kind":"Name","value":"hire_date"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"department_id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"department_id"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"status"},"value":{"kind":"Variable","name":{"kind":"Name","value":"status"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"manager_id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"manager_id"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"returning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"mobile"}},{"kind":"Field","name":{"kind":"Name","value":"department"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]}}]}}]} as unknown as DocumentNode<CreateEmployeesMutation, CreateEmployeesMutationVariables>;
export const UpdateEmployeeDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateEmployee"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"_set"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"employees_set_input"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"where"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"employees_bool_exp"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"update_employees"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"_set"},"value":{"kind":"Variable","name":{"kind":"Name","value":"_set"}}},{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"Variable","name":{"kind":"Name","value":"where"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"returning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]}}]} as unknown as DocumentNode<UpdateEmployeeMutation, UpdateEmployeeMutationVariables>;
export const DeleteEmployeeDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DeleteEmployee"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"where"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"employees_bool_exp"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"delete_employees"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"Variable","name":{"kind":"Name","value":"where"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"returning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]}}]} as unknown as DocumentNode<DeleteEmployeeMutation, DeleteEmployeeMutationVariables>;
export const DeleteEmployeeAttachmentDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DeleteEmployeeAttachment"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"where"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"employee_attachments_bool_exp"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"delete_employee_attachments"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"Variable","name":{"kind":"Name","value":"where"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"returning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]}}]} as unknown as DocumentNode<DeleteEmployeeAttachmentMutation, DeleteEmployeeAttachmentMutationVariables>;
export const CreateLeaveTypesDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"CreateLeaveTypes"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"object"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"leave_types_insert_input"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"insert_leave_types_one"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"object"},"value":{"kind":"Variable","name":{"kind":"Name","value":"object"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<CreateLeaveTypesMutation, CreateLeaveTypesMutationVariables>;
export const DeleteRoleDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DeleteRole"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"where"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"roles_bool_exp"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"delete_roles"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"Variable","name":{"kind":"Name","value":"where"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"returning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]}}]} as unknown as DocumentNode<DeleteRoleMutation, DeleteRoleMutationVariables>;
export const CreateRoleDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"CreateRole"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"objects"}},"type":{"kind":"NonNullType","type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"roles_insert_input"}}}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"insert_roles"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"objects"},"value":{"kind":"Variable","name":{"kind":"Name","value":"objects"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"returning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]}}]} as unknown as DocumentNode<CreateRoleMutation, CreateRoleMutationVariables>;
export const UpdateRoleDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateRole"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"where"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"roles_bool_exp"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"_set"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"roles_set_input"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"update_roles"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"Variable","name":{"kind":"Name","value":"where"}}},{"kind":"Argument","name":{"kind":"Name","value":"_set"},"value":{"kind":"Variable","name":{"kind":"Name","value":"_set"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"returning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]}}]} as unknown as DocumentNode<UpdateRoleMutation, UpdateRoleMutationVariables>;
export const CreateEmployeesRoleDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"CreateEmployeesRole"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"objects"}},"type":{"kind":"NonNullType","type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"employees_roles_insert_input"}}}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"insert_employees_roles"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"objects"},"value":{"kind":"Variable","name":{"kind":"Name","value":"objects"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"returning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"employee_id"}},{"kind":"Field","name":{"kind":"Name","value":"role_id"}}]}}]}}]}}]} as unknown as DocumentNode<CreateEmployeesRoleMutation, CreateEmployeesRoleMutationVariables>;
export const DeleteEmployeesRoleDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DeleteEmployeesRole"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"where"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"employees_roles_bool_exp"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"delete_employees_roles"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"Variable","name":{"kind":"Name","value":"where"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"returning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"employee_id"}},{"kind":"Field","name":{"kind":"Name","value":"role_id"}}]}}]}}]}}]} as unknown as DocumentNode<DeleteEmployeesRoleMutation, DeleteEmployeesRoleMutationVariables>;
export const DeleteRoleNavDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DeleteRoleNav"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"where"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"role_nav_sm_categories_bool_exp"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"delete_role_nav_sm_categories"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"Variable","name":{"kind":"Name","value":"where"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"returning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"role_id"}}]}}]}}]}}]} as unknown as DocumentNode<DeleteRoleNavMutation, DeleteRoleNavMutationVariables>;
export const CreateRoleNavDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"CreateRoleNav"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"objects"}},"type":{"kind":"NonNullType","type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"role_nav_sm_categories_insert_input"}}}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"insert_role_nav_sm_categories"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"objects"},"value":{"kind":"Variable","name":{"kind":"Name","value":"objects"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"returning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"role_id"}}]}}]}}]}}]} as unknown as DocumentNode<CreateRoleNavMutation, CreateRoleNavMutationVariables>;
export const InsertServiceEntitlementOneDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"InsertServiceEntitlementOne"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"object"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"service_entitlement_insert_input"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"insert_service_entitlement_one"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"object"},"value":{"kind":"Variable","name":{"kind":"Name","value":"object"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<InsertServiceEntitlementOneMutation, InsertServiceEntitlementOneMutationVariables>;
export const UpdateServiceEntitlementDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateServiceEntitlement"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"_set"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"service_entitlement_set_input"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"update_service_entitlement_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"pk_columns"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"_set"},"value":{"kind":"Variable","name":{"kind":"Name","value":"_set"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<UpdateServiceEntitlementMutation, UpdateServiceEntitlementMutationVariables>;
export const DeleteServiceEntitlementDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DeleteServiceEntitlement"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"delete_service_entitlement_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<DeleteServiceEntitlementMutation, DeleteServiceEntitlementMutationVariables>;
export const CreateShiftDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"CreateShift"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"object"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"shift_lists_insert_input"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"insert_shift_lists_one"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"object"},"value":{"kind":"Variable","name":{"kind":"Name","value":"object"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<CreateShiftMutation, CreateShiftMutationVariables>;
export const UpdateShiftByIdDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateShiftById"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"_set"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"shift_lists_set_input"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"update_shift_lists_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"pk_columns"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"_set"},"value":{"kind":"Variable","name":{"kind":"Name","value":"_set"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<UpdateShiftByIdMutation, UpdateShiftByIdMutationVariables>;
export const DeleteShiftDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DeleteShift"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"delete_shift_lists_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<DeleteShiftMutation, DeleteShiftMutationVariables>;
export const DeleteStoreEmployeeDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DeleteStoreEmployee"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"where"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"store_employee_bool_exp"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"delete_store_employee"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"Variable","name":{"kind":"Name","value":"where"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"returning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"store_id"}},{"kind":"Field","name":{"kind":"Name","value":"employee"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]}}]}}]} as unknown as DocumentNode<DeleteStoreEmployeeMutation, DeleteStoreEmployeeMutationVariables>;
export const CreateStoreEmployeeDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"CreateStoreEmployee"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"objects"}},"type":{"kind":"NonNullType","type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"store_employee_insert_input"}}}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"insert_store_employee"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"objects"},"value":{"kind":"Variable","name":{"kind":"Name","value":"objects"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"returning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"employee_id"}},{"kind":"Field","name":{"kind":"Name","value":"store_id"}}]}}]}}]}}]} as unknown as DocumentNode<CreateStoreEmployeeMutation, CreateStoreEmployeeMutationVariables>;
export const InsertStoreEmployeeDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"InsertStoreEmployee"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"objects"}},"type":{"kind":"NonNullType","type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"store_employee_insert_input"}}}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"insert_store_employee"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"objects"},"value":{"kind":"Variable","name":{"kind":"Name","value":"objects"}}},{"kind":"Argument","name":{"kind":"Name","value":"on_conflict"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"constraint"},"value":{"kind":"EnumValue","value":"store_employeePRIMARY43"}},{"kind":"ObjectField","name":{"kind":"Name","value":"update_columns"},"value":{"kind":"ListValue","values":[]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"affected_rows"}},{"kind":"Field","name":{"kind":"Name","value":"returning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"employee_id"}},{"kind":"Field","name":{"kind":"Name","value":"store_id"}}]}}]}}]}}]} as unknown as DocumentNode<InsertStoreEmployeeMutation, InsertStoreEmployeeMutationVariables>;
export const AttdanceGroupsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"AttdanceGroups"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"limit"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"offset"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"where"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"attendance_groups_bool_exp"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"where1"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"employees_bool_exp"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"attendance_groups"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"limit"},"value":{"kind":"Variable","name":{"kind":"Name","value":"limit"}}},{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"Variable","name":{"kind":"Name","value":"offset"}}},{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"Variable","name":{"kind":"Name","value":"where"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"group_type"}},{"kind":"Field","name":{"kind":"Name","value":"departments"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"employees"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"employees_aggregate"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"Variable","name":{"kind":"Name","value":"where1"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"aggregate"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"attendance_group_subleaders"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"employee"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"avatar"}},{"kind":"Field","name":{"kind":"Name","value":"department"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"attendance_group_leaders"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"employee"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"avatar"}},{"kind":"Field","name":{"kind":"Name","value":"department"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"attendance_group_shifts"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"shift_list"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"on_time"}},{"kind":"Field","name":{"kind":"Name","value":"off_time"}},{"kind":"Field","name":{"kind":"Name","value":"shift_name"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"attendance_locations"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"longitude"}},{"kind":"Field","name":{"kind":"Name","value":"latitude"}},{"kind":"Field","name":{"kind":"Name","value":"address"}},{"kind":"Field","name":{"kind":"Name","value":"gps_range"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"attendance_groups_aggregate"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"Variable","name":{"kind":"Name","value":"where"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"aggregate"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}}]}}]} as unknown as DocumentNode<AttdanceGroupsQuery, AttdanceGroupsQueryVariables>;
export const AttendanceGroupByIdDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"AttendanceGroupById"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"attendance_groups_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"group_type"}},{"kind":"Field","name":{"kind":"Name","value":"departments"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"employees_aggregate"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"aggregate"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"attendance_group_subleaders"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"employee"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"avatar"}},{"kind":"Field","name":{"kind":"Name","value":"department"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"attendance_group_leaders"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"employee"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"avatar"}},{"kind":"Field","name":{"kind":"Name","value":"department"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"attendance_group_shifts"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"shift_list"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"on_time"}},{"kind":"Field","name":{"kind":"Name","value":"off_time"}},{"kind":"Field","name":{"kind":"Name","value":"shift_name"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"attendance_locations"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"longitude"}},{"kind":"Field","name":{"kind":"Name","value":"latitude"}},{"kind":"Field","name":{"kind":"Name","value":"address"}},{"kind":"Field","name":{"kind":"Name","value":"gps_range"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]}}]} as unknown as DocumentNode<AttendanceGroupByIdQuery, AttendanceGroupByIdQueryVariables>;
export const AttendanceGroupShiftsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"AttendanceGroupShifts"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"where"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"attendance_bool_exp"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"attendance_groups_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"departments"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"employees"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"avatar"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"department_id"}},{"kind":"Field","name":{"kind":"Name","value":"attendances"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"Variable","name":{"kind":"Name","value":"where"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"clock_in_result"}},{"kind":"Field","name":{"kind":"Name","value":"clock_in_time"}},{"kind":"Field","name":{"kind":"Name","value":"clock_out_location_id"}},{"kind":"Field","name":{"kind":"Name","value":"clock_out_result"}},{"kind":"Field","name":{"kind":"Name","value":"clock_in_location_id"}},{"kind":"Field","name":{"kind":"Name","value":"clock_out_time"}},{"kind":"Field","name":{"kind":"Name","value":"date"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"shift_id"}},{"kind":"Field","name":{"kind":"Name","value":"shift_list"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"shift_name"}},{"kind":"Field","name":{"kind":"Name","value":"on_time"}},{"kind":"Field","name":{"kind":"Name","value":"off_time"}},{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"attendances_aggregate"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"Variable","name":{"kind":"Name","value":"where"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"aggregate"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"attendance_group_shifts"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"shift_list"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"off_time"}},{"kind":"Field","name":{"kind":"Name","value":"on_time"}},{"kind":"Field","name":{"kind":"Name","value":"shift_name"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<AttendanceGroupShiftsQuery, AttendanceGroupShiftsQueryVariables>;
export const AttendnceListDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"AttendnceList"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"where"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"attendance_bool_exp"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"limit"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"offset"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"attendance_aggregate"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"Variable","name":{"kind":"Name","value":"where"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"aggregate"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"attendance"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"limit"},"value":{"kind":"Variable","name":{"kind":"Name","value":"limit"}}},{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"Variable","name":{"kind":"Name","value":"offset"}}},{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"Variable","name":{"kind":"Name","value":"where"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"clock_in_time"}},{"kind":"Field","name":{"kind":"Name","value":"clockInResult"}},{"kind":"Field","name":{"kind":"Name","value":"clock_in_location_id"}},{"kind":"Field","name":{"kind":"Name","value":"clock_out_location_id"}},{"kind":"Field","name":{"kind":"Name","value":"clockOutResult"}},{"kind":"Field","name":{"kind":"Name","value":"clock_out_time"}},{"kind":"Field","name":{"kind":"Name","value":"date"}},{"kind":"Field","name":{"kind":"Name","value":"actual_length_hour"}},{"kind":"Field","name":{"kind":"Name","value":"department"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"employee"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"basic_salary"}},{"kind":"Field","name":{"kind":"Name","value":"salary_type"}}]}},{"kind":"Field","name":{"kind":"Name","value":"attendanceLocationByClockInLocationId"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"address"}}]}},{"kind":"Field","name":{"kind":"Name","value":"attendanceLocationByClockOutLocationId"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"address"}}]}},{"kind":"Field","name":{"kind":"Name","value":"shift_list"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"early_minutes_as_early"}},{"kind":"Field","name":{"kind":"Name","value":"shift_name"}},{"kind":"Field","name":{"kind":"Name","value":"early_minutes_as_lack"}},{"kind":"Field","name":{"kind":"Name","value":"late_minutes_as_lack"}},{"kind":"Field","name":{"kind":"Name","value":"late_minutes_as_late"}},{"kind":"Field","name":{"kind":"Name","value":"off_time"}},{"kind":"Field","name":{"kind":"Name","value":"on_time"}}]}}]}}]}}]} as unknown as DocumentNode<AttendnceListQuery, AttendnceListQueryVariables>;
export const GetBonusDeductionsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetBonusDeductions"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"where"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"bonusdeductions_bool_exp"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"bonusdeductions"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"Variable","name":{"kind":"Name","value":"where"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"amount"}},{"kind":"Field","name":{"kind":"Name","value":"bonusdeductiontype"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"is_bonus"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"department"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]}}]} as unknown as DocumentNode<GetBonusDeductionsQuery, GetBonusDeductionsQueryVariables>;
export const GetBonusDeductionTypesDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetBonusDeductionTypes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"bonusdeductiontypes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"is_bonus"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]} as unknown as DocumentNode<GetBonusDeductionTypesQuery, GetBonusDeductionTypesQueryVariables>;
export const BrandsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"Brands"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"where"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"brands_bool_exp"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"limit"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"offset"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"brands"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"Variable","name":{"kind":"Name","value":"where"}}},{"kind":"Argument","name":{"kind":"Name","value":"limit"},"value":{"kind":"Variable","name":{"kind":"Name","value":"limit"}}},{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"Variable","name":{"kind":"Name","value":"offset"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"stores"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"brand_id"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"brands_aggregate"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"Variable","name":{"kind":"Name","value":"where"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"aggregate"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}}]}}]} as unknown as DocumentNode<BrandsQuery, BrandsQueryVariables>;
export const BrandsStoresDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"BrandsStores"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"brandFilter"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"brands_bool_exp"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"storeFilter"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"stores_bool_exp"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"brands"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"Variable","name":{"kind":"Name","value":"brandFilter"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"stores"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"Variable","name":{"kind":"Name","value":"storeFilter"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]}}]} as unknown as DocumentNode<BrandsStoresQuery, BrandsStoresQueryVariables>;
export const ViewDailyItemsSoldDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"ViewDailyItemsSold"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"offset"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"limit"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"where"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"view_daily_items_sold_bool_exp"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"view_daily_items_sold"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"limit"},"value":{"kind":"Variable","name":{"kind":"Name","value":"limit"}}},{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"Variable","name":{"kind":"Name","value":"offset"}}},{"kind":"Argument","name":{"kind":"Name","value":"order_by"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"total_income_money"},"value":{"kind":"EnumValue","value":"desc"}}]}},{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"Variable","name":{"kind":"Name","value":"where"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"store"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"fooditem"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"item_id"}},{"kind":"Field","name":{"kind":"Name","value":"item_name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"item_id"}},{"kind":"Field","name":{"kind":"Name","value":"settle_biz_date"}},{"kind":"Field","name":{"kind":"Name","value":"total_qty"}},{"kind":"Field","name":{"kind":"Name","value":"total_last_total"}},{"kind":"Field","name":{"kind":"Name","value":"total_income_money"}}]}},{"kind":"Field","name":{"kind":"Name","value":"view_daily_items_sold_aggregate"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"Variable","name":{"kind":"Name","value":"where"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"aggregate"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}}]}}]} as unknown as DocumentNode<ViewDailyItemsSoldQuery, ViewDailyItemsSoldQueryVariables>;
export const DepartmentsEmployeesDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"DepartmentsEmployees"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"where"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"departments_employees_bool_exp"}},"defaultValue":{"kind":"ObjectValue","fields":[]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"departments_employees"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"Variable","name":{"kind":"Name","value":"where"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"employee"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]}}]} as unknown as DocumentNode<DepartmentsEmployeesQuery, DepartmentsEmployeesQueryVariables>;
export const DepartmentsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"Departments"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"limit"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"offset"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"where"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"departments_bool_exp"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"departments_aggregate"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"Variable","name":{"kind":"Name","value":"where"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"aggregate"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"departments"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"limit"},"value":{"kind":"Variable","name":{"kind":"Name","value":"limit"}}},{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"Variable","name":{"kind":"Name","value":"offset"}}},{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"Variable","name":{"kind":"Name","value":"where"}}},{"kind":"Argument","name":{"kind":"Name","value":"order_by"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"name"},"value":{"kind":"EnumValue","value":"asc"}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"employees_aggregate"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"aggregate"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"parent_department_id"}}]}}]}}]} as unknown as DocumentNode<DepartmentsQuery, DepartmentsQueryVariables>;
export const DsStoreBillsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"DsStoreBills"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"where"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"dsstorebills_bool_exp"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"dsstorebills"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"order_by"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"ArriveMoney"},"value":{"kind":"EnumValue","value":"desc"}}]}},{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"Variable","name":{"kind":"Name","value":"where"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"ArriveMoney"}},{"kind":"Field","name":{"kind":"Name","value":"InBusAmount"}},{"kind":"Field","name":{"kind":"Name","value":"ItemSpec"}},{"kind":"Field","name":{"kind":"Name","value":"OtherSideName"}},{"kind":"Field","name":{"kind":"Name","value":"supplyitem"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"itemName"}},{"kind":"Field","name":{"kind":"Name","value":"reportUnit"}},{"kind":"Field","name":{"kind":"Name","value":"mainUnit"}},{"kind":"Field","name":{"kind":"Name","value":"itemTypeName"}}]}}]}}]}}]} as unknown as DocumentNode<DsStoreBillsQuery, DsStoreBillsQueryVariables>;
export const EmployeeInsuranceDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"EmployeeInsurance"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"where"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"employee_insurance_bool_exp"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"limit"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"offset"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"employee_insurance"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"Variable","name":{"kind":"Name","value":"where"}}},{"kind":"Argument","name":{"kind":"Name","value":"limit"},"value":{"kind":"Variable","name":{"kind":"Name","value":"limit"}}},{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"Variable","name":{"kind":"Name","value":"offset"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"corp_heating"}},{"kind":"Field","name":{"kind":"Name","value":"corp_major_medical"}},{"kind":"Field","name":{"kind":"Name","value":"employee"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"avatar"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"department"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"corp_housing_fund"}},{"kind":"Field","name":{"kind":"Name","value":"corp_maternity_insurance"}},{"kind":"Field","name":{"kind":"Name","value":"corp_medical_insurance"}},{"kind":"Field","name":{"kind":"Name","value":"corp_pay"}},{"kind":"Field","name":{"kind":"Name","value":"corp_retirement_insurance"}},{"kind":"Field","name":{"kind":"Name","value":"corp_unemployment_insurance"}},{"kind":"Field","name":{"kind":"Name","value":"corp_work_injury"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"heating_base"}},{"kind":"Field","name":{"kind":"Name","value":"medical_base"}},{"kind":"Field","name":{"kind":"Name","value":"month"}},{"kind":"Field","name":{"kind":"Name","value":"payment_start_date"}},{"kind":"Field","name":{"kind":"Name","value":"pension_base"}},{"kind":"Field","name":{"kind":"Name","value":"personal_fund_balance"}},{"kind":"Field","name":{"kind":"Name","value":"personal_housing_fund"}},{"kind":"Field","name":{"kind":"Name","value":"personal_major_medical"}},{"kind":"Field","name":{"kind":"Name","value":"personal_medical_insurance"}},{"kind":"Field","name":{"kind":"Name","value":"personal_pay"}},{"kind":"Field","name":{"kind":"Name","value":"personal_pension_insurance"}},{"kind":"Field","name":{"kind":"Name","value":"personal_unemployment_insurance"}},{"kind":"Field","name":{"kind":"Name","value":"unemployment_base"}},{"kind":"Field","name":{"kind":"Name","value":"work_injury_base"}}]}},{"kind":"Field","name":{"kind":"Name","value":"employee_insurance_aggregate"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"Variable","name":{"kind":"Name","value":"where"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"aggregate"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}}]}}]} as unknown as DocumentNode<EmployeeInsuranceQuery, EmployeeInsuranceQueryVariables>;
export const EmployessDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"Employess"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"offset"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"limit"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"where"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"employees_bool_exp"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"employees_aggregate"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"Variable","name":{"kind":"Name","value":"where"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"aggregate"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"employees"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"limit"},"value":{"kind":"Variable","name":{"kind":"Name","value":"limit"}}},{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"Variable","name":{"kind":"Name","value":"offset"}}},{"kind":"Argument","name":{"kind":"Name","value":"order_by"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"updated_at"},"value":{"kind":"EnumValue","value":"desc"}}]}},{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"Variable","name":{"kind":"Name","value":"where"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"id_number"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"employee_form_status"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"mobile"}},{"kind":"Field","name":{"kind":"Name","value":"avatar"}},{"kind":"Field","name":{"kind":"Name","value":"user_id"}},{"kind":"Field","name":{"kind":"Name","value":"hire_date"}},{"kind":"Field","name":{"kind":"Name","value":"job_title"}},{"kind":"Field","name":{"kind":"Name","value":"last_day"}},{"kind":"Field","name":{"kind":"Name","value":"departure_type"}},{"kind":"Field","name":{"kind":"Name","value":"birthday"}},{"kind":"Field","name":{"kind":"Name","value":"departure_type"}},{"kind":"Field","name":{"kind":"Name","value":"employee_type"}},{"kind":"Field","name":{"kind":"Name","value":"department_id"}},{"kind":"Field","name":{"kind":"Name","value":"department"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"id"}}]}},{"kind":"Field","name":{"kind":"Name","value":"gender_id"}},{"kind":"Field","name":{"kind":"Name","value":"marital_status"}},{"kind":"Field","name":{"kind":"Name","value":"medical_insurance"}},{"kind":"Field","name":{"kind":"Name","value":"ethnicity"}},{"kind":"Field","name":{"kind":"Name","value":"application"}},{"kind":"Field","name":{"kind":"Name","value":"application_status"}},{"kind":"Field","name":{"kind":"Name","value":"native_region"}},{"kind":"Field","name":{"kind":"Name","value":"primary_emergency_contact"}},{"kind":"Field","name":{"kind":"Name","value":"probation_months"}},{"kind":"Field","name":{"kind":"Name","value":"provident_fund_account"}},{"kind":"Field","name":{"kind":"Name","value":"social_security_number"}},{"kind":"Field","name":{"kind":"Name","value":"bank_name"}},{"kind":"Field","name":{"kind":"Name","value":"bank_account_number"}},{"kind":"Field","name":{"kind":"Name","value":"salary_type"}},{"kind":"Field","name":{"kind":"Name","value":"salary_type_id"}},{"kind":"Field","name":{"kind":"Name","value":"basic_salary"}},{"kind":"Field","name":{"kind":"Name","value":"basic_salary_monthly"}},{"kind":"Field","name":{"kind":"Name","value":"manager_id"}},{"kind":"Field","name":{"kind":"Name","value":"work_age_type"}},{"kind":"Field","name":{"kind":"Name","value":"family_address"}},{"kind":"Field","name":{"kind":"Name","value":"hukou_type"}},{"kind":"Field","name":{"kind":"Name","value":"hukou_location"}},{"kind":"Field","name":{"kind":"Name","value":"actual_conversion_time"}},{"kind":"Field","name":{"kind":"Name","value":"actual_overboard_time"}},{"kind":"Field","name":{"kind":"Name","value":"overboard_note"}},{"kind":"Field","name":{"kind":"Name","value":"salaryType"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"store_employees"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"store"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"attendances"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"clockInResult"}},{"kind":"Field","name":{"kind":"Name","value":"clock_in_time"}},{"kind":"Field","name":{"kind":"Name","value":"clockOutResult"}},{"kind":"Field","name":{"kind":"Name","value":"clock_out_time"}},{"kind":"Field","name":{"kind":"Name","value":"date"}},{"kind":"Field","name":{"kind":"Name","value":"shift_id"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"scheduled_length_day"}},{"kind":"Field","name":{"kind":"Name","value":"actual_length_hour"}},{"kind":"Field","name":{"kind":"Name","value":"actual_length_day"}},{"kind":"Field","name":{"kind":"Name","value":"shift_list"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"early_minutes_as_early"}},{"kind":"Field","name":{"kind":"Name","value":"early_minutes_as_lack"}},{"kind":"Field","name":{"kind":"Name","value":"late_minutes_as_lack"}},{"kind":"Field","name":{"kind":"Name","value":"late_minutes_as_late"}},{"kind":"Field","name":{"kind":"Name","value":"off_time"}},{"kind":"Field","name":{"kind":"Name","value":"on_time"}}]}}]}}]}}]}}]} as unknown as DocumentNode<EmployessQuery, EmployessQueryVariables>;
export const EmployeesStatusCountDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"EmployeesStatusCount"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"where"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"employees_bool_exp"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"todayDate"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"date"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"thisWeekDateStart"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"date"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"thisWeekDateEnd"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"date"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"thisMonthDateStart"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"date"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"thisMonthDateEnd"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"date"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"nextMonthDateStart"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"date"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"nextMonthDateEnd"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"date"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"lastMonthDateStart"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"date"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"lastMonthDateEnd"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"date"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"todayDateMMDD"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"thisWeekDateStartMMDD"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"thisWeekDateEndMMDD"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"thisMonthDateStartMMDD"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"thisMonthDateEndMMDD"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"nextMonthDateStartMMDD"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"nextMonthDateEndMMDD"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"lastMonthDateStartMMDD"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"lastMonthDateEndMMDD"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"isEmployedCount"},"name":{"kind":"Name","value":"employees_aggregate"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"status"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_eq"},"value":{"kind":"IntValue","value":"2"}}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"aggregate"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}},{"kind":"Field","alias":{"kind":"Name","value":"informationNotFilled"},"name":{"kind":"Name","value":"employees_aggregate"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"status"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_eq"},"value":{"kind":"IntValue","value":"6"}}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"aggregate"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}},{"kind":"Field","alias":{"kind":"Name","value":"feishuIsReviewing"},"name":{"kind":"Name","value":"employees_aggregate"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"status"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_eq"},"value":{"kind":"IntValue","value":"7"}}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"aggregate"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}},{"kind":"Field","alias":{"kind":"Name","value":"feishuReviewRejected"},"name":{"kind":"Name","value":"employees_aggregate"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"status"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_eq"},"value":{"kind":"IntValue","value":"9"}}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"aggregate"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}},{"kind":"Field","alias":{"kind":"Name","value":"regularEmployeeCount"},"name":{"kind":"Name","value":"employees_aggregate"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_and"},"value":{"kind":"ListValue","values":[{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"status"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_eq"},"value":{"kind":"IntValue","value":"2"}}]}}]},{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"employee_type"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_eq"},"value":{"kind":"IntValue","value":"1"}}]}}]}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"aggregate"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}},{"kind":"Field","alias":{"kind":"Name","value":"internEmployeeCount"},"name":{"kind":"Name","value":"employees_aggregate"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_and"},"value":{"kind":"ListValue","values":[{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"status"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_eq"},"value":{"kind":"IntValue","value":"2"}}]}}]},{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"employee_type"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_eq"},"value":{"kind":"IntValue","value":"2"}}]}}]}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"aggregate"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}},{"kind":"Field","alias":{"kind":"Name","value":"outsourcedEmployeeCount"},"name":{"kind":"Name","value":"employees_aggregate"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_and"},"value":{"kind":"ListValue","values":[{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"status"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_eq"},"value":{"kind":"IntValue","value":"2"}}]}}]},{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"employee_type"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_eq"},"value":{"kind":"IntValue","value":"4"}}]}}]}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"aggregate"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}},{"kind":"Field","alias":{"kind":"Name","value":"trialEmployeeCount"},"name":{"kind":"Name","value":"employees_aggregate"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_and"},"value":{"kind":"ListValue","values":[{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"status"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_eq"},"value":{"kind":"IntValue","value":"2"}}]}}]},{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"application_status"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_eq"},"value":{"kind":"IntValue","value":"2"}}]}}]}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"aggregate"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}},{"kind":"Field","alias":{"kind":"Name","value":"awaitUnemployCount"},"name":{"kind":"Name","value":"employees_aggregate"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"status"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_eq"},"value":{"kind":"IntValue","value":"4"}}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"aggregate"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}},{"kind":"Field","alias":{"kind":"Name","value":"notEmployedCount"},"name":{"kind":"Name","value":"employees_aggregate"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"status"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_eq"},"value":{"kind":"IntValue","value":"5"}}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"aggregate"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}},{"kind":"Field","alias":{"kind":"Name","value":"awaitOnboardingCount"},"name":{"kind":"Name","value":"employees_aggregate"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"status"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_eq"},"value":{"kind":"IntValue","value":"1"}}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"aggregate"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}},{"kind":"Field","alias":{"kind":"Name","value":"awaitRegularizedCount"},"name":{"kind":"Name","value":"employees_aggregate"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"application_status"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_eq"},"value":{"kind":"IntValue","value":"2"}}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"aggregate"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}},{"kind":"Field","alias":{"kind":"Name","value":"overdueRegularizedCount"},"name":{"kind":"Name","value":"employees_aggregate"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_and"},"value":{"kind":"ListValue","values":[{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"actual_conversion_time"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_lt"},"value":{"kind":"Variable","name":{"kind":"Name","value":"todayDate"}}}]}}]},{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"application_status"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_eq"},"value":{"kind":"IntValue","value":"2"}}]}}]}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"aggregate"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}},{"kind":"Field","alias":{"kind":"Name","value":"thisMonthAwaitRegularizedCount"},"name":{"kind":"Name","value":"employees_aggregate"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_and"},"value":{"kind":"ListValue","values":[{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"actual_conversion_time"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_gte"},"value":{"kind":"Variable","name":{"kind":"Name","value":"thisMonthDateStart"}}}]}}]},{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"actual_conversion_time"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_lte"},"value":{"kind":"Variable","name":{"kind":"Name","value":"thisMonthDateEnd"}}}]}}]},{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"application_status"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_eq"},"value":{"kind":"IntValue","value":"2"}}]}}]}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"aggregate"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}},{"kind":"Field","alias":{"kind":"Name","value":"nextMonthAwaitRegularizedCount"},"name":{"kind":"Name","value":"employees_aggregate"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_and"},"value":{"kind":"ListValue","values":[{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"actual_conversion_time"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_gte"},"value":{"kind":"Variable","name":{"kind":"Name","value":"nextMonthDateStart"}}}]}}]},{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"actual_conversion_time"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_lte"},"value":{"kind":"Variable","name":{"kind":"Name","value":"nextMonthDateEnd"}}}]}}]},{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"application_status"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_eq"},"value":{"kind":"IntValue","value":"2"}}]}}]}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"aggregate"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}},{"kind":"Field","alias":{"kind":"Name","value":"todayHireDateCount"},"name":{"kind":"Name","value":"employees_aggregate"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_and"},"value":{"kind":"ListValue","values":[{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"hire_date_mm_dd"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_gte"},"value":{"kind":"Variable","name":{"kind":"Name","value":"todayDateMMDD"}}}]}}]},{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"hire_date_mm_dd"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_lte"},"value":{"kind":"Variable","name":{"kind":"Name","value":"todayDateMMDD"}}}]}}]},{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"status"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_eq"},"value":{"kind":"IntValue","value":"2"}}]}}]}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"aggregate"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}},{"kind":"Field","alias":{"kind":"Name","value":"thisWeekHireDateCount"},"name":{"kind":"Name","value":"employees_aggregate"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_and"},"value":{"kind":"ListValue","values":[{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"hire_date_mm_dd"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_gte"},"value":{"kind":"Variable","name":{"kind":"Name","value":"thisWeekDateStartMMDD"}}}]}}]},{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"hire_date_mm_dd"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_lte"},"value":{"kind":"Variable","name":{"kind":"Name","value":"thisWeekDateEndMMDD"}}}]}}]},{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"status"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_eq"},"value":{"kind":"IntValue","value":"2"}}]}}]}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"aggregate"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}},{"kind":"Field","alias":{"kind":"Name","value":"thisMonthHireDateCount"},"name":{"kind":"Name","value":"employees_aggregate"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_and"},"value":{"kind":"ListValue","values":[{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"hire_date_mm_dd"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_gte"},"value":{"kind":"Variable","name":{"kind":"Name","value":"thisMonthDateStartMMDD"}}}]}}]},{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"hire_date_mm_dd"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_lte"},"value":{"kind":"Variable","name":{"kind":"Name","value":"thisMonthDateEndMMDD"}}}]}}]},{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"status"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_eq"},"value":{"kind":"IntValue","value":"2"}}]}}]}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"aggregate"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}},{"kind":"Field","alias":{"kind":"Name","value":"nextMonthHireDateCount"},"name":{"kind":"Name","value":"employees_aggregate"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_and"},"value":{"kind":"ListValue","values":[{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"hire_date_mm_dd"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_gte"},"value":{"kind":"Variable","name":{"kind":"Name","value":"nextMonthDateStartMMDD"}}}]}}]},{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"hire_date_mm_dd"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_lte"},"value":{"kind":"Variable","name":{"kind":"Name","value":"nextMonthDateEndMMDD"}}}]}}]},{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"status"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_eq"},"value":{"kind":"IntValue","value":"2"}}]}}]}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"aggregate"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}},{"kind":"Field","alias":{"kind":"Name","value":"lastMonthHireDateCount"},"name":{"kind":"Name","value":"employees_aggregate"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_and"},"value":{"kind":"ListValue","values":[{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"hire_date_mm_dd"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_gte"},"value":{"kind":"Variable","name":{"kind":"Name","value":"lastMonthDateStartMMDD"}}}]}}]},{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"hire_date_mm_dd"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_lte"},"value":{"kind":"Variable","name":{"kind":"Name","value":"lastMonthDateEndMMDD"}}}]}}]},{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"status"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_eq"},"value":{"kind":"IntValue","value":"2"}}]}}]}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"aggregate"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}},{"kind":"Field","alias":{"kind":"Name","value":"todayBirthdayCount"},"name":{"kind":"Name","value":"employees_aggregate"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_and"},"value":{"kind":"ListValue","values":[{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"birthday_mm_dd"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_gte"},"value":{"kind":"Variable","name":{"kind":"Name","value":"todayDateMMDD"}}}]}}]},{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"birthday_mm_dd"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_lte"},"value":{"kind":"Variable","name":{"kind":"Name","value":"todayDateMMDD"}}}]}}]},{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"status"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_eq"},"value":{"kind":"IntValue","value":"2"}}]}}]}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"aggregate"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}},{"kind":"Field","alias":{"kind":"Name","value":"thisWeekBirthdayCount"},"name":{"kind":"Name","value":"employees_aggregate"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_and"},"value":{"kind":"ListValue","values":[{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"birthday_mm_dd"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_gte"},"value":{"kind":"Variable","name":{"kind":"Name","value":"thisWeekDateStartMMDD"}}}]}}]},{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"birthday_mm_dd"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_lte"},"value":{"kind":"Variable","name":{"kind":"Name","value":"thisWeekDateEndMMDD"}}}]}}]},{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"status"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_eq"},"value":{"kind":"IntValue","value":"2"}}]}}]}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"aggregate"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}},{"kind":"Field","alias":{"kind":"Name","value":"thisMonthBirthdayCount"},"name":{"kind":"Name","value":"employees_aggregate"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_and"},"value":{"kind":"ListValue","values":[{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"birthday_mm_dd"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_gte"},"value":{"kind":"Variable","name":{"kind":"Name","value":"thisMonthDateStartMMDD"}}}]}}]},{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"birthday_mm_dd"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_lte"},"value":{"kind":"Variable","name":{"kind":"Name","value":"thisMonthDateEndMMDD"}}}]}}]},{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"status"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_eq"},"value":{"kind":"IntValue","value":"2"}}]}}]}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"aggregate"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}},{"kind":"Field","alias":{"kind":"Name","value":"nextMonthBirthdayCount"},"name":{"kind":"Name","value":"employees_aggregate"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_and"},"value":{"kind":"ListValue","values":[{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"birthday_mm_dd"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_gte"},"value":{"kind":"Variable","name":{"kind":"Name","value":"nextMonthDateStartMMDD"}}}]}}]},{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"birthday_mm_dd"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_lte"},"value":{"kind":"Variable","name":{"kind":"Name","value":"nextMonthDateEndMMDD"}}}]}}]},{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"status"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_eq"},"value":{"kind":"IntValue","value":"2"}}]}}]}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"aggregate"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}},{"kind":"Field","alias":{"kind":"Name","value":"lastMonthBirthdayCount"},"name":{"kind":"Name","value":"employees_aggregate"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_and"},"value":{"kind":"ListValue","values":[{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"birthday_mm_dd"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_gte"},"value":{"kind":"Variable","name":{"kind":"Name","value":"lastMonthDateStartMMDD"}}}]}}]},{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"birthday_mm_dd"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_lte"},"value":{"kind":"Variable","name":{"kind":"Name","value":"lastMonthDateEndMMDD"}}}]}}]},{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"status"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_eq"},"value":{"kind":"IntValue","value":"2"}}]}}]}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"aggregate"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}}]}}]} as unknown as DocumentNode<EmployeesStatusCountQuery, EmployeesStatusCountQueryVariables>;
export const EmployeeAttachmentDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"EmployeeAttachment"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"where"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"employee_attachments_bool_exp"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"employee_attachments"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"Variable","name":{"kind":"Name","value":"where"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"employee_id"}},{"kind":"Field","name":{"kind":"Name","value":"file_name"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"kind"}},{"kind":"Field","name":{"kind":"Name","value":"path"}}]}}]}}]} as unknown as DocumentNode<EmployeeAttachmentQuery, EmployeeAttachmentQueryVariables>;
export const EmployeesByPkDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"EmployeesByPk"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"employees_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"id_number"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"employee_form_status"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"mobile"}},{"kind":"Field","name":{"kind":"Name","value":"avatar"}},{"kind":"Field","name":{"kind":"Name","value":"hire_date"}},{"kind":"Field","name":{"kind":"Name","value":"job_title"}},{"kind":"Field","name":{"kind":"Name","value":"last_day"}},{"kind":"Field","name":{"kind":"Name","value":"departure_type"}},{"kind":"Field","name":{"kind":"Name","value":"birthday"}},{"kind":"Field","name":{"kind":"Name","value":"departure_type"}},{"kind":"Field","name":{"kind":"Name","value":"employee_type"}},{"kind":"Field","name":{"kind":"Name","value":"department_id"}},{"kind":"Field","name":{"kind":"Name","value":"department"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"id"}}]}},{"kind":"Field","name":{"kind":"Name","value":"gender_id"}},{"kind":"Field","name":{"kind":"Name","value":"marital_status"}},{"kind":"Field","name":{"kind":"Name","value":"medical_insurance"}},{"kind":"Field","name":{"kind":"Name","value":"ethnicity"}},{"kind":"Field","name":{"kind":"Name","value":"application"}},{"kind":"Field","name":{"kind":"Name","value":"application_status"}},{"kind":"Field","name":{"kind":"Name","value":"native_region"}},{"kind":"Field","name":{"kind":"Name","value":"primary_emergency_contact"}},{"kind":"Field","name":{"kind":"Name","value":"probation_months"}},{"kind":"Field","name":{"kind":"Name","value":"provident_fund_account"}},{"kind":"Field","name":{"kind":"Name","value":"social_security_number"}},{"kind":"Field","name":{"kind":"Name","value":"bank_name"}},{"kind":"Field","name":{"kind":"Name","value":"bank_account_number"}},{"kind":"Field","name":{"kind":"Name","value":"salary_type_id"}},{"kind":"Field","name":{"kind":"Name","value":"basic_salary"}},{"kind":"Field","name":{"kind":"Name","value":"basic_salary_monthly"}},{"kind":"Field","name":{"kind":"Name","value":"manager_id"}},{"kind":"Field","name":{"kind":"Name","value":"work_age_type"}},{"kind":"Field","name":{"kind":"Name","value":"family_address"}},{"kind":"Field","name":{"kind":"Name","value":"hukou_type"}},{"kind":"Field","name":{"kind":"Name","value":"hukou_location"}},{"kind":"Field","name":{"kind":"Name","value":"actual_conversion_time"}},{"kind":"Field","name":{"kind":"Name","value":"actual_overboard_time"}},{"kind":"Field","name":{"kind":"Name","value":"overboard_note"}},{"kind":"Field","name":{"kind":"Name","value":"employee_attachments"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"kind"}},{"kind":"Field","name":{"kind":"Name","value":"path"}},{"kind":"Field","name":{"kind":"Name","value":"file_name"}}]}}]}}]}}]} as unknown as DocumentNode<EmployeesByPkQuery, EmployeesByPkQueryVariables>;
export const EmployeeSalaryMonthlyDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"EmployeeSalaryMonthly"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"offset"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"limit"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"where"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"employees_bool_exp"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"where1"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"attendance_bool_exp"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"employees"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"limit"},"value":{"kind":"Variable","name":{"kind":"Name","value":"limit"}}},{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"Variable","name":{"kind":"Name","value":"offset"}}},{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"Variable","name":{"kind":"Name","value":"where"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"id_number"}},{"kind":"Field","name":{"kind":"Name","value":"job_title"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"avatar"}},{"kind":"Field","name":{"kind":"Name","value":"salary_type"}},{"kind":"Field","name":{"kind":"Name","value":"department"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"attendances_aggregate"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"Variable","name":{"kind":"Name","value":"where1"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"aggregate"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"count"}},{"kind":"Field","name":{"kind":"Name","value":"sum"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"actual_length_hour"}},{"kind":"Field","name":{"kind":"Name","value":"actual_length_day"}},{"kind":"Field","name":{"kind":"Name","value":"scheduled_length_day"}},{"kind":"Field","name":{"kind":"Name","value":"scheduled_length_hour"}}]}}]}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"employees_aggregate"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"Variable","name":{"kind":"Name","value":"where"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"aggregate"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}}]}}]} as unknown as DocumentNode<EmployeeSalaryMonthlyQuery, EmployeeSalaryMonthlyQueryVariables>;
export const EmployeeByPkAttendancesDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"EmployeeByPkAttendances"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"where"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"attendance_bool_exp"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"employees_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"department_id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"salary_type"}},{"kind":"Field","name":{"kind":"Name","value":"basic_salary"}},{"kind":"Field","name":{"kind":"Name","value":"basic_salary_monthly"}},{"kind":"Field","name":{"kind":"Name","value":"attendances"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"Variable","name":{"kind":"Name","value":"where"}}},{"kind":"Argument","name":{"kind":"Name","value":"order_by"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"date"},"value":{"kind":"EnumValue","value":"asc"}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"date"}},{"kind":"Field","name":{"kind":"Name","value":"clock_in_time"}},{"kind":"Field","name":{"kind":"Name","value":"clock_in_result"}},{"kind":"Field","name":{"kind":"Name","value":"clock_out_time"}},{"kind":"Field","name":{"kind":"Name","value":"clock_out_result"}},{"kind":"Field","name":{"kind":"Name","value":"clockInResult"}},{"kind":"Field","name":{"kind":"Name","value":"clockOutResult"}},{"kind":"Field","name":{"kind":"Name","value":"department"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"attendance_location"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"shift_list"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"shift_name"}},{"kind":"Field","name":{"kind":"Name","value":"on_time"}},{"kind":"Field","name":{"kind":"Name","value":"off_time"}}]}}]}}]}}]}}]} as unknown as DocumentNode<EmployeeByPkAttendancesQuery, EmployeeByPkAttendancesQueryVariables>;
export const FoodItemsByPkDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"FoodItemsByPk"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"item_id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"fooditems_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"item_id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"item_id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"item_id"}},{"kind":"Field","name":{"kind":"Name","value":"item_name"}},{"kind":"Field","name":{"kind":"Name","value":"std_price"}},{"kind":"Field","name":{"kind":"Name","value":"big_pic_url"}},{"kind":"Field","name":{"kind":"Name","value":"brand"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"ingredients"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"supplyitem"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"itemId"}},{"kind":"Field","name":{"kind":"Name","value":"itemName"}},{"kind":"Field","name":{"kind":"Name","value":"mainUnit"}},{"kind":"Field","name":{"kind":"Name","value":"itemImage"}},{"kind":"Field","name":{"kind":"Name","value":"netRate"}},{"kind":"Field","name":{"kind":"Name","value":"dsstorebills"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"limit"},"value":{"kind":"IntValue","value":"1"}},{"kind":"Argument","name":{"kind":"Name","value":"order_by"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"auditDate"},"value":{"kind":"EnumValue","value":"desc"}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"ArriveMoney"}},{"kind":"Field","name":{"kind":"Name","value":"InBusAmount"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"qty"}}]}}]}}]}}]} as unknown as DocumentNode<FoodItemsByPkQuery, FoodItemsByPkQueryVariables>;
export const GetLeaveTypesDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetLeaveTypes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"leave_types"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"service_entitlements"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"years_of_service"}},{"kind":"Field","name":{"kind":"Name","value":"max_days"}},{"kind":"Field","name":{"kind":"Name","value":"salary_type"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]}}]}}]} as unknown as DocumentNode<GetLeaveTypesQuery, GetLeaveTypesQueryVariables>;
export const GetLeaveTypesByPkDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetLeaveTypesByPk"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"leave_types_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]} as unknown as DocumentNode<GetLeaveTypesByPkQuery, GetLeaveTypesByPkQueryVariables>;
export const GetMonthlySalaryDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetMonthlySalary"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"limit"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"offset"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"where"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"monthlysalary_bool_exp"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"where1"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"bonusdeductions_bool_exp"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"where2"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"insurance_funds_bool_exp"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"monthlysalary"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"limit"},"value":{"kind":"Variable","name":{"kind":"Name","value":"limit"}}},{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"Variable","name":{"kind":"Name","value":"offset"}}},{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"Variable","name":{"kind":"Name","value":"where"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"employee_id"}},{"kind":"Field","name":{"kind":"Name","value":"attendance_department_id"}},{"kind":"Field","name":{"kind":"Name","value":"attendance_department"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"employee_department_id"}},{"kind":"Field","name":{"kind":"Name","value":"employee_department"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"employee"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"avatar"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"job_title"}},{"kind":"Field","name":{"kind":"Name","value":"birthday"}},{"kind":"Field","name":{"kind":"Name","value":"id_number"}},{"kind":"Field","name":{"kind":"Name","value":"bank_name"}},{"kind":"Field","name":{"kind":"Name","value":"bank_account_number"}},{"kind":"Field","name":{"kind":"Name","value":"hire_date"}},{"kind":"Field","name":{"kind":"Name","value":"basic_salary"}},{"kind":"Field","name":{"kind":"Name","value":"bonusdeductions"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"Variable","name":{"kind":"Name","value":"where1"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"amount"}},{"kind":"Field","name":{"kind":"Name","value":"department_id"}},{"kind":"Field","name":{"kind":"Name","value":"bonusdeductiontype"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"is_bonus"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"insurance_funds"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"Variable","name":{"kind":"Name","value":"where2"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"amount"}},{"kind":"Field","name":{"kind":"Name","value":"department_id"}},{"kind":"Field","name":{"kind":"Name","value":"insurance_fund_type"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"is_personal"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"department"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"work_age"}},{"kind":"Field","name":{"kind":"Name","value":"work_age_type"}},{"kind":"Field","name":{"kind":"Name","value":"basic_salary"}},{"kind":"Field","name":{"kind":"Name","value":"basic_salary_base"}},{"kind":"Field","name":{"kind":"Name","value":"basic_salary_monthly"}},{"kind":"Field","name":{"kind":"Name","value":"insurance_subsidy"}},{"kind":"Field","name":{"kind":"Name","value":"overtime_pay"}},{"kind":"Field","name":{"kind":"Name","value":"position_pay"}},{"kind":"Field","name":{"kind":"Name","value":"work_age_bonus"}},{"kind":"Field","name":{"kind":"Name","value":"bonus_deduction"}},{"kind":"Field","name":{"kind":"Name","value":"personal_insurance_funds"}},{"kind":"Field","name":{"kind":"Name","value":"corp_insurance_funds"}},{"kind":"Field","name":{"kind":"Name","value":"net_salary"}},{"kind":"Field","name":{"kind":"Name","value":"corp_salary_cost"}},{"kind":"Field","name":{"kind":"Name","value":"gross_salary"}},{"kind":"Field","name":{"kind":"Name","value":"salary_type"}},{"kind":"Field","name":{"kind":"Name","value":"total_length_day"}},{"kind":"Field","name":{"kind":"Name","value":"total_length_hour"}},{"kind":"Field","name":{"kind":"Name","value":"employee_confirm"}}]}},{"kind":"Field","name":{"kind":"Name","value":"monthlysalary_aggregate"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"Variable","name":{"kind":"Name","value":"where"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"aggregate"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"count"}},{"kind":"Field","name":{"kind":"Name","value":"sum"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"corp_salary_cost"}}]}}]}}]}}]}}]} as unknown as DocumentNode<GetMonthlySalaryQuery, GetMonthlySalaryQueryVariables>;
export const RoleListsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"RoleLists"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"where"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"roles_bool_exp"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"roles"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"Variable","name":{"kind":"Name","value":"where"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"employees_roles"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"employee"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"avatar"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"role_nav_sm_categories"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nav_sm_category"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"role_scopes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"scope"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"roles_aggregate"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"Variable","name":{"kind":"Name","value":"where"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"aggregate"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}}]}}]} as unknown as DocumentNode<RoleListsQuery, RoleListsQueryVariables>;
export const NavTreeListDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"NavTreeList"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nav_xl_categories"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"nav_bg_categories"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"nav_sm_categories"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"side_nav_visible"}}]}}]}}]}}]}}]} as unknown as DocumentNode<NavTreeListQuery, NavTreeListQueryVariables>;
export const RolesByIdDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"RolesById"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"where"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"employees_roles_bool_exp"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"roles_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"employees_roles"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"Variable","name":{"kind":"Name","value":"where"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"employee"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"avatar"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"department"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"mobile"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"role_nav_sm_categories"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nav_sm_category"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"role_scopes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"scope"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]}}]}}]} as unknown as DocumentNode<RolesByIdQuery, RolesByIdQueryVariables>;
export const GetSalaryTypesDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetSalaryTypes"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"where"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"service_entitlement_bool_exp"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"salary_types"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"service_entitlements"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"Variable","name":{"kind":"Name","value":"where"}}},{"kind":"Argument","name":{"kind":"Name","value":"order_by"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"years_of_service"},"value":{"kind":"EnumValue","value":"asc"}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"max_days"}},{"kind":"Field","name":{"kind":"Name","value":"years_of_service"}}]}}]}}]}}]} as unknown as DocumentNode<GetSalaryTypesQuery, GetSalaryTypesQueryVariables>;
export const GetSalaryTypesByPkDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetSalaryTypesByPk"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"salary_types_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]} as unknown as DocumentNode<GetSalaryTypesByPkQuery, GetSalaryTypesByPkQueryVariables>;
export const ShiftsListDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"ShiftsList"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"where"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"shift_lists_bool_exp"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"limit"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"offset"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"shift_lists"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"Variable","name":{"kind":"Name","value":"where"}}},{"kind":"Argument","name":{"kind":"Name","value":"limit"},"value":{"kind":"Variable","name":{"kind":"Name","value":"limit"}}},{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"Variable","name":{"kind":"Name","value":"offset"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"off_time"}},{"kind":"Field","name":{"kind":"Name","value":"on_time"}},{"kind":"Field","name":{"kind":"Name","value":"shift_name"}},{"kind":"Field","name":{"kind":"Name","value":"updated_at"}},{"kind":"Field","name":{"kind":"Name","value":"created_by"}},{"kind":"Field","name":{"kind":"Name","value":"scheduled_length_day"}},{"kind":"Field","name":{"kind":"Name","value":"scheduled_length_hour"}}]}},{"kind":"Field","name":{"kind":"Name","value":"shift_lists_aggregate"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"Variable","name":{"kind":"Name","value":"where"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"aggregate"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}}]}}]} as unknown as DocumentNode<ShiftsListQuery, ShiftsListQueryVariables>;
export const ShiftByIdDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"ShiftById"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"shift_lists_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"punch_times"}},{"kind":"Field","name":{"kind":"Name","value":"shift_name"}},{"kind":"Field","name":{"kind":"Name","value":"no_need_off"}},{"kind":"Field","name":{"kind":"Name","value":"on_time"}},{"kind":"Field","name":{"kind":"Name","value":"off_time"}},{"kind":"Field","name":{"kind":"Name","value":"late_minutes_as_late"}},{"kind":"Field","name":{"kind":"Name","value":"late_minutes_as_lack"}},{"kind":"Field","name":{"kind":"Name","value":"early_minutes_as_early"}},{"kind":"Field","name":{"kind":"Name","value":"early_minutes_as_lack"}},{"kind":"Field","name":{"kind":"Name","value":"scheduled_length_day"}},{"kind":"Field","name":{"kind":"Name","value":"scheduled_length_hour"}}]}}]}}]} as unknown as DocumentNode<ShiftByIdQuery, ShiftByIdQueryVariables>;
export const SolditemsSummaryDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"SolditemsSummary"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"limit"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"offset"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"order_by"}},"type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"solditems_summary_order_by"}}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"end_date"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"date"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"shop_ids"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"_text"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"start_date"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"date"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"func_solditems_summary"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"args"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"start_date"},"value":{"kind":"Variable","name":{"kind":"Name","value":"start_date"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"shop_ids"},"value":{"kind":"Variable","name":{"kind":"Name","value":"shop_ids"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"end_date"},"value":{"kind":"Variable","name":{"kind":"Name","value":"end_date"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"limit"},"value":{"kind":"Variable","name":{"kind":"Name","value":"limit"}}},{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"Variable","name":{"kind":"Name","value":"offset"}}},{"kind":"Argument","name":{"kind":"Name","value":"order_by"},"value":{"kind":"Variable","name":{"kind":"Name","value":"order_by"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"item_id"}},{"kind":"Field","name":{"kind":"Name","value":"income_money"}},{"kind":"Field","name":{"kind":"Name","value":"last_qty"}},{"kind":"Field","name":{"kind":"Name","value":"last_price"}},{"kind":"Field","name":{"kind":"Name","value":"fooditem"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"item_name"}},{"kind":"Field","name":{"kind":"Name","value":"brand"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"func_solditems_summary_aggregate"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"args"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"start_date"},"value":{"kind":"Variable","name":{"kind":"Name","value":"start_date"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"end_date"},"value":{"kind":"Variable","name":{"kind":"Name","value":"end_date"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"shop_ids"},"value":{"kind":"Variable","name":{"kind":"Name","value":"shop_ids"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"aggregate"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}}]}}]} as unknown as DocumentNode<SolditemsSummaryQuery, SolditemsSummaryQueryVariables>;
export const StoreDepartmentsTreeDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"StoreDepartmentsTree"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"storeDepartments"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"value"}},{"kind":"Field","name":{"kind":"Name","value":"is_dept"}},{"kind":"Field","name":{"kind":"Name","value":"children"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"is_dept"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"value"}},{"kind":"Field","name":{"kind":"Name","value":"children"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"is_dept"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"value"}}]}}]}}]}}]}}]} as unknown as DocumentNode<StoreDepartmentsTreeQuery, StoreDepartmentsTreeQueryVariables>;
export const StoresDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"Stores"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"stores"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"brand_id"}},{"kind":"Field","name":{"kind":"Name","value":"brand"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]}}]} as unknown as DocumentNode<StoresQuery, StoresQueryVariables>;
export const StoreListDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"StoreList"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"where"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"store_employee_bool_exp"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"store_employee"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"Variable","name":{"kind":"Name","value":"where"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"store"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"department"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]}}]} as unknown as DocumentNode<StoreListQuery, StoreListQueryVariables>;
export const StoresEmployeesDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"StoresEmployees"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"where"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"employees_bool_exp"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"stores"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"department"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"child_departments"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"employees"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"Variable","name":{"kind":"Name","value":"where"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"avatar"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"mobile"}},{"kind":"Field","name":{"kind":"Name","value":"job_title"}},{"kind":"Field","name":{"kind":"Name","value":"hire_date"}},{"kind":"Field","name":{"kind":"Name","value":"department"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"id"}}]}},{"kind":"Field","name":{"kind":"Name","value":"actual_overboard_time"}},{"kind":"Field","name":{"kind":"Name","value":"overboard_note"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"employees"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"Variable","name":{"kind":"Name","value":"where"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"avatar"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"mobile"}},{"kind":"Field","name":{"kind":"Name","value":"job_title"}},{"kind":"Field","name":{"kind":"Name","value":"hire_date"}},{"kind":"Field","name":{"kind":"Name","value":"department"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"id"}}]}},{"kind":"Field","name":{"kind":"Name","value":"actual_overboard_time"}},{"kind":"Field","name":{"kind":"Name","value":"overboard_note"}}]}}]}}]}}]}}]} as unknown as DocumentNode<StoresEmployeesQuery, StoresEmployeesQueryVariables>;
export const StoresEmployeesStatusCountDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"StoresEmployeesStatusCount"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"isEmployedCount"},"name":{"kind":"Name","value":"stores"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"departments"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"child_departments"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"employees_aggregate"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"status"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_eq"},"value":{"kind":"IntValue","value":"2"}}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"aggregate"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"employees_aggregate"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"status"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_eq"},"value":{"kind":"IntValue","value":"2"}}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"aggregate"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}}]}}]}},{"kind":"Field","alias":{"kind":"Name","value":"regularEmployeeCount"},"name":{"kind":"Name","value":"stores"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"departments"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"child_departments"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"employees_aggregate"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_and"},"value":{"kind":"ListValue","values":[{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"status"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_eq"},"value":{"kind":"IntValue","value":"2"}}]}}]},{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"employee_type"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_eq"},"value":{"kind":"IntValue","value":"1"}}]}}]}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"aggregate"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"employees_aggregate"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_and"},"value":{"kind":"ListValue","values":[{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"status"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_eq"},"value":{"kind":"IntValue","value":"2"}}]}}]},{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"employee_type"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_eq"},"value":{"kind":"IntValue","value":"1"}}]}}]}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"aggregate"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}}]}}]}},{"kind":"Field","alias":{"kind":"Name","value":"internEmployeeCount"},"name":{"kind":"Name","value":"stores"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"departments"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"child_departments"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"employees_aggregate"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_and"},"value":{"kind":"ListValue","values":[{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"status"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_eq"},"value":{"kind":"IntValue","value":"2"}}]}}]},{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"employee_type"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_eq"},"value":{"kind":"IntValue","value":"2"}}]}}]}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"aggregate"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"employees_aggregate"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_and"},"value":{"kind":"ListValue","values":[{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"status"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_eq"},"value":{"kind":"IntValue","value":"2"}}]}}]},{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"employee_type"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_eq"},"value":{"kind":"IntValue","value":"2"}}]}}]}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"aggregate"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}}]}}]}},{"kind":"Field","alias":{"kind":"Name","value":"awaitUnemployCount"},"name":{"kind":"Name","value":"stores"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"departments"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"child_departments"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"employees_aggregate"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"status"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_eq"},"value":{"kind":"IntValue","value":"4"}}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"aggregate"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"employees_aggregate"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"status"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_eq"},"value":{"kind":"IntValue","value":"4"}}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"aggregate"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}}]}}]}},{"kind":"Field","alias":{"kind":"Name","value":"notEmployedCount"},"name":{"kind":"Name","value":"stores"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"departments"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"child_departments"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"employees_aggregate"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"status"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_eq"},"value":{"kind":"IntValue","value":"5"}}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"aggregate"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"employees_aggregate"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"status"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_eq"},"value":{"kind":"IntValue","value":"5"}}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"aggregate"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}}]}}]}},{"kind":"Field","alias":{"kind":"Name","value":"awaitOnboardingCount"},"name":{"kind":"Name","value":"stores"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"departments"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"child_departments"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"employees_aggregate"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"status"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_eq"},"value":{"kind":"IntValue","value":"1"}}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"aggregate"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"employees_aggregate"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"status"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_eq"},"value":{"kind":"IntValue","value":"1"}}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"aggregate"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}}]}}]}}]}}]} as unknown as DocumentNode<StoresEmployeesStatusCountQuery, StoresEmployeesStatusCountQueryVariables>;
export const StoreDepartmentsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"StoreDepartments"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"stores"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"departments"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"child_departments"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]}}]}}]} as unknown as DocumentNode<StoreDepartmentsQuery, StoreDepartmentsQueryVariables>;
export const StoreEmployeeDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"StoreEmployee"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"where"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"store_employee_bool_exp"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"store_employee"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"Variable","name":{"kind":"Name","value":"where"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"employee"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"avatar"}}]}},{"kind":"Field","name":{"kind":"Name","value":"store"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]}}]} as unknown as DocumentNode<StoreEmployeeQuery, StoreEmployeeQueryVariables>;
export const SupplyItemsByPkDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"SupplyItemsByPk"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"itemId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"supplyitems_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"itemId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"itemId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"itemId"}},{"kind":"Field","name":{"kind":"Name","value":"itemName"}},{"kind":"Field","name":{"kind":"Name","value":"itemImage"}},{"kind":"Field","name":{"kind":"Name","value":"itemTypeName"}},{"kind":"Field","name":{"kind":"Name","value":"mainUnit"}},{"kind":"Field","name":{"kind":"Name","value":"reportUnit"}},{"kind":"Field","name":{"kind":"Name","value":"reportUnitRatio"}},{"kind":"Field","name":{"kind":"Name","value":"netRate"}},{"kind":"Field","name":{"kind":"Name","value":"dsstorebills"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"limit"},"value":{"kind":"IntValue","value":"1"}},{"kind":"Argument","name":{"kind":"Name","value":"order_by"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"auditDate"},"value":{"kind":"EnumValue","value":"desc"}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"ArriveMoney"}},{"kind":"Field","name":{"kind":"Name","value":"InBusAmount"}}]}},{"kind":"Field","name":{"kind":"Name","value":"ingredients"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"fooditem"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"brand"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"item_name"}}]}}]}}]}}]}}]} as unknown as DocumentNode<SupplyItemsByPkQuery, SupplyItemsByPkQueryVariables>;
export const VerifyEmployeeFieldsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"VerifyEmployeeFields"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"limit"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"offset"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"verifyEmployeeFields"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"limit"},"value":{"kind":"Variable","name":{"kind":"Name","value":"limit"}}},{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"Variable","name":{"kind":"Name","value":"offset"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"types"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"employee"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"avatar"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"department"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"status"}}]}}]}}]}}]} as unknown as DocumentNode<VerifyEmployeeFieldsQuery, VerifyEmployeeFieldsQueryVariables>;
export const ViewMonthlySalaryDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"ViewMonthlySalary"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"limit"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"offset"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"where"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"view_monthly_salary_bool_exp"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"where1"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"bonusdeductions_bool_exp"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"where2"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"insurance_funds_bool_exp"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"view_monthly_salary"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"Variable","name":{"kind":"Name","value":"where"}}},{"kind":"Argument","name":{"kind":"Name","value":"limit"},"value":{"kind":"Variable","name":{"kind":"Name","value":"limit"}}},{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"Variable","name":{"kind":"Name","value":"offset"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"employee_id"}},{"kind":"Field","name":{"kind":"Name","value":"attendance_department_id"}},{"kind":"Field","name":{"kind":"Name","value":"attendance_department"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"employee"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"avatar"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"job_title"}},{"kind":"Field","name":{"kind":"Name","value":"birthday"}},{"kind":"Field","name":{"kind":"Name","value":"id_number"}},{"kind":"Field","name":{"kind":"Name","value":"bank_name"}},{"kind":"Field","name":{"kind":"Name","value":"bank_account_number"}},{"kind":"Field","name":{"kind":"Name","value":"hire_date"}},{"kind":"Field","name":{"kind":"Name","value":"basic_salary"}},{"kind":"Field","name":{"kind":"Name","value":"bonusdeductions"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"Variable","name":{"kind":"Name","value":"where1"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"amount"}},{"kind":"Field","name":{"kind":"Name","value":"department_id"}},{"kind":"Field","name":{"kind":"Name","value":"bonusdeductiontype"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"is_bonus"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"insurance_funds"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"Variable","name":{"kind":"Name","value":"where2"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"amount"}},{"kind":"Field","name":{"kind":"Name","value":"department_id"}},{"kind":"Field","name":{"kind":"Name","value":"insurance_fund_type"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"is_personal"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"department"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"work_age"}},{"kind":"Field","name":{"kind":"Name","value":"work_age_type"}},{"kind":"Field","name":{"kind":"Name","value":"basic_salary"}},{"kind":"Field","name":{"kind":"Name","value":"basic_salary_base"}},{"kind":"Field","name":{"kind":"Name","value":"basic_salary_monthly"}},{"kind":"Field","name":{"kind":"Name","value":"insurance_subsidy"}},{"kind":"Field","name":{"kind":"Name","value":"overtime_pay"}},{"kind":"Field","name":{"kind":"Name","value":"position_pay"}},{"kind":"Field","name":{"kind":"Name","value":"work_age_bonus"}},{"kind":"Field","name":{"kind":"Name","value":"bonus_deduction"}},{"kind":"Field","name":{"kind":"Name","value":"personal_insurance_funds"}},{"kind":"Field","name":{"kind":"Name","value":"corp_insurance_funds"}},{"kind":"Field","name":{"kind":"Name","value":"net_salary"}},{"kind":"Field","name":{"kind":"Name","value":"corp_salary_cost"}},{"kind":"Field","name":{"kind":"Name","value":"gross_salary"}},{"kind":"Field","name":{"kind":"Name","value":"salary_type"}},{"kind":"Field","name":{"kind":"Name","value":"total_length_day"}},{"kind":"Field","name":{"kind":"Name","value":"total_length_hour"}},{"kind":"Field","name":{"kind":"Name","value":"attendance_department"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"employee_department"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"view_monthly_salary_aggregate"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"Variable","name":{"kind":"Name","value":"where"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"aggregate"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"count"}},{"kind":"Field","name":{"kind":"Name","value":"sum"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"corp_salary_cost"}},{"kind":"Field","name":{"kind":"Name","value":"net_salary"}}]}}]}}]}}]}}]} as unknown as DocumentNode<ViewMonthlySalaryQuery, ViewMonthlySalaryQueryVariables>;