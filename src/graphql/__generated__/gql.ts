/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n   mutation DeleteAttendanceGroupLeaders($where: attendance_group_leaders_bool_exp!) {\n    delete_attendance_group_leaders(where: $where) {\n      returning {\n        attendance_group_id\n      }\n    }\n  }\n": types.DeleteAttendanceGroupLeadersDocument,
    "\n   mutation CreateAttendanceGroupLeaders($objects: [attendance_group_leaders_insert_input!]!) {\n    insert_attendance_group_leaders(objects: $objects) {\n      returning {\n        attendance_group_id\n      }\n    }\n  }\n": types.CreateAttendanceGroupLeadersDocument,
    "\n  mutation UpdateAttendanceLocations($updates:[attendance_locations_updates!]!) {\n    update_attendance_locations_many(updates: $updates) {\n      returning {\n        id\n      }\n    }\n  }\n": types.UpdateAttendanceLocationsDocument,
    "\n  mutation CreateAttendanceLocations($objects: [attendance_locations_insert_input!]!) {\n    insert_attendance_locations(objects: $objects) {\n      returning {\n        id\n      }\n    }\n  }\n": types.CreateAttendanceLocationsDocument,
    "\n  mutation DeleteAttendanceLocation($id: String!) {\n    delete_attendance_locations_by_pk(id: $id) {\n      id\n    }\n  }\n": types.DeleteAttendanceLocationDocument,
    "\n   mutation DeleteAttendanceGroupSubLeaders($where: attendance_group_subleaders_bool_exp!) {\n    delete_attendance_group_subleaders(where: $where) {\n      returning {\n        attendance_group_id\n      }\n    }\n  }\n": types.DeleteAttendanceGroupSubLeadersDocument,
    "\n    mutation CreateAttendanceGroupSubLeaders($objects: [attendance_group_subleaders_insert_input!]!) {\n    insert_attendance_group_subleaders(objects: $objects) {\n      returning {\n        attendance_group_id\n      }\n    }\n  }\n": types.CreateAttendanceGroupSubLeadersDocument,
    "\n  mutation DeleteAttendanchGroupById($id: String!) {\n    delete_attendance_groups_by_pk(id: $id) {\n      id\n    }\n  }\n": types.DeleteAttendanchGroupByIdDocument,
    "\nmutation CreateAttendanchGroup($objects: [attendance_groups_insert_input!]!) {\n    insert_attendance_groups(objects: $objects) {\n      returning {\n        id\n      }\n    }\n  }\n": types.CreateAttendanchGroupDocument,
    "\n mutation UpdateAttendanceGroup($id: String!, $_set: attendance_groups_set_input!) {\n    update_attendance_groups_by_pk(pk_columns: {id: $id}, _set: $_set) {\n      id\n    }\n  }\n": types.UpdateAttendanceGroupDocument,
    "\n  mutation DeleteAttendanceGroupShifts($where: attendance_group_shifts_bool_exp!) {\n    delete_attendance_group_shifts(where: $where) {\n      returning {\n        attendance_group_id\n      }\n    }\n  }\n": types.DeleteAttendanceGroupShiftsDocument,
    "\n   mutation CreateAttendanceGroupShifts($objects: [attendance_group_shifts_insert_input!]!) {\n    insert_attendance_group_shifts(objects: $objects) {\n      returning {\n        attendance_group_id\n      }\n    }\n  }\n": types.CreateAttendanceGroupShiftsDocument,
    "\n   mutation DeleteAttendance($where: attendance_bool_exp!) {\n    delete_attendance(where: $where) {\n      returning {\n        id\n      }\n    }\n  }\n": types.DeleteAttendanceDocument,
    "\n   mutation CreateAttendance($objects: [attendance_insert_input!]!) {\n    insert_attendance(objects: $objects) {\n      returning {\n        id\n      }\n    }\n  }\n": types.CreateAttendanceDocument,
    "\n   mutation UpdateAttendance($updates: [attendance_updates!]!) {\n    update_attendance_many(updates: $updates) {\n        returning {\n        id\n        }\n    }\n  }\n": types.UpdateAttendanceDocument,
    "\n   mutation UpdateAttendanceById($id: String!, $_set: attendance_set_input!) {\n    update_attendance_by_pk(pk_columns: {id: $id}, _set: $_set) {\n      id\n    }\n  }\n": types.UpdateAttendanceByIdDocument,
    "\n   mutation CreateBonusdeductions($object: bonusdeductions_insert_input!) {\n    insert_bonusdeductions_one(object: $object) {\n      id\n      employee_id\n      month\n      amount\n      bonusdeductiontype_id\n      department_id\n    }\n  }\n": types.CreateBonusdeductionsDocument,
    "\n mutation DeleteBonusdeductions( $id: String!) {\n    delete_bonusdeductions_by_pk(id: $id) {\n      department_id\n      employee_id\n      id\n      month\n      amount\n      bonusdeductiontype_id\n    }\n  }\n": types.DeleteBonusdeductionsDocument,
    "\n  mutation InsertBrandsEmployeesOne($brand_id: String, $employee_id: String) {\n    insert_brands_employees_one(\n      object: { brand_id: $brand_id, employee_id: $employee_id }\n    ) {\n      brand_id\n      employee_id\n    }\n  }\n": types.InsertBrandsEmployeesOneDocument,
    "\n  mutation DeleteBrandsEmployeesByPk(\n    $brand_id: String!\n    $employee_id: String!\n  ) {\n    delete_brands_employees_by_pk(\n      brand_id: $brand_id\n      employee_id: $employee_id\n    ) {\n      brand_id\n      employee_id\n    }\n  }\n": types.DeleteBrandsEmployeesByPkDocument,
    "\n mutation UpdateDepartment($_set: departments_set_input, $where: departments_bool_exp!) {\n    update_departments(where: $where, _set: $_set) {\n      returning {\n        id\n      }\n    }\n  }\n": types.UpdateDepartmentDocument,
    "\n  mutation InsertDepartmentsEmployees(\n    $employee_id: String\n    $department_id: String\n  ) {\n    insert_departments_employees(\n      objects: { department_id: $department_id, employee_id: $employee_id }\n    ) {\n      returning {\n        employee {\n          id\n          avatar\n          name\n        }\n      }\n    }\n  }\n": types.InsertDepartmentsEmployeesDocument,
    "\n    mutation DeleteDepartmentsEmployeesByPk(\n      $department_id: String!\n      $employee_id: String!\n    ) {\n      delete_departments_employees_by_pk(\n        department_id: $department_id\n        employee_id: $employee_id\n      ) {\n        department_id\n        employee_id\n      }\n    }\n  ": types.DeleteDepartmentsEmployeesByPkDocument,
    "\n mutation CreateEmployees($id: String, $mobile: String, $name: String, $hire_date: date, $department_id: String, $status: smallint $manager_id:String) {\n    insert_employees(objects: {id: $id, name: $name, mobile: $mobile, hire_date: $hire_date, department_id: $department_id, status: $status, manager_id:$manager_id}) {\n      returning {\n        id\n        name\n        mobile\n        department{\n          id\n          name\n        }\n      }\n    }\n  }\n": types.CreateEmployeesDocument,
    "\n mutation UpdateEmployee($_set: employees_set_input, $where: employees_bool_exp!) {\n    update_employees(_set: $_set, where: $where) {\n      returning {\n        id\n      }\n    }\n  }\n": types.UpdateEmployeeDocument,
    "\n mutation DeleteEmployee($where: employees_bool_exp!) {\n    delete_employees(where: $where) {\n      returning {\n        id\n      }\n    }\n  }\n": types.DeleteEmployeeDocument,
    "\n  mutation DeleteEmployeeAttachment($where: employee_attachments_bool_exp!) {\n    delete_employee_attachments(where: $where) {\n      returning {\n        id\n      }\n    }\n  }\n": types.DeleteEmployeeAttachmentDocument,
    "\n mutation CreateLeaveTypes($object: leave_types_insert_input!) {\n    insert_leave_types_one(object: $object) {\n      id\n    }\n  }\n": types.CreateLeaveTypesDocument,
    "\n  mutation DeleteRole($where: roles_bool_exp!) {\n    delete_roles(where: $where) {\n      returning {\n        id\n      }\n    }\n  }\n": types.DeleteRoleDocument,
    "\n  mutation CreateRole($objects: [roles_insert_input!]!) {\n    insert_roles(objects: $objects) {\n      returning {\n        id\n      }\n    }\n  }\n": types.CreateRoleDocument,
    "\n mutation UpdateRole($where: roles_bool_exp!, $_set: roles_set_input!) {\n    update_roles(where: $where, _set: $_set) {\n      returning {\n        id\n      }\n    }\n  }\n": types.UpdateRoleDocument,
    "\nmutation CreateEmployeesRole($objects: [employees_roles_insert_input!]!) {\n    insert_employees_roles(objects: $objects) {\n      returning {\n        employee_id\n        role_id\n      }\n    }\n  }\n": types.CreateEmployeesRoleDocument,
    "\n   mutation DeleteEmployeesRole($where: employees_roles_bool_exp!) {\n    delete_employees_roles(where: $where) {\n      returning {\n        employee_id\n        role_id\n      }\n    }\n  }\n": types.DeleteEmployeesRoleDocument,
    "\n   mutation DeleteRoleNav($where: role_nav_sm_categories_bool_exp!) {\n    delete_role_nav_sm_categories(where: $where) {\n      returning {\n        role_id\n      }\n    }\n  }\n": types.DeleteRoleNavDocument,
    "\n   mutation CreateRoleNav($objects: [role_nav_sm_categories_insert_input!]!) {\n    insert_role_nav_sm_categories(objects: $objects) {\n      returning {\n        role_id\n      }\n    }\n  }\n": types.CreateRoleNavDocument,
    "\n  mutation InsertServiceEntitlementOne(\n    $object: service_entitlement_insert_input!\n  ) {\n    insert_service_entitlement_one(object: $object) {\n      id\n    }\n  }\n": types.InsertServiceEntitlementOneDocument,
    "\n mutation UpdateServiceEntitlement($id: String!, $_set: service_entitlement_set_input!) {\n    update_service_entitlement_by_pk(pk_columns: {id: $id}, _set: $_set) {\n      id\n    }\n  }\n": types.UpdateServiceEntitlementDocument,
    "\n mutation DeleteServiceEntitlement($id: String!) {\n    delete_service_entitlement_by_pk(id: $id) {\n      id\n    }\n  }\n": types.DeleteServiceEntitlementDocument,
    "\n    mutation CreateShift($object: shift_lists_insert_input!) {\n    insert_shift_lists_one(object: $object) {\n      id\n    }\n  }\n": types.CreateShiftDocument,
    "\n    mutation UpdateShiftById($id: String!, $_set: shift_lists_set_input!) {\n        update_shift_lists_by_pk(pk_columns: {id: $id}, _set: $_set) {\n        id\n        }\n    }\n": types.UpdateShiftByIdDocument,
    "\n   mutation DeleteShift($id: String!) {\n    delete_shift_lists_by_pk(id: $id) {\n      id\n    }\n  }\n": types.DeleteShiftDocument,
    "\n   mutation DeleteStoreEmployee($where: store_employee_bool_exp!) {\n    delete_store_employee(where: $where) {\n      returning {\n        store_id\n        employee {\n          name\n          id\n        }\n      }\n    }\n  }\n": types.DeleteStoreEmployeeDocument,
    "\n    mutation CreateStoreEmployee($objects: [store_employee_insert_input!]!) {\n    insert_store_employee(objects: $objects) {\n      returning {\n        employee_id\n        store_id\n      }\n    }\n  }\n": types.CreateStoreEmployeeDocument,
    "\n  mutation InsertStoreEmployee($objects: [store_employee_insert_input!]!) {\n    insert_store_employee(\n      objects: $objects\n      on_conflict: { constraint: store_employeePRIMARY43, update_columns: [] }\n    ) {\n      affected_rows\n      returning {\n        employee_id\n        store_id\n      }\n    }\n  }\n": types.InsertStoreEmployeeDocument,
    "\n  query AttdanceGroups(\n    $limit: Int!\n    $offset: Int!\n    $where: attendance_groups_bool_exp\n    $where1: employees_bool_exp\n  ) {\n    attendance_groups(limit: $limit, offset: $offset, where: $where) {\n      id\n      name\n      group_type\n      departments {\n        id\n        name\n        employees {\n          id\n          name\n        }\n        employees_aggregate(where: $where1) {\n          aggregate {\n            count\n          }\n        }\n      }\n      attendance_group_subleaders {\n        employee {\n          avatar\n          department {\n            id\n            name\n          }\n          id\n          name\n        }\n      }\n      attendance_group_leaders {\n        employee {\n          avatar\n          department {\n            id\n            name\n          }\n          id\n          name\n        }\n      }\n      attendance_group_shifts {\n        shift_list {\n          id\n          on_time\n          off_time\n          shift_name\n        }\n      }\n      attendance_locations {\n        id\n        longitude\n        latitude\n        address\n        gps_range\n        name\n      }\n    }\n    attendance_groups_aggregate(where: $where) {\n      aggregate {\n        count\n      }\n    }\n  }\n": types.AttdanceGroupsDocument,
    "\n  query AttendanceGroupById($id: String!) {\n    attendance_groups_by_pk(id: $id) {\n      id\n      name\n      group_type\n      departments {\n        id\n        name\n        employees_aggregate {\n          aggregate {\n            count\n          }\n        }\n      }\n      attendance_group_subleaders {\n        employee {\n          avatar\n          department {\n            id\n            name\n          }\n          id\n          name\n        }\n      }\n      attendance_group_leaders {\n        employee {\n          avatar\n          department {\n            id\n            name\n          }\n          id\n          name\n        }\n      }\n      attendance_group_shifts {\n        shift_list {\n          id\n          on_time\n          off_time\n          shift_name\n        }\n      }\n      attendance_locations {\n        id\n        longitude\n        latitude\n        address\n        gps_range\n        name\n      }\n    }\n  }\n": types.AttendanceGroupByIdDocument,
    "\n  query AttendanceGroupShifts($id: String!,  $where: attendance_bool_exp!) {\n    attendance_groups_by_pk(id: $id) {\n      departments {\n        employees {\n          avatar\n          id\n          name\n          status\n          department_id\n          attendances(where: $where) {\n            clock_in_result\n            clock_in_time\n            clock_out_location_id\n            clock_out_result\n            clock_in_location_id\n            clock_out_time\n            date\n            id\n            shift_id\n            shift_list {\n              shift_name\n              on_time\n              off_time\n              id\n            }\n          }\n          attendances_aggregate(where: $where) {\n            aggregate {\n              count\n            }\n          }\n        }\n      }\n      attendance_group_shifts {\n        shift_list {\n          id\n          off_time\n          on_time\n          shift_name\n        }\n      }\n      name\n      id\n    }\n  }\n": types.AttendanceGroupShiftsDocument,
    "\n  query AttendnceList($where: attendance_bool_exp, $limit: Int!, $offset: Int) {\n    attendance_aggregate(where: $where) {\n      aggregate {\n        count\n      }\n    }\n    attendance(limit: $limit, offset: $offset, where: $where) {\n      id\n      clock_in_time\n      clockInResult\n      clock_in_location_id\n      clock_out_location_id\n      clockOutResult\n      clock_out_time\n      date\n      actual_length_hour\n      department {\n        id\n        name\n      }\n      employee {\n        id\n        name\n        basic_salary\n        salary_type\n      }\n      attendanceLocationByClockInLocationId{\n        address\n      }\n      attendanceLocationByClockOutLocationId {\n        address\n      }\n      shift_list {\n        early_minutes_as_early\n        shift_name\n        early_minutes_as_lack\n        late_minutes_as_lack\n        late_minutes_as_late\n        off_time\n        on_time\n      }\n    }\n  }\n": types.AttendnceListDocument,
    "\n  query GetBonusDeductions($where: bonusdeductions_bool_exp) {\n    bonusdeductions(where: $where) {\n      id\n      amount\n      bonusdeductiontype {\n        id\n        is_bonus\n        name\n      }\n      department {\n        id\n        name\n      }\n    }\n  }\n": types.GetBonusDeductionsDocument,
    "\n  query GetBonusDeductionTypes {\n    bonusdeductiontypes {\n      id\n      is_bonus\n      name\n    }\n  }\n": types.GetBonusDeductionTypesDocument,
    "\n  query Brands($where: brands_bool_exp, $limit: Int, $offset: Int) {\n    brands(where: $where, limit: $limit, offset: $offset) {\n      id\n      name\n      stores {\n        id\n        name\n        brand_id\n      }\n    }\n    brands_aggregate(where: $where) {\n      aggregate {\n        count\n      }\n    }\n  }\n": types.BrandsDocument,
    "\n  query BrandsStores(\n    $brandFilter: brands_bool_exp\n    $storeFilter: stores_bool_exp\n  ) {\n    brands(where: $brandFilter) {\n      id\n      name\n      stores(where: $storeFilter) {\n        id\n        name\n      }\n    }\n  }\n": types.BrandsStoresDocument,
    "\n  query ViewDailyItemsSold(\n    $offset: Int\n    $limit: Int\n    $where: view_daily_items_sold_bool_exp\n  ) {\n    view_daily_items_sold(\n      limit: $limit\n      offset: $offset\n      order_by: { total_income_money: desc }\n      where: $where\n    ) {\n      store {\n        id\n        name\n      }\n      fooditem {\n        item_id\n        item_name\n      }\n      item_id\n      settle_biz_date\n      total_qty\n      total_last_total\n      total_income_money\n    }\n    view_daily_items_sold_aggregate(where: $where) {\n      aggregate {\n        count\n      }\n    }\n  }\n": types.ViewDailyItemsSoldDocument,
    "\n  query DepartmentsEmployees($where: departments_employees_bool_exp = {}) {\n    departments_employees(where: $where) {\n      employee {\n        id\n        name\n      }\n    }\n  }\n": types.DepartmentsEmployeesDocument,
    "\n  query Departments($limit: Int!, $offset: Int!, $where: departments_bool_exp) {\n    departments_aggregate(where: $where) {\n      aggregate {\n        count\n      }\n    }\n    departments(\n      limit: $limit\n      offset: $offset\n      where: $where\n      order_by: { name: asc }\n    ) {\n      id\n      name\n      employees_aggregate {\n        aggregate {\n          count\n        }\n      }\n      parent_department_id\n    }\n  }\n": types.DepartmentsDocument,
    "\n  query DsStoreBills($where: dsstorebills_bool_exp) {\n    dsstorebills(order_by: { ArriveMoney: desc }, where: $where) {\n      ArriveMoney\n      InBusAmount\n      ItemSpec\n      OtherSideName\n      supplyitem {\n        itemName\n        reportUnit\n        mainUnit\n        itemTypeName\n      }\n    }\n  }\n": types.DsStoreBillsDocument,
    "\n  query EmployeeInsurance(\n    $where: employee_insurance_bool_exp\n    $limit: Int\n    $offset: Int\n  ) {\n    employee_insurance(where: $where, limit: $limit, offset: $offset) {\n      corp_heating\n      corp_major_medical\n      employee {\n        name\n        avatar\n        id\n        status\n        department {\n          name\n        }\n      }\n      corp_housing_fund\n      corp_maternity_insurance\n      corp_medical_insurance\n      corp_pay\n      corp_retirement_insurance\n      corp_unemployment_insurance\n      corp_work_injury\n      id\n      heating_base\n      medical_base\n      month\n      payment_start_date\n      pension_base\n      personal_fund_balance\n      personal_housing_fund\n      personal_major_medical\n      personal_medical_insurance\n      personal_pay\n      personal_pension_insurance\n      personal_unemployment_insurance\n      unemployment_base\n      work_injury_base\n    }\n    employee_insurance_aggregate(where: $where) {\n      aggregate {\n        count\n      }\n    }\n  }\n": types.EmployeeInsuranceDocument,
    "\n  query Employess($offset: Int!, $limit: Int!, $where: employees_bool_exp) {\n    employees_aggregate(where: $where) {\n      aggregate {\n        count\n      }\n    }\n    employees(\n      limit: $limit\n      offset: $offset\n      order_by: { updated_at: desc }\n      where: $where\n    ) {\n      id\n      id_number\n      status\n      employee_form_status\n      name\n      mobile\n      avatar\n      user_id\n      hire_date\n      job_title\n      last_day\n      departure_type\n      birthday\n      departure_type\n      employee_type\n      department_id\n      department {\n        name\n        id\n      }\n      gender_id\n      marital_status\n      medical_insurance\n      ethnicity\n      application\n      application_status\n      native_region\n      primary_emergency_contact\n      probation_months\n      provident_fund_account\n      social_security_number\n      bank_name\n      bank_account_number\n      salary_type\n      salary_type_id\n      basic_salary\n      basic_salary_monthly\n      manager_id\n      work_age_type\n      family_address\n      hukou_type\n      hukou_location\n      actual_conversion_time\n      actual_overboard_time\n      overboard_note\n      salaryType {\n        id\n        name\n      }\n      store_employees {\n        store {\n          id\n          name\n        }\n      }\n      attendances {\n        clockInResult\n        clock_in_time\n        clockOutResult\n        clock_out_time\n        date\n        shift_id\n        id\n        scheduled_length_day\n        actual_length_hour\n        actual_length_day\n        shift_list {\n          early_minutes_as_early\n          early_minutes_as_lack\n          late_minutes_as_lack\n          late_minutes_as_late\n          off_time\n          on_time\n        }\n      }\n    }\n  }\n": types.EmployessDocument,
    "\n  query EmployeesStatusCount(\n    $where: employees_bool_exp\n    $todayDate: date\n    $thisWeekDateStart: date\n    $thisWeekDateEnd: date\n    $thisMonthDateStart: date\n    $thisMonthDateEnd: date\n    $nextMonthDateStart: date\n    $nextMonthDateEnd: date\n    $lastMonthDateStart: date\n    $lastMonthDateEnd: date\n    $todayDateMMDD: String\n    $thisWeekDateStartMMDD: String\n    $thisWeekDateEndMMDD: String\n    $thisMonthDateStartMMDD: String\n    $thisMonthDateEndMMDD: String\n    $nextMonthDateStartMMDD: String\n    $nextMonthDateEndMMDD: String\n    $lastMonthDateStartMMDD: String\n    $lastMonthDateEndMMDD: String\n  ) {\n    isEmployedCount: employees_aggregate(where: { status: { _eq: 2 } }) {\n      aggregate {\n        count\n      }\n    }\n    informationNotFilled: employees_aggregate(where: { status: { _eq: 6 } }) {\n      aggregate {\n        count\n      }\n    }\n    feishuIsReviewing: employees_aggregate(where: { status: { _eq: 7 } }) {\n      aggregate {\n        count\n      }\n    }\n    feishuReviewRejected: employees_aggregate(where: { status: { _eq: 9 } }) {\n      aggregate {\n        count\n      }\n    }\n    regularEmployeeCount: employees_aggregate(\n      where: { _and: [{ status: { _eq: 2 } }, { employee_type: { _eq: 1 } }] }\n    ) {\n      aggregate {\n        count\n      }\n    }\n    internEmployeeCount: employees_aggregate(\n      where: { _and: [{ status: { _eq: 2 } }, { employee_type: { _eq: 2 } }] }\n    ) {\n      aggregate {\n        count\n      }\n    }\n    outsourcedEmployeeCount: employees_aggregate(\n      where: { _and: [{ status: { _eq: 2 } }, { employee_type: { _eq: 4 } }] }\n    ) {\n      aggregate {\n        count\n      }\n    }\n    trialEmployeeCount: employees_aggregate(\n      where: {\n        _and: [{ status: { _eq: 2 } }, { application_status: { _eq: 2 } }]\n      }\n    ) {\n      aggregate {\n        count\n      }\n    }\n    awaitUnemployCount: employees_aggregate(where: { status: { _eq: 4 } }) {\n      aggregate {\n        count\n      }\n    }\n    notEmployedCount: employees_aggregate(where: { status: { _eq: 5 } }) {\n      aggregate {\n        count\n      }\n    }\n    awaitOnboardingCount: employees_aggregate(where: { status: { _eq: 1 } }) {\n      aggregate {\n        count\n      }\n    }\n    awaitRegularizedCount: employees_aggregate(\n      where: { application_status: { _eq: 2 } }\n    ) {\n      aggregate {\n        count\n      }\n    }\n    overdueRegularizedCount: employees_aggregate(\n      where: {\n        _and: [\n          { actual_conversion_time: { _lt: $todayDate } }\n          { application_status: { _eq: 2 } }\n        ]\n      }\n    ) {\n      aggregate {\n        count\n      }\n    }\n    thisMonthAwaitRegularizedCount: employees_aggregate(\n      where: {\n        _and: [\n          { actual_conversion_time: { _gte: $thisMonthDateStart } }\n          { actual_conversion_time: { _lte: $thisMonthDateEnd } }\n          { application_status: { _eq: 2 } }\n        ]\n      }\n    ) {\n      aggregate {\n        count\n      }\n    }\n    nextMonthAwaitRegularizedCount: employees_aggregate(\n      where: {\n        _and: [\n          { actual_conversion_time: { _gte: $nextMonthDateStart } }\n          { actual_conversion_time: { _lte: $nextMonthDateEnd } }\n          { application_status: { _eq: 2 } }\n        ]\n      }\n    ) {\n      aggregate {\n        count\n      }\n    }\n    todayHireDateCount: employees_aggregate(\n      where: {\n        _and: [\n          { hire_date_mm_dd: { _gte: $todayDateMMDD } }\n          { hire_date_mm_dd: { _lte: $todayDateMMDD } }\n          { status: { _eq: 2 } }\n        ]\n      }\n    ) {\n      aggregate {\n        count\n      }\n    }\n    thisWeekHireDateCount: employees_aggregate(\n      where: {\n        _and: [\n          { hire_date_mm_dd: { _gte: $thisWeekDateStartMMDD } }\n          { hire_date_mm_dd: { _lte: $thisWeekDateEndMMDD } }\n          { status: { _eq: 2 } }\n        ]\n      }\n    ) {\n      aggregate {\n        count\n      }\n    }\n    thisMonthHireDateCount: employees_aggregate(\n      where: {\n        _and: [\n          { hire_date_mm_dd: { _gte: $thisMonthDateStartMMDD } }\n          { hire_date_mm_dd: { _lte: $thisMonthDateEndMMDD } }\n          { status: { _eq: 2 } }\n        ]\n      }\n    ) {\n      aggregate {\n        count\n      }\n    }\n    nextMonthHireDateCount: employees_aggregate(\n      where: {\n        _and: [\n          { hire_date_mm_dd: { _gte: $nextMonthDateStartMMDD } }\n          { hire_date_mm_dd: { _lte: $nextMonthDateEndMMDD } }\n          { status: { _eq: 2 } }\n        ]\n      }\n    ) {\n      aggregate {\n        count\n      }\n    }\n    lastMonthHireDateCount: employees_aggregate(\n      where: {\n        _and: [\n          { hire_date_mm_dd: { _gte: $lastMonthDateStartMMDD } }\n          { hire_date_mm_dd: { _lte: $lastMonthDateEndMMDD } }\n          { status: { _eq: 2 } }\n        ]\n      }\n    ) {\n      aggregate {\n        count\n      }\n    }\n    todayBirthdayCount: employees_aggregate(\n      where: {\n        _and: [\n          { birthday_mm_dd: { _gte: $todayDateMMDD } }\n          { birthday_mm_dd: { _lte: $todayDateMMDD } }\n          { status: { _eq: 2 } }\n        ]\n      }\n    ) {\n      aggregate {\n        count\n      }\n    }\n    thisWeekBirthdayCount: employees_aggregate(\n      where: {\n        _and: [\n          { birthday_mm_dd: { _gte: $thisWeekDateStartMMDD } }\n          { birthday_mm_dd: { _lte: $thisWeekDateEndMMDD } }\n          { status: { _eq: 2 } }\n        ]\n      }\n    ) {\n      aggregate {\n        count\n      }\n    }\n    thisMonthBirthdayCount: employees_aggregate(\n      where: {\n        _and: [\n          { birthday_mm_dd: { _gte: $thisMonthDateStartMMDD } }\n          { birthday_mm_dd: { _lte: $thisMonthDateEndMMDD } }\n          { status: { _eq: 2 } }\n        ]\n      }\n    ) {\n      aggregate {\n        count\n      }\n    }\n    nextMonthBirthdayCount: employees_aggregate(\n      where: {\n        _and: [\n          { birthday_mm_dd: { _gte: $nextMonthDateStartMMDD } }\n          { birthday_mm_dd: { _lte: $nextMonthDateEndMMDD } }\n          { status: { _eq: 2 } }\n        ]\n      }\n    ) {\n      aggregate {\n        count\n      }\n    }\n    lastMonthBirthdayCount: employees_aggregate(\n      where: {\n        _and: [\n          { birthday_mm_dd: { _gte: $lastMonthDateStartMMDD } }\n          { birthday_mm_dd: { _lte: $lastMonthDateEndMMDD } }\n          { status: { _eq: 2 } }\n        ]\n      }\n    ) {\n      aggregate {\n        count\n      }\n    }\n  }\n": types.EmployeesStatusCountDocument,
    "\n  query EmployeeAttachment($where: employee_attachments_bool_exp) {\n    employee_attachments(where: $where) {\n      employee_id\n      file_name\n      id\n      kind\n      path\n    }\n  }\n": types.EmployeeAttachmentDocument,
    "\n  query EmployeesByPk($id: String!) {\n    employees_by_pk(id: $id) {\n      id\n      id_number\n      status\n      employee_form_status\n      name\n      mobile\n      avatar\n      hire_date\n      job_title\n      last_day\n      departure_type\n      birthday\n      departure_type\n      employee_type\n      department_id\n      department {\n        name\n        id\n      }\n      gender_id\n      marital_status\n      medical_insurance\n      ethnicity\n      application\n      application_status\n      native_region\n      primary_emergency_contact\n      probation_months\n      provident_fund_account\n      social_security_number\n      bank_name\n      bank_account_number\n      salary_type_id\n      basic_salary\n      basic_salary_monthly\n      manager_id\n      work_age_type\n      family_address\n      hukou_type\n      hukou_location\n      actual_conversion_time\n      actual_overboard_time\n      overboard_note\n      employee_attachments {\n        id\n        kind\n        path\n        file_name\n      }\n    }\n  }\n": types.EmployeesByPkDocument,
    "\n  query EmployeeSalaryMonthly(\n    $offset: Int\n    $limit: Int\n    $where: employees_bool_exp\n    $where1: attendance_bool_exp\n  ) {\n    employees(limit: $limit, offset: $offset, where: $where) {\n      id\n      name\n      id_number\n      job_title\n      status\n      avatar\n      salary_type\n      department {\n        id\n        name\n      }\n\n      attendances_aggregate(where: $where1) {\n        aggregate {\n          count\n          sum {\n            actual_length_hour\n            actual_length_day\n            scheduled_length_day\n            scheduled_length_hour\n          }\n        }\n      }\n    }\n    employees_aggregate(where: $where) {\n      aggregate {\n        count\n      }\n    }\n  }\n": types.EmployeeSalaryMonthlyDocument,
    "\n  query EmployeeByPkAttendances($id: String!, $where: attendance_bool_exp) {\n    employees_by_pk(id: $id) {\n      id\n      department_id\n      name\n      status\n      salary_type\n      basic_salary\n      basic_salary_monthly\n      attendances(where: $where, order_by: { date: asc }) {\n        id\n        date\n        clock_in_time\n        clock_in_result\n        clock_out_time\n        clock_out_result\n        clockInResult\n        clockOutResult\n        department {\n          id\n          name\n        }\n        attendance_location {\n          name\n        }\n        shift_list {\n          shift_name\n          on_time\n          off_time\n        }\n      }\n    }\n  }\n": types.EmployeeByPkAttendancesDocument,
    "\n  query FoodItemsByPk($item_id: String!) {\n    fooditems_by_pk(item_id: $item_id) {\n      item_id\n      item_name\n      std_price\n      big_pic_url\n      brand {\n        name\n      }\n      ingredients {\n        supplyitem {\n          itemId\n          itemName\n          mainUnit\n          itemImage\n          netRate\n          dsstorebills(limit: 1, order_by: { auditDate: desc }) {\n            ArriveMoney\n            InBusAmount\n          }\n        }\n        qty\n      }\n    }\n  }\n": types.FoodItemsByPkDocument,
    "\n  query GetLeaveTypes {\n    leave_types {\n      id\n      name\n      service_entitlements {\n        id\n        years_of_service\n        max_days\n        salary_type {\n          id\n          name\n        }\n      }\n    }\n  }\n": types.GetLeaveTypesDocument,
    "\n  query GetLeaveTypesByPk($id: String!) {\n    leave_types_by_pk(id: $id) {\n      id\n      name\n    }\n  }\n": types.GetLeaveTypesByPkDocument,
    "\n  query GetMonthlySalary(\n    $limit: Int\n    $offset: Int\n    $where: monthlysalary_bool_exp\n    $where1: bonusdeductions_bool_exp\n    $where2: insurance_funds_bool_exp\n  ) {\n    monthlysalary(limit: $limit, offset: $offset, where: $where) {\n      employee_id\n      attendance_department_id\n      attendance_department {\n        name\n      }\n      employee_department_id\n      employee_department {\n        name\n      }\n      employee {\n        avatar\n        name\n        status\n        job_title\n        birthday\n        id_number\n        bank_name\n        bank_account_number\n        hire_date\n        basic_salary\n        bonusdeductions(where: $where1) {\n          amount\n          department_id\n          bonusdeductiontype {\n            name\n            is_bonus\n          }\n        }\n        insurance_funds(where: $where2) {\n          amount\n          department_id\n          insurance_fund_type {\n            name\n            is_personal\n          }\n        }\n        department {\n          id\n          name\n        }\n      }\n      work_age\n      work_age_type\n      basic_salary\n      basic_salary_base\n      basic_salary_monthly\n      insurance_subsidy\n      overtime_pay\n      position_pay\n      work_age_bonus\n      bonus_deduction\n      personal_insurance_funds\n      corp_insurance_funds\n      net_salary\n      corp_salary_cost\n      gross_salary\n      salary_type\n      total_length_day\n      total_length_hour\n      employee_confirm\n    }\n    monthlysalary_aggregate(where: $where) {\n      aggregate {\n        count\n        sum {\n          corp_salary_cost\n        }\n      }\n    }\n  }\n": types.GetMonthlySalaryDocument,
    "\n    query RoleLists($where: roles_bool_exp) {\n     roles(where: $where) {\n        id\n        name\n        employees_roles {\n            employee {\n            avatar\n            id\n            name\n            }\n        }\n        role_nav_sm_categories {\n            nav_sm_category {\n            id\n            name\n            }\n        }\n        role_scopes {\n            scope {\n                id\n                name\n            }\n         }\n        }\n        roles_aggregate(where: $where) {\n            aggregate {\n            count\n            }\n        }\n    }\n": types.RoleListsDocument,
    "\n    query NavTreeList {\n    nav_xl_categories {\n      id\n      name\n      nav_bg_categories {\n        id\n        name\n        nav_sm_categories {\n          id\n          name\n          side_nav_visible\n        }\n      }\n    }\n  }\n": types.NavTreeListDocument,
    "\nquery RolesById($id: String!, $where: employees_roles_bool_exp) {\n    roles_by_pk(id: $id) {\n        id\n        name\n        employees_roles(where: $where) {\n            employee {\n            avatar\n            id\n            name\n            department{\n                name\n            }\n            mobile\n            }\n        }\n        role_nav_sm_categories {\n            nav_sm_category {\n            id\n            name\n            }\n        }\n        role_scopes {\n            scope {\n                id\n                name\n            }\n         }\n    }\n  }\n   \n": types.RolesByIdDocument,
    "\n  query GetSalaryTypes($where: service_entitlement_bool_exp) {\n    salary_types {\n      id\n      name\n      service_entitlements(where: $where, order_by: { years_of_service: asc }) {\n        id\n        max_days\n        years_of_service\n      }\n    }\n  }\n": types.GetSalaryTypesDocument,
    "\n  query GetSalaryTypesByPk($id: String!) {\n    salary_types_by_pk(id: $id) {\n      id\n      name\n    }\n  }\n": types.GetSalaryTypesByPkDocument,
    "\n    query ShiftsList($where: shift_lists_bool_exp, $limit: Int!, $offset: Int!) {\n    shift_lists(where: $where, limit: $limit, offset: $offset) {\n      id\n      off_time\n      on_time\n      shift_name\n      updated_at\n      created_by\n      scheduled_length_day\n      scheduled_length_hour\n    }\n    shift_lists_aggregate(where: $where) {\n      aggregate {\n        count\n      }\n    }\n  }\n": types.ShiftsListDocument,
    "\n    query ShiftById($id: String!) {\n        shift_lists_by_pk(id: $id) {\n            punch_times \n            shift_name\n            no_need_off\n            on_time\n            off_time\n            late_minutes_as_late\n            late_minutes_as_lack\n            early_minutes_as_early\n            early_minutes_as_lack\n            scheduled_length_day\n            scheduled_length_hour\n        }\n    }\n": types.ShiftByIdDocument,
    "\n  query SolditemsSummary(\n    $limit: Int\n    $offset: Int\n    $order_by: [solditems_summary_order_by!]\n    $end_date: date\n    $shop_ids: _text\n    $start_date: date\n  ) {\n    func_solditems_summary(\n      args: {\n        start_date: $start_date\n        shop_ids: $shop_ids\n        end_date: $end_date\n      }\n      limit: $limit\n      offset: $offset\n      order_by: $order_by\n    ) {\n      item_id\n      income_money\n      last_qty\n      last_price\n      fooditem {\n        item_name\n        brand {\n          name\n          id\n        }\n      }\n    }\n    func_solditems_summary_aggregate(\n      args: {\n        start_date: $start_date\n        end_date: $end_date\n        shop_ids: $shop_ids\n      }\n    ) {\n      aggregate {\n        count\n      }\n    }\n  }\n": types.SolditemsSummaryDocument,
    "\n  query StoreDepartmentsTree {\n    storeDepartments {\n      title\n      value\n      is_dept\n      children {\n        is_dept\n        title\n        value\n        children {\n          is_dept\n          title\n          value\n        }\n      }\n    }\n  }\n": types.StoreDepartmentsTreeDocument,
    "\n  query Stores {\n    stores {\n      id\n      name\n      brand_id\n      brand {\n        name\n      }\n    }\n  }\n": types.StoresDocument,
    "\n  query StoreList($where: store_employee_bool_exp!) {\n    store_employee(where: $where) {\n      store {\n        department {\n          id\n          name\n        }\n        id\n        name\n      }\n    }\n  }\n": types.StoreListDocument,
    "\n  query StoresEmployees($where: employees_bool_exp) {\n    stores {\n      id\n      name\n      department {\n        child_departments {\n          id\n          name\n          employees(where: $where) {\n            id\n            avatar\n            status\n            name\n            mobile\n            job_title\n            hire_date\n            department {\n              name\n              id\n            }\n            actual_overboard_time\n            overboard_note\n          }\n        }\n        employees(where: $where) {\n          id\n          avatar\n          status\n          name\n          mobile\n          job_title\n          hire_date\n          department {\n            name\n            id\n          }\n          actual_overboard_time\n          overboard_note\n        }\n      }\n    }\n  }\n": types.StoresEmployeesDocument,
    "\n  query StoresEmployeesStatusCount {\n    isEmployedCount: stores {\n      departments {\n        child_departments {\n          employees_aggregate(where: { status: { _eq: 2 } }) {\n            aggregate {\n              count\n            }\n          }\n        }\n        employees_aggregate(where: { status: { _eq: 2 } }) {\n          aggregate {\n            count\n          }\n        }\n      }\n    }\n    regularEmployeeCount: stores {\n      departments {\n        child_departments {\n          employees_aggregate(\n            where: {\n              _and: [{ status: { _eq: 2 } }, { employee_type: { _eq: 1 } }]\n            }\n          ) {\n            aggregate {\n              count\n            }\n          }\n        }\n        employees_aggregate(\n          where: {\n            _and: [{ status: { _eq: 2 } }, { employee_type: { _eq: 1 } }]\n          }\n        ) {\n          aggregate {\n            count\n          }\n        }\n      }\n    }\n    internEmployeeCount: stores {\n      departments {\n        child_departments {\n          employees_aggregate(\n            where: {\n              _and: [{ status: { _eq: 2 } }, { employee_type: { _eq: 2 } }]\n            }\n          ) {\n            aggregate {\n              count\n            }\n          }\n        }\n        employees_aggregate(\n          where: {\n            _and: [{ status: { _eq: 2 } }, { employee_type: { _eq: 2 } }]\n          }\n        ) {\n          aggregate {\n            count\n          }\n        }\n      }\n    }\n    awaitUnemployCount: stores {\n      departments {\n        child_departments {\n          employees_aggregate(where: { status: { _eq: 4 } }) {\n            aggregate {\n              count\n            }\n          }\n        }\n        employees_aggregate(where: { status: { _eq: 4 } }) {\n          aggregate {\n            count\n          }\n        }\n      }\n    }\n    notEmployedCount: stores {\n      departments {\n        child_departments {\n          employees_aggregate(where: { status: { _eq: 5 } }) {\n            aggregate {\n              count\n            }\n          }\n        }\n        employees_aggregate(where: { status: { _eq: 5 } }) {\n          aggregate {\n            count\n          }\n        }\n      }\n    }\n    awaitOnboardingCount: stores {\n      departments {\n        child_departments {\n          employees_aggregate(where: { status: { _eq: 1 } }) {\n            aggregate {\n              count\n            }\n          }\n        }\n        employees_aggregate(where: { status: { _eq: 1 } }) {\n          aggregate {\n            count\n          }\n        }\n      }\n    }\n  }\n": types.StoresEmployeesStatusCountDocument,
    "\n  query StoreDepartments {\n    stores {\n      id\n      name\n      departments {\n        id\n        name\n        child_departments {\n          id\n          name\n        }\n      }\n    }\n  }\n": types.StoreDepartmentsDocument,
    "\n  query StoreEmployee($where: store_employee_bool_exp) {\n    store_employee(where: $where) {\n      employee {\n        id\n        name\n        avatar\n      }\n      store {\n        id\n        name\n      }\n    }\n  }\n": types.StoreEmployeeDocument,
    "\n  query SupplyItemsByPk($itemId: String!) {\n    supplyitems_by_pk(itemId: $itemId) {\n      itemId\n      itemName\n      itemImage\n      itemTypeName\n      mainUnit\n      reportUnit\n      reportUnitRatio\n      netRate\n      dsstorebills(limit: 1, order_by: { auditDate: desc }) {\n        ArriveMoney\n        InBusAmount\n      }\n      ingredients {\n        fooditem {\n          brand {\n            name\n          }\n          item_name\n        }\n      }\n    }\n  }\n": types.SupplyItemsByPkDocument,
    "\n  query VerifyEmployeeFields($limit: Int, $offset: Int) {\n    verifyEmployeeFields(limit: $limit, offset: $offset) {\n      id\n      types\n      name\n      employee {\n        avatar\n        name\n        department {\n          id\n          name\n        }\n        status\n      }\n    }\n  }\n": types.VerifyEmployeeFieldsDocument,
    "\n  query ViewMonthlySalary(\n    $limit: Int\n    $offset: Int\n    $where: view_monthly_salary_bool_exp\n    $where1: bonusdeductions_bool_exp\n    $where2: insurance_funds_bool_exp\n  ) {\n    view_monthly_salary(where: $where, limit: $limit, offset: $offset) {\n      employee_id\n      attendance_department_id\n      attendance_department {\n        name\n      }\n      employee {\n        avatar\n        name\n        status\n        job_title\n        birthday\n        id_number\n        bank_name\n        bank_account_number\n        hire_date\n        basic_salary\n        bonusdeductions(where: $where1) {\n          amount\n          department_id\n          bonusdeductiontype {\n            name\n            is_bonus\n          }\n        }\n        insurance_funds(where: $where2) {\n          amount\n          department_id\n          insurance_fund_type {\n            name\n            is_personal\n          }\n        }\n        department {\n          id\n          name\n        }\n      }\n      work_age\n      work_age_type\n      basic_salary\n      basic_salary_base\n      basic_salary_monthly\n      insurance_subsidy\n      overtime_pay\n      position_pay\n      work_age_bonus\n      bonus_deduction\n      personal_insurance_funds\n      corp_insurance_funds\n      net_salary\n      corp_salary_cost\n      gross_salary\n      salary_type\n      total_length_day\n      total_length_hour\n      attendance_department {\n        id\n        name\n      }\n      employee_department {\n        id\n        name\n      }\n    }\n    view_monthly_salary_aggregate(where: $where) {\n      aggregate {\n        count\n        sum {\n          corp_salary_cost\n          net_salary\n        }\n      }\n    }\n  }\n": types.ViewMonthlySalaryDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n   mutation DeleteAttendanceGroupLeaders($where: attendance_group_leaders_bool_exp!) {\n    delete_attendance_group_leaders(where: $where) {\n      returning {\n        attendance_group_id\n      }\n    }\n  }\n"): (typeof documents)["\n   mutation DeleteAttendanceGroupLeaders($where: attendance_group_leaders_bool_exp!) {\n    delete_attendance_group_leaders(where: $where) {\n      returning {\n        attendance_group_id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n   mutation CreateAttendanceGroupLeaders($objects: [attendance_group_leaders_insert_input!]!) {\n    insert_attendance_group_leaders(objects: $objects) {\n      returning {\n        attendance_group_id\n      }\n    }\n  }\n"): (typeof documents)["\n   mutation CreateAttendanceGroupLeaders($objects: [attendance_group_leaders_insert_input!]!) {\n    insert_attendance_group_leaders(objects: $objects) {\n      returning {\n        attendance_group_id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateAttendanceLocations($updates:[attendance_locations_updates!]!) {\n    update_attendance_locations_many(updates: $updates) {\n      returning {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateAttendanceLocations($updates:[attendance_locations_updates!]!) {\n    update_attendance_locations_many(updates: $updates) {\n      returning {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateAttendanceLocations($objects: [attendance_locations_insert_input!]!) {\n    insert_attendance_locations(objects: $objects) {\n      returning {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateAttendanceLocations($objects: [attendance_locations_insert_input!]!) {\n    insert_attendance_locations(objects: $objects) {\n      returning {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteAttendanceLocation($id: String!) {\n    delete_attendance_locations_by_pk(id: $id) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteAttendanceLocation($id: String!) {\n    delete_attendance_locations_by_pk(id: $id) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n   mutation DeleteAttendanceGroupSubLeaders($where: attendance_group_subleaders_bool_exp!) {\n    delete_attendance_group_subleaders(where: $where) {\n      returning {\n        attendance_group_id\n      }\n    }\n  }\n"): (typeof documents)["\n   mutation DeleteAttendanceGroupSubLeaders($where: attendance_group_subleaders_bool_exp!) {\n    delete_attendance_group_subleaders(where: $where) {\n      returning {\n        attendance_group_id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation CreateAttendanceGroupSubLeaders($objects: [attendance_group_subleaders_insert_input!]!) {\n    insert_attendance_group_subleaders(objects: $objects) {\n      returning {\n        attendance_group_id\n      }\n    }\n  }\n"): (typeof documents)["\n    mutation CreateAttendanceGroupSubLeaders($objects: [attendance_group_subleaders_insert_input!]!) {\n    insert_attendance_group_subleaders(objects: $objects) {\n      returning {\n        attendance_group_id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteAttendanchGroupById($id: String!) {\n    delete_attendance_groups_by_pk(id: $id) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteAttendanchGroupById($id: String!) {\n    delete_attendance_groups_by_pk(id: $id) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nmutation CreateAttendanchGroup($objects: [attendance_groups_insert_input!]!) {\n    insert_attendance_groups(objects: $objects) {\n      returning {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\nmutation CreateAttendanchGroup($objects: [attendance_groups_insert_input!]!) {\n    insert_attendance_groups(objects: $objects) {\n      returning {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n mutation UpdateAttendanceGroup($id: String!, $_set: attendance_groups_set_input!) {\n    update_attendance_groups_by_pk(pk_columns: {id: $id}, _set: $_set) {\n      id\n    }\n  }\n"): (typeof documents)["\n mutation UpdateAttendanceGroup($id: String!, $_set: attendance_groups_set_input!) {\n    update_attendance_groups_by_pk(pk_columns: {id: $id}, _set: $_set) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteAttendanceGroupShifts($where: attendance_group_shifts_bool_exp!) {\n    delete_attendance_group_shifts(where: $where) {\n      returning {\n        attendance_group_id\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteAttendanceGroupShifts($where: attendance_group_shifts_bool_exp!) {\n    delete_attendance_group_shifts(where: $where) {\n      returning {\n        attendance_group_id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n   mutation CreateAttendanceGroupShifts($objects: [attendance_group_shifts_insert_input!]!) {\n    insert_attendance_group_shifts(objects: $objects) {\n      returning {\n        attendance_group_id\n      }\n    }\n  }\n"): (typeof documents)["\n   mutation CreateAttendanceGroupShifts($objects: [attendance_group_shifts_insert_input!]!) {\n    insert_attendance_group_shifts(objects: $objects) {\n      returning {\n        attendance_group_id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n   mutation DeleteAttendance($where: attendance_bool_exp!) {\n    delete_attendance(where: $where) {\n      returning {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n   mutation DeleteAttendance($where: attendance_bool_exp!) {\n    delete_attendance(where: $where) {\n      returning {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n   mutation CreateAttendance($objects: [attendance_insert_input!]!) {\n    insert_attendance(objects: $objects) {\n      returning {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n   mutation CreateAttendance($objects: [attendance_insert_input!]!) {\n    insert_attendance(objects: $objects) {\n      returning {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n   mutation UpdateAttendance($updates: [attendance_updates!]!) {\n    update_attendance_many(updates: $updates) {\n        returning {\n        id\n        }\n    }\n  }\n"): (typeof documents)["\n   mutation UpdateAttendance($updates: [attendance_updates!]!) {\n    update_attendance_many(updates: $updates) {\n        returning {\n        id\n        }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n   mutation UpdateAttendanceById($id: String!, $_set: attendance_set_input!) {\n    update_attendance_by_pk(pk_columns: {id: $id}, _set: $_set) {\n      id\n    }\n  }\n"): (typeof documents)["\n   mutation UpdateAttendanceById($id: String!, $_set: attendance_set_input!) {\n    update_attendance_by_pk(pk_columns: {id: $id}, _set: $_set) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n   mutation CreateBonusdeductions($object: bonusdeductions_insert_input!) {\n    insert_bonusdeductions_one(object: $object) {\n      id\n      employee_id\n      month\n      amount\n      bonusdeductiontype_id\n      department_id\n    }\n  }\n"): (typeof documents)["\n   mutation CreateBonusdeductions($object: bonusdeductions_insert_input!) {\n    insert_bonusdeductions_one(object: $object) {\n      id\n      employee_id\n      month\n      amount\n      bonusdeductiontype_id\n      department_id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n mutation DeleteBonusdeductions( $id: String!) {\n    delete_bonusdeductions_by_pk(id: $id) {\n      department_id\n      employee_id\n      id\n      month\n      amount\n      bonusdeductiontype_id\n    }\n  }\n"): (typeof documents)["\n mutation DeleteBonusdeductions( $id: String!) {\n    delete_bonusdeductions_by_pk(id: $id) {\n      department_id\n      employee_id\n      id\n      month\n      amount\n      bonusdeductiontype_id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation InsertBrandsEmployeesOne($brand_id: String, $employee_id: String) {\n    insert_brands_employees_one(\n      object: { brand_id: $brand_id, employee_id: $employee_id }\n    ) {\n      brand_id\n      employee_id\n    }\n  }\n"): (typeof documents)["\n  mutation InsertBrandsEmployeesOne($brand_id: String, $employee_id: String) {\n    insert_brands_employees_one(\n      object: { brand_id: $brand_id, employee_id: $employee_id }\n    ) {\n      brand_id\n      employee_id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteBrandsEmployeesByPk(\n    $brand_id: String!\n    $employee_id: String!\n  ) {\n    delete_brands_employees_by_pk(\n      brand_id: $brand_id\n      employee_id: $employee_id\n    ) {\n      brand_id\n      employee_id\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteBrandsEmployeesByPk(\n    $brand_id: String!\n    $employee_id: String!\n  ) {\n    delete_brands_employees_by_pk(\n      brand_id: $brand_id\n      employee_id: $employee_id\n    ) {\n      brand_id\n      employee_id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n mutation UpdateDepartment($_set: departments_set_input, $where: departments_bool_exp!) {\n    update_departments(where: $where, _set: $_set) {\n      returning {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n mutation UpdateDepartment($_set: departments_set_input, $where: departments_bool_exp!) {\n    update_departments(where: $where, _set: $_set) {\n      returning {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation InsertDepartmentsEmployees(\n    $employee_id: String\n    $department_id: String\n  ) {\n    insert_departments_employees(\n      objects: { department_id: $department_id, employee_id: $employee_id }\n    ) {\n      returning {\n        employee {\n          id\n          avatar\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation InsertDepartmentsEmployees(\n    $employee_id: String\n    $department_id: String\n  ) {\n    insert_departments_employees(\n      objects: { department_id: $department_id, employee_id: $employee_id }\n    ) {\n      returning {\n        employee {\n          id\n          avatar\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation DeleteDepartmentsEmployeesByPk(\n      $department_id: String!\n      $employee_id: String!\n    ) {\n      delete_departments_employees_by_pk(\n        department_id: $department_id\n        employee_id: $employee_id\n      ) {\n        department_id\n        employee_id\n      }\n    }\n  "): (typeof documents)["\n    mutation DeleteDepartmentsEmployeesByPk(\n      $department_id: String!\n      $employee_id: String!\n    ) {\n      delete_departments_employees_by_pk(\n        department_id: $department_id\n        employee_id: $employee_id\n      ) {\n        department_id\n        employee_id\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n mutation CreateEmployees($id: String, $mobile: String, $name: String, $hire_date: date, $department_id: String, $status: smallint $manager_id:String) {\n    insert_employees(objects: {id: $id, name: $name, mobile: $mobile, hire_date: $hire_date, department_id: $department_id, status: $status, manager_id:$manager_id}) {\n      returning {\n        id\n        name\n        mobile\n        department{\n          id\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n mutation CreateEmployees($id: String, $mobile: String, $name: String, $hire_date: date, $department_id: String, $status: smallint $manager_id:String) {\n    insert_employees(objects: {id: $id, name: $name, mobile: $mobile, hire_date: $hire_date, department_id: $department_id, status: $status, manager_id:$manager_id}) {\n      returning {\n        id\n        name\n        mobile\n        department{\n          id\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n mutation UpdateEmployee($_set: employees_set_input, $where: employees_bool_exp!) {\n    update_employees(_set: $_set, where: $where) {\n      returning {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n mutation UpdateEmployee($_set: employees_set_input, $where: employees_bool_exp!) {\n    update_employees(_set: $_set, where: $where) {\n      returning {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n mutation DeleteEmployee($where: employees_bool_exp!) {\n    delete_employees(where: $where) {\n      returning {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n mutation DeleteEmployee($where: employees_bool_exp!) {\n    delete_employees(where: $where) {\n      returning {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteEmployeeAttachment($where: employee_attachments_bool_exp!) {\n    delete_employee_attachments(where: $where) {\n      returning {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteEmployeeAttachment($where: employee_attachments_bool_exp!) {\n    delete_employee_attachments(where: $where) {\n      returning {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n mutation CreateLeaveTypes($object: leave_types_insert_input!) {\n    insert_leave_types_one(object: $object) {\n      id\n    }\n  }\n"): (typeof documents)["\n mutation CreateLeaveTypes($object: leave_types_insert_input!) {\n    insert_leave_types_one(object: $object) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteRole($where: roles_bool_exp!) {\n    delete_roles(where: $where) {\n      returning {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteRole($where: roles_bool_exp!) {\n    delete_roles(where: $where) {\n      returning {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateRole($objects: [roles_insert_input!]!) {\n    insert_roles(objects: $objects) {\n      returning {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateRole($objects: [roles_insert_input!]!) {\n    insert_roles(objects: $objects) {\n      returning {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n mutation UpdateRole($where: roles_bool_exp!, $_set: roles_set_input!) {\n    update_roles(where: $where, _set: $_set) {\n      returning {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n mutation UpdateRole($where: roles_bool_exp!, $_set: roles_set_input!) {\n    update_roles(where: $where, _set: $_set) {\n      returning {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nmutation CreateEmployeesRole($objects: [employees_roles_insert_input!]!) {\n    insert_employees_roles(objects: $objects) {\n      returning {\n        employee_id\n        role_id\n      }\n    }\n  }\n"): (typeof documents)["\nmutation CreateEmployeesRole($objects: [employees_roles_insert_input!]!) {\n    insert_employees_roles(objects: $objects) {\n      returning {\n        employee_id\n        role_id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n   mutation DeleteEmployeesRole($where: employees_roles_bool_exp!) {\n    delete_employees_roles(where: $where) {\n      returning {\n        employee_id\n        role_id\n      }\n    }\n  }\n"): (typeof documents)["\n   mutation DeleteEmployeesRole($where: employees_roles_bool_exp!) {\n    delete_employees_roles(where: $where) {\n      returning {\n        employee_id\n        role_id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n   mutation DeleteRoleNav($where: role_nav_sm_categories_bool_exp!) {\n    delete_role_nav_sm_categories(where: $where) {\n      returning {\n        role_id\n      }\n    }\n  }\n"): (typeof documents)["\n   mutation DeleteRoleNav($where: role_nav_sm_categories_bool_exp!) {\n    delete_role_nav_sm_categories(where: $where) {\n      returning {\n        role_id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n   mutation CreateRoleNav($objects: [role_nav_sm_categories_insert_input!]!) {\n    insert_role_nav_sm_categories(objects: $objects) {\n      returning {\n        role_id\n      }\n    }\n  }\n"): (typeof documents)["\n   mutation CreateRoleNav($objects: [role_nav_sm_categories_insert_input!]!) {\n    insert_role_nav_sm_categories(objects: $objects) {\n      returning {\n        role_id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation InsertServiceEntitlementOne(\n    $object: service_entitlement_insert_input!\n  ) {\n    insert_service_entitlement_one(object: $object) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation InsertServiceEntitlementOne(\n    $object: service_entitlement_insert_input!\n  ) {\n    insert_service_entitlement_one(object: $object) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n mutation UpdateServiceEntitlement($id: String!, $_set: service_entitlement_set_input!) {\n    update_service_entitlement_by_pk(pk_columns: {id: $id}, _set: $_set) {\n      id\n    }\n  }\n"): (typeof documents)["\n mutation UpdateServiceEntitlement($id: String!, $_set: service_entitlement_set_input!) {\n    update_service_entitlement_by_pk(pk_columns: {id: $id}, _set: $_set) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n mutation DeleteServiceEntitlement($id: String!) {\n    delete_service_entitlement_by_pk(id: $id) {\n      id\n    }\n  }\n"): (typeof documents)["\n mutation DeleteServiceEntitlement($id: String!) {\n    delete_service_entitlement_by_pk(id: $id) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation CreateShift($object: shift_lists_insert_input!) {\n    insert_shift_lists_one(object: $object) {\n      id\n    }\n  }\n"): (typeof documents)["\n    mutation CreateShift($object: shift_lists_insert_input!) {\n    insert_shift_lists_one(object: $object) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation UpdateShiftById($id: String!, $_set: shift_lists_set_input!) {\n        update_shift_lists_by_pk(pk_columns: {id: $id}, _set: $_set) {\n        id\n        }\n    }\n"): (typeof documents)["\n    mutation UpdateShiftById($id: String!, $_set: shift_lists_set_input!) {\n        update_shift_lists_by_pk(pk_columns: {id: $id}, _set: $_set) {\n        id\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n   mutation DeleteShift($id: String!) {\n    delete_shift_lists_by_pk(id: $id) {\n      id\n    }\n  }\n"): (typeof documents)["\n   mutation DeleteShift($id: String!) {\n    delete_shift_lists_by_pk(id: $id) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n   mutation DeleteStoreEmployee($where: store_employee_bool_exp!) {\n    delete_store_employee(where: $where) {\n      returning {\n        store_id\n        employee {\n          name\n          id\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n   mutation DeleteStoreEmployee($where: store_employee_bool_exp!) {\n    delete_store_employee(where: $where) {\n      returning {\n        store_id\n        employee {\n          name\n          id\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation CreateStoreEmployee($objects: [store_employee_insert_input!]!) {\n    insert_store_employee(objects: $objects) {\n      returning {\n        employee_id\n        store_id\n      }\n    }\n  }\n"): (typeof documents)["\n    mutation CreateStoreEmployee($objects: [store_employee_insert_input!]!) {\n    insert_store_employee(objects: $objects) {\n      returning {\n        employee_id\n        store_id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation InsertStoreEmployee($objects: [store_employee_insert_input!]!) {\n    insert_store_employee(\n      objects: $objects\n      on_conflict: { constraint: store_employeePRIMARY43, update_columns: [] }\n    ) {\n      affected_rows\n      returning {\n        employee_id\n        store_id\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation InsertStoreEmployee($objects: [store_employee_insert_input!]!) {\n    insert_store_employee(\n      objects: $objects\n      on_conflict: { constraint: store_employeePRIMARY43, update_columns: [] }\n    ) {\n      affected_rows\n      returning {\n        employee_id\n        store_id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query AttdanceGroups(\n    $limit: Int!\n    $offset: Int!\n    $where: attendance_groups_bool_exp\n    $where1: employees_bool_exp\n  ) {\n    attendance_groups(limit: $limit, offset: $offset, where: $where) {\n      id\n      name\n      group_type\n      departments {\n        id\n        name\n        employees {\n          id\n          name\n        }\n        employees_aggregate(where: $where1) {\n          aggregate {\n            count\n          }\n        }\n      }\n      attendance_group_subleaders {\n        employee {\n          avatar\n          department {\n            id\n            name\n          }\n          id\n          name\n        }\n      }\n      attendance_group_leaders {\n        employee {\n          avatar\n          department {\n            id\n            name\n          }\n          id\n          name\n        }\n      }\n      attendance_group_shifts {\n        shift_list {\n          id\n          on_time\n          off_time\n          shift_name\n        }\n      }\n      attendance_locations {\n        id\n        longitude\n        latitude\n        address\n        gps_range\n        name\n      }\n    }\n    attendance_groups_aggregate(where: $where) {\n      aggregate {\n        count\n      }\n    }\n  }\n"): (typeof documents)["\n  query AttdanceGroups(\n    $limit: Int!\n    $offset: Int!\n    $where: attendance_groups_bool_exp\n    $where1: employees_bool_exp\n  ) {\n    attendance_groups(limit: $limit, offset: $offset, where: $where) {\n      id\n      name\n      group_type\n      departments {\n        id\n        name\n        employees {\n          id\n          name\n        }\n        employees_aggregate(where: $where1) {\n          aggregate {\n            count\n          }\n        }\n      }\n      attendance_group_subleaders {\n        employee {\n          avatar\n          department {\n            id\n            name\n          }\n          id\n          name\n        }\n      }\n      attendance_group_leaders {\n        employee {\n          avatar\n          department {\n            id\n            name\n          }\n          id\n          name\n        }\n      }\n      attendance_group_shifts {\n        shift_list {\n          id\n          on_time\n          off_time\n          shift_name\n        }\n      }\n      attendance_locations {\n        id\n        longitude\n        latitude\n        address\n        gps_range\n        name\n      }\n    }\n    attendance_groups_aggregate(where: $where) {\n      aggregate {\n        count\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query AttendanceGroupById($id: String!) {\n    attendance_groups_by_pk(id: $id) {\n      id\n      name\n      group_type\n      departments {\n        id\n        name\n        employees_aggregate {\n          aggregate {\n            count\n          }\n        }\n      }\n      attendance_group_subleaders {\n        employee {\n          avatar\n          department {\n            id\n            name\n          }\n          id\n          name\n        }\n      }\n      attendance_group_leaders {\n        employee {\n          avatar\n          department {\n            id\n            name\n          }\n          id\n          name\n        }\n      }\n      attendance_group_shifts {\n        shift_list {\n          id\n          on_time\n          off_time\n          shift_name\n        }\n      }\n      attendance_locations {\n        id\n        longitude\n        latitude\n        address\n        gps_range\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query AttendanceGroupById($id: String!) {\n    attendance_groups_by_pk(id: $id) {\n      id\n      name\n      group_type\n      departments {\n        id\n        name\n        employees_aggregate {\n          aggregate {\n            count\n          }\n        }\n      }\n      attendance_group_subleaders {\n        employee {\n          avatar\n          department {\n            id\n            name\n          }\n          id\n          name\n        }\n      }\n      attendance_group_leaders {\n        employee {\n          avatar\n          department {\n            id\n            name\n          }\n          id\n          name\n        }\n      }\n      attendance_group_shifts {\n        shift_list {\n          id\n          on_time\n          off_time\n          shift_name\n        }\n      }\n      attendance_locations {\n        id\n        longitude\n        latitude\n        address\n        gps_range\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query AttendanceGroupShifts($id: String!,  $where: attendance_bool_exp!) {\n    attendance_groups_by_pk(id: $id) {\n      departments {\n        employees {\n          avatar\n          id\n          name\n          status\n          department_id\n          attendances(where: $where) {\n            clock_in_result\n            clock_in_time\n            clock_out_location_id\n            clock_out_result\n            clock_in_location_id\n            clock_out_time\n            date\n            id\n            shift_id\n            shift_list {\n              shift_name\n              on_time\n              off_time\n              id\n            }\n          }\n          attendances_aggregate(where: $where) {\n            aggregate {\n              count\n            }\n          }\n        }\n      }\n      attendance_group_shifts {\n        shift_list {\n          id\n          off_time\n          on_time\n          shift_name\n        }\n      }\n      name\n      id\n    }\n  }\n"): (typeof documents)["\n  query AttendanceGroupShifts($id: String!,  $where: attendance_bool_exp!) {\n    attendance_groups_by_pk(id: $id) {\n      departments {\n        employees {\n          avatar\n          id\n          name\n          status\n          department_id\n          attendances(where: $where) {\n            clock_in_result\n            clock_in_time\n            clock_out_location_id\n            clock_out_result\n            clock_in_location_id\n            clock_out_time\n            date\n            id\n            shift_id\n            shift_list {\n              shift_name\n              on_time\n              off_time\n              id\n            }\n          }\n          attendances_aggregate(where: $where) {\n            aggregate {\n              count\n            }\n          }\n        }\n      }\n      attendance_group_shifts {\n        shift_list {\n          id\n          off_time\n          on_time\n          shift_name\n        }\n      }\n      name\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query AttendnceList($where: attendance_bool_exp, $limit: Int!, $offset: Int) {\n    attendance_aggregate(where: $where) {\n      aggregate {\n        count\n      }\n    }\n    attendance(limit: $limit, offset: $offset, where: $where) {\n      id\n      clock_in_time\n      clockInResult\n      clock_in_location_id\n      clock_out_location_id\n      clockOutResult\n      clock_out_time\n      date\n      actual_length_hour\n      department {\n        id\n        name\n      }\n      employee {\n        id\n        name\n        basic_salary\n        salary_type\n      }\n      attendanceLocationByClockInLocationId{\n        address\n      }\n      attendanceLocationByClockOutLocationId {\n        address\n      }\n      shift_list {\n        early_minutes_as_early\n        shift_name\n        early_minutes_as_lack\n        late_minutes_as_lack\n        late_minutes_as_late\n        off_time\n        on_time\n      }\n    }\n  }\n"): (typeof documents)["\n  query AttendnceList($where: attendance_bool_exp, $limit: Int!, $offset: Int) {\n    attendance_aggregate(where: $where) {\n      aggregate {\n        count\n      }\n    }\n    attendance(limit: $limit, offset: $offset, where: $where) {\n      id\n      clock_in_time\n      clockInResult\n      clock_in_location_id\n      clock_out_location_id\n      clockOutResult\n      clock_out_time\n      date\n      actual_length_hour\n      department {\n        id\n        name\n      }\n      employee {\n        id\n        name\n        basic_salary\n        salary_type\n      }\n      attendanceLocationByClockInLocationId{\n        address\n      }\n      attendanceLocationByClockOutLocationId {\n        address\n      }\n      shift_list {\n        early_minutes_as_early\n        shift_name\n        early_minutes_as_lack\n        late_minutes_as_lack\n        late_minutes_as_late\n        off_time\n        on_time\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetBonusDeductions($where: bonusdeductions_bool_exp) {\n    bonusdeductions(where: $where) {\n      id\n      amount\n      bonusdeductiontype {\n        id\n        is_bonus\n        name\n      }\n      department {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetBonusDeductions($where: bonusdeductions_bool_exp) {\n    bonusdeductions(where: $where) {\n      id\n      amount\n      bonusdeductiontype {\n        id\n        is_bonus\n        name\n      }\n      department {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetBonusDeductionTypes {\n    bonusdeductiontypes {\n      id\n      is_bonus\n      name\n    }\n  }\n"): (typeof documents)["\n  query GetBonusDeductionTypes {\n    bonusdeductiontypes {\n      id\n      is_bonus\n      name\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Brands($where: brands_bool_exp, $limit: Int, $offset: Int) {\n    brands(where: $where, limit: $limit, offset: $offset) {\n      id\n      name\n      stores {\n        id\n        name\n        brand_id\n      }\n    }\n    brands_aggregate(where: $where) {\n      aggregate {\n        count\n      }\n    }\n  }\n"): (typeof documents)["\n  query Brands($where: brands_bool_exp, $limit: Int, $offset: Int) {\n    brands(where: $where, limit: $limit, offset: $offset) {\n      id\n      name\n      stores {\n        id\n        name\n        brand_id\n      }\n    }\n    brands_aggregate(where: $where) {\n      aggregate {\n        count\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query BrandsStores(\n    $brandFilter: brands_bool_exp\n    $storeFilter: stores_bool_exp\n  ) {\n    brands(where: $brandFilter) {\n      id\n      name\n      stores(where: $storeFilter) {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query BrandsStores(\n    $brandFilter: brands_bool_exp\n    $storeFilter: stores_bool_exp\n  ) {\n    brands(where: $brandFilter) {\n      id\n      name\n      stores(where: $storeFilter) {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ViewDailyItemsSold(\n    $offset: Int\n    $limit: Int\n    $where: view_daily_items_sold_bool_exp\n  ) {\n    view_daily_items_sold(\n      limit: $limit\n      offset: $offset\n      order_by: { total_income_money: desc }\n      where: $where\n    ) {\n      store {\n        id\n        name\n      }\n      fooditem {\n        item_id\n        item_name\n      }\n      item_id\n      settle_biz_date\n      total_qty\n      total_last_total\n      total_income_money\n    }\n    view_daily_items_sold_aggregate(where: $where) {\n      aggregate {\n        count\n      }\n    }\n  }\n"): (typeof documents)["\n  query ViewDailyItemsSold(\n    $offset: Int\n    $limit: Int\n    $where: view_daily_items_sold_bool_exp\n  ) {\n    view_daily_items_sold(\n      limit: $limit\n      offset: $offset\n      order_by: { total_income_money: desc }\n      where: $where\n    ) {\n      store {\n        id\n        name\n      }\n      fooditem {\n        item_id\n        item_name\n      }\n      item_id\n      settle_biz_date\n      total_qty\n      total_last_total\n      total_income_money\n    }\n    view_daily_items_sold_aggregate(where: $where) {\n      aggregate {\n        count\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query DepartmentsEmployees($where: departments_employees_bool_exp = {}) {\n    departments_employees(where: $where) {\n      employee {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query DepartmentsEmployees($where: departments_employees_bool_exp = {}) {\n    departments_employees(where: $where) {\n      employee {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Departments($limit: Int!, $offset: Int!, $where: departments_bool_exp) {\n    departments_aggregate(where: $where) {\n      aggregate {\n        count\n      }\n    }\n    departments(\n      limit: $limit\n      offset: $offset\n      where: $where\n      order_by: { name: asc }\n    ) {\n      id\n      name\n      employees_aggregate {\n        aggregate {\n          count\n        }\n      }\n      parent_department_id\n    }\n  }\n"): (typeof documents)["\n  query Departments($limit: Int!, $offset: Int!, $where: departments_bool_exp) {\n    departments_aggregate(where: $where) {\n      aggregate {\n        count\n      }\n    }\n    departments(\n      limit: $limit\n      offset: $offset\n      where: $where\n      order_by: { name: asc }\n    ) {\n      id\n      name\n      employees_aggregate {\n        aggregate {\n          count\n        }\n      }\n      parent_department_id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query DsStoreBills($where: dsstorebills_bool_exp) {\n    dsstorebills(order_by: { ArriveMoney: desc }, where: $where) {\n      ArriveMoney\n      InBusAmount\n      ItemSpec\n      OtherSideName\n      supplyitem {\n        itemName\n        reportUnit\n        mainUnit\n        itemTypeName\n      }\n    }\n  }\n"): (typeof documents)["\n  query DsStoreBills($where: dsstorebills_bool_exp) {\n    dsstorebills(order_by: { ArriveMoney: desc }, where: $where) {\n      ArriveMoney\n      InBusAmount\n      ItemSpec\n      OtherSideName\n      supplyitem {\n        itemName\n        reportUnit\n        mainUnit\n        itemTypeName\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query EmployeeInsurance(\n    $where: employee_insurance_bool_exp\n    $limit: Int\n    $offset: Int\n  ) {\n    employee_insurance(where: $where, limit: $limit, offset: $offset) {\n      corp_heating\n      corp_major_medical\n      employee {\n        name\n        avatar\n        id\n        status\n        department {\n          name\n        }\n      }\n      corp_housing_fund\n      corp_maternity_insurance\n      corp_medical_insurance\n      corp_pay\n      corp_retirement_insurance\n      corp_unemployment_insurance\n      corp_work_injury\n      id\n      heating_base\n      medical_base\n      month\n      payment_start_date\n      pension_base\n      personal_fund_balance\n      personal_housing_fund\n      personal_major_medical\n      personal_medical_insurance\n      personal_pay\n      personal_pension_insurance\n      personal_unemployment_insurance\n      unemployment_base\n      work_injury_base\n    }\n    employee_insurance_aggregate(where: $where) {\n      aggregate {\n        count\n      }\n    }\n  }\n"): (typeof documents)["\n  query EmployeeInsurance(\n    $where: employee_insurance_bool_exp\n    $limit: Int\n    $offset: Int\n  ) {\n    employee_insurance(where: $where, limit: $limit, offset: $offset) {\n      corp_heating\n      corp_major_medical\n      employee {\n        name\n        avatar\n        id\n        status\n        department {\n          name\n        }\n      }\n      corp_housing_fund\n      corp_maternity_insurance\n      corp_medical_insurance\n      corp_pay\n      corp_retirement_insurance\n      corp_unemployment_insurance\n      corp_work_injury\n      id\n      heating_base\n      medical_base\n      month\n      payment_start_date\n      pension_base\n      personal_fund_balance\n      personal_housing_fund\n      personal_major_medical\n      personal_medical_insurance\n      personal_pay\n      personal_pension_insurance\n      personal_unemployment_insurance\n      unemployment_base\n      work_injury_base\n    }\n    employee_insurance_aggregate(where: $where) {\n      aggregate {\n        count\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Employess($offset: Int!, $limit: Int!, $where: employees_bool_exp) {\n    employees_aggregate(where: $where) {\n      aggregate {\n        count\n      }\n    }\n    employees(\n      limit: $limit\n      offset: $offset\n      order_by: { updated_at: desc }\n      where: $where\n    ) {\n      id\n      id_number\n      status\n      employee_form_status\n      name\n      mobile\n      avatar\n      user_id\n      hire_date\n      job_title\n      last_day\n      departure_type\n      birthday\n      departure_type\n      employee_type\n      department_id\n      department {\n        name\n        id\n      }\n      gender_id\n      marital_status\n      medical_insurance\n      ethnicity\n      application\n      application_status\n      native_region\n      primary_emergency_contact\n      probation_months\n      provident_fund_account\n      social_security_number\n      bank_name\n      bank_account_number\n      salary_type\n      salary_type_id\n      basic_salary\n      basic_salary_monthly\n      manager_id\n      work_age_type\n      family_address\n      hukou_type\n      hukou_location\n      actual_conversion_time\n      actual_overboard_time\n      overboard_note\n      salaryType {\n        id\n        name\n      }\n      store_employees {\n        store {\n          id\n          name\n        }\n      }\n      attendances {\n        clockInResult\n        clock_in_time\n        clockOutResult\n        clock_out_time\n        date\n        shift_id\n        id\n        scheduled_length_day\n        actual_length_hour\n        actual_length_day\n        shift_list {\n          early_minutes_as_early\n          early_minutes_as_lack\n          late_minutes_as_lack\n          late_minutes_as_late\n          off_time\n          on_time\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query Employess($offset: Int!, $limit: Int!, $where: employees_bool_exp) {\n    employees_aggregate(where: $where) {\n      aggregate {\n        count\n      }\n    }\n    employees(\n      limit: $limit\n      offset: $offset\n      order_by: { updated_at: desc }\n      where: $where\n    ) {\n      id\n      id_number\n      status\n      employee_form_status\n      name\n      mobile\n      avatar\n      user_id\n      hire_date\n      job_title\n      last_day\n      departure_type\n      birthday\n      departure_type\n      employee_type\n      department_id\n      department {\n        name\n        id\n      }\n      gender_id\n      marital_status\n      medical_insurance\n      ethnicity\n      application\n      application_status\n      native_region\n      primary_emergency_contact\n      probation_months\n      provident_fund_account\n      social_security_number\n      bank_name\n      bank_account_number\n      salary_type\n      salary_type_id\n      basic_salary\n      basic_salary_monthly\n      manager_id\n      work_age_type\n      family_address\n      hukou_type\n      hukou_location\n      actual_conversion_time\n      actual_overboard_time\n      overboard_note\n      salaryType {\n        id\n        name\n      }\n      store_employees {\n        store {\n          id\n          name\n        }\n      }\n      attendances {\n        clockInResult\n        clock_in_time\n        clockOutResult\n        clock_out_time\n        date\n        shift_id\n        id\n        scheduled_length_day\n        actual_length_hour\n        actual_length_day\n        shift_list {\n          early_minutes_as_early\n          early_minutes_as_lack\n          late_minutes_as_lack\n          late_minutes_as_late\n          off_time\n          on_time\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query EmployeesStatusCount(\n    $where: employees_bool_exp\n    $todayDate: date\n    $thisWeekDateStart: date\n    $thisWeekDateEnd: date\n    $thisMonthDateStart: date\n    $thisMonthDateEnd: date\n    $nextMonthDateStart: date\n    $nextMonthDateEnd: date\n    $lastMonthDateStart: date\n    $lastMonthDateEnd: date\n    $todayDateMMDD: String\n    $thisWeekDateStartMMDD: String\n    $thisWeekDateEndMMDD: String\n    $thisMonthDateStartMMDD: String\n    $thisMonthDateEndMMDD: String\n    $nextMonthDateStartMMDD: String\n    $nextMonthDateEndMMDD: String\n    $lastMonthDateStartMMDD: String\n    $lastMonthDateEndMMDD: String\n  ) {\n    isEmployedCount: employees_aggregate(where: { status: { _eq: 2 } }) {\n      aggregate {\n        count\n      }\n    }\n    informationNotFilled: employees_aggregate(where: { status: { _eq: 6 } }) {\n      aggregate {\n        count\n      }\n    }\n    feishuIsReviewing: employees_aggregate(where: { status: { _eq: 7 } }) {\n      aggregate {\n        count\n      }\n    }\n    feishuReviewRejected: employees_aggregate(where: { status: { _eq: 9 } }) {\n      aggregate {\n        count\n      }\n    }\n    regularEmployeeCount: employees_aggregate(\n      where: { _and: [{ status: { _eq: 2 } }, { employee_type: { _eq: 1 } }] }\n    ) {\n      aggregate {\n        count\n      }\n    }\n    internEmployeeCount: employees_aggregate(\n      where: { _and: [{ status: { _eq: 2 } }, { employee_type: { _eq: 2 } }] }\n    ) {\n      aggregate {\n        count\n      }\n    }\n    outsourcedEmployeeCount: employees_aggregate(\n      where: { _and: [{ status: { _eq: 2 } }, { employee_type: { _eq: 4 } }] }\n    ) {\n      aggregate {\n        count\n      }\n    }\n    trialEmployeeCount: employees_aggregate(\n      where: {\n        _and: [{ status: { _eq: 2 } }, { application_status: { _eq: 2 } }]\n      }\n    ) {\n      aggregate {\n        count\n      }\n    }\n    awaitUnemployCount: employees_aggregate(where: { status: { _eq: 4 } }) {\n      aggregate {\n        count\n      }\n    }\n    notEmployedCount: employees_aggregate(where: { status: { _eq: 5 } }) {\n      aggregate {\n        count\n      }\n    }\n    awaitOnboardingCount: employees_aggregate(where: { status: { _eq: 1 } }) {\n      aggregate {\n        count\n      }\n    }\n    awaitRegularizedCount: employees_aggregate(\n      where: { application_status: { _eq: 2 } }\n    ) {\n      aggregate {\n        count\n      }\n    }\n    overdueRegularizedCount: employees_aggregate(\n      where: {\n        _and: [\n          { actual_conversion_time: { _lt: $todayDate } }\n          { application_status: { _eq: 2 } }\n        ]\n      }\n    ) {\n      aggregate {\n        count\n      }\n    }\n    thisMonthAwaitRegularizedCount: employees_aggregate(\n      where: {\n        _and: [\n          { actual_conversion_time: { _gte: $thisMonthDateStart } }\n          { actual_conversion_time: { _lte: $thisMonthDateEnd } }\n          { application_status: { _eq: 2 } }\n        ]\n      }\n    ) {\n      aggregate {\n        count\n      }\n    }\n    nextMonthAwaitRegularizedCount: employees_aggregate(\n      where: {\n        _and: [\n          { actual_conversion_time: { _gte: $nextMonthDateStart } }\n          { actual_conversion_time: { _lte: $nextMonthDateEnd } }\n          { application_status: { _eq: 2 } }\n        ]\n      }\n    ) {\n      aggregate {\n        count\n      }\n    }\n    todayHireDateCount: employees_aggregate(\n      where: {\n        _and: [\n          { hire_date_mm_dd: { _gte: $todayDateMMDD } }\n          { hire_date_mm_dd: { _lte: $todayDateMMDD } }\n          { status: { _eq: 2 } }\n        ]\n      }\n    ) {\n      aggregate {\n        count\n      }\n    }\n    thisWeekHireDateCount: employees_aggregate(\n      where: {\n        _and: [\n          { hire_date_mm_dd: { _gte: $thisWeekDateStartMMDD } }\n          { hire_date_mm_dd: { _lte: $thisWeekDateEndMMDD } }\n          { status: { _eq: 2 } }\n        ]\n      }\n    ) {\n      aggregate {\n        count\n      }\n    }\n    thisMonthHireDateCount: employees_aggregate(\n      where: {\n        _and: [\n          { hire_date_mm_dd: { _gte: $thisMonthDateStartMMDD } }\n          { hire_date_mm_dd: { _lte: $thisMonthDateEndMMDD } }\n          { status: { _eq: 2 } }\n        ]\n      }\n    ) {\n      aggregate {\n        count\n      }\n    }\n    nextMonthHireDateCount: employees_aggregate(\n      where: {\n        _and: [\n          { hire_date_mm_dd: { _gte: $nextMonthDateStartMMDD } }\n          { hire_date_mm_dd: { _lte: $nextMonthDateEndMMDD } }\n          { status: { _eq: 2 } }\n        ]\n      }\n    ) {\n      aggregate {\n        count\n      }\n    }\n    lastMonthHireDateCount: employees_aggregate(\n      where: {\n        _and: [\n          { hire_date_mm_dd: { _gte: $lastMonthDateStartMMDD } }\n          { hire_date_mm_dd: { _lte: $lastMonthDateEndMMDD } }\n          { status: { _eq: 2 } }\n        ]\n      }\n    ) {\n      aggregate {\n        count\n      }\n    }\n    todayBirthdayCount: employees_aggregate(\n      where: {\n        _and: [\n          { birthday_mm_dd: { _gte: $todayDateMMDD } }\n          { birthday_mm_dd: { _lte: $todayDateMMDD } }\n          { status: { _eq: 2 } }\n        ]\n      }\n    ) {\n      aggregate {\n        count\n      }\n    }\n    thisWeekBirthdayCount: employees_aggregate(\n      where: {\n        _and: [\n          { birthday_mm_dd: { _gte: $thisWeekDateStartMMDD } }\n          { birthday_mm_dd: { _lte: $thisWeekDateEndMMDD } }\n          { status: { _eq: 2 } }\n        ]\n      }\n    ) {\n      aggregate {\n        count\n      }\n    }\n    thisMonthBirthdayCount: employees_aggregate(\n      where: {\n        _and: [\n          { birthday_mm_dd: { _gte: $thisMonthDateStartMMDD } }\n          { birthday_mm_dd: { _lte: $thisMonthDateEndMMDD } }\n          { status: { _eq: 2 } }\n        ]\n      }\n    ) {\n      aggregate {\n        count\n      }\n    }\n    nextMonthBirthdayCount: employees_aggregate(\n      where: {\n        _and: [\n          { birthday_mm_dd: { _gte: $nextMonthDateStartMMDD } }\n          { birthday_mm_dd: { _lte: $nextMonthDateEndMMDD } }\n          { status: { _eq: 2 } }\n        ]\n      }\n    ) {\n      aggregate {\n        count\n      }\n    }\n    lastMonthBirthdayCount: employees_aggregate(\n      where: {\n        _and: [\n          { birthday_mm_dd: { _gte: $lastMonthDateStartMMDD } }\n          { birthday_mm_dd: { _lte: $lastMonthDateEndMMDD } }\n          { status: { _eq: 2 } }\n        ]\n      }\n    ) {\n      aggregate {\n        count\n      }\n    }\n  }\n"): (typeof documents)["\n  query EmployeesStatusCount(\n    $where: employees_bool_exp\n    $todayDate: date\n    $thisWeekDateStart: date\n    $thisWeekDateEnd: date\n    $thisMonthDateStart: date\n    $thisMonthDateEnd: date\n    $nextMonthDateStart: date\n    $nextMonthDateEnd: date\n    $lastMonthDateStart: date\n    $lastMonthDateEnd: date\n    $todayDateMMDD: String\n    $thisWeekDateStartMMDD: String\n    $thisWeekDateEndMMDD: String\n    $thisMonthDateStartMMDD: String\n    $thisMonthDateEndMMDD: String\n    $nextMonthDateStartMMDD: String\n    $nextMonthDateEndMMDD: String\n    $lastMonthDateStartMMDD: String\n    $lastMonthDateEndMMDD: String\n  ) {\n    isEmployedCount: employees_aggregate(where: { status: { _eq: 2 } }) {\n      aggregate {\n        count\n      }\n    }\n    informationNotFilled: employees_aggregate(where: { status: { _eq: 6 } }) {\n      aggregate {\n        count\n      }\n    }\n    feishuIsReviewing: employees_aggregate(where: { status: { _eq: 7 } }) {\n      aggregate {\n        count\n      }\n    }\n    feishuReviewRejected: employees_aggregate(where: { status: { _eq: 9 } }) {\n      aggregate {\n        count\n      }\n    }\n    regularEmployeeCount: employees_aggregate(\n      where: { _and: [{ status: { _eq: 2 } }, { employee_type: { _eq: 1 } }] }\n    ) {\n      aggregate {\n        count\n      }\n    }\n    internEmployeeCount: employees_aggregate(\n      where: { _and: [{ status: { _eq: 2 } }, { employee_type: { _eq: 2 } }] }\n    ) {\n      aggregate {\n        count\n      }\n    }\n    outsourcedEmployeeCount: employees_aggregate(\n      where: { _and: [{ status: { _eq: 2 } }, { employee_type: { _eq: 4 } }] }\n    ) {\n      aggregate {\n        count\n      }\n    }\n    trialEmployeeCount: employees_aggregate(\n      where: {\n        _and: [{ status: { _eq: 2 } }, { application_status: { _eq: 2 } }]\n      }\n    ) {\n      aggregate {\n        count\n      }\n    }\n    awaitUnemployCount: employees_aggregate(where: { status: { _eq: 4 } }) {\n      aggregate {\n        count\n      }\n    }\n    notEmployedCount: employees_aggregate(where: { status: { _eq: 5 } }) {\n      aggregate {\n        count\n      }\n    }\n    awaitOnboardingCount: employees_aggregate(where: { status: { _eq: 1 } }) {\n      aggregate {\n        count\n      }\n    }\n    awaitRegularizedCount: employees_aggregate(\n      where: { application_status: { _eq: 2 } }\n    ) {\n      aggregate {\n        count\n      }\n    }\n    overdueRegularizedCount: employees_aggregate(\n      where: {\n        _and: [\n          { actual_conversion_time: { _lt: $todayDate } }\n          { application_status: { _eq: 2 } }\n        ]\n      }\n    ) {\n      aggregate {\n        count\n      }\n    }\n    thisMonthAwaitRegularizedCount: employees_aggregate(\n      where: {\n        _and: [\n          { actual_conversion_time: { _gte: $thisMonthDateStart } }\n          { actual_conversion_time: { _lte: $thisMonthDateEnd } }\n          { application_status: { _eq: 2 } }\n        ]\n      }\n    ) {\n      aggregate {\n        count\n      }\n    }\n    nextMonthAwaitRegularizedCount: employees_aggregate(\n      where: {\n        _and: [\n          { actual_conversion_time: { _gte: $nextMonthDateStart } }\n          { actual_conversion_time: { _lte: $nextMonthDateEnd } }\n          { application_status: { _eq: 2 } }\n        ]\n      }\n    ) {\n      aggregate {\n        count\n      }\n    }\n    todayHireDateCount: employees_aggregate(\n      where: {\n        _and: [\n          { hire_date_mm_dd: { _gte: $todayDateMMDD } }\n          { hire_date_mm_dd: { _lte: $todayDateMMDD } }\n          { status: { _eq: 2 } }\n        ]\n      }\n    ) {\n      aggregate {\n        count\n      }\n    }\n    thisWeekHireDateCount: employees_aggregate(\n      where: {\n        _and: [\n          { hire_date_mm_dd: { _gte: $thisWeekDateStartMMDD } }\n          { hire_date_mm_dd: { _lte: $thisWeekDateEndMMDD } }\n          { status: { _eq: 2 } }\n        ]\n      }\n    ) {\n      aggregate {\n        count\n      }\n    }\n    thisMonthHireDateCount: employees_aggregate(\n      where: {\n        _and: [\n          { hire_date_mm_dd: { _gte: $thisMonthDateStartMMDD } }\n          { hire_date_mm_dd: { _lte: $thisMonthDateEndMMDD } }\n          { status: { _eq: 2 } }\n        ]\n      }\n    ) {\n      aggregate {\n        count\n      }\n    }\n    nextMonthHireDateCount: employees_aggregate(\n      where: {\n        _and: [\n          { hire_date_mm_dd: { _gte: $nextMonthDateStartMMDD } }\n          { hire_date_mm_dd: { _lte: $nextMonthDateEndMMDD } }\n          { status: { _eq: 2 } }\n        ]\n      }\n    ) {\n      aggregate {\n        count\n      }\n    }\n    lastMonthHireDateCount: employees_aggregate(\n      where: {\n        _and: [\n          { hire_date_mm_dd: { _gte: $lastMonthDateStartMMDD } }\n          { hire_date_mm_dd: { _lte: $lastMonthDateEndMMDD } }\n          { status: { _eq: 2 } }\n        ]\n      }\n    ) {\n      aggregate {\n        count\n      }\n    }\n    todayBirthdayCount: employees_aggregate(\n      where: {\n        _and: [\n          { birthday_mm_dd: { _gte: $todayDateMMDD } }\n          { birthday_mm_dd: { _lte: $todayDateMMDD } }\n          { status: { _eq: 2 } }\n        ]\n      }\n    ) {\n      aggregate {\n        count\n      }\n    }\n    thisWeekBirthdayCount: employees_aggregate(\n      where: {\n        _and: [\n          { birthday_mm_dd: { _gte: $thisWeekDateStartMMDD } }\n          { birthday_mm_dd: { _lte: $thisWeekDateEndMMDD } }\n          { status: { _eq: 2 } }\n        ]\n      }\n    ) {\n      aggregate {\n        count\n      }\n    }\n    thisMonthBirthdayCount: employees_aggregate(\n      where: {\n        _and: [\n          { birthday_mm_dd: { _gte: $thisMonthDateStartMMDD } }\n          { birthday_mm_dd: { _lte: $thisMonthDateEndMMDD } }\n          { status: { _eq: 2 } }\n        ]\n      }\n    ) {\n      aggregate {\n        count\n      }\n    }\n    nextMonthBirthdayCount: employees_aggregate(\n      where: {\n        _and: [\n          { birthday_mm_dd: { _gte: $nextMonthDateStartMMDD } }\n          { birthday_mm_dd: { _lte: $nextMonthDateEndMMDD } }\n          { status: { _eq: 2 } }\n        ]\n      }\n    ) {\n      aggregate {\n        count\n      }\n    }\n    lastMonthBirthdayCount: employees_aggregate(\n      where: {\n        _and: [\n          { birthday_mm_dd: { _gte: $lastMonthDateStartMMDD } }\n          { birthday_mm_dd: { _lte: $lastMonthDateEndMMDD } }\n          { status: { _eq: 2 } }\n        ]\n      }\n    ) {\n      aggregate {\n        count\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query EmployeeAttachment($where: employee_attachments_bool_exp) {\n    employee_attachments(where: $where) {\n      employee_id\n      file_name\n      id\n      kind\n      path\n    }\n  }\n"): (typeof documents)["\n  query EmployeeAttachment($where: employee_attachments_bool_exp) {\n    employee_attachments(where: $where) {\n      employee_id\n      file_name\n      id\n      kind\n      path\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query EmployeesByPk($id: String!) {\n    employees_by_pk(id: $id) {\n      id\n      id_number\n      status\n      employee_form_status\n      name\n      mobile\n      avatar\n      hire_date\n      job_title\n      last_day\n      departure_type\n      birthday\n      departure_type\n      employee_type\n      department_id\n      department {\n        name\n        id\n      }\n      gender_id\n      marital_status\n      medical_insurance\n      ethnicity\n      application\n      application_status\n      native_region\n      primary_emergency_contact\n      probation_months\n      provident_fund_account\n      social_security_number\n      bank_name\n      bank_account_number\n      salary_type_id\n      basic_salary\n      basic_salary_monthly\n      manager_id\n      work_age_type\n      family_address\n      hukou_type\n      hukou_location\n      actual_conversion_time\n      actual_overboard_time\n      overboard_note\n      employee_attachments {\n        id\n        kind\n        path\n        file_name\n      }\n    }\n  }\n"): (typeof documents)["\n  query EmployeesByPk($id: String!) {\n    employees_by_pk(id: $id) {\n      id\n      id_number\n      status\n      employee_form_status\n      name\n      mobile\n      avatar\n      hire_date\n      job_title\n      last_day\n      departure_type\n      birthday\n      departure_type\n      employee_type\n      department_id\n      department {\n        name\n        id\n      }\n      gender_id\n      marital_status\n      medical_insurance\n      ethnicity\n      application\n      application_status\n      native_region\n      primary_emergency_contact\n      probation_months\n      provident_fund_account\n      social_security_number\n      bank_name\n      bank_account_number\n      salary_type_id\n      basic_salary\n      basic_salary_monthly\n      manager_id\n      work_age_type\n      family_address\n      hukou_type\n      hukou_location\n      actual_conversion_time\n      actual_overboard_time\n      overboard_note\n      employee_attachments {\n        id\n        kind\n        path\n        file_name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query EmployeeSalaryMonthly(\n    $offset: Int\n    $limit: Int\n    $where: employees_bool_exp\n    $where1: attendance_bool_exp\n  ) {\n    employees(limit: $limit, offset: $offset, where: $where) {\n      id\n      name\n      id_number\n      job_title\n      status\n      avatar\n      salary_type\n      department {\n        id\n        name\n      }\n\n      attendances_aggregate(where: $where1) {\n        aggregate {\n          count\n          sum {\n            actual_length_hour\n            actual_length_day\n            scheduled_length_day\n            scheduled_length_hour\n          }\n        }\n      }\n    }\n    employees_aggregate(where: $where) {\n      aggregate {\n        count\n      }\n    }\n  }\n"): (typeof documents)["\n  query EmployeeSalaryMonthly(\n    $offset: Int\n    $limit: Int\n    $where: employees_bool_exp\n    $where1: attendance_bool_exp\n  ) {\n    employees(limit: $limit, offset: $offset, where: $where) {\n      id\n      name\n      id_number\n      job_title\n      status\n      avatar\n      salary_type\n      department {\n        id\n        name\n      }\n\n      attendances_aggregate(where: $where1) {\n        aggregate {\n          count\n          sum {\n            actual_length_hour\n            actual_length_day\n            scheduled_length_day\n            scheduled_length_hour\n          }\n        }\n      }\n    }\n    employees_aggregate(where: $where) {\n      aggregate {\n        count\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query EmployeeByPkAttendances($id: String!, $where: attendance_bool_exp) {\n    employees_by_pk(id: $id) {\n      id\n      department_id\n      name\n      status\n      salary_type\n      basic_salary\n      basic_salary_monthly\n      attendances(where: $where, order_by: { date: asc }) {\n        id\n        date\n        clock_in_time\n        clock_in_result\n        clock_out_time\n        clock_out_result\n        clockInResult\n        clockOutResult\n        department {\n          id\n          name\n        }\n        attendance_location {\n          name\n        }\n        shift_list {\n          shift_name\n          on_time\n          off_time\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query EmployeeByPkAttendances($id: String!, $where: attendance_bool_exp) {\n    employees_by_pk(id: $id) {\n      id\n      department_id\n      name\n      status\n      salary_type\n      basic_salary\n      basic_salary_monthly\n      attendances(where: $where, order_by: { date: asc }) {\n        id\n        date\n        clock_in_time\n        clock_in_result\n        clock_out_time\n        clock_out_result\n        clockInResult\n        clockOutResult\n        department {\n          id\n          name\n        }\n        attendance_location {\n          name\n        }\n        shift_list {\n          shift_name\n          on_time\n          off_time\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FoodItemsByPk($item_id: String!) {\n    fooditems_by_pk(item_id: $item_id) {\n      item_id\n      item_name\n      std_price\n      big_pic_url\n      brand {\n        name\n      }\n      ingredients {\n        supplyitem {\n          itemId\n          itemName\n          mainUnit\n          itemImage\n          netRate\n          dsstorebills(limit: 1, order_by: { auditDate: desc }) {\n            ArriveMoney\n            InBusAmount\n          }\n        }\n        qty\n      }\n    }\n  }\n"): (typeof documents)["\n  query FoodItemsByPk($item_id: String!) {\n    fooditems_by_pk(item_id: $item_id) {\n      item_id\n      item_name\n      std_price\n      big_pic_url\n      brand {\n        name\n      }\n      ingredients {\n        supplyitem {\n          itemId\n          itemName\n          mainUnit\n          itemImage\n          netRate\n          dsstorebills(limit: 1, order_by: { auditDate: desc }) {\n            ArriveMoney\n            InBusAmount\n          }\n        }\n        qty\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetLeaveTypes {\n    leave_types {\n      id\n      name\n      service_entitlements {\n        id\n        years_of_service\n        max_days\n        salary_type {\n          id\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetLeaveTypes {\n    leave_types {\n      id\n      name\n      service_entitlements {\n        id\n        years_of_service\n        max_days\n        salary_type {\n          id\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetLeaveTypesByPk($id: String!) {\n    leave_types_by_pk(id: $id) {\n      id\n      name\n    }\n  }\n"): (typeof documents)["\n  query GetLeaveTypesByPk($id: String!) {\n    leave_types_by_pk(id: $id) {\n      id\n      name\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetMonthlySalary(\n    $limit: Int\n    $offset: Int\n    $where: monthlysalary_bool_exp\n    $where1: bonusdeductions_bool_exp\n    $where2: insurance_funds_bool_exp\n  ) {\n    monthlysalary(limit: $limit, offset: $offset, where: $where) {\n      employee_id\n      attendance_department_id\n      attendance_department {\n        name\n      }\n      employee_department_id\n      employee_department {\n        name\n      }\n      employee {\n        avatar\n        name\n        status\n        job_title\n        birthday\n        id_number\n        bank_name\n        bank_account_number\n        hire_date\n        basic_salary\n        bonusdeductions(where: $where1) {\n          amount\n          department_id\n          bonusdeductiontype {\n            name\n            is_bonus\n          }\n        }\n        insurance_funds(where: $where2) {\n          amount\n          department_id\n          insurance_fund_type {\n            name\n            is_personal\n          }\n        }\n        department {\n          id\n          name\n        }\n      }\n      work_age\n      work_age_type\n      basic_salary\n      basic_salary_base\n      basic_salary_monthly\n      insurance_subsidy\n      overtime_pay\n      position_pay\n      work_age_bonus\n      bonus_deduction\n      personal_insurance_funds\n      corp_insurance_funds\n      net_salary\n      corp_salary_cost\n      gross_salary\n      salary_type\n      total_length_day\n      total_length_hour\n      employee_confirm\n    }\n    monthlysalary_aggregate(where: $where) {\n      aggregate {\n        count\n        sum {\n          corp_salary_cost\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetMonthlySalary(\n    $limit: Int\n    $offset: Int\n    $where: monthlysalary_bool_exp\n    $where1: bonusdeductions_bool_exp\n    $where2: insurance_funds_bool_exp\n  ) {\n    monthlysalary(limit: $limit, offset: $offset, where: $where) {\n      employee_id\n      attendance_department_id\n      attendance_department {\n        name\n      }\n      employee_department_id\n      employee_department {\n        name\n      }\n      employee {\n        avatar\n        name\n        status\n        job_title\n        birthday\n        id_number\n        bank_name\n        bank_account_number\n        hire_date\n        basic_salary\n        bonusdeductions(where: $where1) {\n          amount\n          department_id\n          bonusdeductiontype {\n            name\n            is_bonus\n          }\n        }\n        insurance_funds(where: $where2) {\n          amount\n          department_id\n          insurance_fund_type {\n            name\n            is_personal\n          }\n        }\n        department {\n          id\n          name\n        }\n      }\n      work_age\n      work_age_type\n      basic_salary\n      basic_salary_base\n      basic_salary_monthly\n      insurance_subsidy\n      overtime_pay\n      position_pay\n      work_age_bonus\n      bonus_deduction\n      personal_insurance_funds\n      corp_insurance_funds\n      net_salary\n      corp_salary_cost\n      gross_salary\n      salary_type\n      total_length_day\n      total_length_hour\n      employee_confirm\n    }\n    monthlysalary_aggregate(where: $where) {\n      aggregate {\n        count\n        sum {\n          corp_salary_cost\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query RoleLists($where: roles_bool_exp) {\n     roles(where: $where) {\n        id\n        name\n        employees_roles {\n            employee {\n            avatar\n            id\n            name\n            }\n        }\n        role_nav_sm_categories {\n            nav_sm_category {\n            id\n            name\n            }\n        }\n        role_scopes {\n            scope {\n                id\n                name\n            }\n         }\n        }\n        roles_aggregate(where: $where) {\n            aggregate {\n            count\n            }\n        }\n    }\n"): (typeof documents)["\n    query RoleLists($where: roles_bool_exp) {\n     roles(where: $where) {\n        id\n        name\n        employees_roles {\n            employee {\n            avatar\n            id\n            name\n            }\n        }\n        role_nav_sm_categories {\n            nav_sm_category {\n            id\n            name\n            }\n        }\n        role_scopes {\n            scope {\n                id\n                name\n            }\n         }\n        }\n        roles_aggregate(where: $where) {\n            aggregate {\n            count\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query NavTreeList {\n    nav_xl_categories {\n      id\n      name\n      nav_bg_categories {\n        id\n        name\n        nav_sm_categories {\n          id\n          name\n          side_nav_visible\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n    query NavTreeList {\n    nav_xl_categories {\n      id\n      name\n      nav_bg_categories {\n        id\n        name\n        nav_sm_categories {\n          id\n          name\n          side_nav_visible\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery RolesById($id: String!, $where: employees_roles_bool_exp) {\n    roles_by_pk(id: $id) {\n        id\n        name\n        employees_roles(where: $where) {\n            employee {\n            avatar\n            id\n            name\n            department{\n                name\n            }\n            mobile\n            }\n        }\n        role_nav_sm_categories {\n            nav_sm_category {\n            id\n            name\n            }\n        }\n        role_scopes {\n            scope {\n                id\n                name\n            }\n         }\n    }\n  }\n   \n"): (typeof documents)["\nquery RolesById($id: String!, $where: employees_roles_bool_exp) {\n    roles_by_pk(id: $id) {\n        id\n        name\n        employees_roles(where: $where) {\n            employee {\n            avatar\n            id\n            name\n            department{\n                name\n            }\n            mobile\n            }\n        }\n        role_nav_sm_categories {\n            nav_sm_category {\n            id\n            name\n            }\n        }\n        role_scopes {\n            scope {\n                id\n                name\n            }\n         }\n    }\n  }\n   \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetSalaryTypes($where: service_entitlement_bool_exp) {\n    salary_types {\n      id\n      name\n      service_entitlements(where: $where, order_by: { years_of_service: asc }) {\n        id\n        max_days\n        years_of_service\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetSalaryTypes($where: service_entitlement_bool_exp) {\n    salary_types {\n      id\n      name\n      service_entitlements(where: $where, order_by: { years_of_service: asc }) {\n        id\n        max_days\n        years_of_service\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetSalaryTypesByPk($id: String!) {\n    salary_types_by_pk(id: $id) {\n      id\n      name\n    }\n  }\n"): (typeof documents)["\n  query GetSalaryTypesByPk($id: String!) {\n    salary_types_by_pk(id: $id) {\n      id\n      name\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query ShiftsList($where: shift_lists_bool_exp, $limit: Int!, $offset: Int!) {\n    shift_lists(where: $where, limit: $limit, offset: $offset) {\n      id\n      off_time\n      on_time\n      shift_name\n      updated_at\n      created_by\n      scheduled_length_day\n      scheduled_length_hour\n    }\n    shift_lists_aggregate(where: $where) {\n      aggregate {\n        count\n      }\n    }\n  }\n"): (typeof documents)["\n    query ShiftsList($where: shift_lists_bool_exp, $limit: Int!, $offset: Int!) {\n    shift_lists(where: $where, limit: $limit, offset: $offset) {\n      id\n      off_time\n      on_time\n      shift_name\n      updated_at\n      created_by\n      scheduled_length_day\n      scheduled_length_hour\n    }\n    shift_lists_aggregate(where: $where) {\n      aggregate {\n        count\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query ShiftById($id: String!) {\n        shift_lists_by_pk(id: $id) {\n            punch_times \n            shift_name\n            no_need_off\n            on_time\n            off_time\n            late_minutes_as_late\n            late_minutes_as_lack\n            early_minutes_as_early\n            early_minutes_as_lack\n            scheduled_length_day\n            scheduled_length_hour\n        }\n    }\n"): (typeof documents)["\n    query ShiftById($id: String!) {\n        shift_lists_by_pk(id: $id) {\n            punch_times \n            shift_name\n            no_need_off\n            on_time\n            off_time\n            late_minutes_as_late\n            late_minutes_as_lack\n            early_minutes_as_early\n            early_minutes_as_lack\n            scheduled_length_day\n            scheduled_length_hour\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SolditemsSummary(\n    $limit: Int\n    $offset: Int\n    $order_by: [solditems_summary_order_by!]\n    $end_date: date\n    $shop_ids: _text\n    $start_date: date\n  ) {\n    func_solditems_summary(\n      args: {\n        start_date: $start_date\n        shop_ids: $shop_ids\n        end_date: $end_date\n      }\n      limit: $limit\n      offset: $offset\n      order_by: $order_by\n    ) {\n      item_id\n      income_money\n      last_qty\n      last_price\n      fooditem {\n        item_name\n        brand {\n          name\n          id\n        }\n      }\n    }\n    func_solditems_summary_aggregate(\n      args: {\n        start_date: $start_date\n        end_date: $end_date\n        shop_ids: $shop_ids\n      }\n    ) {\n      aggregate {\n        count\n      }\n    }\n  }\n"): (typeof documents)["\n  query SolditemsSummary(\n    $limit: Int\n    $offset: Int\n    $order_by: [solditems_summary_order_by!]\n    $end_date: date\n    $shop_ids: _text\n    $start_date: date\n  ) {\n    func_solditems_summary(\n      args: {\n        start_date: $start_date\n        shop_ids: $shop_ids\n        end_date: $end_date\n      }\n      limit: $limit\n      offset: $offset\n      order_by: $order_by\n    ) {\n      item_id\n      income_money\n      last_qty\n      last_price\n      fooditem {\n        item_name\n        brand {\n          name\n          id\n        }\n      }\n    }\n    func_solditems_summary_aggregate(\n      args: {\n        start_date: $start_date\n        end_date: $end_date\n        shop_ids: $shop_ids\n      }\n    ) {\n      aggregate {\n        count\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query StoreDepartmentsTree {\n    storeDepartments {\n      title\n      value\n      is_dept\n      children {\n        is_dept\n        title\n        value\n        children {\n          is_dept\n          title\n          value\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query StoreDepartmentsTree {\n    storeDepartments {\n      title\n      value\n      is_dept\n      children {\n        is_dept\n        title\n        value\n        children {\n          is_dept\n          title\n          value\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Stores {\n    stores {\n      id\n      name\n      brand_id\n      brand {\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query Stores {\n    stores {\n      id\n      name\n      brand_id\n      brand {\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query StoreList($where: store_employee_bool_exp!) {\n    store_employee(where: $where) {\n      store {\n        department {\n          id\n          name\n        }\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query StoreList($where: store_employee_bool_exp!) {\n    store_employee(where: $where) {\n      store {\n        department {\n          id\n          name\n        }\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query StoresEmployees($where: employees_bool_exp) {\n    stores {\n      id\n      name\n      department {\n        child_departments {\n          id\n          name\n          employees(where: $where) {\n            id\n            avatar\n            status\n            name\n            mobile\n            job_title\n            hire_date\n            department {\n              name\n              id\n            }\n            actual_overboard_time\n            overboard_note\n          }\n        }\n        employees(where: $where) {\n          id\n          avatar\n          status\n          name\n          mobile\n          job_title\n          hire_date\n          department {\n            name\n            id\n          }\n          actual_overboard_time\n          overboard_note\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query StoresEmployees($where: employees_bool_exp) {\n    stores {\n      id\n      name\n      department {\n        child_departments {\n          id\n          name\n          employees(where: $where) {\n            id\n            avatar\n            status\n            name\n            mobile\n            job_title\n            hire_date\n            department {\n              name\n              id\n            }\n            actual_overboard_time\n            overboard_note\n          }\n        }\n        employees(where: $where) {\n          id\n          avatar\n          status\n          name\n          mobile\n          job_title\n          hire_date\n          department {\n            name\n            id\n          }\n          actual_overboard_time\n          overboard_note\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query StoresEmployeesStatusCount {\n    isEmployedCount: stores {\n      departments {\n        child_departments {\n          employees_aggregate(where: { status: { _eq: 2 } }) {\n            aggregate {\n              count\n            }\n          }\n        }\n        employees_aggregate(where: { status: { _eq: 2 } }) {\n          aggregate {\n            count\n          }\n        }\n      }\n    }\n    regularEmployeeCount: stores {\n      departments {\n        child_departments {\n          employees_aggregate(\n            where: {\n              _and: [{ status: { _eq: 2 } }, { employee_type: { _eq: 1 } }]\n            }\n          ) {\n            aggregate {\n              count\n            }\n          }\n        }\n        employees_aggregate(\n          where: {\n            _and: [{ status: { _eq: 2 } }, { employee_type: { _eq: 1 } }]\n          }\n        ) {\n          aggregate {\n            count\n          }\n        }\n      }\n    }\n    internEmployeeCount: stores {\n      departments {\n        child_departments {\n          employees_aggregate(\n            where: {\n              _and: [{ status: { _eq: 2 } }, { employee_type: { _eq: 2 } }]\n            }\n          ) {\n            aggregate {\n              count\n            }\n          }\n        }\n        employees_aggregate(\n          where: {\n            _and: [{ status: { _eq: 2 } }, { employee_type: { _eq: 2 } }]\n          }\n        ) {\n          aggregate {\n            count\n          }\n        }\n      }\n    }\n    awaitUnemployCount: stores {\n      departments {\n        child_departments {\n          employees_aggregate(where: { status: { _eq: 4 } }) {\n            aggregate {\n              count\n            }\n          }\n        }\n        employees_aggregate(where: { status: { _eq: 4 } }) {\n          aggregate {\n            count\n          }\n        }\n      }\n    }\n    notEmployedCount: stores {\n      departments {\n        child_departments {\n          employees_aggregate(where: { status: { _eq: 5 } }) {\n            aggregate {\n              count\n            }\n          }\n        }\n        employees_aggregate(where: { status: { _eq: 5 } }) {\n          aggregate {\n            count\n          }\n        }\n      }\n    }\n    awaitOnboardingCount: stores {\n      departments {\n        child_departments {\n          employees_aggregate(where: { status: { _eq: 1 } }) {\n            aggregate {\n              count\n            }\n          }\n        }\n        employees_aggregate(where: { status: { _eq: 1 } }) {\n          aggregate {\n            count\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query StoresEmployeesStatusCount {\n    isEmployedCount: stores {\n      departments {\n        child_departments {\n          employees_aggregate(where: { status: { _eq: 2 } }) {\n            aggregate {\n              count\n            }\n          }\n        }\n        employees_aggregate(where: { status: { _eq: 2 } }) {\n          aggregate {\n            count\n          }\n        }\n      }\n    }\n    regularEmployeeCount: stores {\n      departments {\n        child_departments {\n          employees_aggregate(\n            where: {\n              _and: [{ status: { _eq: 2 } }, { employee_type: { _eq: 1 } }]\n            }\n          ) {\n            aggregate {\n              count\n            }\n          }\n        }\n        employees_aggregate(\n          where: {\n            _and: [{ status: { _eq: 2 } }, { employee_type: { _eq: 1 } }]\n          }\n        ) {\n          aggregate {\n            count\n          }\n        }\n      }\n    }\n    internEmployeeCount: stores {\n      departments {\n        child_departments {\n          employees_aggregate(\n            where: {\n              _and: [{ status: { _eq: 2 } }, { employee_type: { _eq: 2 } }]\n            }\n          ) {\n            aggregate {\n              count\n            }\n          }\n        }\n        employees_aggregate(\n          where: {\n            _and: [{ status: { _eq: 2 } }, { employee_type: { _eq: 2 } }]\n          }\n        ) {\n          aggregate {\n            count\n          }\n        }\n      }\n    }\n    awaitUnemployCount: stores {\n      departments {\n        child_departments {\n          employees_aggregate(where: { status: { _eq: 4 } }) {\n            aggregate {\n              count\n            }\n          }\n        }\n        employees_aggregate(where: { status: { _eq: 4 } }) {\n          aggregate {\n            count\n          }\n        }\n      }\n    }\n    notEmployedCount: stores {\n      departments {\n        child_departments {\n          employees_aggregate(where: { status: { _eq: 5 } }) {\n            aggregate {\n              count\n            }\n          }\n        }\n        employees_aggregate(where: { status: { _eq: 5 } }) {\n          aggregate {\n            count\n          }\n        }\n      }\n    }\n    awaitOnboardingCount: stores {\n      departments {\n        child_departments {\n          employees_aggregate(where: { status: { _eq: 1 } }) {\n            aggregate {\n              count\n            }\n          }\n        }\n        employees_aggregate(where: { status: { _eq: 1 } }) {\n          aggregate {\n            count\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query StoreDepartments {\n    stores {\n      id\n      name\n      departments {\n        id\n        name\n        child_departments {\n          id\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query StoreDepartments {\n    stores {\n      id\n      name\n      departments {\n        id\n        name\n        child_departments {\n          id\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query StoreEmployee($where: store_employee_bool_exp) {\n    store_employee(where: $where) {\n      employee {\n        id\n        name\n        avatar\n      }\n      store {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query StoreEmployee($where: store_employee_bool_exp) {\n    store_employee(where: $where) {\n      employee {\n        id\n        name\n        avatar\n      }\n      store {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SupplyItemsByPk($itemId: String!) {\n    supplyitems_by_pk(itemId: $itemId) {\n      itemId\n      itemName\n      itemImage\n      itemTypeName\n      mainUnit\n      reportUnit\n      reportUnitRatio\n      netRate\n      dsstorebills(limit: 1, order_by: { auditDate: desc }) {\n        ArriveMoney\n        InBusAmount\n      }\n      ingredients {\n        fooditem {\n          brand {\n            name\n          }\n          item_name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query SupplyItemsByPk($itemId: String!) {\n    supplyitems_by_pk(itemId: $itemId) {\n      itemId\n      itemName\n      itemImage\n      itemTypeName\n      mainUnit\n      reportUnit\n      reportUnitRatio\n      netRate\n      dsstorebills(limit: 1, order_by: { auditDate: desc }) {\n        ArriveMoney\n        InBusAmount\n      }\n      ingredients {\n        fooditem {\n          brand {\n            name\n          }\n          item_name\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query VerifyEmployeeFields($limit: Int, $offset: Int) {\n    verifyEmployeeFields(limit: $limit, offset: $offset) {\n      id\n      types\n      name\n      employee {\n        avatar\n        name\n        department {\n          id\n          name\n        }\n        status\n      }\n    }\n  }\n"): (typeof documents)["\n  query VerifyEmployeeFields($limit: Int, $offset: Int) {\n    verifyEmployeeFields(limit: $limit, offset: $offset) {\n      id\n      types\n      name\n      employee {\n        avatar\n        name\n        department {\n          id\n          name\n        }\n        status\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ViewMonthlySalary(\n    $limit: Int\n    $offset: Int\n    $where: view_monthly_salary_bool_exp\n    $where1: bonusdeductions_bool_exp\n    $where2: insurance_funds_bool_exp\n  ) {\n    view_monthly_salary(where: $where, limit: $limit, offset: $offset) {\n      employee_id\n      attendance_department_id\n      attendance_department {\n        name\n      }\n      employee {\n        avatar\n        name\n        status\n        job_title\n        birthday\n        id_number\n        bank_name\n        bank_account_number\n        hire_date\n        basic_salary\n        bonusdeductions(where: $where1) {\n          amount\n          department_id\n          bonusdeductiontype {\n            name\n            is_bonus\n          }\n        }\n        insurance_funds(where: $where2) {\n          amount\n          department_id\n          insurance_fund_type {\n            name\n            is_personal\n          }\n        }\n        department {\n          id\n          name\n        }\n      }\n      work_age\n      work_age_type\n      basic_salary\n      basic_salary_base\n      basic_salary_monthly\n      insurance_subsidy\n      overtime_pay\n      position_pay\n      work_age_bonus\n      bonus_deduction\n      personal_insurance_funds\n      corp_insurance_funds\n      net_salary\n      corp_salary_cost\n      gross_salary\n      salary_type\n      total_length_day\n      total_length_hour\n      attendance_department {\n        id\n        name\n      }\n      employee_department {\n        id\n        name\n      }\n    }\n    view_monthly_salary_aggregate(where: $where) {\n      aggregate {\n        count\n        sum {\n          corp_salary_cost\n          net_salary\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query ViewMonthlySalary(\n    $limit: Int\n    $offset: Int\n    $where: view_monthly_salary_bool_exp\n    $where1: bonusdeductions_bool_exp\n    $where2: insurance_funds_bool_exp\n  ) {\n    view_monthly_salary(where: $where, limit: $limit, offset: $offset) {\n      employee_id\n      attendance_department_id\n      attendance_department {\n        name\n      }\n      employee {\n        avatar\n        name\n        status\n        job_title\n        birthday\n        id_number\n        bank_name\n        bank_account_number\n        hire_date\n        basic_salary\n        bonusdeductions(where: $where1) {\n          amount\n          department_id\n          bonusdeductiontype {\n            name\n            is_bonus\n          }\n        }\n        insurance_funds(where: $where2) {\n          amount\n          department_id\n          insurance_fund_type {\n            name\n            is_personal\n          }\n        }\n        department {\n          id\n          name\n        }\n      }\n      work_age\n      work_age_type\n      basic_salary\n      basic_salary_base\n      basic_salary_monthly\n      insurance_subsidy\n      overtime_pay\n      position_pay\n      work_age_bonus\n      bonus_deduction\n      personal_insurance_funds\n      corp_insurance_funds\n      net_salary\n      corp_salary_cost\n      gross_salary\n      salary_type\n      total_length_day\n      total_length_hour\n      attendance_department {\n        id\n        name\n      }\n      employee_department {\n        id\n        name\n      }\n    }\n    view_monthly_salary_aggregate(where: $where) {\n      aggregate {\n        count\n        sum {\n          corp_salary_cost\n          net_salary\n        }\n      }\n    }\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;